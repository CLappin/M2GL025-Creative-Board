
TickTackToe.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009264  80000000  80000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000036  80009264  80009264  0000a264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     00001204  8000929c  8000929c  0000a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.4 00000004  8000a4a0  8000a4a0  0000b4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000428  8000a4a8  8000a4a8  0000b4a8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .sdata        00000014  8000a8d0  8000a8d0  0000b8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .sbss         00000004  8000a8e4  8000a8e4  0000b8e4  2**2
                  ALLOC
  7 .bss          00020124  8000a900  8000a900  0000b8e4  2**6
                  ALLOC
  8 .debug_info   00009347  00000000  00000000  0000b8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001cb2  00000000  00000000  00014c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d3a  00000000  00000000  000168dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000238  00000000  00000000  00018617  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003e4b  00000000  00000000  0001884f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000815f  00000000  00000000  0001c69a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000caef  00000000  00000000  000247f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000011  00000000  00000000  000312e8  2**0
                  CONTENTS, READONLY
 16 .debug_ranges 00000058  00000000  00000000  000312f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

80000000 <_start>:
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
80000008:	0340006f          	j	8000003c <trap_entry>

8000000c <handle_reset>:
8000000c:	00000297          	auipc	t0,0x0
80000010:	03028293          	addi	t0,t0,48 # 8000003c <trap_entry>
80000014:	30529073          	csrw	mtvec,t0
80000018:	30005073          	csrwi	mstatus,0
8000001c:	30305073          	csrwi	mideleg,0
80000020:	30205073          	csrwi	medeleg,0
80000024:	30405073          	csrwi	mie,0
80000028:	0000b197          	auipc	gp,0xb
8000002c:	0a818193          	addi	gp,gp,168 # 8000b0d0 <_gp>
80000030:	0002b117          	auipc	sp,0x2b
80000034:	8d010113          	addi	sp,sp,-1840 # 8002a900 <g_systick_increment>
80000038:	1880006f          	j	800001c0 <_init>

8000003c <trap_entry>:
8000003c:	f8010113          	addi	sp,sp,-128
80000040:	00112223          	sw	ra,4(sp)
80000044:	00212423          	sw	sp,8(sp)
80000048:	00312623          	sw	gp,12(sp)
8000004c:	00412823          	sw	tp,16(sp)
80000050:	00512a23          	sw	t0,20(sp)
80000054:	00612c23          	sw	t1,24(sp)
80000058:	00712e23          	sw	t2,28(sp)
8000005c:	02812023          	sw	s0,32(sp)
80000060:	02912223          	sw	s1,36(sp)
80000064:	02a12423          	sw	a0,40(sp)
80000068:	02b12623          	sw	a1,44(sp)
8000006c:	02c12823          	sw	a2,48(sp)
80000070:	02d12a23          	sw	a3,52(sp)
80000074:	02e12c23          	sw	a4,56(sp)
80000078:	02f12e23          	sw	a5,60(sp)
8000007c:	05012023          	sw	a6,64(sp)
80000080:	05112223          	sw	a7,68(sp)
80000084:	05212423          	sw	s2,72(sp)
80000088:	05312623          	sw	s3,76(sp)
8000008c:	05412823          	sw	s4,80(sp)
80000090:	05512a23          	sw	s5,84(sp)
80000094:	05612c23          	sw	s6,88(sp)
80000098:	05712e23          	sw	s7,92(sp)
8000009c:	07812023          	sw	s8,96(sp)
800000a0:	07912223          	sw	s9,100(sp)
800000a4:	07a12423          	sw	s10,104(sp)
800000a8:	07b12623          	sw	s11,108(sp)
800000ac:	07c12823          	sw	t3,112(sp)
800000b0:	07d12a23          	sw	t4,116(sp)
800000b4:	07e12c23          	sw	t5,120(sp)
800000b8:	07f12e23          	sw	t6,124(sp)
800000bc:	34202573          	csrr	a0,mcause
800000c0:	341025f3          	csrr	a1,mepc
800000c4:	00010613          	mv	a2,sp
800000c8:	398000ef          	jal	80000460 <handle_trap>
800000cc:	34151073          	csrw	mepc,a0
800000d0:	000022b7          	lui	t0,0x2
800000d4:	80028293          	addi	t0,t0,-2048 # 1800 <_start-0x7fffe800>
800000d8:	3002a073          	csrs	mstatus,t0
800000dc:	00412083          	lw	ra,4(sp)
800000e0:	00812103          	lw	sp,8(sp)
800000e4:	00c12183          	lw	gp,12(sp)
800000e8:	01012203          	lw	tp,16(sp)
800000ec:	01412283          	lw	t0,20(sp)
800000f0:	01812303          	lw	t1,24(sp)
800000f4:	01c12383          	lw	t2,28(sp)
800000f8:	02012403          	lw	s0,32(sp)
800000fc:	02412483          	lw	s1,36(sp)
80000100:	02812503          	lw	a0,40(sp)
80000104:	02c12583          	lw	a1,44(sp)
80000108:	03012603          	lw	a2,48(sp)
8000010c:	03412683          	lw	a3,52(sp)
80000110:	03812703          	lw	a4,56(sp)
80000114:	03c12783          	lw	a5,60(sp)
80000118:	04012803          	lw	a6,64(sp)
8000011c:	04412883          	lw	a7,68(sp)
80000120:	04812903          	lw	s2,72(sp)
80000124:	04c12983          	lw	s3,76(sp)
80000128:	05012a03          	lw	s4,80(sp)
8000012c:	05412a83          	lw	s5,84(sp)
80000130:	05812b03          	lw	s6,88(sp)
80000134:	05c12b83          	lw	s7,92(sp)
80000138:	06012c03          	lw	s8,96(sp)
8000013c:	06412c83          	lw	s9,100(sp)
80000140:	06812d03          	lw	s10,104(sp)
80000144:	06c12d83          	lw	s11,108(sp)
80000148:	07012e03          	lw	t3,112(sp)
8000014c:	07412e83          	lw	t4,116(sp)
80000150:	07812f03          	lw	t5,120(sp)
80000154:	07c12f83          	lw	t6,124(sp)
80000158:	08010113          	addi	sp,sp,128
8000015c:	30200073          	mret

80000160 <copy_section>:
extern uint32_t __data_load;
extern uint32_t __data_start;
extern uint32_t __data_end;

static void copy_section(uint32_t * p_load, uint32_t * p_vma, uint32_t * p_vma_end)
{
80000160:	fe010113          	addi	sp,sp,-32
80000164:	00812e23          	sw	s0,28(sp)
80000168:	02010413          	addi	s0,sp,32
8000016c:	fea42623          	sw	a0,-20(s0)
80000170:	feb42423          	sw	a1,-24(s0)
80000174:	fec42223          	sw	a2,-28(s0)
    while(p_vma <= p_vma_end)
80000178:	02c0006f          	j	800001a4 <copy_section+0x44>
    {
        *p_vma = *p_load;
8000017c:	fec42783          	lw	a5,-20(s0)
80000180:	0007a703          	lw	a4,0(a5)
80000184:	fe842783          	lw	a5,-24(s0)
80000188:	00e7a023          	sw	a4,0(a5)
        ++p_load;
8000018c:	fec42783          	lw	a5,-20(s0)
80000190:	00478793          	addi	a5,a5,4
80000194:	fef42623          	sw	a5,-20(s0)
        ++p_vma;
80000198:	fe842783          	lw	a5,-24(s0)
8000019c:	00478793          	addi	a5,a5,4
800001a0:	fef42423          	sw	a5,-24(s0)
    while(p_vma <= p_vma_end)
800001a4:	fe842703          	lw	a4,-24(s0)
800001a8:	fe442783          	lw	a5,-28(s0)
800001ac:	fce7f8e3          	bleu	a4,a5,8000017c <copy_section+0x1c>
    }
}
800001b0:	00000013          	nop
800001b4:	01c12403          	lw	s0,28(sp)
800001b8:	02010113          	addi	sp,sp,32
800001bc:	00008067          	ret

800001c0 <_init>:

void _init(void)
{
800001c0:	fe010113          	addi	sp,sp,-32
800001c4:	00112e23          	sw	ra,28(sp)
800001c8:	00812c23          	sw	s0,24(sp)
800001cc:	02010413          	addi	s0,sp,32
    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
800001d0:	8000b7b7          	lui	a5,0x8000b
800001d4:	8e478613          	addi	a2,a5,-1820 # 8000a8e4 <_end+0xfffdfec0>
800001d8:	8000b7b7          	lui	a5,0x8000b
800001dc:	8d078593          	addi	a1,a5,-1840 # 8000a8d0 <_end+0xfffdfeac>
800001e0:	8000b7b7          	lui	a5,0x8000b
800001e4:	8d078513          	addi	a0,a5,-1840 # 8000a8d0 <_end+0xfffdfeac>
800001e8:	f79ff0ef          	jal	80000160 <copy_section>
    copy_section(&__data_load, &__data_start, &__data_end);
800001ec:	8000b7b7          	lui	a5,0x8000b
800001f0:	8d078613          	addi	a2,a5,-1840 # 8000a8d0 <_end+0xfffdfeac>
800001f4:	8000a7b7          	lui	a5,0x8000a
800001f8:	4a878593          	addi	a1,a5,1192 # 8000a4a8 <_end+0xfffdfa84>
800001fc:	8000a7b7          	lui	a5,0x8000a
80000200:	4a878513          	addi	a0,a5,1192 # 8000a4a8 <_end+0xfffdfa84>
80000204:	f5dff0ef          	jal	80000160 <copy_section>
    
    UART_init( &g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200, (DATA_8_BITS | NO_PARITY) );
80000208:	00100693          	li	a3,1
8000020c:	02c00613          	li	a2,44
80000210:	700015b7          	lui	a1,0x70001
80000214:	8002b7b7          	lui	a5,0x8002b
80000218:	94478513          	addi	a0,a5,-1724 # 8002a944 <_end+0xffffff20>
8000021c:	645000ef          	jal	80001060 <UART_init>

    extern int main(int, char**);
    const char *argv0 = "hello";
80000220:	800097b7          	lui	a5,0x80009
80000224:	26478793          	addi	a5,a5,612 # 80009264 <_end+0xfffde840>
80000228:	fef42623          	sw	a5,-20(s0)
    char *argv[] = {(char *)argv0, NULL, NULL};
8000022c:	fec42783          	lw	a5,-20(s0)
80000230:	fef42023          	sw	a5,-32(s0)
80000234:	fe042223          	sw	zero,-28(s0)
80000238:	fe042423          	sw	zero,-24(s0)

    exit(main(1, argv));
8000023c:	fe040793          	addi	a5,s0,-32
80000240:	00078593          	mv	a1,a5
80000244:	00100513          	li	a0,1
80000248:	2a5080ef          	jal	80008cec <main>
8000024c:	00050793          	mv	a5,a0
80000250:	00078513          	mv	a0,a5
80000254:	4e9080ef          	jal	80008f3c <exit>

80000258 <__disable_irq>:
static uint64_t g_systick_increment = 0;

/*------------------------------------------------------------------------------
 * Disable all interrupts.
 */
void __disable_irq(void) {
80000258:	fe010113          	addi	sp,sp,-32
8000025c:	00812e23          	sw	s0,28(sp)
80000260:	02010413          	addi	s0,sp,32
    clear_csr(mie, MIP_MEIP);
80000264:	000017b7          	lui	a5,0x1
80000268:	80078793          	addi	a5,a5,-2048 # 800 <_start-0x7ffff800>
8000026c:	3047b7f3          	csrrc	a5,mie,a5
80000270:	fef42623          	sw	a5,-20(s0)
    clear_csr(mstatus, MSTATUS_MIE);
80000274:	300477f3          	csrrc	a5,mstatus,8
80000278:	fef42423          	sw	a5,-24(s0)
}
8000027c:	00000013          	nop
80000280:	01c12403          	lw	s0,28(sp)
80000284:	02010113          	addi	sp,sp,32
80000288:	00008067          	ret

8000028c <__enable_irq>:

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void) {
8000028c:	fe010113          	addi	sp,sp,-32
80000290:	00812e23          	sw	s0,28(sp)
80000294:	02010413          	addi	s0,sp,32
    set_csr(mie, MIP_MEIP);
80000298:	000017b7          	lui	a5,0x1
8000029c:	80078793          	addi	a5,a5,-2048 # 800 <_start-0x7ffff800>
800002a0:	3047a7f3          	csrrs	a5,mie,a5
800002a4:	fef42623          	sw	a5,-20(s0)
    set_csr(mstatus, MSTATUS_MIE);
800002a8:	300467f3          	csrrs	a5,mstatus,8
800002ac:	fef42423          	sw	a5,-24(s0)
}
800002b0:	00000013          	nop
800002b4:	01c12403          	lw	s0,28(sp)
800002b8:	02010113          	addi	sp,sp,32
800002bc:	00008067          	ret

800002c0 <SysTick_Config>:

/*------------------------------------------------------------------------------
 * Configure the machine timer to generate an interrupt.
 */
uint32_t SysTick_Config(uint32_t ticks) {
800002c0:	fd010113          	addi	sp,sp,-48
800002c4:	02112623          	sw	ra,44(sp)
800002c8:	02812423          	sw	s0,40(sp)
800002cc:	03010413          	addi	s0,sp,48
800002d0:	fca42e23          	sw	a0,-36(s0)
    
    uint32_t ret_val = ERROR;
800002d4:	00100793          	li	a5,1
800002d8:	fef42623          	sw	a5,-20(s0)
    
    g_systick_increment = ticks / RTC_PRESCALER;
800002dc:	fdc42703          	lw	a4,-36(s0)
800002e0:	06400793          	li	a5,100
800002e4:	02f757b3          	divu	a5,a4,a5
800002e8:	00078613          	mv	a2,a5
800002ec:	00000693          	li	a3,0
800002f0:	8002b7b7          	lui	a5,0x8002b
800002f4:	90c7a023          	sw	a2,-1792(a5) # 8002a900 <_end+0xfffffedc>
800002f8:	90d7a223          	sw	a3,-1788(a5)

    if (g_systick_increment > 0) {
800002fc:	8002b7b7          	lui	a5,0x8002b
80000300:	9007a603          	lw	a2,-1792(a5) # 8002a900 <_end+0xfffffedc>
80000304:	9047a683          	lw	a3,-1788(a5)
80000308:	00060793          	mv	a5,a2
8000030c:	00d7e7b3          	or	a5,a5,a3
80000310:	08078463          	beqz	a5,80000398 <SysTick_Config+0xd8>
        uint32_t mhartid = read_csr(mhartid);
80000314:	f14027f3          	csrr	a5,mhartid
80000318:	fef42423          	sw	a5,-24(s0)
8000031c:	fe842783          	lw	a5,-24(s0)
80000320:	fef42223          	sw	a5,-28(s0)
        PRCI->MTIMECMP[mhartid] = PRCI->MTIME + g_systick_increment;
80000324:	44000737          	lui	a4,0x44000
80000328:	440006b7          	lui	a3,0x44000
8000032c:	0000c7b7          	lui	a5,0xc
80000330:	00f687b3          	add	a5,a3,a5
80000334:	ff87a803          	lw	a6,-8(a5) # bff8 <_start-0x7fff4008>
80000338:	ffc7a883          	lw	a7,-4(a5)
8000033c:	8002b7b7          	lui	a5,0x8002b
80000340:	9007a503          	lw	a0,-1792(a5) # 8002a900 <_end+0xfffffedc>
80000344:	9047a583          	lw	a1,-1788(a5)
80000348:	00a80633          	add	a2,a6,a0
8000034c:	010637b3          	sltu	a5,a2,a6
80000350:	00b886b3          	add	a3,a7,a1
80000354:	00d787b3          	add	a5,a5,a3
80000358:	00078693          	mv	a3,a5
8000035c:	00060513          	mv	a0,a2
80000360:	00068593          	mv	a1,a3
80000364:	fe442683          	lw	a3,-28(s0)
80000368:	000017b7          	lui	a5,0x1
8000036c:	80078793          	addi	a5,a5,-2048 # 800 <_start-0x7ffff800>
80000370:	00f687b3          	add	a5,a3,a5
80000374:	00379793          	slli	a5,a5,0x3
80000378:	00f707b3          	add	a5,a4,a5
8000037c:	00a7a023          	sw	a0,0(a5)
80000380:	00b7a223          	sw	a1,4(a5)
        set_csr(mie, MIP_MTIP);
80000384:	08000793          	li	a5,128
80000388:	3047a7f3          	csrrs	a5,mie,a5
8000038c:	fef42023          	sw	a5,-32(s0)
        __enable_irq();
80000390:	efdff0ef          	jal	8000028c <__enable_irq>
        ret_val = SUCCESS;
80000394:	fe042623          	sw	zero,-20(s0)
    }
    
    return ret_val;
80000398:	fec42783          	lw	a5,-20(s0)
}
8000039c:	00078513          	mv	a0,a5
800003a0:	02c12083          	lw	ra,44(sp)
800003a4:	02812403          	lw	s0,40(sp)
800003a8:	03010113          	addi	sp,sp,48
800003ac:	00008067          	ret

800003b0 <handle_m_timer_interrupt>:

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt(){
800003b0:	fe010113          	addi	sp,sp,-32
800003b4:	00112e23          	sw	ra,28(sp)
800003b8:	00812c23          	sw	s0,24(sp)
800003bc:	02010413          	addi	s0,sp,32
    uint32_t mhartid = read_csr(mhartid);
800003c0:	f14027f3          	csrr	a5,mhartid
800003c4:	fef42623          	sw	a5,-20(s0)
800003c8:	fec42783          	lw	a5,-20(s0)
800003cc:	fef42423          	sw	a5,-24(s0)
    clear_csr(mie, MIP_MTIP);
800003d0:	08000793          	li	a5,128
800003d4:	3047b7f3          	csrrc	a5,mie,a5
800003d8:	fef42223          	sw	a5,-28(s0)
    PRCI->MTIMECMP[mhartid] = PRCI->MTIME + g_systick_increment;
800003dc:	44000737          	lui	a4,0x44000
800003e0:	440006b7          	lui	a3,0x44000
800003e4:	0000c7b7          	lui	a5,0xc
800003e8:	00f687b3          	add	a5,a3,a5
800003ec:	ff87a803          	lw	a6,-8(a5) # bff8 <_start-0x7fff4008>
800003f0:	ffc7a883          	lw	a7,-4(a5)
800003f4:	8002b7b7          	lui	a5,0x8002b
800003f8:	9007a503          	lw	a0,-1792(a5) # 8002a900 <_end+0xfffffedc>
800003fc:	9047a583          	lw	a1,-1788(a5)
80000400:	00a80633          	add	a2,a6,a0
80000404:	010637b3          	sltu	a5,a2,a6
80000408:	00b886b3          	add	a3,a7,a1
8000040c:	00d787b3          	add	a5,a5,a3
80000410:	00078693          	mv	a3,a5
80000414:	00060513          	mv	a0,a2
80000418:	00068593          	mv	a1,a3
8000041c:	fe842683          	lw	a3,-24(s0)
80000420:	000017b7          	lui	a5,0x1
80000424:	80078793          	addi	a5,a5,-2048 # 800 <_start-0x7ffff800>
80000428:	00f687b3          	add	a5,a3,a5
8000042c:	00379793          	slli	a5,a5,0x3
80000430:	00f707b3          	add	a5,a4,a5
80000434:	00a7a023          	sw	a0,0(a5)
80000438:	00b7a223          	sw	a1,4(a5)
    SysTick_Handler();
8000043c:	25d080ef          	jal	80008e98 <SysTick_Handler>
    set_csr(mie, MIP_MTIP);
80000440:	08000793          	li	a5,128
80000444:	3047a7f3          	csrrs	a5,mie,a5
80000448:	fef42023          	sw	a5,-32(s0)
}
8000044c:	00000013          	nop
80000450:	01c12083          	lw	ra,28(sp)
80000454:	01812403          	lw	s0,24(sp)
80000458:	02010113          	addi	sp,sp,32
8000045c:	00008067          	ret

80000460 <handle_trap>:

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
80000460:	fe010113          	addi	sp,sp,-32
80000464:	00112e23          	sw	ra,28(sp)
80000468:	00812c23          	sw	s0,24(sp)
8000046c:	02010413          	addi	s0,sp,32
80000470:	fea42623          	sw	a0,-20(s0)
80000474:	feb42423          	sw	a1,-24(s0)
    if (0) {
    // External Machine-Level Interrupt from PLIC
    } else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)) {
80000478:	fec42783          	lw	a5,-20(s0)
8000047c:	0207d263          	bgez	a5,800004a0 <handle_trap+0x40>
80000480:	fec42703          	lw	a4,-20(s0)
80000484:	800007b7          	lui	a5,0x80000
80000488:	fff7c793          	not	a5,a5
8000048c:	00f77733          	and	a4,a4,a5
80000490:	00b00793          	li	a5,11
80000494:	00f71663          	bne	a4,a5,800004a0 <handle_trap+0x40>
        handle_m_ext_interrupt();
80000498:	06c000ef          	jal	80000504 <handle_m_ext_interrupt>
8000049c:	0500006f          	j	800004ec <handle_trap+0x8c>
    } else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)) {
800004a0:	fec42783          	lw	a5,-20(s0)
800004a4:	0207d263          	bgez	a5,800004c8 <handle_trap+0x68>
800004a8:	fec42703          	lw	a4,-20(s0)
800004ac:	800007b7          	lui	a5,0x80000
800004b0:	fff7c793          	not	a5,a5
800004b4:	00f77733          	and	a4,a4,a5
800004b8:	00700793          	li	a5,7
800004bc:	00f71663          	bne	a4,a5,800004c8 <handle_trap+0x68>
        handle_m_timer_interrupt();
800004c0:	ef1ff0ef          	jal	800003b0 <handle_m_timer_interrupt>
800004c4:	0280006f          	j	800004ec <handle_trap+0x8c>
    }    
    else {
        write(1, "trap\n", 5);
800004c8:	00500613          	li	a2,5
800004cc:	800097b7          	lui	a5,0x80009
800004d0:	26c78593          	addi	a1,a5,620 # 8000926c <_end+0xfffde848>
800004d4:	00100513          	li	a0,1
800004d8:	62c000ef          	jal	80000b04 <write>
        _exit(1 + mcause);
800004dc:	fec42783          	lw	a5,-20(s0)
800004e0:	00178793          	addi	a5,a5,1
800004e4:	00078513          	mv	a0,a5
800004e8:	128000ef          	jal	80000610 <_exit>
    }
    return epc;
800004ec:	fe842783          	lw	a5,-24(s0)
}
800004f0:	00078513          	mv	a0,a5
800004f4:	01c12083          	lw	ra,28(sp)
800004f8:	01812403          	lw	s0,24(sp)
800004fc:	02010113          	addi	sp,sp,32
80000500:	00008067          	ret

80000504 <handle_m_ext_interrupt>:
 * defined with weak linking so that they can be overridden by a function with
 * same prototype in the user's application code.
 */
#include <unistd.h>

__attribute__((weak)) void handle_m_ext_interrupt() {
80000504:	ff010113          	addi	sp,sp,-16
80000508:	00112623          	sw	ra,12(sp)
8000050c:	00812423          	sw	s0,8(sp)
80000510:	01010413          	addi	s0,sp,16
    
    _exit(10);
80000514:	00a00513          	li	a0,10
80000518:	0f8000ef          	jal	80000610 <_exit>
}

__attribute__((weak)) void SysTick_Handler(void) {
8000051c:	ff010113          	addi	sp,sp,-16
80000520:	00812623          	sw	s0,12(sp)
80000524:	01010413          	addi	s0,sp,16
    ;
}
80000528:	00000013          	nop
8000052c:	00c12403          	lw	s0,12(sp)
80000530:	01010113          	addi	sp,sp,16
80000534:	00008067          	ret

80000538 <write_hex>:
volatile uint64_t tohost __attribute__((aligned(64)));
volatile uint64_t fromhost __attribute__((aligned(64)));

extern UART_instance_t g_uart;

void write_hex(int fd, uint32_t hex){
80000538:	fd010113          	addi	sp,sp,-48
8000053c:	02112623          	sw	ra,44(sp)
80000540:	02812423          	sw	s0,40(sp)
80000544:	03010413          	addi	s0,sp,48
80000548:	fca42e23          	sw	a0,-36(s0)
8000054c:	fcb42c23          	sw	a1,-40(s0)
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write( fd , "0x", 2 );
80000550:	00200613          	li	a2,2
80000554:	800097b7          	lui	a5,0x80009
80000558:	27478593          	addi	a1,a5,628 # 80009274 <_end+0xfffde850>
8000055c:	fdc42503          	lw	a0,-36(s0)
80000560:	5a4000ef          	jal	80000b04 <write>
  for (ii = 8 ; ii > 0; ii--){
80000564:	00800793          	li	a5,8
80000568:	fef407a3          	sb	a5,-17(s0)
8000056c:	0880006f          	j	800005f4 <write_hex+0xbc>
    jj = ii-1;
80000570:	fef44783          	lbu	a5,-17(s0)
80000574:	fff78793          	addi	a5,a5,-1
80000578:	fef40723          	sb	a5,-18(s0)
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
8000057c:	fee44783          	lbu	a5,-18(s0)
80000580:	00279793          	slli	a5,a5,0x2
80000584:	00f00713          	li	a4,15
80000588:	00f717b3          	sll	a5,a4,a5
8000058c:	00078713          	mv	a4,a5
80000590:	fd842783          	lw	a5,-40(s0)
80000594:	00f77733          	and	a4,a4,a5
80000598:	fee44783          	lbu	a5,-18(s0)
8000059c:	00279793          	slli	a5,a5,0x2
800005a0:	00f757b3          	srl	a5,a4,a5
800005a4:	fef406a3          	sb	a5,-19(s0)
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
800005a8:	fed44703          	lbu	a4,-19(s0)
800005ac:	00900793          	li	a5,9
800005b0:	00e7ea63          	bltu	a5,a4,800005c4 <write_hex+0x8c>
800005b4:	fed44783          	lbu	a5,-19(s0)
800005b8:	03078793          	addi	a5,a5,48
800005bc:	0ff7f793          	andi	a5,a5,255
800005c0:	0100006f          	j	800005d0 <write_hex+0x98>
800005c4:	fed44783          	lbu	a5,-19(s0)
800005c8:	03778793          	addi	a5,a5,55
800005cc:	0ff7f793          	andi	a5,a5,255
800005d0:	fef40623          	sb	a5,-20(s0)
    write( fd, &towrite, 1);
800005d4:	fec40793          	addi	a5,s0,-20
800005d8:	00100613          	li	a2,1
800005dc:	00078593          	mv	a1,a5
800005e0:	fdc42503          	lw	a0,-36(s0)
800005e4:	520000ef          	jal	80000b04 <write>
  for (ii = 8 ; ii > 0; ii--){
800005e8:	fef44783          	lbu	a5,-17(s0)
800005ec:	fff78793          	addi	a5,a5,-1
800005f0:	fef407a3          	sb	a5,-17(s0)
800005f4:	fef44783          	lbu	a5,-17(s0)
800005f8:	f6079ce3          	bnez	a5,80000570 <write_hex+0x38>
  }

}
800005fc:	00000013          	nop
80000600:	02c12083          	lw	ra,44(sp)
80000604:	02812403          	lw	s0,40(sp)
80000608:	03010113          	addi	sp,sp,48
8000060c:	00008067          	ret

80000610 <_exit>:

               
void _exit(int code)
{
80000610:	fd010113          	addi	sp,sp,-48
80000614:	02112623          	sw	ra,44(sp)
80000618:	02812423          	sw	s0,40(sp)
8000061c:	03010413          	addi	s0,sp,48
80000620:	fca42e23          	sw	a0,-36(s0)
  const char * message = "\nProgam has exited with code:";
80000624:	800097b7          	lui	a5,0x80009
80000628:	27878793          	addi	a5,a5,632 # 80009278 <_end+0xfffde854>
8000062c:	fef42623          	sw	a5,-20(s0)
  
  write(STDERR_FILENO, message, strlen(message));
80000630:	fec42503          	lw	a0,-20(s0)
80000634:	219080ef          	jal	8000904c <strlen>
80000638:	00050793          	mv	a5,a0
8000063c:	00078613          	mv	a2,a5
80000640:	fec42583          	lw	a1,-20(s0)
80000644:	00200513          	li	a0,2
80000648:	4bc000ef          	jal	80000b04 <write>
  write_hex(STDERR_FILENO, code);
8000064c:	fdc42783          	lw	a5,-36(s0)
80000650:	00078593          	mv	a1,a5
80000654:	00200513          	li	a0,2
80000658:	ee1ff0ef          	jal	80000538 <write_hex>

  while (1);
8000065c:	0000006f          	j	8000065c <_exit+0x4c>

80000660 <sbrk>:
    
}

void *sbrk(ptrdiff_t incr)
{
80000660:	fe010113          	addi	sp,sp,-32
80000664:	00812e23          	sw	s0,28(sp)
80000668:	02010413          	addi	s0,sp,32
8000066c:	fea42623          	sw	a0,-20(s0)
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
80000670:	8000b7b7          	lui	a5,0x8000b
80000674:	8d87a703          	lw	a4,-1832(a5) # 8000a8d8 <_end+0xfffdfeb4>
80000678:	fec42783          	lw	a5,-20(s0)
8000067c:	00f70733          	add	a4,a4,a5
80000680:	8002b7b7          	lui	a5,0x8002b
80000684:	a2478793          	addi	a5,a5,-1500 # 8002aa24 <_end+0x0>
80000688:	02f76063          	bltu	a4,a5,800006a8 <sbrk+0x48>
8000068c:	8000b7b7          	lui	a5,0x8000b
80000690:	8d87a703          	lw	a4,-1832(a5) # 8000a8d8 <_end+0xfffdfeb4>
80000694:	fec42783          	lw	a5,-20(s0)
80000698:	00f70733          	add	a4,a4,a5
8000069c:	8002b7b7          	lui	a5,0x8002b
800006a0:	a2478793          	addi	a5,a5,-1500 # 8002aa24 <_end+0x0>
800006a4:	00e7f663          	bleu	a4,a5,800006b0 <sbrk+0x50>
    return NULL - 1;
800006a8:	fff00793          	li	a5,-1
800006ac:	0300006f          	j	800006dc <sbrk+0x7c>

  curbrk += incr;
800006b0:	8000b7b7          	lui	a5,0x8000b
800006b4:	8d87a703          	lw	a4,-1832(a5) # 8000a8d8 <_end+0xfffdfeb4>
800006b8:	fec42783          	lw	a5,-20(s0)
800006bc:	00f70733          	add	a4,a4,a5
800006c0:	8000b7b7          	lui	a5,0x8000b
800006c4:	8ce7ac23          	sw	a4,-1832(a5) # 8000a8d8 <_end+0xfffdfeb4>
  return curbrk - incr;
800006c8:	8000b7b7          	lui	a5,0x8000b
800006cc:	8d87a703          	lw	a4,-1832(a5) # 8000a8d8 <_end+0xfffdfeb4>
800006d0:	fec42783          	lw	a5,-20(s0)
800006d4:	40f007b3          	neg	a5,a5
800006d8:	00f707b3          	add	a5,a4,a5
}
800006dc:	00078513          	mv	a0,a5
800006e0:	01c12403          	lw	s0,28(sp)
800006e4:	02010113          	addi	sp,sp,32
800006e8:	00008067          	ret

800006ec <stub>:

static int stub(int err)
{
800006ec:	fe010113          	addi	sp,sp,-32
800006f0:	00812e23          	sw	s0,28(sp)
800006f4:	02010413          	addi	s0,sp,32
800006f8:	fea42623          	sw	a0,-20(s0)
  errno = err;
800006fc:	8002b7b7          	lui	a5,0x8002b
80000700:	fec42703          	lw	a4,-20(s0)
80000704:	94e7a023          	sw	a4,-1728(a5) # 8002a940 <_end+0xffffff1c>
  return -1;
80000708:	fff00793          	li	a5,-1
}
8000070c:	00078513          	mv	a0,a5
80000710:	01c12403          	lw	s0,28(sp)
80000714:	02010113          	addi	sp,sp,32
80000718:	00008067          	ret

8000071c <open>:

int open(const char* name, int flags, int mode)
{
8000071c:	fe010113          	addi	sp,sp,-32
80000720:	00112e23          	sw	ra,28(sp)
80000724:	00812c23          	sw	s0,24(sp)
80000728:	02010413          	addi	s0,sp,32
8000072c:	fea42623          	sw	a0,-20(s0)
80000730:	feb42423          	sw	a1,-24(s0)
80000734:	fec42223          	sw	a2,-28(s0)
  return stub(ENOENT);
80000738:	00200513          	li	a0,2
8000073c:	fb1ff0ef          	jal	800006ec <stub>
80000740:	00050793          	mv	a5,a0
}
80000744:	00078513          	mv	a0,a5
80000748:	01c12083          	lw	ra,28(sp)
8000074c:	01812403          	lw	s0,24(sp)
80000750:	02010113          	addi	sp,sp,32
80000754:	00008067          	ret

80000758 <openat>:

int openat(int dirfd, const char* name, int flags, int mode)
{
80000758:	fe010113          	addi	sp,sp,-32
8000075c:	00112e23          	sw	ra,28(sp)
80000760:	00812c23          	sw	s0,24(sp)
80000764:	02010413          	addi	s0,sp,32
80000768:	fea42623          	sw	a0,-20(s0)
8000076c:	feb42423          	sw	a1,-24(s0)
80000770:	fec42223          	sw	a2,-28(s0)
80000774:	fed42023          	sw	a3,-32(s0)
  return stub(ENOENT);
80000778:	00200513          	li	a0,2
8000077c:	f71ff0ef          	jal	800006ec <stub>
80000780:	00050793          	mv	a5,a0
}
80000784:	00078513          	mv	a0,a5
80000788:	01c12083          	lw	ra,28(sp)
8000078c:	01812403          	lw	s0,24(sp)
80000790:	02010113          	addi	sp,sp,32
80000794:	00008067          	ret

80000798 <close>:

int close(int fd)
{
80000798:	fe010113          	addi	sp,sp,-32
8000079c:	00112e23          	sw	ra,28(sp)
800007a0:	00812c23          	sw	s0,24(sp)
800007a4:	02010413          	addi	s0,sp,32
800007a8:	fea42623          	sw	a0,-20(s0)
  return stub(EBADF);
800007ac:	00900513          	li	a0,9
800007b0:	f3dff0ef          	jal	800006ec <stub>
800007b4:	00050793          	mv	a5,a0
}
800007b8:	00078513          	mv	a0,a5
800007bc:	01c12083          	lw	ra,28(sp)
800007c0:	01812403          	lw	s0,24(sp)
800007c4:	02010113          	addi	sp,sp,32
800007c8:	00008067          	ret

800007cc <execve>:

int execve(const char* name, char* const argv[], char* const env[])
{
800007cc:	fe010113          	addi	sp,sp,-32
800007d0:	00112e23          	sw	ra,28(sp)
800007d4:	00812c23          	sw	s0,24(sp)
800007d8:	02010413          	addi	s0,sp,32
800007dc:	fea42623          	sw	a0,-20(s0)
800007e0:	feb42423          	sw	a1,-24(s0)
800007e4:	fec42223          	sw	a2,-28(s0)
  return stub(ENOMEM);
800007e8:	00c00513          	li	a0,12
800007ec:	f01ff0ef          	jal	800006ec <stub>
800007f0:	00050793          	mv	a5,a0
}
800007f4:	00078513          	mv	a0,a5
800007f8:	01c12083          	lw	ra,28(sp)
800007fc:	01812403          	lw	s0,24(sp)
80000800:	02010113          	addi	sp,sp,32
80000804:	00008067          	ret

80000808 <fork>:

int fork()
{
80000808:	ff010113          	addi	sp,sp,-16
8000080c:	00112623          	sw	ra,12(sp)
80000810:	00812423          	sw	s0,8(sp)
80000814:	01010413          	addi	s0,sp,16
  return stub(EAGAIN);
80000818:	00b00513          	li	a0,11
8000081c:	ed1ff0ef          	jal	800006ec <stub>
80000820:	00050793          	mv	a5,a0
}
80000824:	00078513          	mv	a0,a5
80000828:	00c12083          	lw	ra,12(sp)
8000082c:	00812403          	lw	s0,8(sp)
80000830:	01010113          	addi	sp,sp,16
80000834:	00008067          	ret

80000838 <fstat>:

int fstat(int fd, struct stat *st)
{
80000838:	fe010113          	addi	sp,sp,-32
8000083c:	00112e23          	sw	ra,28(sp)
80000840:	00812c23          	sw	s0,24(sp)
80000844:	02010413          	addi	s0,sp,32
80000848:	fea42623          	sw	a0,-20(s0)
8000084c:	feb42423          	sw	a1,-24(s0)
  if (isatty(fd)) {
80000850:	fec42503          	lw	a0,-20(s0)
80000854:	060000ef          	jal	800008b4 <isatty>
80000858:	00050793          	mv	a5,a0
8000085c:	00078c63          	beqz	a5,80000874 <fstat+0x3c>
    st->st_mode = S_IFCHR;
80000860:	fe842783          	lw	a5,-24(s0)
80000864:	00002737          	lui	a4,0x2
80000868:	00e7a823          	sw	a4,16(a5)
    return 0;
8000086c:	00000793          	li	a5,0
80000870:	0100006f          	j	80000880 <fstat+0x48>
  }

  return stub(EBADF);
80000874:	00900513          	li	a0,9
80000878:	e75ff0ef          	jal	800006ec <stub>
8000087c:	00050793          	mv	a5,a0
}
80000880:	00078513          	mv	a0,a5
80000884:	01c12083          	lw	ra,28(sp)
80000888:	01812403          	lw	s0,24(sp)
8000088c:	02010113          	addi	sp,sp,32
80000890:	00008067          	ret

80000894 <getpid>:

int getpid()
{
80000894:	ff010113          	addi	sp,sp,-16
80000898:	00812623          	sw	s0,12(sp)
8000089c:	01010413          	addi	s0,sp,16
  return 1;
800008a0:	00100793          	li	a5,1
}
800008a4:	00078513          	mv	a0,a5
800008a8:	00c12403          	lw	s0,12(sp)
800008ac:	01010113          	addi	sp,sp,16
800008b0:	00008067          	ret

800008b4 <isatty>:

int isatty(int fd)
{
800008b4:	fe010113          	addi	sp,sp,-32
800008b8:	00812e23          	sw	s0,28(sp)
800008bc:	02010413          	addi	s0,sp,32
800008c0:	fea42623          	sw	a0,-20(s0)
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
800008c4:	fec42703          	lw	a4,-20(s0)
800008c8:	00100793          	li	a5,1
800008cc:	00f70863          	beq	a4,a5,800008dc <isatty+0x28>
800008d0:	fec42703          	lw	a4,-20(s0)
800008d4:	00200793          	li	a5,2
800008d8:	00f71663          	bne	a4,a5,800008e4 <isatty+0x30>
    return 1;
800008dc:	00100793          	li	a5,1
800008e0:	0140006f          	j	800008f4 <isatty+0x40>

  errno = EBADF;
800008e4:	8002b7b7          	lui	a5,0x8002b
800008e8:	00900713          	li	a4,9
800008ec:	94e7a023          	sw	a4,-1728(a5) # 8002a940 <_end+0xffffff1c>
  return 0;
800008f0:	00000793          	li	a5,0
}
800008f4:	00078513          	mv	a0,a5
800008f8:	01c12403          	lw	s0,28(sp)
800008fc:	02010113          	addi	sp,sp,32
80000900:	00008067          	ret

80000904 <kill>:

int kill(int pid, int sig)
{
80000904:	fe010113          	addi	sp,sp,-32
80000908:	00112e23          	sw	ra,28(sp)
8000090c:	00812c23          	sw	s0,24(sp)
80000910:	02010413          	addi	s0,sp,32
80000914:	fea42623          	sw	a0,-20(s0)
80000918:	feb42423          	sw	a1,-24(s0)
  return stub(EINVAL);
8000091c:	01600513          	li	a0,22
80000920:	dcdff0ef          	jal	800006ec <stub>
80000924:	00050793          	mv	a5,a0
}
80000928:	00078513          	mv	a0,a5
8000092c:	01c12083          	lw	ra,28(sp)
80000930:	01812403          	lw	s0,24(sp)
80000934:	02010113          	addi	sp,sp,32
80000938:	00008067          	ret

8000093c <link>:

int link(const char *old_name, const char *new_name)
{
8000093c:	fe010113          	addi	sp,sp,-32
80000940:	00112e23          	sw	ra,28(sp)
80000944:	00812c23          	sw	s0,24(sp)
80000948:	02010413          	addi	s0,sp,32
8000094c:	fea42623          	sw	a0,-20(s0)
80000950:	feb42423          	sw	a1,-24(s0)
  return stub(EMLINK);
80000954:	01f00513          	li	a0,31
80000958:	d95ff0ef          	jal	800006ec <stub>
8000095c:	00050793          	mv	a5,a0
}
80000960:	00078513          	mv	a0,a5
80000964:	01c12083          	lw	ra,28(sp)
80000968:	01812403          	lw	s0,24(sp)
8000096c:	02010113          	addi	sp,sp,32
80000970:	00008067          	ret

80000974 <lseek>:

off_t lseek(int fd, off_t ptr, int dir)
{
80000974:	fe010113          	addi	sp,sp,-32
80000978:	00112e23          	sw	ra,28(sp)
8000097c:	00812c23          	sw	s0,24(sp)
80000980:	02010413          	addi	s0,sp,32
80000984:	fea42623          	sw	a0,-20(s0)
80000988:	feb42423          	sw	a1,-24(s0)
8000098c:	fec42223          	sw	a2,-28(s0)
  if (isatty(fd))
80000990:	fec42503          	lw	a0,-20(s0)
80000994:	f21ff0ef          	jal	800008b4 <isatty>
80000998:	00050793          	mv	a5,a0
8000099c:	00078663          	beqz	a5,800009a8 <lseek+0x34>
    return 0;
800009a0:	00000793          	li	a5,0
800009a4:	0100006f          	j	800009b4 <lseek+0x40>

  return stub(EBADF);
800009a8:	00900513          	li	a0,9
800009ac:	d41ff0ef          	jal	800006ec <stub>
800009b0:	00050793          	mv	a5,a0
}
800009b4:	00078513          	mv	a0,a5
800009b8:	01c12083          	lw	ra,28(sp)
800009bc:	01812403          	lw	s0,24(sp)
800009c0:	02010113          	addi	sp,sp,32
800009c4:	00008067          	ret

800009c8 <read>:

ssize_t read(int fd, void* ptr, size_t len)
{
800009c8:	fe010113          	addi	sp,sp,-32
800009cc:	00112e23          	sw	ra,28(sp)
800009d0:	00812c23          	sw	s0,24(sp)
800009d4:	02010413          	addi	s0,sp,32
800009d8:	fea42623          	sw	a0,-20(s0)
800009dc:	feb42423          	sw	a1,-24(s0)
800009e0:	fec42223          	sw	a2,-28(s0)
  if (isatty(fd))
800009e4:	fec42503          	lw	a0,-20(s0)
800009e8:	ecdff0ef          	jal	800008b4 <isatty>
800009ec:	00050793          	mv	a5,a0
800009f0:	02078063          	beqz	a5,80000a10 <read+0x48>
    return UART_get_rx(&g_uart,
800009f4:	fe442603          	lw	a2,-28(s0)
800009f8:	fe842583          	lw	a1,-24(s0)
800009fc:	8002b7b7          	lui	a5,0x8002b
80000a00:	94478513          	addi	a0,a5,-1724 # 8002a944 <_end+0xffffff20>
80000a04:	109000ef          	jal	8000130c <UART_get_rx>
80000a08:	00050793          	mv	a5,a0
80000a0c:	0100006f          	j	80000a1c <read+0x54>
                       (uint8_t*) ptr,
                       len);

  return stub(EBADF);
80000a10:	00900513          	li	a0,9
80000a14:	cd9ff0ef          	jal	800006ec <stub>
80000a18:	00050793          	mv	a5,a0
}
80000a1c:	00078513          	mv	a0,a5
80000a20:	01c12083          	lw	ra,28(sp)
80000a24:	01812403          	lw	s0,24(sp)
80000a28:	02010113          	addi	sp,sp,32
80000a2c:	00008067          	ret

80000a30 <stat>:

int stat(const char* file, struct stat* st)
{
80000a30:	fe010113          	addi	sp,sp,-32
80000a34:	00112e23          	sw	ra,28(sp)
80000a38:	00812c23          	sw	s0,24(sp)
80000a3c:	02010413          	addi	s0,sp,32
80000a40:	fea42623          	sw	a0,-20(s0)
80000a44:	feb42423          	sw	a1,-24(s0)
  return stub(EACCES);
80000a48:	00d00513          	li	a0,13
80000a4c:	ca1ff0ef          	jal	800006ec <stub>
80000a50:	00050793          	mv	a5,a0
}
80000a54:	00078513          	mv	a0,a5
80000a58:	01c12083          	lw	ra,28(sp)
80000a5c:	01812403          	lw	s0,24(sp)
80000a60:	02010113          	addi	sp,sp,32
80000a64:	00008067          	ret

80000a68 <times>:

clock_t times(struct tms* buf)
{
80000a68:	fe010113          	addi	sp,sp,-32
80000a6c:	00112e23          	sw	ra,28(sp)
80000a70:	00812c23          	sw	s0,24(sp)
80000a74:	02010413          	addi	s0,sp,32
80000a78:	fea42623          	sw	a0,-20(s0)
  return stub(EACCES);
80000a7c:	00d00513          	li	a0,13
80000a80:	c6dff0ef          	jal	800006ec <stub>
80000a84:	00050793          	mv	a5,a0
}
80000a88:	00078513          	mv	a0,a5
80000a8c:	01c12083          	lw	ra,28(sp)
80000a90:	01812403          	lw	s0,24(sp)
80000a94:	02010113          	addi	sp,sp,32
80000a98:	00008067          	ret

80000a9c <unlink>:

int unlink(const char* name)
{
80000a9c:	fe010113          	addi	sp,sp,-32
80000aa0:	00112e23          	sw	ra,28(sp)
80000aa4:	00812c23          	sw	s0,24(sp)
80000aa8:	02010413          	addi	s0,sp,32
80000aac:	fea42623          	sw	a0,-20(s0)
  return stub(ENOENT);
80000ab0:	00200513          	li	a0,2
80000ab4:	c39ff0ef          	jal	800006ec <stub>
80000ab8:	00050793          	mv	a5,a0
}
80000abc:	00078513          	mv	a0,a5
80000ac0:	01c12083          	lw	ra,28(sp)
80000ac4:	01812403          	lw	s0,24(sp)
80000ac8:	02010113          	addi	sp,sp,32
80000acc:	00008067          	ret

80000ad0 <wait>:

int wait(int* status)
{
80000ad0:	fe010113          	addi	sp,sp,-32
80000ad4:	00112e23          	sw	ra,28(sp)
80000ad8:	00812c23          	sw	s0,24(sp)
80000adc:	02010413          	addi	s0,sp,32
80000ae0:	fea42623          	sw	a0,-20(s0)
  return stub(ECHILD);
80000ae4:	00a00513          	li	a0,10
80000ae8:	c05ff0ef          	jal	800006ec <stub>
80000aec:	00050793          	mv	a5,a0
}
80000af0:	00078513          	mv	a0,a5
80000af4:	01c12083          	lw	ra,28(sp)
80000af8:	01812403          	lw	s0,24(sp)
80000afc:	02010113          	addi	sp,sp,32
80000b00:	00008067          	ret

80000b04 <write>:

ssize_t write(int fd, const void* ptr, size_t len)
{
80000b04:	fd010113          	addi	sp,sp,-48
80000b08:	02112623          	sw	ra,44(sp)
80000b0c:	02812423          	sw	s0,40(sp)
80000b10:	03010413          	addi	s0,sp,48
80000b14:	fca42e23          	sw	a0,-36(s0)
80000b18:	fcb42c23          	sw	a1,-40(s0)
80000b1c:	fcc42a23          	sw	a2,-44(s0)

  const uint8_t * current = (const char*) ptr;
80000b20:	fd842783          	lw	a5,-40(s0)
80000b24:	fef42423          	sw	a5,-24(s0)
  size_t jj;
  if (isatty(fd)) {
80000b28:	fdc42503          	lw	a0,-36(s0)
80000b2c:	d89ff0ef          	jal	800008b4 <isatty>
80000b30:	00050793          	mv	a5,a0
80000b34:	06078e63          	beqz	a5,80000bb0 <write+0xac>
    
    for (jj = 0; jj < len; jj++){
80000b38:	fe042623          	sw	zero,-20(s0)
80000b3c:	0600006f          	j	80000b9c <write+0x98>
      
      UART_send(&g_uart, current + jj, 1);
80000b40:	fe842703          	lw	a4,-24(s0)
80000b44:	fec42783          	lw	a5,-20(s0)
80000b48:	00f707b3          	add	a5,a4,a5
80000b4c:	00100613          	li	a2,1
80000b50:	00078593          	mv	a1,a5
80000b54:	8002b7b7          	lui	a5,0x8002b
80000b58:	94478513          	addi	a0,a5,-1724 # 8002a944 <_end+0xffffff20>
80000b5c:	620000ef          	jal	8000117c <UART_send>
      if (current[jj] == '\n'){
80000b60:	fe842703          	lw	a4,-24(s0)
80000b64:	fec42783          	lw	a5,-20(s0)
80000b68:	00f707b3          	add	a5,a4,a5
80000b6c:	0007c703          	lbu	a4,0(a5)
80000b70:	00a00793          	li	a5,10
80000b74:	00f71e63          	bne	a4,a5,80000b90 <write+0x8c>
        UART_send(&g_uart, "\r", 1);
80000b78:	00100613          	li	a2,1
80000b7c:	800097b7          	lui	a5,0x80009
80000b80:	29878593          	addi	a1,a5,664 # 80009298 <_end+0xfffde874>
80000b84:	8002b7b7          	lui	a5,0x8002b
80000b88:	94478513          	addi	a0,a5,-1724 # 8002a944 <_end+0xffffff20>
80000b8c:	5f0000ef          	jal	8000117c <UART_send>
    for (jj = 0; jj < len; jj++){
80000b90:	fec42783          	lw	a5,-20(s0)
80000b94:	00178793          	addi	a5,a5,1
80000b98:	fef42623          	sw	a5,-20(s0)
80000b9c:	fec42703          	lw	a4,-20(s0)
80000ba0:	fd442783          	lw	a5,-44(s0)
80000ba4:	f8f76ee3          	bltu	a4,a5,80000b40 <write+0x3c>
      }
    }
    return len;
80000ba8:	fd442783          	lw	a5,-44(s0)
80000bac:	0100006f          	j	80000bbc <write+0xb8>
  } 
  
  return stub(EBADF);
80000bb0:	00900513          	li	a0,9
80000bb4:	b39ff0ef          	jal	800006ec <stub>
80000bb8:	00050793          	mv	a5,a0
}
80000bbc:	00078513          	mv	a0,a5
80000bc0:	02c12083          	lw	ra,44(sp)
80000bc4:	02812403          	lw	s0,40(sp)
80000bc8:	03010113          	addi	sp,sp,48
80000bcc:	00008067          	ret

80000bd0 <HAL_enable_interrupts>:
#include "riscv_hal.h"

/*------------------------------------------------------------------------------
 * 
 */
void HAL_enable_interrupts(void) {
80000bd0:	ff010113          	addi	sp,sp,-16
80000bd4:	00112623          	sw	ra,12(sp)
80000bd8:	00812423          	sw	s0,8(sp)
80000bdc:	01010413          	addi	s0,sp,16
    __enable_irq();
80000be0:	eacff0ef          	jal	8000028c <__enable_irq>
}
80000be4:	00000013          	nop
80000be8:	00c12083          	lw	ra,12(sp)
80000bec:	00812403          	lw	s0,8(sp)
80000bf0:	01010113          	addi	sp,sp,16
80000bf4:	00008067          	ret

80000bf8 <HAL_disable_interrupts>:

/*------------------------------------------------------------------------------
 * 
 */
psr_t HAL_disable_interrupts(void) {
80000bf8:	fe010113          	addi	sp,sp,-32
80000bfc:	00112e23          	sw	ra,28(sp)
80000c00:	00812c23          	sw	s0,24(sp)
80000c04:	02010413          	addi	s0,sp,32
    psr_t psr;
    psr = read_csr(mstatus);
80000c08:	300027f3          	csrr	a5,mstatus
80000c0c:	fef42623          	sw	a5,-20(s0)
80000c10:	fec42783          	lw	a5,-20(s0)
80000c14:	fef42423          	sw	a5,-24(s0)
    __disable_irq();
80000c18:	e40ff0ef          	jal	80000258 <__disable_irq>
    return(psr);
80000c1c:	fe842783          	lw	a5,-24(s0)
}
80000c20:	00078513          	mv	a0,a5
80000c24:	01c12083          	lw	ra,28(sp)
80000c28:	01812403          	lw	s0,24(sp)
80000c2c:	02010113          	addi	sp,sp,32
80000c30:	00008067          	ret

80000c34 <HAL_restore_interrupts>:

/*------------------------------------------------------------------------------
 * 
 */
void HAL_restore_interrupts(psr_t saved_psr) {
80000c34:	fe010113          	addi	sp,sp,-32
80000c38:	00812e23          	sw	s0,28(sp)
80000c3c:	02010413          	addi	s0,sp,32
80000c40:	fea42623          	sw	a0,-20(s0)
    write_csr(mstatus, saved_psr);
80000c44:	fec42783          	lw	a5,-20(s0)
80000c48:	30079073          	csrw	mstatus,a5
}
80000c4c:	00000013          	nop
80000c50:	01c12403          	lw	s0,28(sp)
80000c54:	02010113          	addi	sp,sp,32
80000c58:	00008067          	ret

80000c5c <HW_set_32bit_reg>:
void
HW_set_32bit_reg
(
	addr_t reg_addr,
	uint32_t value
 ) {
80000c5c:	fd010113          	addi	sp,sp,-48
80000c60:	02812623          	sw	s0,44(sp)
80000c64:	03010413          	addi	s0,sp,48
80000c68:	fca42e23          	sw	a0,-36(s0)
80000c6c:	fcb42c23          	sw	a1,-40(s0)

  volatile uint32_t * foo = (uint32_t * ) reg_addr;
80000c70:	fdc42783          	lw	a5,-36(s0)
80000c74:	fef42623          	sw	a5,-20(s0)
  *foo = value;
80000c78:	fec42783          	lw	a5,-20(s0)
80000c7c:	fd842703          	lw	a4,-40(s0)
80000c80:	00e7a023          	sw	a4,0(a5)

}
80000c84:	00000013          	nop
80000c88:	02c12403          	lw	s0,44(sp)
80000c8c:	03010113          	addi	sp,sp,48
80000c90:	00008067          	ret

80000c94 <HW_get_32bit_reg>:
 */
uint32_t
HW_get_32bit_reg
(
	addr_t reg_addr
 ) {
80000c94:	fd010113          	addi	sp,sp,-48
80000c98:	02812623          	sw	s0,44(sp)
80000c9c:	03010413          	addi	s0,sp,48
80000ca0:	fca42e23          	sw	a0,-36(s0)

  volatile uint32_t * foo = (uint32_t *) reg_addr;
80000ca4:	fdc42783          	lw	a5,-36(s0)
80000ca8:	fef42623          	sw	a5,-20(s0)
  return *foo;
80000cac:	fec42783          	lw	a5,-20(s0)
80000cb0:	0007a783          	lw	a5,0(a5)

}
80000cb4:	00078513          	mv	a0,a5
80000cb8:	02c12403          	lw	s0,44(sp)
80000cbc:	03010113          	addi	sp,sp,48
80000cc0:	00008067          	ret

80000cc4 <HW_set_32bit_reg_field>:
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint32_t mask,
    uint32_t value
 ) {
80000cc4:	fd010113          	addi	sp,sp,-48
80000cc8:	02812623          	sw	s0,44(sp)
80000ccc:	03010413          	addi	s0,sp,48
80000cd0:	fca42e23          	sw	a0,-36(s0)
80000cd4:	fcb42c23          	sw	a1,-40(s0)
80000cd8:	fcc42a23          	sw	a2,-44(s0)
80000cdc:	fcd42823          	sw	a3,-48(s0)

  volatile uint32_t * foo = (uint32_t *) reg_addr;
80000ce0:	fdc42783          	lw	a5,-36(s0)
80000ce4:	fef42623          	sw	a5,-20(s0)
  uint32_t old_value = *foo;
80000ce8:	fec42783          	lw	a5,-20(s0)
80000cec:	0007a783          	lw	a5,0(a5)
80000cf0:	fef42423          	sw	a5,-24(s0)
  uint32_t new_value = (value << shift);
80000cf4:	fd042703          	lw	a4,-48(s0)
80000cf8:	fd842783          	lw	a5,-40(s0)
80000cfc:	00f717b3          	sll	a5,a4,a5
80000d00:	fef42223          	sw	a5,-28(s0)
  *foo = (new_value & mask) | (old_value & ~mask);
80000d04:	fe442703          	lw	a4,-28(s0)
80000d08:	fd442783          	lw	a5,-44(s0)
80000d0c:	00f77733          	and	a4,a4,a5
80000d10:	fd442783          	lw	a5,-44(s0)
80000d14:	fff7c693          	not	a3,a5
80000d18:	fe842783          	lw	a5,-24(s0)
80000d1c:	00f6f7b3          	and	a5,a3,a5
80000d20:	00f76733          	or	a4,a4,a5
80000d24:	fec42783          	lw	a5,-20(s0)
80000d28:	00e7a023          	sw	a4,0(a5)
  
}
80000d2c:	00000013          	nop
80000d30:	02c12403          	lw	s0,44(sp)
80000d34:	03010113          	addi	sp,sp,48
80000d38:	00008067          	ret

80000d3c <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint32_t mask
 ){
80000d3c:	fd010113          	addi	sp,sp,-48
80000d40:	02812623          	sw	s0,44(sp)
80000d44:	03010413          	addi	s0,sp,48
80000d48:	fca42e23          	sw	a0,-36(s0)
80000d4c:	fcb42c23          	sw	a1,-40(s0)
80000d50:	fcc42a23          	sw	a2,-44(s0)
  volatile uint32_t * foo = (uint32_t * ) reg_addr;
80000d54:	fdc42783          	lw	a5,-36(s0)
80000d58:	fef42623          	sw	a5,-20(s0)
  uint32_t value = ((*foo) & mask) >> shift;
80000d5c:	fec42783          	lw	a5,-20(s0)
80000d60:	0007a703          	lw	a4,0(a5)
80000d64:	fd442783          	lw	a5,-44(s0)
80000d68:	00f77733          	and	a4,a4,a5
80000d6c:	fd842783          	lw	a5,-40(s0)
80000d70:	00f757b3          	srl	a5,a4,a5
80000d74:	fef42423          	sw	a5,-24(s0)
  return (value);
80000d78:	fe842783          	lw	a5,-24(s0)
}
80000d7c:	00078513          	mv	a0,a5
80000d80:	02c12403          	lw	s0,44(sp)
80000d84:	03010113          	addi	sp,sp,48
80000d88:	00008067          	ret

80000d8c <HW_set_16bit_reg>:
void
HW_set_16bit_reg
(
	addr_t reg_addr,
	uint_fast16_t value
 ) {
80000d8c:	fd010113          	addi	sp,sp,-48
80000d90:	02812623          	sw	s0,44(sp)
80000d94:	03010413          	addi	s0,sp,48
80000d98:	fca42e23          	sw	a0,-36(s0)
80000d9c:	fcb42c23          	sw	a1,-40(s0)
  volatile uint16_t * foo = (uint16_t * ) reg_addr;
80000da0:	fdc42783          	lw	a5,-36(s0)
80000da4:	fef42623          	sw	a5,-20(s0)
  *foo = value;
80000da8:	fd842783          	lw	a5,-40(s0)
80000dac:	01079713          	slli	a4,a5,0x10
80000db0:	01075713          	srli	a4,a4,0x10
80000db4:	fec42783          	lw	a5,-20(s0)
80000db8:	00e79023          	sh	a4,0(a5)
}
80000dbc:	00000013          	nop
80000dc0:	02c12403          	lw	s0,44(sp)
80000dc4:	03010113          	addi	sp,sp,48
80000dc8:	00008067          	ret

80000dcc <HW_get_16bit_reg>:
 */
uint16_t
HW_get_16bit_reg
(
	addr_t reg_addr
 ) {
80000dcc:	fd010113          	addi	sp,sp,-48
80000dd0:	02812623          	sw	s0,44(sp)
80000dd4:	03010413          	addi	s0,sp,48
80000dd8:	fca42e23          	sw	a0,-36(s0)
  volatile uint16_t * foo = (uint16_t*) reg_addr;
80000ddc:	fdc42783          	lw	a5,-36(s0)
80000de0:	fef42623          	sw	a5,-20(s0)
  return *foo;
80000de4:	fec42783          	lw	a5,-20(s0)
80000de8:	0007d783          	lhu	a5,0(a5)
80000dec:	01079793          	slli	a5,a5,0x10
80000df0:	0107d793          	srli	a5,a5,0x10
}
80000df4:	00078513          	mv	a0,a5
80000df8:	02c12403          	lw	s0,44(sp)
80000dfc:	03010113          	addi	sp,sp,48
80000e00:	00008067          	ret

80000e04 <HW_set_16bit_reg_field>:
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint_fast16_t mask,
    uint_fast16_t value
 ) {
80000e04:	fd010113          	addi	sp,sp,-48
80000e08:	02812623          	sw	s0,44(sp)
80000e0c:	03010413          	addi	s0,sp,48
80000e10:	fca42e23          	sw	a0,-36(s0)
80000e14:	fcb42c23          	sw	a1,-40(s0)
80000e18:	fcc42a23          	sw	a2,-44(s0)
80000e1c:	fcd42823          	sw	a3,-48(s0)

  volatile uint16_t * foo = (uint16_t *) reg_addr;
80000e20:	fdc42783          	lw	a5,-36(s0)
80000e24:	fef42623          	sw	a5,-20(s0)
  uint16_t old_value = *foo;
80000e28:	fec42783          	lw	a5,-20(s0)
80000e2c:	0007d783          	lhu	a5,0(a5)
80000e30:	fef41523          	sh	a5,-22(s0)
  uint16_t new_value = (value << shift);
80000e34:	fd042703          	lw	a4,-48(s0)
80000e38:	fd842783          	lw	a5,-40(s0)
80000e3c:	00f717b3          	sll	a5,a4,a5
80000e40:	fef41423          	sh	a5,-24(s0)
  *foo = (new_value & mask) | (old_value & ~mask);
80000e44:	fd442783          	lw	a5,-44(s0)
80000e48:	01079713          	slli	a4,a5,0x10
80000e4c:	01075713          	srli	a4,a4,0x10
80000e50:	fe845783          	lhu	a5,-24(s0)
80000e54:	00f777b3          	and	a5,a4,a5
80000e58:	01079713          	slli	a4,a5,0x10
80000e5c:	01075713          	srli	a4,a4,0x10
80000e60:	fd442783          	lw	a5,-44(s0)
80000e64:	01079793          	slli	a5,a5,0x10
80000e68:	0107d793          	srli	a5,a5,0x10
80000e6c:	fff7c793          	not	a5,a5
80000e70:	01079693          	slli	a3,a5,0x10
80000e74:	0106d693          	srli	a3,a3,0x10
80000e78:	fea45783          	lhu	a5,-22(s0)
80000e7c:	00f6f7b3          	and	a5,a3,a5
80000e80:	01079793          	slli	a5,a5,0x10
80000e84:	0107d793          	srli	a5,a5,0x10
80000e88:	00f767b3          	or	a5,a4,a5
80000e8c:	01079713          	slli	a4,a5,0x10
80000e90:	01075713          	srli	a4,a4,0x10
80000e94:	fec42783          	lw	a5,-20(s0)
80000e98:	00e79023          	sh	a4,0(a5)
}
80000e9c:	00000013          	nop
80000ea0:	02c12403          	lw	s0,44(sp)
80000ea4:	03010113          	addi	sp,sp,48
80000ea8:	00008067          	ret

80000eac <HW_get_16bit_reg_field>:
uint16_t HW_get_16bit_reg_field
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint_fast16_t mask
 ) {
80000eac:	fd010113          	addi	sp,sp,-48
80000eb0:	02812623          	sw	s0,44(sp)
80000eb4:	03010413          	addi	s0,sp,48
80000eb8:	fca42e23          	sw	a0,-36(s0)
80000ebc:	fcb42c23          	sw	a1,-40(s0)
80000ec0:	fcc42a23          	sw	a2,-44(s0)
  volatile uint16_t * foo = (uint16_t * ) reg_addr;
80000ec4:	fdc42783          	lw	a5,-36(s0)
80000ec8:	fef42623          	sw	a5,-20(s0)
  uint16_t value = ((*foo) & mask) >> shift;
80000ecc:	fec42783          	lw	a5,-20(s0)
80000ed0:	0007d783          	lhu	a5,0(a5)
80000ed4:	01079793          	slli	a5,a5,0x10
80000ed8:	0107d793          	srli	a5,a5,0x10
80000edc:	00078713          	mv	a4,a5
80000ee0:	fd442783          	lw	a5,-44(s0)
80000ee4:	00f77733          	and	a4,a4,a5
80000ee8:	fd842783          	lw	a5,-40(s0)
80000eec:	00f757b3          	srl	a5,a4,a5
80000ef0:	fef41523          	sh	a5,-22(s0)
  return (value);
80000ef4:	fea45783          	lhu	a5,-22(s0)
}
80000ef8:	00078513          	mv	a0,a5
80000efc:	02c12403          	lw	s0,44(sp)
80000f00:	03010113          	addi	sp,sp,48
80000f04:	00008067          	ret

80000f08 <HW_set_8bit_reg>:
void
HW_set_8bit_reg
(
	addr_t reg_addr,
	uint_fast8_t value
 ) {
80000f08:	fd010113          	addi	sp,sp,-48
80000f0c:	02812623          	sw	s0,44(sp)
80000f10:	03010413          	addi	s0,sp,48
80000f14:	fca42e23          	sw	a0,-36(s0)
80000f18:	fcb42c23          	sw	a1,-40(s0)

  volatile uint8_t * foo = (uint8_t*) reg_addr;
80000f1c:	fdc42783          	lw	a5,-36(s0)
80000f20:	fef42623          	sw	a5,-20(s0)
  *foo = value;
80000f24:	fd842783          	lw	a5,-40(s0)
80000f28:	0ff7f713          	andi	a4,a5,255
80000f2c:	fec42783          	lw	a5,-20(s0)
80000f30:	00e78023          	sb	a4,0(a5)
  
}
80000f34:	00000013          	nop
80000f38:	02c12403          	lw	s0,44(sp)
80000f3c:	03010113          	addi	sp,sp,48
80000f40:	00008067          	ret

80000f44 <HW_get_8bit_reg>:
 */
uint8_t
HW_get_8bit_reg
(
    addr_t reg_addr
 ) {
80000f44:	fd010113          	addi	sp,sp,-48
80000f48:	02812623          	sw	s0,44(sp)
80000f4c:	03010413          	addi	s0,sp,48
80000f50:	fca42e23          	sw	a0,-36(s0)
  volatile uint8_t * foo = (uint8_t*) reg_addr;
80000f54:	fdc42783          	lw	a5,-36(s0)
80000f58:	fef42623          	sw	a5,-20(s0)
  return *foo;
80000f5c:	fec42783          	lw	a5,-20(s0)
80000f60:	0007c783          	lbu	a5,0(a5)
80000f64:	0ff7f793          	andi	a5,a5,255
}
80000f68:	00078513          	mv	a0,a5
80000f6c:	02c12403          	lw	s0,44(sp)
80000f70:	03010113          	addi	sp,sp,48
80000f74:	00008067          	ret

80000f78 <HW_set_8bit_reg_field>:
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint_fast8_t mask,
    uint_fast8_t value
 ) {
80000f78:	fd010113          	addi	sp,sp,-48
80000f7c:	02812623          	sw	s0,44(sp)
80000f80:	03010413          	addi	s0,sp,48
80000f84:	fca42e23          	sw	a0,-36(s0)
80000f88:	fcb42c23          	sw	a1,-40(s0)
80000f8c:	fcc42a23          	sw	a2,-44(s0)
80000f90:	fcd42823          	sw	a3,-48(s0)

  
  volatile uint8_t * foo = (uint8_t *) reg_addr;
80000f94:	fdc42783          	lw	a5,-36(s0)
80000f98:	fef42623          	sw	a5,-20(s0)
  uint8_t old_value = *foo;
80000f9c:	fec42783          	lw	a5,-20(s0)
80000fa0:	0007c783          	lbu	a5,0(a5)
80000fa4:	fef405a3          	sb	a5,-21(s0)
  uint8_t new_value = (value << shift);
80000fa8:	fd042703          	lw	a4,-48(s0)
80000fac:	fd842783          	lw	a5,-40(s0)
80000fb0:	00f717b3          	sll	a5,a4,a5
80000fb4:	fef40523          	sb	a5,-22(s0)
  *foo = (new_value & mask) | (old_value & ~mask);
80000fb8:	fd442783          	lw	a5,-44(s0)
80000fbc:	0ff7f713          	andi	a4,a5,255
80000fc0:	fea44783          	lbu	a5,-22(s0)
80000fc4:	00f777b3          	and	a5,a4,a5
80000fc8:	0ff7f713          	andi	a4,a5,255
80000fcc:	fd442783          	lw	a5,-44(s0)
80000fd0:	0ff7f793          	andi	a5,a5,255
80000fd4:	fff7c793          	not	a5,a5
80000fd8:	0ff7f693          	andi	a3,a5,255
80000fdc:	feb44783          	lbu	a5,-21(s0)
80000fe0:	00f6f7b3          	and	a5,a3,a5
80000fe4:	0ff7f793          	andi	a5,a5,255
80000fe8:	00f767b3          	or	a5,a4,a5
80000fec:	0ff7f713          	andi	a4,a5,255
80000ff0:	fec42783          	lw	a5,-20(s0)
80000ff4:	00e78023          	sb	a4,0(a5)

  
}
80000ff8:	00000013          	nop
80000ffc:	02c12403          	lw	s0,44(sp)
80001000:	03010113          	addi	sp,sp,48
80001004:	00008067          	ret

80001008 <HW_get_8bit_reg_field>:
uint8_t HW_get_8bit_reg_field
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint_fast8_t mask
 ) {
80001008:	fd010113          	addi	sp,sp,-48
8000100c:	02812623          	sw	s0,44(sp)
80001010:	03010413          	addi	s0,sp,48
80001014:	fca42e23          	sw	a0,-36(s0)
80001018:	fcb42c23          	sw	a1,-40(s0)
8000101c:	fcc42a23          	sw	a2,-44(s0)

  volatile uint8_t * foo = (uint8_t * ) reg_addr;
80001020:	fdc42783          	lw	a5,-36(s0)
80001024:	fef42623          	sw	a5,-20(s0)
  uint8_t value = ((*foo) & mask) >> shift;
80001028:	fec42783          	lw	a5,-20(s0)
8000102c:	0007c783          	lbu	a5,0(a5)
80001030:	0ff7f793          	andi	a5,a5,255
80001034:	00078713          	mv	a4,a5
80001038:	fd442783          	lw	a5,-44(s0)
8000103c:	00f77733          	and	a4,a4,a5
80001040:	fd842783          	lw	a5,-40(s0)
80001044:	00f757b3          	srl	a5,a4,a5
80001048:	fef405a3          	sb	a5,-21(s0)
  return (value);
8000104c:	feb44783          	lbu	a5,-21(s0)

}
80001050:	00078513          	mv	a0,a5
80001054:	02c12403          	lw	s0,44(sp)
80001058:	03010113          	addi	sp,sp,48
8000105c:	00008067          	ret

80001060 <UART_init>:
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80001060:	fd010113          	addi	sp,sp,-48
80001064:	02112623          	sw	ra,44(sp)
80001068:	02812423          	sw	s0,40(sp)
8000106c:	03010413          	addi	s0,sp,48
80001070:	fca42e23          	sw	a0,-36(s0)
80001074:	fcb42c23          	sw	a1,-40(s0)
80001078:	00060713          	mv	a4,a2
8000107c:	00068793          	mv	a5,a3
80001080:	fce41b23          	sh	a4,-42(s0)
80001084:	fcf40aa3          	sb	a5,-43(s0)
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001088:	fdc42783          	lw	a5,-36(s0)
8000108c:	0c078e63          	beqz	a5,80001168 <UART_init+0x108>
80001090:	fd544703          	lbu	a4,-43(s0)
80001094:	00700793          	li	a5,7
80001098:	0ce7e863          	bltu	a5,a4,80001168 <UART_init+0x108>
        ( line_config <= MAX_LINE_CONFIG ) &&
8000109c:	fd645703          	lhu	a4,-42(s0)
800010a0:	000027b7          	lui	a5,0x2
800010a4:	0cf77263          	bleu	a5,a4,80001168 <UART_init+0x108>
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
800010a8:	fd842783          	lw	a5,-40(s0)
800010ac:	00878713          	addi	a4,a5,8 # 2008 <_start-0x7fffdff8>
800010b0:	fd645783          	lhu	a5,-42(s0)
800010b4:	0ff7f793          	andi	a5,a5,255
800010b8:	00078593          	mv	a1,a5
800010bc:	00070513          	mv	a0,a4
800010c0:	e49ff0ef          	jal	80000f08 <HW_set_8bit_reg>
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800010c4:	fd842783          	lw	a5,-40(s0)
800010c8:	00c78693          	addi	a3,a5,12
800010cc:	fd544703          	lbu	a4,-43(s0)
800010d0:	fd645783          	lhu	a5,-42(s0)
800010d4:	4057d793          	srai	a5,a5,0x5
800010d8:	7f87f793          	andi	a5,a5,2040
800010dc:	00f767b3          	or	a5,a4,a5
800010e0:	00078593          	mv	a1,a5
800010e4:	00068513          	mv	a0,a3
800010e8:	e21ff0ef          	jal	80000f08 <HW_set_8bit_reg>
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010ec:	fdc42783          	lw	a5,-36(s0)
800010f0:	fd842703          	lw	a4,-40(s0)
800010f4:	00e7a023          	sw	a4,0(a5)
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010f8:	fdc42783          	lw	a5,-36(s0)
800010fc:	0007a783          	lw	a5,0(a5)
80001100:	01078793          	addi	a5,a5,16
80001104:	00078513          	mv	a0,a5
80001108:	e3dff0ef          	jal	80000f44 <HW_get_8bit_reg>
8000110c:	00050793          	mv	a5,a0
80001110:	0027f793          	andi	a5,a5,2
80001114:	fef407a3          	sb	a5,-17(s0)
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001118:	0400006f          	j	80001158 <UART_init+0xf8>
        {
            volatile uint8_t rx_byte;
            rx_byte = HAL_get_8bit_reg( this_uart->base_address, RXDATA );
8000111c:	fdc42783          	lw	a5,-36(s0)
80001120:	0007a783          	lw	a5,0(a5)
80001124:	00478793          	addi	a5,a5,4
80001128:	00078513          	mv	a0,a5
8000112c:	e19ff0ef          	jal	80000f44 <HW_get_8bit_reg>
80001130:	00050793          	mv	a5,a0
80001134:	fef40723          	sb	a5,-18(s0)
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001138:	fdc42783          	lw	a5,-36(s0)
8000113c:	0007a783          	lw	a5,0(a5)
80001140:	01078793          	addi	a5,a5,16
80001144:	00078513          	mv	a0,a5
80001148:	dfdff0ef          	jal	80000f44 <HW_get_8bit_reg>
8000114c:	00050793          	mv	a5,a0
80001150:	0027f793          	andi	a5,a5,2
80001154:	fef407a3          	sb	a5,-17(s0)
        while ( rx_full )
80001158:	fef44783          	lbu	a5,-17(s0)
8000115c:	fc0790e3          	bnez	a5,8000111c <UART_init+0xbc>
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001160:	fdc42783          	lw	a5,-36(s0)
80001164:	00078223          	sb	zero,4(a5)
    }
}
80001168:	00000013          	nop
8000116c:	02c12083          	lw	ra,44(sp)
80001170:	02812403          	lw	s0,40(sp)
80001174:	03010113          	addi	sp,sp,48
80001178:	00008067          	ret

8000117c <UART_send>:
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
8000117c:	fd010113          	addi	sp,sp,-48
80001180:	02112623          	sw	ra,44(sp)
80001184:	02812423          	sw	s0,40(sp)
80001188:	03010413          	addi	s0,sp,48
8000118c:	fca42e23          	sw	a0,-36(s0)
80001190:	fcb42c23          	sw	a1,-40(s0)
80001194:	fcc42a23          	sw	a2,-44(s0)

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80001198:	fdc42783          	lw	a5,-36(s0)
8000119c:	08078063          	beqz	a5,8000121c <UART_send+0xa0>
800011a0:	fd842783          	lw	a5,-40(s0)
800011a4:	06078c63          	beqz	a5,8000121c <UART_send+0xa0>
        (tx_buffer != NULL_BUFFER)   &&
800011a8:	fd442783          	lw	a5,-44(s0)
800011ac:	06078863          	beqz	a5,8000121c <UART_send+0xa0>
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011b0:	fe042623          	sw	zero,-20(s0)
800011b4:	05c0006f          	j	80001210 <UART_send+0x94>
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800011b8:	fdc42783          	lw	a5,-36(s0)
800011bc:	0007a783          	lw	a5,0(a5)
800011c0:	01078793          	addi	a5,a5,16
800011c4:	00078513          	mv	a0,a5
800011c8:	d7dff0ef          	jal	80000f44 <HW_get_8bit_reg>
800011cc:	00050793          	mv	a5,a0
800011d0:	0017f793          	andi	a5,a5,1
800011d4:	fef405a3          	sb	a5,-21(s0)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011d8:	feb44783          	lbu	a5,-21(s0)
800011dc:	fc078ee3          	beqz	a5,800011b8 <UART_send+0x3c>
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011e0:	fdc42783          	lw	a5,-36(s0)
800011e4:	0007a683          	lw	a3,0(a5)
800011e8:	fd842703          	lw	a4,-40(s0)
800011ec:	fec42783          	lw	a5,-20(s0)
800011f0:	00f707b3          	add	a5,a4,a5
800011f4:	0007c783          	lbu	a5,0(a5)
800011f8:	00078593          	mv	a1,a5
800011fc:	00068513          	mv	a0,a3
80001200:	d09ff0ef          	jal	80000f08 <HW_set_8bit_reg>
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001204:	fec42783          	lw	a5,-20(s0)
80001208:	00178793          	addi	a5,a5,1
8000120c:	fef42623          	sw	a5,-20(s0)
80001210:	fec42703          	lw	a4,-20(s0)
80001214:	fd442783          	lw	a5,-44(s0)
80001218:	faf760e3          	bltu	a4,a5,800011b8 <UART_send+0x3c>
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
8000121c:	00000013          	nop
80001220:	02c12083          	lw	ra,44(sp)
80001224:	02812403          	lw	s0,40(sp)
80001228:	03010113          	addi	sp,sp,48
8000122c:	00008067          	ret

80001230 <UART_fill_tx_fifo>:
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001230:	fd010113          	addi	sp,sp,-48
80001234:	02112623          	sw	ra,44(sp)
80001238:	02812423          	sw	s0,40(sp)
8000123c:	03010413          	addi	s0,sp,48
80001240:	fca42e23          	sw	a0,-36(s0)
80001244:	fcb42c23          	sw	a1,-40(s0)
80001248:	fcc42a23          	sw	a2,-44(s0)
    uint8_t tx_ready;
    size_t size_sent = 0u;
8000124c:	fe042623          	sw	zero,-20(s0)
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    /* Fill the UART's Tx FIFO until the FIFO is full or the complete input 
     * buffer has been written. */
    if( (this_uart != NULL_INSTANCE) &&
80001250:	fdc42783          	lw	a5,-36(s0)
80001254:	0a078063          	beqz	a5,800012f4 <UART_fill_tx_fifo+0xc4>
80001258:	fd842783          	lw	a5,-40(s0)
8000125c:	08078c63          	beqz	a5,800012f4 <UART_fill_tx_fifo+0xc4>
        (tx_buffer != NULL_BUFFER)   &&
80001260:	fd442783          	lw	a5,-44(s0)
80001264:	08078863          	beqz	a5,800012f4 <UART_fill_tx_fifo+0xc4>
        (tx_size > 0u) )
    {
        tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001268:	fdc42783          	lw	a5,-36(s0)
8000126c:	0007a783          	lw	a5,0(a5)
80001270:	01078793          	addi	a5,a5,16
80001274:	00078513          	mv	a0,a5
80001278:	ccdff0ef          	jal	80000f44 <HW_get_8bit_reg>
8000127c:	00050793          	mv	a5,a0
80001280:	0017f793          	andi	a5,a5,1
80001284:	fef405a3          	sb	a5,-21(s0)
                                                      STATUS_TXRDY_MASK;
        if ( tx_ready )
80001288:	feb44783          	lbu	a5,-21(s0)
8000128c:	06078463          	beqz	a5,800012f4 <UART_fill_tx_fifo+0xc4>
        {
            do {
                HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001290:	fdc42783          	lw	a5,-36(s0)
80001294:	0007a683          	lw	a3,0(a5)
80001298:	fd842703          	lw	a4,-40(s0)
8000129c:	fec42783          	lw	a5,-20(s0)
800012a0:	00f707b3          	add	a5,a4,a5
800012a4:	0007c783          	lbu	a5,0(a5)
800012a8:	00078593          	mv	a1,a5
800012ac:	00068513          	mv	a0,a3
800012b0:	c59ff0ef          	jal	80000f08 <HW_set_8bit_reg>
                                  (uint_fast8_t)tx_buffer[size_sent] );
                size_sent++;
800012b4:	fec42783          	lw	a5,-20(s0)
800012b8:	00178793          	addi	a5,a5,1
800012bc:	fef42623          	sw	a5,-20(s0)
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800012c0:	fdc42783          	lw	a5,-36(s0)
800012c4:	0007a783          	lw	a5,0(a5)
800012c8:	01078793          	addi	a5,a5,16
800012cc:	00078513          	mv	a0,a5
800012d0:	c75ff0ef          	jal	80000f44 <HW_get_8bit_reg>
800012d4:	00050793          	mv	a5,a0
800012d8:	0017f793          	andi	a5,a5,1
800012dc:	fef405a3          	sb	a5,-21(s0)
                                                              STATUS_TXRDY_MASK;
            } while ( (tx_ready) && ( size_sent < tx_size ) );
800012e0:	feb44783          	lbu	a5,-21(s0)
800012e4:	00078863          	beqz	a5,800012f4 <UART_fill_tx_fifo+0xc4>
800012e8:	fec42703          	lw	a4,-20(s0)
800012ec:	fd442783          	lw	a5,-44(s0)
800012f0:	faf760e3          	bltu	a4,a5,80001290 <UART_fill_tx_fifo+0x60>
        }
    }    
    return size_sent;
800012f4:	fec42783          	lw	a5,-20(s0)
}
800012f8:	00078513          	mv	a0,a5
800012fc:	02c12083          	lw	ra,44(sp)
80001300:	02812403          	lw	s0,40(sp)
80001304:	03010113          	addi	sp,sp,48
80001308:	00008067          	ret

8000130c <UART_get_rx>:
(
    UART_instance_t * this_uart,
    uint8_t * rx_buffer,
    size_t buff_size
)
{
8000130c:	fd010113          	addi	sp,sp,-48
80001310:	02112623          	sw	ra,44(sp)
80001314:	02812423          	sw	s0,40(sp)
80001318:	02912223          	sw	s1,36(sp)
8000131c:	03010413          	addi	s0,sp,48
80001320:	fca42e23          	sw	a0,-36(s0)
80001324:	fcb42c23          	sw	a1,-40(s0)
80001328:	fcc42a23          	sw	a2,-44(s0)
    uint8_t new_status;
    uint8_t rx_full;
    size_t rx_idx = 0u;
8000132c:	fe042423          	sw	zero,-24(s0)
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( rx_buffer != NULL_BUFFER )
    HAL_ASSERT( buff_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80001330:	fdc42783          	lw	a5,-36(s0)
80001334:	0e078663          	beqz	a5,80001420 <UART_get_rx+0x114>
80001338:	fd842783          	lw	a5,-40(s0)
8000133c:	0e078263          	beqz	a5,80001420 <UART_get_rx+0x114>
        (rx_buffer != NULL_BUFFER)   &&
80001340:	fd442783          	lw	a5,-44(s0)
80001344:	0c078e63          	beqz	a5,80001420 <UART_get_rx+0x114>
        (buff_size > 0u) )
    {
        rx_idx = 0u;
80001348:	fe042423          	sw	zero,-24(s0)
        new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
8000134c:	fdc42783          	lw	a5,-36(s0)
80001350:	0007a783          	lw	a5,0(a5)
80001354:	01078793          	addi	a5,a5,16
80001358:	00078513          	mv	a0,a5
8000135c:	be9ff0ef          	jal	80000f44 <HW_get_8bit_reg>
80001360:	00050793          	mv	a5,a0
80001364:	fef403a3          	sb	a5,-25(s0)
        this_uart->status |= new_status;
80001368:	fdc42783          	lw	a5,-36(s0)
8000136c:	0047c703          	lbu	a4,4(a5)
80001370:	fe744783          	lbu	a5,-25(s0)
80001374:	00f767b3          	or	a5,a4,a5
80001378:	0ff7f713          	andi	a4,a5,255
8000137c:	fdc42783          	lw	a5,-36(s0)
80001380:	00e78223          	sb	a4,4(a5)
        rx_full = new_status & STATUS_RXFULL_MASK;
80001384:	fe744783          	lbu	a5,-25(s0)
80001388:	0027f793          	andi	a5,a5,2
8000138c:	fef407a3          	sb	a5,-17(s0)
        while ( ( rx_full ) && ( rx_idx < buff_size ) )
80001390:	07c0006f          	j	8000140c <UART_get_rx+0x100>
        {
            rx_buffer[rx_idx] = HAL_get_8bit_reg( this_uart->base_address,
80001394:	fd842703          	lw	a4,-40(s0)
80001398:	fe842783          	lw	a5,-24(s0)
8000139c:	00f704b3          	add	s1,a4,a5
800013a0:	fdc42783          	lw	a5,-36(s0)
800013a4:	0007a783          	lw	a5,0(a5)
800013a8:	00478793          	addi	a5,a5,4
800013ac:	00078513          	mv	a0,a5
800013b0:	b95ff0ef          	jal	80000f44 <HW_get_8bit_reg>
800013b4:	00050793          	mv	a5,a0
800013b8:	00f48023          	sb	a5,0(s1)
                                                  RXDATA );
            rx_idx++;
800013bc:	fe842783          	lw	a5,-24(s0)
800013c0:	00178793          	addi	a5,a5,1
800013c4:	fef42423          	sw	a5,-24(s0)
            new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
800013c8:	fdc42783          	lw	a5,-36(s0)
800013cc:	0007a783          	lw	a5,0(a5)
800013d0:	01078793          	addi	a5,a5,16
800013d4:	00078513          	mv	a0,a5
800013d8:	b6dff0ef          	jal	80000f44 <HW_get_8bit_reg>
800013dc:	00050793          	mv	a5,a0
800013e0:	fef403a3          	sb	a5,-25(s0)
            this_uart->status |= new_status;
800013e4:	fdc42783          	lw	a5,-36(s0)
800013e8:	0047c703          	lbu	a4,4(a5)
800013ec:	fe744783          	lbu	a5,-25(s0)
800013f0:	00f767b3          	or	a5,a4,a5
800013f4:	0ff7f713          	andi	a4,a5,255
800013f8:	fdc42783          	lw	a5,-36(s0)
800013fc:	00e78223          	sb	a4,4(a5)
            rx_full = new_status & STATUS_RXFULL_MASK;
80001400:	fe744783          	lbu	a5,-25(s0)
80001404:	0027f793          	andi	a5,a5,2
80001408:	fef407a3          	sb	a5,-17(s0)
        while ( ( rx_full ) && ( rx_idx < buff_size ) )
8000140c:	fef44783          	lbu	a5,-17(s0)
80001410:	00078863          	beqz	a5,80001420 <UART_get_rx+0x114>
80001414:	fe842703          	lw	a4,-24(s0)
80001418:	fd442783          	lw	a5,-44(s0)
8000141c:	f6f76ce3          	bltu	a4,a5,80001394 <UART_get_rx+0x88>
        }
    }
    return rx_idx;
80001420:	fe842783          	lw	a5,-24(s0)
}
80001424:	00078513          	mv	a0,a5
80001428:	02c12083          	lw	ra,44(sp)
8000142c:	02812403          	lw	s0,40(sp)
80001430:	02412483          	lw	s1,36(sp)
80001434:	03010113          	addi	sp,sp,48
80001438:	00008067          	ret

8000143c <UART_polled_tx_string>:
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
8000143c:	fd010113          	addi	sp,sp,-48
80001440:	02112623          	sw	ra,44(sp)
80001444:	02812423          	sw	s0,40(sp)
80001448:	03010413          	addi	s0,sp,48
8000144c:	fca42e23          	sw	a0,-36(s0)
80001450:	fcb42c23          	sw	a1,-40(s0)
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80001454:	fdc42783          	lw	a5,-36(s0)
80001458:	08078063          	beqz	a5,800014d8 <UART_polled_tx_string+0x9c>
8000145c:	fd842783          	lw	a5,-40(s0)
80001460:	06078c63          	beqz	a5,800014d8 <UART_polled_tx_string+0x9c>
    {
        char_idx = 0U;
80001464:	fe042623          	sw	zero,-20(s0)
        while( 0U != p_sz_string[char_idx] )
80001468:	05c0006f          	j	800014c4 <UART_polled_tx_string+0x88>
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
8000146c:	fdc42783          	lw	a5,-36(s0)
80001470:	0007a783          	lw	a5,0(a5)
80001474:	01078793          	addi	a5,a5,16
80001478:	00078513          	mv	a0,a5
8000147c:	ac9ff0ef          	jal	80000f44 <HW_get_8bit_reg>
80001480:	00050793          	mv	a5,a0
80001484:	0017f793          	andi	a5,a5,1
80001488:	fef405a3          	sb	a5,-21(s0)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
8000148c:	feb44783          	lbu	a5,-21(s0)
80001490:	fc078ee3          	beqz	a5,8000146c <UART_polled_tx_string+0x30>
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001494:	fdc42783          	lw	a5,-36(s0)
80001498:	0007a683          	lw	a3,0(a5)
8000149c:	fd842703          	lw	a4,-40(s0)
800014a0:	fec42783          	lw	a5,-20(s0)
800014a4:	00f707b3          	add	a5,a4,a5
800014a8:	0007c783          	lbu	a5,0(a5)
800014ac:	00078593          	mv	a1,a5
800014b0:	00068513          	mv	a0,a3
800014b4:	a55ff0ef          	jal	80000f08 <HW_set_8bit_reg>
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
800014b8:	fec42783          	lw	a5,-20(s0)
800014bc:	00178793          	addi	a5,a5,1
800014c0:	fef42623          	sw	a5,-20(s0)
        while( 0U != p_sz_string[char_idx] )
800014c4:	fd842703          	lw	a4,-40(s0)
800014c8:	fec42783          	lw	a5,-20(s0)
800014cc:	00f707b3          	add	a5,a4,a5
800014d0:	0007c783          	lbu	a5,0(a5)
800014d4:	f8079ce3          	bnez	a5,8000146c <UART_polled_tx_string+0x30>
        }
    }
}
800014d8:	00000013          	nop
800014dc:	02c12083          	lw	ra,44(sp)
800014e0:	02812403          	lw	s0,40(sp)
800014e4:	03010113          	addi	sp,sp,48
800014e8:	00008067          	ret

800014ec <UART_get_rx_status>:
uint8_t
UART_get_rx_status
(
    UART_instance_t * this_uart
)
{
800014ec:	fd010113          	addi	sp,sp,-48
800014f0:	02812623          	sw	s0,44(sp)
800014f4:	03010413          	addi	s0,sp,48
800014f8:	fca42e23          	sw	a0,-36(s0)
    uint8_t status = UART_APB_INVALID_PARAM;
800014fc:	fff00793          	li	a5,-1
80001500:	fef407a3          	sb	a5,-17(s0)
     * Extract UART error status and place in lower bits of "status".
     * Bit 0 - Parity error status
     * Bit 1 - Overflow error status
     * Bit 2 - Frame error status
     */
    if( this_uart != NULL_INSTANCE )
80001504:	fdc42783          	lw	a5,-36(s0)
80001508:	02078263          	beqz	a5,8000152c <UART_get_rx_status+0x40>
    {
        status = ( ( this_uart->status & STATUS_ERROR_MASK ) >> 
8000150c:	fdc42783          	lw	a5,-36(s0)
80001510:	0047c783          	lbu	a5,4(a5)
80001514:	4027d793          	srai	a5,a5,0x2
80001518:	0ff7f793          	andi	a5,a5,255
8000151c:	0077f793          	andi	a5,a5,7
80001520:	fef407a3          	sb	a5,-17(s0)
                                          STATUS_ERROR_OFFSET );
        /*
         * Clear the sticky status for this instance.
         */
        this_uart->status = (uint8_t)0;
80001524:	fdc42783          	lw	a5,-36(s0)
80001528:	00078223          	sb	zero,4(a5)
    }
    return status;
8000152c:	fef44783          	lbu	a5,-17(s0)
}
80001530:	00078513          	mv	a0,a5
80001534:	02c12403          	lw	s0,44(sp)
80001538:	03010113          	addi	sp,sp,48
8000153c:	00008067          	ret

80001540 <TMR_init>:
	addr_t address,
	uint8_t mode,
	uint32_t prescale,
	uint32_t load_value
)
{
80001540:	fd010113          	addi	sp,sp,-48
80001544:	02112623          	sw	ra,44(sp)
80001548:	02812423          	sw	s0,40(sp)
8000154c:	03010413          	addi	s0,sp,48
80001550:	fea42623          	sw	a0,-20(s0)
80001554:	feb42423          	sw	a1,-24(s0)
80001558:	00060793          	mv	a5,a2
8000155c:	fed42023          	sw	a3,-32(s0)
80001560:	fce42e23          	sw	a4,-36(s0)
80001564:	fef403a3          	sb	a5,-25(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
	HAL_ASSERT( prescale <= PRESCALER_DIV_1024 )
	HAL_ASSERT( load_value != 0 )
    
    this_timer->base_address = address;
80001568:	fec42783          	lw	a5,-20(s0)
8000156c:	fe842703          	lw	a4,-24(s0)
80001570:	00e7a023          	sw	a4,0(a5)

    /* Disable interrupts. */
    HAL_set_32bit_reg_field( address, InterruptEnable,0 );
80001574:	fe842783          	lw	a5,-24(s0)
80001578:	00878793          	addi	a5,a5,8
8000157c:	00000693          	li	a3,0
80001580:	00200613          	li	a2,2
80001584:	00100593          	li	a1,1
80001588:	00078513          	mv	a0,a5
8000158c:	f38ff0ef          	jal	80000cc4 <HW_set_32bit_reg_field>

    /* Disable timer. */
    HAL_set_32bit_reg_field( address, TimerEnable, 0 );
80001590:	fe842783          	lw	a5,-24(s0)
80001594:	00878793          	addi	a5,a5,8
80001598:	00000693          	li	a3,0
8000159c:	00100613          	li	a2,1
800015a0:	00000593          	li	a1,0
800015a4:	00078513          	mv	a0,a5
800015a8:	f1cff0ef          	jal	80000cc4 <HW_set_32bit_reg_field>

    /* Clear pending interrupt. */
    HAL_set_32bit_reg( address, TimerIntClr, 1 );
800015ac:	fe842783          	lw	a5,-24(s0)
800015b0:	01078793          	addi	a5,a5,16
800015b4:	00100593          	li	a1,1
800015b8:	00078513          	mv	a0,a5
800015bc:	ea0ff0ef          	jal	80000c5c <HW_set_32bit_reg>

    /* Configure prescaler and load value. */	
    HAL_set_32bit_reg( address, TimerPrescale, prescale );
800015c0:	fe842783          	lw	a5,-24(s0)
800015c4:	00c78793          	addi	a5,a5,12
800015c8:	fe042583          	lw	a1,-32(s0)
800015cc:	00078513          	mv	a0,a5
800015d0:	e8cff0ef          	jal	80000c5c <HW_set_32bit_reg>
    HAL_set_32bit_reg( address, TimerLoad, load_value );
800015d4:	fdc42583          	lw	a1,-36(s0)
800015d8:	fe842503          	lw	a0,-24(s0)
800015dc:	e80ff0ef          	jal	80000c5c <HW_set_32bit_reg>

    /* Set the interrupt mode. */
    if ( mode == TMR_CONTINUOUS_MODE )
800015e0:	fe744783          	lbu	a5,-25(s0)
800015e4:	02079263          	bnez	a5,80001608 <TMR_init+0xc8>
    {
        HAL_set_32bit_reg_field( address, TimerMode, 0 );
800015e8:	fe842783          	lw	a5,-24(s0)
800015ec:	00878793          	addi	a5,a5,8
800015f0:	00000693          	li	a3,0
800015f4:	00400613          	li	a2,4
800015f8:	00200593          	li	a1,2
800015fc:	00078513          	mv	a0,a5
80001600:	ec4ff0ef          	jal	80000cc4 <HW_set_32bit_reg_field>
    else
    {
        /* TMR_ONE_SHOT_MODE */
        HAL_set_32bit_reg_field( address, TimerMode, 1 );
    }
}
80001604:	0200006f          	j	80001624 <TMR_init+0xe4>
        HAL_set_32bit_reg_field( address, TimerMode, 1 );
80001608:	fe842783          	lw	a5,-24(s0)
8000160c:	00878793          	addi	a5,a5,8
80001610:	00100693          	li	a3,1
80001614:	00400613          	li	a2,4
80001618:	00200593          	li	a1,2
8000161c:	00078513          	mv	a0,a5
80001620:	ea4ff0ef          	jal	80000cc4 <HW_set_32bit_reg_field>
}
80001624:	00000013          	nop
80001628:	02c12083          	lw	ra,44(sp)
8000162c:	02812403          	lw	s0,40(sp)
80001630:	03010113          	addi	sp,sp,48
80001634:	00008067          	ret

80001638 <TMR_start>:
void
TMR_start
(
    timer_instance_t * this_timer
)
{
80001638:	fe010113          	addi	sp,sp,-32
8000163c:	00112e23          	sw	ra,28(sp)
80001640:	00812c23          	sw	s0,24(sp)
80001644:	02010413          	addi	s0,sp,32
80001648:	fea42623          	sw	a0,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    HAL_set_32bit_reg_field( this_timer->base_address, TimerEnable, 1 );
8000164c:	fec42783          	lw	a5,-20(s0)
80001650:	0007a783          	lw	a5,0(a5)
80001654:	00878793          	addi	a5,a5,8
80001658:	00100693          	li	a3,1
8000165c:	00100613          	li	a2,1
80001660:	00000593          	li	a1,0
80001664:	00078513          	mv	a0,a5
80001668:	e5cff0ef          	jal	80000cc4 <HW_set_32bit_reg_field>
}
8000166c:	00000013          	nop
80001670:	01c12083          	lw	ra,28(sp)
80001674:	01812403          	lw	s0,24(sp)
80001678:	02010113          	addi	sp,sp,32
8000167c:	00008067          	ret

80001680 <TMR_stop>:
void
TMR_stop
(
    timer_instance_t * this_timer
)
{
80001680:	fe010113          	addi	sp,sp,-32
80001684:	00112e23          	sw	ra,28(sp)
80001688:	00812c23          	sw	s0,24(sp)
8000168c:	02010413          	addi	s0,sp,32
80001690:	fea42623          	sw	a0,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    HAL_set_32bit_reg_field( this_timer->base_address, TimerEnable, 0 );
80001694:	fec42783          	lw	a5,-20(s0)
80001698:	0007a783          	lw	a5,0(a5)
8000169c:	00878793          	addi	a5,a5,8
800016a0:	00000693          	li	a3,0
800016a4:	00100613          	li	a2,1
800016a8:	00000593          	li	a1,0
800016ac:	00078513          	mv	a0,a5
800016b0:	e14ff0ef          	jal	80000cc4 <HW_set_32bit_reg_field>
}
800016b4:	00000013          	nop
800016b8:	01c12083          	lw	ra,28(sp)
800016bc:	01812403          	lw	s0,24(sp)
800016c0:	02010113          	addi	sp,sp,32
800016c4:	00008067          	ret

800016c8 <TMR_enable_int>:
void
TMR_enable_int
(
    timer_instance_t * this_timer
)
{
800016c8:	fe010113          	addi	sp,sp,-32
800016cc:	00112e23          	sw	ra,28(sp)
800016d0:	00812c23          	sw	s0,24(sp)
800016d4:	02010413          	addi	s0,sp,32
800016d8:	fea42623          	sw	a0,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    HAL_set_32bit_reg_field( this_timer->base_address, InterruptEnable, 1 );
800016dc:	fec42783          	lw	a5,-20(s0)
800016e0:	0007a783          	lw	a5,0(a5)
800016e4:	00878793          	addi	a5,a5,8
800016e8:	00100693          	li	a3,1
800016ec:	00200613          	li	a2,2
800016f0:	00100593          	li	a1,1
800016f4:	00078513          	mv	a0,a5
800016f8:	dccff0ef          	jal	80000cc4 <HW_set_32bit_reg_field>
}
800016fc:	00000013          	nop
80001700:	01c12083          	lw	ra,28(sp)
80001704:	01812403          	lw	s0,24(sp)
80001708:	02010113          	addi	sp,sp,32
8000170c:	00008067          	ret

80001710 <TMR_clear_int>:
void
TMR_clear_int
(
    timer_instance_t * this_timer
)
{
80001710:	fe010113          	addi	sp,sp,-32
80001714:	00112e23          	sw	ra,28(sp)
80001718:	00812c23          	sw	s0,24(sp)
8000171c:	02010413          	addi	s0,sp,32
80001720:	fea42623          	sw	a0,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    HAL_set_32bit_reg( this_timer->base_address, TimerIntClr, 0x01 );
80001724:	fec42783          	lw	a5,-20(s0)
80001728:	0007a783          	lw	a5,0(a5)
8000172c:	01078793          	addi	a5,a5,16
80001730:	00100593          	li	a1,1
80001734:	00078513          	mv	a0,a5
80001738:	d24ff0ef          	jal	80000c5c <HW_set_32bit_reg>
}
8000173c:	00000013          	nop
80001740:	01c12083          	lw	ra,28(sp)
80001744:	01812403          	lw	s0,24(sp)
80001748:	02010113          	addi	sp,sp,32
8000174c:	00008067          	ret

80001750 <TMR_current_value>:
uint32_t
TMR_current_value
(
    timer_instance_t * this_timer
)
{
80001750:	fd010113          	addi	sp,sp,-48
80001754:	02112623          	sw	ra,44(sp)
80001758:	02812423          	sw	s0,40(sp)
8000175c:	03010413          	addi	s0,sp,48
80001760:	fca42e23          	sw	a0,-36(s0)
	uint32_t value = 0;
80001764:	fe042623          	sw	zero,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    value = HAL_get_32bit_reg( this_timer->base_address, TimerValue );
80001768:	fdc42783          	lw	a5,-36(s0)
8000176c:	0007a783          	lw	a5,0(a5)
80001770:	00478793          	addi	a5,a5,4
80001774:	00078513          	mv	a0,a5
80001778:	d1cff0ef          	jal	80000c94 <HW_get_32bit_reg>
8000177c:	fea42623          	sw	a0,-20(s0)
    
	return value;
80001780:	fec42783          	lw	a5,-20(s0)
}
80001784:	00078513          	mv	a0,a5
80001788:	02c12083          	lw	ra,44(sp)
8000178c:	02812403          	lw	s0,40(sp)
80001790:	03010113          	addi	sp,sp,48
80001794:	00008067          	ret

80001798 <TMR_reload>:
void TMR_reload
(
	timer_instance_t * this_timer,
	uint32_t load_value
)
{
80001798:	fe010113          	addi	sp,sp,-32
8000179c:	00112e23          	sw	ra,28(sp)
800017a0:	00812c23          	sw	s0,24(sp)
800017a4:	02010413          	addi	s0,sp,32
800017a8:	fea42623          	sw	a0,-20(s0)
800017ac:	feb42423          	sw	a1,-24(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
	HAL_ASSERT( load_value != 0 )
	
	HAL_set_32bit_reg(this_timer->base_address, TimerLoad, load_value );
800017b0:	fec42783          	lw	a5,-20(s0)
800017b4:	0007a783          	lw	a5,0(a5)
800017b8:	fe842583          	lw	a1,-24(s0)
800017bc:	00078513          	mv	a0,a5
800017c0:	c9cff0ef          	jal	80000c5c <HW_set_32bit_reg>
}
800017c4:	00000013          	nop
800017c8:	01c12083          	lw	ra,28(sp)
800017cc:	01812403          	lw	s0,24(sp)
800017d0:	02010113          	addi	sp,sp,32
800017d4:	00008067          	ret

800017d8 <SPI_init>:
(
	spi_instance_t * this_spi,
	addr_t base_addr,
	uint16_t fifo_depth
)
{
800017d8:	fd010113          	addi	sp,sp,-48
800017dc:	02112623          	sw	ra,44(sp)
800017e0:	02812423          	sw	s0,40(sp)
800017e4:	03010413          	addi	s0,sp,48
800017e8:	fca42e23          	sw	a0,-36(s0)
800017ec:	fcb42c23          	sw	a1,-40(s0)
800017f0:	00060793          	mv	a5,a2
800017f4:	fcf41b23          	sh	a5,-42(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( NULL_ADDR != base_addr );
    HAL_ASSERT( SPI_MAX_FIFO_DEPTH  >= fifo_depth );
    HAL_ASSERT( SPI_MIN_FIFO_DEPTH  <= fifo_depth );

	if( ( NULL_INSTANCE != this_spi ) && ( base_addr != NULL_ADDR ) )
800017f8:	fdc42783          	lw	a5,-36(s0)
800017fc:	0e078463          	beqz	a5,800018e4 <SPI_init+0x10c>
80001800:	fd842783          	lw	a5,-40(s0)
80001804:	0e078063          	beqz	a5,800018e4 <SPI_init+0x10c>
         * to 0 for any non byte sized items too.
         */

        /* First fill struct with 0s */
//#if 0
        memset( this_spi, 0, sizeof(spi_instance_t) );
80001808:	04c00613          	li	a2,76
8000180c:	00000593          	li	a1,0
80001810:	fdc42503          	lw	a0,-36(s0)
80001814:	75c070ef          	jal	80008f70 <memset>
        {
        	*(p+i)=0;
        }
#endif*/
        /* Configure CoreSPI instance attributes */
        this_spi->base_addr = (addr_t)base_addr;
80001818:	fdc42783          	lw	a5,-36(s0)
8000181c:	fd842703          	lw	a4,-40(s0)
80001820:	00e7a023          	sw	a4,0(a5)

        /* Store FIFO depth or fall back to minimum if out of range */
        if( ( SPI_MAX_FIFO_DEPTH  >= fifo_depth ) && ( SPI_MIN_FIFO_DEPTH  <= fifo_depth ) )
80001824:	fd645703          	lhu	a4,-42(s0)
80001828:	02000793          	li	a5,32
8000182c:	00e7ee63          	bltu	a5,a4,80001848 <SPI_init+0x70>
80001830:	fd645783          	lhu	a5,-42(s0)
80001834:	00078a63          	beqz	a5,80001848 <SPI_init+0x70>
        {
        	this_spi->fifo_depth = fifo_depth;
80001838:	fdc42783          	lw	a5,-36(s0)
8000183c:	fd645703          	lhu	a4,-42(s0)
80001840:	04e79223          	sh	a4,68(a5)
80001844:	0100006f          	j	80001854 <SPI_init+0x7c>
        }
        else
        {
        	this_spi->fifo_depth = SPI_MIN_FIFO_DEPTH;
80001848:	fdc42783          	lw	a5,-36(s0)
8000184c:	00100713          	li	a4,1
80001850:	04e79223          	sh	a4,68(a5)
        }
		/* Make sure the CoreSPI is disabled while we configure it */
        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80001854:	fdc42783          	lw	a5,-36(s0)
80001858:	0007a783          	lw	a5,0(a5)
8000185c:	00000693          	li	a3,0
80001860:	00100613          	li	a2,1
80001864:	00000593          	li	a1,0
80001868:	00078513          	mv	a0,a5
8000186c:	f0cff0ef          	jal	80000f78 <HW_set_8bit_reg_field>

        /* Ensure all slaves are deselected */
        HAL_set_8bit_reg( this_spi->base_addr, SSEL, 0u );
80001870:	fdc42783          	lw	a5,-36(s0)
80001874:	0007a783          	lw	a5,0(a5)
80001878:	02478793          	addi	a5,a5,36
8000187c:	00000593          	li	a1,0
80001880:	00078513          	mv	a0,a5
80001884:	e84ff0ef          	jal	80000f08 <HW_set_8bit_reg>

        /* Flush the receive and transmit FIFOs*/
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80001888:	fdc42783          	lw	a5,-36(s0)
8000188c:	0007a783          	lw	a5,0(a5)
80001890:	01c78793          	addi	a5,a5,28
80001894:	00300593          	li	a1,3
80001898:	00078513          	mv	a0,a5
8000189c:	e6cff0ef          	jal	80000f08 <HW_set_8bit_reg>

        /* Clear all interrupts */
        HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
800018a0:	fdc42783          	lw	a5,-36(s0)
800018a4:	0007a783          	lw	a5,0(a5)
800018a8:	00478793          	addi	a5,a5,4
800018ac:	0ff00593          	li	a1,255
800018b0:	00078513          	mv	a0,a5
800018b4:	e54ff0ef          	jal	80000f08 <HW_set_8bit_reg>

        /* Ensure RXAVAIL, TXRFM, SSEND and CMDINT are disabled */
        HAL_set_8bit_reg( this_spi->base_addr, CTRL2, 0u );
800018b8:	fdc42783          	lw	a5,-36(s0)
800018bc:	0007a783          	lw	a5,0(a5)
800018c0:	01878793          	addi	a5,a5,24
800018c4:	00000593          	li	a1,0
800018c8:	00078513          	mv	a0,a5
800018cc:	e3cff0ef          	jal	80000f08 <HW_set_8bit_reg>
        /*
         * Enable the CoreSPI in the reset default of master mode
         * with TXUNDERRUN, RXOVFLOW and TXDONE interrupts disabled.
         * The driver does not currently use interrupts in master mode.
         */
		HAL_set_8bit_reg( this_spi->base_addr, CTRL1,  ENABLE | CTRL1_MASTER_MASK );
800018d0:	fdc42783          	lw	a5,-36(s0)
800018d4:	0007a783          	lw	a5,0(a5)
800018d8:	00300593          	li	a1,3
800018dc:	00078513          	mv	a0,a5
800018e0:	e28ff0ef          	jal	80000f08 <HW_set_8bit_reg>
	}
	HAL_set_8bit_reg( this_spi->base_addr, SSEL, 0x01 );  // ml fixme debug
800018e4:	fdc42783          	lw	a5,-36(s0)
800018e8:	0007a783          	lw	a5,0(a5)
800018ec:	02478793          	addi	a5,a5,36
800018f0:	00100593          	li	a1,1
800018f4:	00078513          	mv	a0,a5
800018f8:	e10ff0ef          	jal	80000f08 <HW_set_8bit_reg>
	test = HAL_get_8bit_reg( this_spi->base_addr, SSEL ); // ml fixme debug
800018fc:	fdc42783          	lw	a5,-36(s0)
80001900:	0007a783          	lw	a5,0(a5)
80001904:	02478793          	addi	a5,a5,36
80001908:	00078513          	mv	a0,a5
8000190c:	e38ff0ef          	jal	80000f44 <HW_get_8bit_reg>
80001910:	00050793          	mv	a5,a0
80001914:	fef407a3          	sb	a5,-17(s0)
	test = HAL_get_8bit_reg( this_spi->base_addr, STATUS ); // ml fixme debug
80001918:	fdc42783          	lw	a5,-36(s0)
8000191c:	0007a783          	lw	a5,0(a5)
80001920:	02078793          	addi	a5,a5,32
80001924:	00078513          	mv	a0,a5
80001928:	e1cff0ef          	jal	80000f44 <HW_get_8bit_reg>
8000192c:	00050793          	mv	a5,a0
80001930:	fef407a3          	sb	a5,-17(s0)
}
80001934:	00000013          	nop
80001938:	02c12083          	lw	ra,44(sp)
8000193c:	02812403          	lw	s0,40(sp)
80001940:	03010113          	addi	sp,sp,48
80001944:	00008067          	ret

80001948 <SPI_configure_slave_mode>:
 */
void SPI_configure_slave_mode
(
	spi_instance_t * this_spi
)
{
80001948:	fe010113          	addi	sp,sp,-32
8000194c:	00112e23          	sw	ra,28(sp)
80001950:	00812c23          	sw	s0,24(sp)
80001954:	02010413          	addi	s0,sp,32
80001958:	fea42623          	sw	a0,-20(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

	if( NULL_INSTANCE != this_spi )
8000195c:	fec42783          	lw	a5,-20(s0)
80001960:	08078263          	beqz	a5,800019e4 <SPI_configure_slave_mode+0x9c>
        {
        /* Don't yet know what slave transfer mode will be used */
        this_spi->slave_xfer_mode = SPI_SLAVE_XFER_NONE;
80001964:	fec42783          	lw	a5,-20(s0)
80001968:	0407a423          	sw	zero,72(a5)

		/* Make sure the CoreSPI is disabled while we configure it */
        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
8000196c:	fec42783          	lw	a5,-20(s0)
80001970:	0007a783          	lw	a5,0(a5)
80001974:	00000693          	li	a3,0
80001978:	00100613          	li	a2,1
8000197c:	00000593          	li	a1,0
80001980:	00078513          	mv	a0,a5
80001984:	df4ff0ef          	jal	80000f78 <HW_set_8bit_reg_field>

        /* Flush the receive and transmit FIFOs*/
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80001988:	fec42783          	lw	a5,-20(s0)
8000198c:	0007a783          	lw	a5,0(a5)
80001990:	01c78793          	addi	a5,a5,28
80001994:	00300593          	li	a1,3
80001998:	00078513          	mv	a0,a5
8000199c:	d6cff0ef          	jal	80000f08 <HW_set_8bit_reg>

        /* Clear all interrupts */
        HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
800019a0:	fec42783          	lw	a5,-20(s0)
800019a4:	0007a783          	lw	a5,0(a5)
800019a8:	00478793          	addi	a5,a5,4
800019ac:	0ff00593          	li	a1,255
800019b0:	00078513          	mv	a0,a5
800019b4:	d54ff0ef          	jal	80000f08 <HW_set_8bit_reg>

        /* Ensure RXAVAIL, TXRFM, SSEND and CMDINT are disabled */
        HAL_set_8bit_reg( this_spi->base_addr, CTRL2, 0u );
800019b8:	fec42783          	lw	a5,-20(s0)
800019bc:	0007a783          	lw	a5,0(a5)
800019c0:	01878793          	addi	a5,a5,24
800019c4:	00000593          	li	a1,0
800019c8:	00078513          	mv	a0,a5
800019cc:	d3cff0ef          	jal	80000f08 <HW_set_8bit_reg>
        /*
         * Enable the CoreSPI in slave mode with TXUNDERRUN, RXOVFLOW and TXDONE
         * interrupts disabled. The appropriate interrupts will be enabled later
         * on when the transfer mode is configured.
         */
		HAL_set_8bit_reg( this_spi->base_addr, CTRL1, ENABLE );
800019d0:	fec42783          	lw	a5,-20(s0)
800019d4:	0007a783          	lw	a5,0(a5)
800019d8:	00100593          	li	a1,1
800019dc:	00078513          	mv	a0,a5
800019e0:	d28ff0ef          	jal	80000f08 <HW_set_8bit_reg>
    }
}
800019e4:	00000013          	nop
800019e8:	01c12083          	lw	ra,28(sp)
800019ec:	01812403          	lw	s0,24(sp)
800019f0:	02010113          	addi	sp,sp,32
800019f4:	00008067          	ret

800019f8 <SPI_configure_master_mode>:
 */
void SPI_configure_master_mode
(
	spi_instance_t * this_spi
)
{
800019f8:	fe010113          	addi	sp,sp,-32
800019fc:	00112e23          	sw	ra,28(sp)
80001a00:	00812c23          	sw	s0,24(sp)
80001a04:	02010413          	addi	s0,sp,32
80001a08:	fea42623          	sw	a0,-20(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );
    
    if( NULL_INSTANCE != this_spi )
80001a0c:	fec42783          	lw	a5,-20(s0)
80001a10:	08078263          	beqz	a5,80001a94 <SPI_configure_master_mode+0x9c>
    {
		/* Disable the CoreSPI for a little while, while we configure the CoreSPI */
        HAL_set_8bit_reg_field(this_spi->base_addr, CTRL1_ENABLE, DISABLE);
80001a14:	fec42783          	lw	a5,-20(s0)
80001a18:	0007a783          	lw	a5,0(a5)
80001a1c:	00000693          	li	a3,0
80001a20:	00100613          	li	a2,1
80001a24:	00000593          	li	a1,0
80001a28:	00078513          	mv	a0,a5
80001a2c:	d4cff0ef          	jal	80000f78 <HW_set_8bit_reg_field>

        /* Reset slave transfer mode to unknown in case it has been set previously */
        this_spi->slave_xfer_mode = SPI_SLAVE_XFER_NONE;
80001a30:	fec42783          	lw	a5,-20(s0)
80001a34:	0407a423          	sw	zero,72(a5)

		/* Flush the receive and transmit FIFOs*/
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80001a38:	fec42783          	lw	a5,-20(s0)
80001a3c:	0007a783          	lw	a5,0(a5)
80001a40:	01c78793          	addi	a5,a5,28
80001a44:	00300593          	li	a1,3
80001a48:	00078513          	mv	a0,a5
80001a4c:	cbcff0ef          	jal	80000f08 <HW_set_8bit_reg>

        /* Clear all interrupts */
        HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
80001a50:	fec42783          	lw	a5,-20(s0)
80001a54:	0007a783          	lw	a5,0(a5)
80001a58:	00478793          	addi	a5,a5,4
80001a5c:	0ff00593          	li	a1,255
80001a60:	00078513          	mv	a0,a5
80001a64:	ca4ff0ef          	jal	80000f08 <HW_set_8bit_reg>

        /* Ensure RXAVAIL, TXRFM, SSEND and CMDINT are disabled */
        HAL_set_8bit_reg( this_spi->base_addr, CTRL2, 0u );
80001a68:	fec42783          	lw	a5,-20(s0)
80001a6c:	0007a783          	lw	a5,0(a5)
80001a70:	01878793          	addi	a5,a5,24
80001a74:	00000593          	li	a1,0
80001a78:	00078513          	mv	a0,a5
80001a7c:	c8cff0ef          	jal	80000f08 <HW_set_8bit_reg>

        /* Enable the CoreSPI in master mode with TXUNDERRUN, RXOVFLOW and TXDONE interrupts disabled */
		HAL_set_8bit_reg( this_spi->base_addr, CTRL1, ENABLE | CTRL1_MASTER_MASK );
80001a80:	fec42783          	lw	a5,-20(s0)
80001a84:	0007a783          	lw	a5,0(a5)
80001a88:	00300593          	li	a1,3
80001a8c:	00078513          	mv	a0,a5
80001a90:	c78ff0ef          	jal	80000f08 <HW_set_8bit_reg>
    }
}
80001a94:	00000013          	nop
80001a98:	01c12083          	lw	ra,28(sp)
80001a9c:	01812403          	lw	s0,24(sp)
80001aa0:	02010113          	addi	sp,sp,32
80001aa4:	00008067          	ret

80001aa8 <SPI_set_slave_select>:
void SPI_set_slave_select
(
	spi_instance_t * this_spi,
	spi_slave_t slave
)
{
80001aa8:	fd010113          	addi	sp,sp,-48
80001aac:	02112623          	sw	ra,44(sp)
80001ab0:	02812423          	sw	s0,40(sp)
80001ab4:	03010413          	addi	s0,sp,48
80001ab8:	fca42e23          	sw	a0,-36(s0)
80001abc:	fcb42c23          	sw	a1,-40(s0)
    spi_slave_t temp = (spi_slave_t)(0x00u) ;
80001ac0:	fe042623          	sw	zero,-20(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( SPI_MAX_NB_OF_SLAVES > slave );
    
    if( ( NULL_INSTANCE != this_spi ) && ( SPI_MAX_NB_OF_SLAVES > slave ) )
80001ac4:	fdc42783          	lw	a5,-36(s0)
80001ac8:	0a078663          	beqz	a5,80001b74 <SPI_set_slave_select+0xcc>
80001acc:	fd842703          	lw	a4,-40(s0)
80001ad0:	00700793          	li	a5,7
80001ad4:	0ae7e063          	bltu	a5,a4,80001b74 <SPI_set_slave_select+0xcc>
    {
        /* This function is only intended to be used with an SPI master */
        if( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
80001ad8:	fdc42783          	lw	a5,-36(s0)
80001adc:	0007a783          	lw	a5,0(a5)
80001ae0:	00200613          	li	a2,2
80001ae4:	00100593          	li	a1,1
80001ae8:	00078513          	mv	a0,a5
80001aec:	d1cff0ef          	jal	80001008 <HW_get_8bit_reg_field>
80001af0:	00050793          	mv	a5,a0
80001af4:	08078063          	beqz	a5,80001b74 <SPI_set_slave_select+0xcc>
        {
            /* Recover from receiver overflow because of previous slave */
            if( ENABLE == HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXOVFLOW ) )
80001af8:	fdc42783          	lw	a5,-36(s0)
80001afc:	0007a783          	lw	a5,0(a5)
80001b00:	02078793          	addi	a5,a5,32
80001b04:	01000613          	li	a2,16
80001b08:	00400593          	li	a1,4
80001b0c:	00078513          	mv	a0,a5
80001b10:	cf8ff0ef          	jal	80001008 <HW_get_8bit_reg_field>
80001b14:	00050793          	mv	a5,a0
80001b18:	00078713          	mv	a4,a5
80001b1c:	00100793          	li	a5,1
80001b20:	00f71663          	bne	a4,a5,80001b2c <SPI_set_slave_select+0x84>
            {
                 recover_from_rx_overflow( this_spi );
80001b24:	fdc42503          	lw	a0,-36(s0)
80001b28:	10d010ef          	jal	80003434 <recover_from_rx_overflow>
            }
            /* Set the correct slave select bit */
            temp = (spi_slave_t)( HAL_get_8bit_reg( this_spi->base_addr, SSEL ) | ((uint32_t)1u << (uint32_t)slave) );
80001b2c:	fdc42783          	lw	a5,-36(s0)
80001b30:	0007a783          	lw	a5,0(a5)
80001b34:	02478793          	addi	a5,a5,36
80001b38:	00078513          	mv	a0,a5
80001b3c:	c08ff0ef          	jal	80000f44 <HW_get_8bit_reg>
80001b40:	00050793          	mv	a5,a0
80001b44:	00078693          	mv	a3,a5
80001b48:	00100713          	li	a4,1
80001b4c:	fd842783          	lw	a5,-40(s0)
80001b50:	00f717b3          	sll	a5,a4,a5
80001b54:	00f6e7b3          	or	a5,a3,a5
80001b58:	fef42623          	sw	a5,-20(s0)
            HAL_set_8bit_reg( this_spi->base_addr, SSEL, (uint_fast8_t)temp );
80001b5c:	fdc42783          	lw	a5,-36(s0)
80001b60:	0007a783          	lw	a5,0(a5)
80001b64:	02478793          	addi	a5,a5,36
80001b68:	fec42583          	lw	a1,-20(s0)
80001b6c:	00078513          	mv	a0,a5
80001b70:	b98ff0ef          	jal	80000f08 <HW_set_8bit_reg>
        }
    }
}
80001b74:	00000013          	nop
80001b78:	02c12083          	lw	ra,44(sp)
80001b7c:	02812403          	lw	s0,40(sp)
80001b80:	03010113          	addi	sp,sp,48
80001b84:	00008067          	ret

80001b88 <SPI_clear_slave_select>:
void SPI_clear_slave_select
(
	spi_instance_t * this_spi,
	spi_slave_t slave
)
{
80001b88:	fd010113          	addi	sp,sp,-48
80001b8c:	02112623          	sw	ra,44(sp)
80001b90:	02812423          	sw	s0,40(sp)
80001b94:	03010413          	addi	s0,sp,48
80001b98:	fca42e23          	sw	a0,-36(s0)
80001b9c:	fcb42c23          	sw	a1,-40(s0)
    spi_slave_t temp = (spi_slave_t) (0x00u) ;
80001ba0:	fe042623          	sw	zero,-20(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( SPI_MAX_NB_OF_SLAVES > slave );
    
    if( ( NULL_INSTANCE != this_spi ) && ( SPI_MAX_NB_OF_SLAVES > slave ) )
80001ba4:	fdc42783          	lw	a5,-36(s0)
80001ba8:	0a078863          	beqz	a5,80001c58 <SPI_clear_slave_select+0xd0>
80001bac:	fd842703          	lw	a4,-40(s0)
80001bb0:	00700793          	li	a5,7
80001bb4:	0ae7e263          	bltu	a5,a4,80001c58 <SPI_clear_slave_select+0xd0>
    {
        /* This function is only intended to be used with an SPI master. */
        if( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
80001bb8:	fdc42783          	lw	a5,-36(s0)
80001bbc:	0007a783          	lw	a5,0(a5)
80001bc0:	00200613          	li	a2,2
80001bc4:	00100593          	li	a1,1
80001bc8:	00078513          	mv	a0,a5
80001bcc:	c3cff0ef          	jal	80001008 <HW_get_8bit_reg_field>
80001bd0:	00050793          	mv	a5,a0
80001bd4:	08078263          	beqz	a5,80001c58 <SPI_clear_slave_select+0xd0>
        {
            /* Recover from receiver overflow because of previous slave */
            if( ENABLE == HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXOVFLOW) )
80001bd8:	fdc42783          	lw	a5,-36(s0)
80001bdc:	0007a783          	lw	a5,0(a5)
80001be0:	02078793          	addi	a5,a5,32
80001be4:	01000613          	li	a2,16
80001be8:	00400593          	li	a1,4
80001bec:	00078513          	mv	a0,a5
80001bf0:	c18ff0ef          	jal	80001008 <HW_get_8bit_reg_field>
80001bf4:	00050793          	mv	a5,a0
80001bf8:	00078713          	mv	a4,a5
80001bfc:	00100793          	li	a5,1
80001c00:	00f71663          	bne	a4,a5,80001c0c <SPI_clear_slave_select+0x84>
            {
                 recover_from_rx_overflow( this_spi );
80001c04:	fdc42503          	lw	a0,-36(s0)
80001c08:	02d010ef          	jal	80003434 <recover_from_rx_overflow>
            }
            /* Clear the correct slave select bit */
            temp = (spi_slave_t)( HAL_get_8bit_reg( this_spi->base_addr, SSEL ) & ~((uint32_t)1u << (uint32_t)slave) );
80001c0c:	fdc42783          	lw	a5,-36(s0)
80001c10:	0007a783          	lw	a5,0(a5)
80001c14:	02478793          	addi	a5,a5,36
80001c18:	00078513          	mv	a0,a5
80001c1c:	b28ff0ef          	jal	80000f44 <HW_get_8bit_reg>
80001c20:	00050793          	mv	a5,a0
80001c24:	00078693          	mv	a3,a5
80001c28:	00100713          	li	a4,1
80001c2c:	fd842783          	lw	a5,-40(s0)
80001c30:	00f717b3          	sll	a5,a4,a5
80001c34:	fff7c793          	not	a5,a5
80001c38:	00f6f7b3          	and	a5,a3,a5
80001c3c:	fef42623          	sw	a5,-20(s0)
            HAL_set_8bit_reg( this_spi->base_addr, SSEL, (uint_fast8_t)temp ) ;
80001c40:	fdc42783          	lw	a5,-36(s0)
80001c44:	0007a783          	lw	a5,0(a5)
80001c48:	02478793          	addi	a5,a5,36
80001c4c:	fec42583          	lw	a1,-20(s0)
80001c50:	00078513          	mv	a0,a5
80001c54:	ab4ff0ef          	jal	80000f08 <HW_set_8bit_reg>
        }
    }
}
80001c58:	00000013          	nop
80001c5c:	02c12083          	lw	ra,44(sp)
80001c60:	02812403          	lw	s0,40(sp)
80001c64:	03010113          	addi	sp,sp,48
80001c68:	00008067          	ret

80001c6c <SPI_transfer_frame>:
uint32_t SPI_transfer_frame
(
    spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
80001c6c:	fd010113          	addi	sp,sp,-48
80001c70:	02112623          	sw	ra,44(sp)
80001c74:	02812423          	sw	s0,40(sp)
80001c78:	03010413          	addi	s0,sp,48
80001c7c:	fca42e23          	sw	a0,-36(s0)
80001c80:	fcb42c23          	sw	a1,-40(s0)
    volatile uint32_t rx_data = 0u; /* Ensure consistent return value if in slave mode */
80001c84:	fe042623          	sw	zero,-20(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
80001c88:	fdc42783          	lw	a5,-36(s0)
80001c8c:	0a078063          	beqz	a5,80001d2c <SPI_transfer_frame+0xc0>
    {
		/* This function is only intended to be used with an SPI master. */
		if( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
80001c90:	fdc42783          	lw	a5,-36(s0)
80001c94:	0007a783          	lw	a5,0(a5)
80001c98:	00200613          	li	a2,2
80001c9c:	00100593          	li	a1,1
80001ca0:	00078513          	mv	a0,a5
80001ca4:	b64ff0ef          	jal	80001008 <HW_get_8bit_reg_field>
80001ca8:	00050793          	mv	a5,a0
80001cac:	08078063          	beqz	a5,80001d2c <SPI_transfer_frame+0xc0>
		{
			/* Flush the receive and transmit FIFOs by resetting both */
			HAL_set_8bit_reg(this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK);
80001cb0:	fdc42783          	lw	a5,-36(s0)
80001cb4:	0007a783          	lw	a5,0(a5)
80001cb8:	01c78793          	addi	a5,a5,28
80001cbc:	00300593          	li	a1,3
80001cc0:	00078513          	mv	a0,a5
80001cc4:	a44ff0ef          	jal	80000f08 <HW_set_8bit_reg>

			/* Send frame. */
			HAL_set_32bit_reg( this_spi->base_addr, TXLAST, tx_bits );
80001cc8:	fdc42783          	lw	a5,-36(s0)
80001ccc:	0007a783          	lw	a5,0(a5)
80001cd0:	02878793          	addi	a5,a5,40
80001cd4:	fd842583          	lw	a1,-40(s0)
80001cd8:	00078513          	mv	a0,a5
80001cdc:	f81fe0ef          	jal	80000c5c <HW_set_32bit_reg>

			/* Wait for frame Tx to complete. */
			while ( ENABLE != HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_DONE ) )
80001ce0:	00000013          	nop
80001ce4:	fdc42783          	lw	a5,-36(s0)
80001ce8:	0007a783          	lw	a5,0(a5)
80001cec:	02078793          	addi	a5,a5,32
80001cf0:	00200613          	li	a2,2
80001cf4:	00100593          	li	a1,1
80001cf8:	00078513          	mv	a0,a5
80001cfc:	b0cff0ef          	jal	80001008 <HW_get_8bit_reg_field>
80001d00:	00050793          	mv	a5,a0
80001d04:	00078713          	mv	a4,a5
80001d08:	00100793          	li	a5,1
80001d0c:	fcf71ce3          	bne	a4,a5,80001ce4 <SPI_transfer_frame+0x78>
			{
				;
			}

			/* Read received frame. */
			rx_data = HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80001d10:	fdc42783          	lw	a5,-36(s0)
80001d14:	0007a783          	lw	a5,0(a5)
80001d18:	00878793          	addi	a5,a5,8
80001d1c:	00078513          	mv	a0,a5
80001d20:	f75fe0ef          	jal	80000c94 <HW_get_32bit_reg>
80001d24:	00050793          	mv	a5,a0
80001d28:	fef42623          	sw	a5,-20(s0)
		}
    }

    /* Finally, return the frame we received from the slave or 0 */
    return( rx_data );
80001d2c:	fec42783          	lw	a5,-20(s0)
}
80001d30:	00078513          	mv	a0,a5
80001d34:	02c12083          	lw	ra,44(sp)
80001d38:	02812403          	lw	s0,40(sp)
80001d3c:	03010113          	addi	sp,sp,48
80001d40:	00008067          	ret

80001d44 <SPI_transfer_block>:
    const uint8_t * cmd_buffer,
    uint16_t cmd_byte_size,
    uint8_t * rx_buffer,
    uint16_t rx_byte_size
)
{
80001d44:	fd010113          	addi	sp,sp,-48
80001d48:	02112623          	sw	ra,44(sp)
80001d4c:	02812423          	sw	s0,40(sp)
80001d50:	02912223          	sw	s1,36(sp)
80001d54:	03010413          	addi	s0,sp,48
80001d58:	fca42e23          	sw	a0,-36(s0)
80001d5c:	fcb42c23          	sw	a1,-40(s0)
80001d60:	fcd42823          	sw	a3,-48(s0)
80001d64:	00070793          	mv	a5,a4
80001d68:	fcc41b23          	sh	a2,-42(s0)
80001d6c:	fcf41a23          	sh	a5,-44(s0)
    uint32_t transfer_size = 0U;   /* Total number of bytes to  transfer. */
80001d70:	fe042223          	sw	zero,-28(s0)
    uint16_t transfer_idx = 0U;    /* Number of bytes transferred so far */
80001d74:	fe041723          	sh	zero,-18(s0)
    uint16_t tx_idx = 0u;          /* Number of valid data bytes sent */
80001d78:	fe041623          	sh	zero,-20(s0)
    uint16_t rx_idx = 0u;          /* Number of valid response bytes received */
80001d7c:	fe041523          	sh	zero,-22(s0)
    uint16_t transit = 0U;         /* Number of bytes "in flight" to avoid FIFO errors */
80001d80:	fe041423          	sh	zero,-24(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
80001d84:	fdc42783          	lw	a5,-36(s0)
80001d88:	56078663          	beqz	a5,800022f4 <SPI_transfer_block+0x5b0>
    {
        /* This function is only intended to be used with an SPI master. */
        if( ( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) ) &&
80001d8c:	fdc42783          	lw	a5,-36(s0)
80001d90:	0007a783          	lw	a5,0(a5)
80001d94:	00200613          	li	a2,2
80001d98:	00100593          	li	a1,1
80001d9c:	00078513          	mv	a0,a5
80001da0:	a68ff0ef          	jal	80001008 <HW_get_8bit_reg_field>
80001da4:	00050793          	mv	a5,a0
80001da8:	54078663          	beqz	a5,800022f4 <SPI_transfer_block+0x5b0>
        	/* Check for empty transfer as well */
            ( 0u != ( (uint32_t)cmd_byte_size + (uint32_t)rx_byte_size ) ) )
80001dac:	fd645703          	lhu	a4,-42(s0)
80001db0:	fd445783          	lhu	a5,-44(s0)
80001db4:	00f707b3          	add	a5,a4,a5
        if( ( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) ) &&
80001db8:	52078e63          	beqz	a5,800022f4 <SPI_transfer_block+0x5b0>
            /*
             * tansfer_size is one less than the real amount as we have to write
             * the last frame separately to trigger the slave deselect in case
             * the SPS option is in place.
             */
            transfer_size = ( (uint32_t)cmd_byte_size + (uint32_t)rx_byte_size ) - 1u;
80001dbc:	fd645703          	lhu	a4,-42(s0)
80001dc0:	fd445783          	lhu	a5,-44(s0)
80001dc4:	00f707b3          	add	a5,a4,a5
80001dc8:	fff78793          	addi	a5,a5,-1
80001dcc:	fef42223          	sw	a5,-28(s0)
            /* Flush the receive and transmit FIFOs */
            HAL_set_8bit_reg(this_spi->base_addr, CMD, (uint32_t)(CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK ));
80001dd0:	fdc42783          	lw	a5,-36(s0)
80001dd4:	0007a783          	lw	a5,0(a5)
80001dd8:	01c78793          	addi	a5,a5,28
80001ddc:	00300593          	li	a1,3
80001de0:	00078513          	mv	a0,a5
80001de4:	924ff0ef          	jal	80000f08 <HW_set_8bit_reg>

            /* Recover from receiver overflow because of previous slave */
			if( ENABLE == HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXOVFLOW) )
80001de8:	fdc42783          	lw	a5,-36(s0)
80001dec:	0007a783          	lw	a5,0(a5)
80001df0:	02078793          	addi	a5,a5,32
80001df4:	01000613          	li	a2,16
80001df8:	00400593          	li	a1,4
80001dfc:	00078513          	mv	a0,a5
80001e00:	a08ff0ef          	jal	80001008 <HW_get_8bit_reg_field>
80001e04:	00050793          	mv	a5,a0
80001e08:	00078713          	mv	a4,a5
80001e0c:	00100793          	li	a5,1
80001e10:	00f71663          	bne	a4,a5,80001e1c <SPI_transfer_block+0xd8>
			{
				 recover_from_rx_overflow( this_spi );
80001e14:	fdc42503          	lw	a0,-36(s0)
80001e18:	61c010ef          	jal	80003434 <recover_from_rx_overflow>
			}

			/* Disable the Core SPI for a little bit, while we load the TX FIFO */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80001e1c:	fdc42783          	lw	a5,-36(s0)
80001e20:	0007a783          	lw	a5,0(a5)
80001e24:	00000693          	li	a3,0
80001e28:	00100613          	li	a2,1
80001e2c:	00000593          	li	a1,0
80001e30:	00078513          	mv	a0,a5
80001e34:	944ff0ef          	jal	80000f78 <HW_set_8bit_reg_field>

	        while( ( tx_idx < transfer_size ) && ( tx_idx < this_spi->fifo_depth ) )
80001e38:	06c0006f          	j	80001ea4 <SPI_transfer_block+0x160>
	        {
	            if( tx_idx < cmd_byte_size )
80001e3c:	fec45703          	lhu	a4,-20(s0)
80001e40:	fd645783          	lhu	a5,-42(s0)
80001e44:	02f77863          	bleu	a5,a4,80001e74 <SPI_transfer_block+0x130>
	            {
	            	/* Push out valid data */
					HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)cmd_buffer[tx_idx] );
80001e48:	fdc42783          	lw	a5,-36(s0)
80001e4c:	0007a783          	lw	a5,0(a5)
80001e50:	00c78693          	addi	a3,a5,12
80001e54:	fec45783          	lhu	a5,-20(s0)
80001e58:	fd842703          	lw	a4,-40(s0)
80001e5c:	00f707b3          	add	a5,a4,a5
80001e60:	0007c783          	lbu	a5,0(a5)
80001e64:	00078593          	mv	a1,a5
80001e68:	00068513          	mv	a0,a3
80001e6c:	df1fe0ef          	jal	80000c5c <HW_set_32bit_reg>
80001e70:	01c0006f          	j	80001e8c <SPI_transfer_block+0x148>
	            }
	            else
	            {
					/* Push out 0s to get data back from slave */
	            	HAL_set_32bit_reg( this_spi->base_addr, TXDATA, 0U );
80001e74:	fdc42783          	lw	a5,-36(s0)
80001e78:	0007a783          	lw	a5,0(a5)
80001e7c:	00c78793          	addi	a5,a5,12
80001e80:	00000593          	li	a1,0
80001e84:	00078513          	mv	a0,a5
80001e88:	dd5fe0ef          	jal	80000c5c <HW_set_32bit_reg>
	            }
	            ++transit;
80001e8c:	fe845783          	lhu	a5,-24(s0)
80001e90:	00178793          	addi	a5,a5,1
80001e94:	fef41423          	sh	a5,-24(s0)
	            ++tx_idx;
80001e98:	fec45783          	lhu	a5,-20(s0)
80001e9c:	00178793          	addi	a5,a5,1
80001ea0:	fef41623          	sh	a5,-20(s0)
	        while( ( tx_idx < transfer_size ) && ( tx_idx < this_spi->fifo_depth ) )
80001ea4:	fec45703          	lhu	a4,-20(s0)
80001ea8:	fe442783          	lw	a5,-28(s0)
80001eac:	00f77a63          	bleu	a5,a4,80001ec0 <SPI_transfer_block+0x17c>
80001eb0:	fdc42783          	lw	a5,-36(s0)
80001eb4:	0447d783          	lhu	a5,68(a5)
80001eb8:	fec45703          	lhu	a4,-20(s0)
80001ebc:	f8f760e3          	bltu	a4,a5,80001e3c <SPI_transfer_block+0xf8>
	        }

	        /* If room left to put last frame in before the off, then do it */
	        if( ( tx_idx == transfer_size ) && ( tx_idx < this_spi->fifo_depth ) )
80001ec0:	fec45703          	lhu	a4,-20(s0)
80001ec4:	fe442783          	lw	a5,-28(s0)
80001ec8:	06f71e63          	bne	a4,a5,80001f44 <SPI_transfer_block+0x200>
80001ecc:	fdc42783          	lw	a5,-36(s0)
80001ed0:	0447d783          	lhu	a5,68(a5)
80001ed4:	fec45703          	lhu	a4,-20(s0)
80001ed8:	06f77663          	bleu	a5,a4,80001f44 <SPI_transfer_block+0x200>
	        {
	            if( tx_idx < cmd_byte_size )
80001edc:	fec45703          	lhu	a4,-20(s0)
80001ee0:	fd645783          	lhu	a5,-42(s0)
80001ee4:	02f77863          	bleu	a5,a4,80001f14 <SPI_transfer_block+0x1d0>
	            {
	            	/* Push out valid data, not expecting any reply this time */
					HAL_set_32bit_reg( this_spi->base_addr, TXLAST, (uint32_t)cmd_buffer[tx_idx] );
80001ee8:	fdc42783          	lw	a5,-36(s0)
80001eec:	0007a783          	lw	a5,0(a5)
80001ef0:	02878693          	addi	a3,a5,40
80001ef4:	fec45783          	lhu	a5,-20(s0)
80001ef8:	fd842703          	lw	a4,-40(s0)
80001efc:	00f707b3          	add	a5,a4,a5
80001f00:	0007c783          	lbu	a5,0(a5)
80001f04:	00078593          	mv	a1,a5
80001f08:	00068513          	mv	a0,a3
80001f0c:	d51fe0ef          	jal	80000c5c <HW_set_32bit_reg>
80001f10:	01c0006f          	j	80001f2c <SPI_transfer_block+0x1e8>
	            }
	            else
	            {
					/* Push out last 0 to get data back from slave */
					HAL_set_32bit_reg( this_spi->base_addr, TXLAST, 0U );
80001f14:	fdc42783          	lw	a5,-36(s0)
80001f18:	0007a783          	lw	a5,0(a5)
80001f1c:	02878793          	addi	a5,a5,40
80001f20:	00000593          	li	a1,0
80001f24:	00078513          	mv	a0,a5
80001f28:	d35fe0ef          	jal	80000c5c <HW_set_32bit_reg>
	            }

		        ++transit;
80001f2c:	fe845783          	lhu	a5,-24(s0)
80001f30:	00178793          	addi	a5,a5,1
80001f34:	fef41423          	sh	a5,-24(s0)
		        ++tx_idx;
80001f38:	fec45783          	lhu	a5,-20(s0)
80001f3c:	00178793          	addi	a5,a5,1
80001f40:	fef41623          	sh	a5,-20(s0)
	        }

			/* FIFO is all loaded up so enable Core SPI to start transfer */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
80001f44:	fdc42783          	lw	a5,-36(s0)
80001f48:	0007a783          	lw	a5,0(a5)
80001f4c:	00100693          	li	a3,1
80001f50:	00100613          	li	a2,1
80001f54:	00000593          	li	a1,0
80001f58:	00078513          	mv	a0,a5
80001f5c:	81cff0ef          	jal	80000f78 <HW_set_8bit_reg_field>
		     *
		     * First stage transfers remaining command bytes (if any).
		     * At this stage anything in the RX FIFO can be discarded as it is
		     * not part of a valid response.
		     */
		    while( tx_idx < cmd_byte_size )
80001f60:	0dc0006f          	j	8000203c <SPI_transfer_block+0x2f8>
		    {
		        if( transit < this_spi->fifo_depth )
80001f64:	fdc42783          	lw	a5,-36(s0)
80001f68:	0447d783          	lhu	a5,68(a5)
80001f6c:	fe845703          	lhu	a4,-24(s0)
80001f70:	06f77e63          	bleu	a5,a4,80001fec <SPI_transfer_block+0x2a8>
		        {
		            /* Send another byte. */
		        	if( tx_idx == transfer_size ) /* Last frame is special... */
80001f74:	fec45703          	lhu	a4,-20(s0)
80001f78:	fe442783          	lw	a5,-28(s0)
80001f7c:	02f71863          	bne	a4,a5,80001fac <SPI_transfer_block+0x268>
		        	{
			        	HAL_set_32bit_reg( this_spi->base_addr, TXLAST, (uint32_t)cmd_buffer[tx_idx] );
80001f80:	fdc42783          	lw	a5,-36(s0)
80001f84:	0007a783          	lw	a5,0(a5)
80001f88:	02878693          	addi	a3,a5,40
80001f8c:	fec45783          	lhu	a5,-20(s0)
80001f90:	fd842703          	lw	a4,-40(s0)
80001f94:	00f707b3          	add	a5,a4,a5
80001f98:	0007c783          	lbu	a5,0(a5)
80001f9c:	00078593          	mv	a1,a5
80001fa0:	00068513          	mv	a0,a3
80001fa4:	cb9fe0ef          	jal	80000c5c <HW_set_32bit_reg>
80001fa8:	02c0006f          	j	80001fd4 <SPI_transfer_block+0x290>
		        	}
		        	else
		        	{
		        		HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)cmd_buffer[tx_idx] );
80001fac:	fdc42783          	lw	a5,-36(s0)
80001fb0:	0007a783          	lw	a5,0(a5)
80001fb4:	00c78693          	addi	a3,a5,12
80001fb8:	fec45783          	lhu	a5,-20(s0)
80001fbc:	fd842703          	lw	a4,-40(s0)
80001fc0:	00f707b3          	add	a5,a4,a5
80001fc4:	0007c783          	lbu	a5,0(a5)
80001fc8:	00078593          	mv	a1,a5
80001fcc:	00068513          	mv	a0,a3
80001fd0:	c8dfe0ef          	jal	80000c5c <HW_set_32bit_reg>
		        	}
		        	++tx_idx;
80001fd4:	fec45783          	lhu	a5,-20(s0)
80001fd8:	00178793          	addi	a5,a5,1
80001fdc:	fef41623          	sh	a5,-20(s0)
		            ++transit;
80001fe0:	fe845783          	lhu	a5,-24(s0)
80001fe4:	00178793          	addi	a5,a5,1
80001fe8:	fef41423          	sh	a5,-24(s0)
		        }
				if( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80001fec:	fdc42783          	lw	a5,-36(s0)
80001ff0:	0007a783          	lw	a5,0(a5)
80001ff4:	02078793          	addi	a5,a5,32
80001ff8:	00400613          	li	a2,4
80001ffc:	00200593          	li	a1,2
80002000:	00078513          	mv	a0,a5
80002004:	804ff0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002008:	00050793          	mv	a5,a0
8000200c:	02079863          	bnez	a5,8000203c <SPI_transfer_block+0x2f8>
		        {
		            /* Read and discard. */
		        	HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80002010:	fdc42783          	lw	a5,-36(s0)
80002014:	0007a783          	lw	a5,0(a5)
80002018:	00878793          	addi	a5,a5,8
8000201c:	00078513          	mv	a0,a5
80002020:	c75fe0ef          	jal	80000c94 <HW_get_32bit_reg>
		        	++transfer_idx;
80002024:	fee45783          	lhu	a5,-18(s0)
80002028:	00178793          	addi	a5,a5,1
8000202c:	fef41723          	sh	a5,-18(s0)
		            --transit;
80002030:	fe845783          	lhu	a5,-24(s0)
80002034:	fff78793          	addi	a5,a5,-1
80002038:	fef41423          	sh	a5,-24(s0)
		    while( tx_idx < cmd_byte_size )
8000203c:	fec45703          	lhu	a4,-20(s0)
80002040:	fd645783          	lhu	a5,-42(s0)
80002044:	f2f760e3          	bltu	a4,a5,80001f64 <SPI_transfer_block+0x220>
		    /*
		     * Now, we are writing dummy bytes to push through the response from
		     * the slave but we still have to keep discarding any read data that
		     * corresponds with one of our command bytes.
		     */
		    while( transfer_idx < cmd_byte_size )
80002048:	0a00006f          	j	800020e8 <SPI_transfer_block+0x3a4>
		    {
		        if( transit < this_spi->fifo_depth )
8000204c:	fdc42783          	lw	a5,-36(s0)
80002050:	0447d783          	lhu	a5,68(a5)
80002054:	fe845703          	lhu	a4,-24(s0)
80002058:	04f77063          	bleu	a5,a4,80002098 <SPI_transfer_block+0x354>
		        {
		            if( tx_idx < transfer_size )
8000205c:	fec45703          	lhu	a4,-20(s0)
80002060:	fe442783          	lw	a5,-28(s0)
80002064:	02f77a63          	bleu	a5,a4,80002098 <SPI_transfer_block+0x354>
		            {
						HAL_set_32bit_reg( this_spi->base_addr, TXDATA, 0U );
80002068:	fdc42783          	lw	a5,-36(s0)
8000206c:	0007a783          	lw	a5,0(a5)
80002070:	00c78793          	addi	a5,a5,12
80002074:	00000593          	li	a1,0
80002078:	00078513          	mv	a0,a5
8000207c:	be1fe0ef          	jal	80000c5c <HW_set_32bit_reg>
						++tx_idx;
80002080:	fec45783          	lhu	a5,-20(s0)
80002084:	00178793          	addi	a5,a5,1
80002088:	fef41623          	sh	a5,-20(s0)
						++transit;
8000208c:	fe845783          	lhu	a5,-24(s0)
80002090:	00178793          	addi	a5,a5,1
80002094:	fef41423          	sh	a5,-24(s0)
		            }
		        }
				if( !HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXEMPTY ) )
80002098:	fdc42783          	lw	a5,-36(s0)
8000209c:	0007a783          	lw	a5,0(a5)
800020a0:	02078793          	addi	a5,a5,32
800020a4:	00400613          	li	a2,4
800020a8:	00200593          	li	a1,2
800020ac:	00078513          	mv	a0,a5
800020b0:	f59fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
800020b4:	00050793          	mv	a5,a0
800020b8:	02079863          	bnez	a5,800020e8 <SPI_transfer_block+0x3a4>
		        {
		            /* Read and discard. */
		        	HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
800020bc:	fdc42783          	lw	a5,-36(s0)
800020c0:	0007a783          	lw	a5,0(a5)
800020c4:	00878793          	addi	a5,a5,8
800020c8:	00078513          	mv	a0,a5
800020cc:	bc9fe0ef          	jal	80000c94 <HW_get_32bit_reg>
		        	++transfer_idx;
800020d0:	fee45783          	lhu	a5,-18(s0)
800020d4:	00178793          	addi	a5,a5,1
800020d8:	fef41723          	sh	a5,-18(s0)
		            --transit;
800020dc:	fe845783          	lhu	a5,-24(s0)
800020e0:	fff78793          	addi	a5,a5,-1
800020e4:	fef41423          	sh	a5,-24(s0)
		    while( transfer_idx < cmd_byte_size )
800020e8:	fee45703          	lhu	a4,-18(s0)
800020ec:	fd645783          	lhu	a5,-42(s0)
800020f0:	f4f76ee3          	bltu	a4,a5,8000204c <SPI_transfer_block+0x308>
		    }
		    /*
		     * Now we are now only sending dummy data to push through the
		     * valid response data which we store in the response buffer.
		     */
		    while( tx_idx < transfer_size )
800020f4:	0b80006f          	j	800021ac <SPI_transfer_block+0x468>
		    {
		        if( transit < this_spi->fifo_depth )
800020f8:	fdc42783          	lw	a5,-36(s0)
800020fc:	0447d783          	lhu	a5,68(a5)
80002100:	fe845703          	lhu	a4,-24(s0)
80002104:	02f77a63          	bleu	a5,a4,80002138 <SPI_transfer_block+0x3f4>
		        {
					HAL_set_32bit_reg( this_spi->base_addr, TXDATA, 0U );
80002108:	fdc42783          	lw	a5,-36(s0)
8000210c:	0007a783          	lw	a5,0(a5)
80002110:	00c78793          	addi	a5,a5,12
80002114:	00000593          	li	a1,0
80002118:	00078513          	mv	a0,a5
8000211c:	b41fe0ef          	jal	80000c5c <HW_set_32bit_reg>
					++tx_idx;
80002120:	fec45783          	lhu	a5,-20(s0)
80002124:	00178793          	addi	a5,a5,1
80002128:	fef41623          	sh	a5,-20(s0)
					++transit;
8000212c:	fe845783          	lhu	a5,-24(s0)
80002130:	00178793          	addi	a5,a5,1
80002134:	fef41423          	sh	a5,-24(s0)
		        }
				if( !HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXEMPTY ) )
80002138:	fdc42783          	lw	a5,-36(s0)
8000213c:	0007a783          	lw	a5,0(a5)
80002140:	02078793          	addi	a5,a5,32
80002144:	00400613          	li	a2,4
80002148:	00200593          	li	a1,2
8000214c:	00078513          	mv	a0,a5
80002150:	eb9fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002154:	00050793          	mv	a5,a0
80002158:	04079a63          	bnez	a5,800021ac <SPI_transfer_block+0x468>
		        {
		            /* Process received byte. */
					rx_buffer[rx_idx] = (uint8_t)HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
8000215c:	fea45783          	lhu	a5,-22(s0)
80002160:	fd042703          	lw	a4,-48(s0)
80002164:	00f704b3          	add	s1,a4,a5
80002168:	fdc42783          	lw	a5,-36(s0)
8000216c:	0007a783          	lw	a5,0(a5)
80002170:	00878793          	addi	a5,a5,8
80002174:	00078513          	mv	a0,a5
80002178:	b1dfe0ef          	jal	80000c94 <HW_get_32bit_reg>
8000217c:	00050793          	mv	a5,a0
80002180:	0ff7f793          	andi	a5,a5,255
80002184:	00f48023          	sb	a5,0(s1)
					++rx_idx;
80002188:	fea45783          	lhu	a5,-22(s0)
8000218c:	00178793          	addi	a5,a5,1
80002190:	fef41523          	sh	a5,-22(s0)
		            ++transfer_idx;
80002194:	fee45783          	lhu	a5,-18(s0)
80002198:	00178793          	addi	a5,a5,1
8000219c:	fef41723          	sh	a5,-18(s0)
		            --transit;
800021a0:	fe845783          	lhu	a5,-24(s0)
800021a4:	fff78793          	addi	a5,a5,-1
800021a8:	fef41423          	sh	a5,-24(s0)
		    while( tx_idx < transfer_size )
800021ac:	fec45703          	lhu	a4,-20(s0)
800021b0:	fe442783          	lw	a5,-28(s0)
800021b4:	f4f762e3          	bltu	a4,a5,800020f8 <SPI_transfer_block+0x3b4>
		        }
		    }
		    /* If we still need to send the last frame */
	        while( tx_idx == transfer_size )
800021b8:	0b80006f          	j	80002270 <SPI_transfer_block+0x52c>
	        {
		        if( transit < this_spi->fifo_depth )
800021bc:	fdc42783          	lw	a5,-36(s0)
800021c0:	0447d783          	lhu	a5,68(a5)
800021c4:	fe845703          	lhu	a4,-24(s0)
800021c8:	02f77a63          	bleu	a5,a4,800021fc <SPI_transfer_block+0x4b8>
		        {
					HAL_set_32bit_reg( this_spi->base_addr, TXLAST, 0U );
800021cc:	fdc42783          	lw	a5,-36(s0)
800021d0:	0007a783          	lw	a5,0(a5)
800021d4:	02878793          	addi	a5,a5,40
800021d8:	00000593          	li	a1,0
800021dc:	00078513          	mv	a0,a5
800021e0:	a7dfe0ef          	jal	80000c5c <HW_set_32bit_reg>
					++tx_idx;
800021e4:	fec45783          	lhu	a5,-20(s0)
800021e8:	00178793          	addi	a5,a5,1
800021ec:	fef41623          	sh	a5,-20(s0)
					++transit;
800021f0:	fe845783          	lhu	a5,-24(s0)
800021f4:	00178793          	addi	a5,a5,1
800021f8:	fef41423          	sh	a5,-24(s0)
		        }
				if( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
800021fc:	fdc42783          	lw	a5,-36(s0)
80002200:	0007a783          	lw	a5,0(a5)
80002204:	02078793          	addi	a5,a5,32
80002208:	00400613          	li	a2,4
8000220c:	00200593          	li	a1,2
80002210:	00078513          	mv	a0,a5
80002214:	df5fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002218:	00050793          	mv	a5,a0
8000221c:	04079a63          	bnez	a5,80002270 <SPI_transfer_block+0x52c>
		        {
		            /* Process received byte. */
					rx_buffer[rx_idx] = (uint8_t)HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80002220:	fea45783          	lhu	a5,-22(s0)
80002224:	fd042703          	lw	a4,-48(s0)
80002228:	00f704b3          	add	s1,a4,a5
8000222c:	fdc42783          	lw	a5,-36(s0)
80002230:	0007a783          	lw	a5,0(a5)
80002234:	00878793          	addi	a5,a5,8
80002238:	00078513          	mv	a0,a5
8000223c:	a59fe0ef          	jal	80000c94 <HW_get_32bit_reg>
80002240:	00050793          	mv	a5,a0
80002244:	0ff7f793          	andi	a5,a5,255
80002248:	00f48023          	sb	a5,0(s1)
					++rx_idx;
8000224c:	fea45783          	lhu	a5,-22(s0)
80002250:	00178793          	addi	a5,a5,1
80002254:	fef41523          	sh	a5,-22(s0)
		            ++transfer_idx;
80002258:	fee45783          	lhu	a5,-18(s0)
8000225c:	00178793          	addi	a5,a5,1
80002260:	fef41723          	sh	a5,-18(s0)
		            --transit;
80002264:	fe845783          	lhu	a5,-24(s0)
80002268:	fff78793          	addi	a5,a5,-1
8000226c:	fef41423          	sh	a5,-24(s0)
	        while( tx_idx == transfer_size )
80002270:	fec45703          	lhu	a4,-20(s0)
80002274:	fe442783          	lw	a5,-28(s0)
80002278:	f4f702e3          	beq	a4,a5,800021bc <SPI_transfer_block+0x478>
	        }
		    /*
		     * Finally, we are now finished sending data and are only reading
		     * valid response data which we store in the response buffer.
		     */
		    while( transfer_idx <= transfer_size )
8000227c:	06c0006f          	j	800022e8 <SPI_transfer_block+0x5a4>
		    {
				if( !HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXEMPTY ) )
80002280:	fdc42783          	lw	a5,-36(s0)
80002284:	0007a783          	lw	a5,0(a5)
80002288:	02078793          	addi	a5,a5,32
8000228c:	00400613          	li	a2,4
80002290:	00200593          	li	a1,2
80002294:	00078513          	mv	a0,a5
80002298:	d71fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
8000229c:	00050793          	mv	a5,a0
800022a0:	04079463          	bnez	a5,800022e8 <SPI_transfer_block+0x5a4>
		        {
		            /* Process received byte. */
					rx_buffer[rx_idx] = (uint8_t)HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
800022a4:	fea45783          	lhu	a5,-22(s0)
800022a8:	fd042703          	lw	a4,-48(s0)
800022ac:	00f704b3          	add	s1,a4,a5
800022b0:	fdc42783          	lw	a5,-36(s0)
800022b4:	0007a783          	lw	a5,0(a5)
800022b8:	00878793          	addi	a5,a5,8
800022bc:	00078513          	mv	a0,a5
800022c0:	9d5fe0ef          	jal	80000c94 <HW_get_32bit_reg>
800022c4:	00050793          	mv	a5,a0
800022c8:	0ff7f793          	andi	a5,a5,255
800022cc:	00f48023          	sb	a5,0(s1)
					++rx_idx;
800022d0:	fea45783          	lhu	a5,-22(s0)
800022d4:	00178793          	addi	a5,a5,1
800022d8:	fef41523          	sh	a5,-22(s0)
		            ++transfer_idx;
800022dc:	fee45783          	lhu	a5,-18(s0)
800022e0:	00178793          	addi	a5,a5,1
800022e4:	fef41723          	sh	a5,-18(s0)
		    while( transfer_idx <= transfer_size )
800022e8:	fee45703          	lhu	a4,-18(s0)
800022ec:	fe442783          	lw	a5,-28(s0)
800022f0:	f8e7f8e3          	bleu	a4,a5,80002280 <SPI_transfer_block+0x53c>
		        }
		    }
        }
    }
}
800022f4:	00000013          	nop
800022f8:	02c12083          	lw	ra,44(sp)
800022fc:	02812403          	lw	s0,40(sp)
80002300:	02412483          	lw	s1,36(sp)
80002304:	03010113          	addi	sp,sp,48
80002308:	00008067          	ret

8000230c <SPI_set_frame_rx_handler>:
void SPI_set_frame_rx_handler
(
    spi_instance_t * this_spi,
    spi_frame_rx_handler_t rx_handler
)
{
8000230c:	fe010113          	addi	sp,sp,-32
80002310:	00112e23          	sw	ra,28(sp)
80002314:	00812c23          	sw	s0,24(sp)
80002318:	02010413          	addi	s0,sp,32
8000231c:	fea42623          	sw	a0,-20(s0)
80002320:	feb42423          	sw	a1,-24(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if(NULL_INSTANCE != this_spi)
80002324:	fec42783          	lw	a5,-20(s0)
80002328:	16078863          	beqz	a5,80002498 <SPI_set_frame_rx_handler+0x18c>
    {
        /* This function is only intended to be used with an SPI slave. */
        if(DISABLE == HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER))
8000232c:	fec42783          	lw	a5,-20(s0)
80002330:	0007a783          	lw	a5,0(a5)
80002334:	00200613          	li	a2,2
80002338:	00100593          	li	a1,1
8000233c:	00078513          	mv	a0,a5
80002340:	cc9fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002344:	00050793          	mv	a5,a0
80002348:	14079863          	bnez	a5,80002498 <SPI_set_frame_rx_handler+0x18c>
        {
			/* Disable the Core SPI while we configure */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
8000234c:	fec42783          	lw	a5,-20(s0)
80002350:	0007a783          	lw	a5,0(a5)
80002354:	00000693          	li	a3,0
80002358:	00100613          	li	a2,1
8000235c:	00000593          	li	a1,0
80002360:	00078513          	mv	a0,a5
80002364:	c15fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

	        /* Clear all interrupts */
            HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
80002368:	fec42783          	lw	a5,-20(s0)
8000236c:	0007a783          	lw	a5,0(a5)
80002370:	00478793          	addi	a5,a5,4
80002374:	0ff00593          	li	a1,255
80002378:	00078513          	mv	a0,a5
8000237c:	b8dfe0ef          	jal	80000f08 <HW_set_8bit_reg>

            /* Disable SSEND and CMD interrupts as we are not doing block transfers */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTSSEND, DISABLE );
80002380:	fec42783          	lw	a5,-20(s0)
80002384:	0007a783          	lw	a5,0(a5)
80002388:	01878793          	addi	a5,a5,24
8000238c:	00000693          	li	a3,0
80002390:	02000613          	li	a2,32
80002394:	00500593          	li	a1,5
80002398:	00078513          	mv	a0,a5
8000239c:	bddfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD,   DISABLE );
800023a0:	fec42783          	lw	a5,-20(s0)
800023a4:	0007a783          	lw	a5,0(a5)
800023a8:	01878793          	addi	a5,a5,24
800023ac:	00000693          	li	a3,0
800023b0:	01000613          	li	a2,16
800023b4:	00400593          	li	a1,4
800023b8:	00078513          	mv	a0,a5
800023bc:	bbdfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

        	/* Disable block Rx handler as they are mutually exclusive. */
            this_spi->block_rx_handler = 0U;
800023c0:	fec42783          	lw	a5,-20(s0)
800023c4:	0407a023          	sw	zero,64(a5)

            /* Keep a copy of the pointer to the Rx handler function. */
            this_spi->frame_rx_handler = rx_handler;
800023c8:	fec42783          	lw	a5,-20(s0)
800023cc:	fe842703          	lw	a4,-24(s0)
800023d0:	02e7aa23          	sw	a4,52(a5)

            if( SPI_SLAVE_XFER_FRAME != this_spi->slave_xfer_mode )
800023d4:	fec42783          	lw	a5,-20(s0)
800023d8:	0487a703          	lw	a4,72(a5)
800023dc:	00200793          	li	a5,2
800023e0:	02f70063          	beq	a4,a5,80002400 <SPI_set_frame_rx_handler+0xf4>
            	 * Either just coming from init or were previously in block mode
            	 * so no tx frame handler is set at this point in time...
            	 *
            	 * Don't allow TXDONE interrupts.
            	 */
                HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTTXDONE, DISABLE );
800023e4:	fec42783          	lw	a5,-20(s0)
800023e8:	0007a783          	lw	a5,0(a5)
800023ec:	00000693          	li	a3,0
800023f0:	00800613          	li	a2,8
800023f4:	00300593          	li	a1,3
800023f8:	00078513          	mv	a0,a5
800023fc:	b7dfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            }

    		/* Flush the receive and transmit FIFOs*/
            HAL_set_8bit_reg(this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK);
80002400:	fec42783          	lw	a5,-20(s0)
80002404:	0007a783          	lw	a5,0(a5)
80002408:	01c78793          	addi	a5,a5,28
8000240c:	00300593          	li	a1,3
80002410:	00078513          	mv	a0,a5
80002414:	af5fe0ef          	jal	80000f08 <HW_set_8bit_reg>

            /* Enable Rx and FIFO error interrupts */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTRXOVFLOW, ENABLE );
80002418:	fec42783          	lw	a5,-20(s0)
8000241c:	0007a783          	lw	a5,0(a5)
80002420:	00100693          	li	a3,1
80002424:	01000613          	li	a2,16
80002428:	00400593          	li	a1,4
8000242c:	00078513          	mv	a0,a5
80002430:	b49fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTTXURUN,   ENABLE );
80002434:	fec42783          	lw	a5,-20(s0)
80002438:	0007a783          	lw	a5,0(a5)
8000243c:	00100693          	li	a3,1
80002440:	02000613          	li	a2,32
80002444:	00500593          	li	a1,5
80002448:	00078513          	mv	a0,a5
8000244c:	b2dfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTRXDATA,   ENABLE );
80002450:	fec42783          	lw	a5,-20(s0)
80002454:	0007a783          	lw	a5,0(a5)
80002458:	01878793          	addi	a5,a5,24
8000245c:	00100693          	li	a3,1
80002460:	04000613          	li	a2,64
80002464:	00600593          	li	a1,6
80002468:	00078513          	mv	a0,a5
8000246c:	b0dfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

            /* Make sure correct mode is selected */
            this_spi->slave_xfer_mode = SPI_SLAVE_XFER_FRAME;
80002470:	fec42783          	lw	a5,-20(s0)
80002474:	00200713          	li	a4,2
80002478:	04e7a423          	sw	a4,72(a5)

			/* Finally re-enable the CoreSPI */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
8000247c:	fec42783          	lw	a5,-20(s0)
80002480:	0007a783          	lw	a5,0(a5)
80002484:	00100693          	li	a3,1
80002488:	00100613          	li	a2,1
8000248c:	00000593          	li	a1,0
80002490:	00078513          	mv	a0,a5
80002494:	ae5fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        }
    }
}
80002498:	00000013          	nop
8000249c:	01c12083          	lw	ra,28(sp)
800024a0:	01812403          	lw	s0,24(sp)
800024a4:	02010113          	addi	sp,sp,32
800024a8:	00008067          	ret

800024ac <SPI_set_slave_tx_frame>:
(
    spi_instance_t * this_spi,
    uint32_t frame_value,
    spi_slave_frame_tx_handler_t slave_tx_frame_handler
)
{
800024ac:	fe010113          	addi	sp,sp,-32
800024b0:	00112e23          	sw	ra,28(sp)
800024b4:	00812c23          	sw	s0,24(sp)
800024b8:	02010413          	addi	s0,sp,32
800024bc:	fea42623          	sw	a0,-20(s0)
800024c0:	feb42423          	sw	a1,-24(s0)
800024c4:	fec42223          	sw	a2,-28(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
800024c8:	fec42783          	lw	a5,-20(s0)
800024cc:	16078a63          	beqz	a5,80002640 <SPI_set_slave_tx_frame+0x194>
    {
        /* This function is only intended to be used with an SPI slave. */
        if( DISABLE == HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
800024d0:	fec42783          	lw	a5,-20(s0)
800024d4:	0007a783          	lw	a5,0(a5)
800024d8:	00200613          	li	a2,2
800024dc:	00100593          	li	a1,1
800024e0:	00078513          	mv	a0,a5
800024e4:	b25fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
800024e8:	00050793          	mv	a5,a0
800024ec:	14079a63          	bnez	a5,80002640 <SPI_set_slave_tx_frame+0x194>
        {
			/* Disable the Core SPI while we configure */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
800024f0:	fec42783          	lw	a5,-20(s0)
800024f4:	0007a783          	lw	a5,0(a5)
800024f8:	00000693          	li	a3,0
800024fc:	00100613          	li	a2,1
80002500:	00000593          	li	a1,0
80002504:	00078513          	mv	a0,a5
80002508:	a71fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

            /* Clear all interrupts */
            HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
8000250c:	fec42783          	lw	a5,-20(s0)
80002510:	0007a783          	lw	a5,0(a5)
80002514:	00478793          	addi	a5,a5,4
80002518:	0ff00593          	li	a1,255
8000251c:	00078513          	mv	a0,a5
80002520:	9e9fe0ef          	jal	80000f08 <HW_set_8bit_reg>

            /* Disable SSEND and CMD interrupts as we are not doing block transfers */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTSSEND, DISABLE );
80002524:	fec42783          	lw	a5,-20(s0)
80002528:	0007a783          	lw	a5,0(a5)
8000252c:	01878793          	addi	a5,a5,24
80002530:	00000693          	li	a3,0
80002534:	02000613          	li	a2,32
80002538:	00500593          	li	a1,5
8000253c:	00078513          	mv	a0,a5
80002540:	a39fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD,   DISABLE );
80002544:	fec42783          	lw	a5,-20(s0)
80002548:	0007a783          	lw	a5,0(a5)
8000254c:	01878793          	addi	a5,a5,24
80002550:	00000693          	li	a3,0
80002554:	01000613          	li	a2,16
80002558:	00400593          	li	a1,4
8000255c:	00078513          	mv	a0,a5
80002560:	a19fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

            if( SPI_SLAVE_XFER_FRAME != this_spi->slave_xfer_mode )
80002564:	fec42783          	lw	a5,-20(s0)
80002568:	0487a703          	lw	a4,72(a5)
8000256c:	00200793          	li	a5,2
80002570:	02f70263          	beq	a4,a5,80002594 <SPI_set_slave_tx_frame+0xe8>
            	 * Either just coming from init or were previously in block mode
            	 * so no rx frame handler is set at this point in time...
            	 *
            	 * Don't allow RXDATA interrupts.
            	 */
                HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTRXDATA, DISABLE );
80002574:	fec42783          	lw	a5,-20(s0)
80002578:	0007a783          	lw	a5,0(a5)
8000257c:	01878793          	addi	a5,a5,24
80002580:	00000693          	li	a3,0
80002584:	04000613          	li	a2,64
80002588:	00600593          	li	a1,6
8000258c:	00078513          	mv	a0,a5
80002590:	9e9fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            }

            /* Disable slave block tx buffer as it is mutually exclusive with frame
             * level handling. */
            this_spi->slave_tx_buffer = NULL_BUFF;
80002594:	fec42783          	lw	a5,-20(s0)
80002598:	0007a423          	sw	zero,8(a5)
            this_spi->slave_tx_size = 0U;
8000259c:	fec42783          	lw	a5,-20(s0)
800025a0:	0007a623          	sw	zero,12(a5)
            this_spi->slave_tx_idx = 0U;
800025a4:	fec42783          	lw	a5,-20(s0)
800025a8:	0007a823          	sw	zero,16(a5)

    		/* Flush the receive and transmit FIFOs*/
            HAL_set_8bit_reg(this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK);
800025ac:	fec42783          	lw	a5,-20(s0)
800025b0:	0007a783          	lw	a5,0(a5)
800025b4:	01c78793          	addi	a5,a5,28
800025b8:	00300593          	li	a1,3
800025bc:	00078513          	mv	a0,a5
800025c0:	949fe0ef          	jal	80000f08 <HW_set_8bit_reg>

            /* Assign the slave frame update handler - NULL_SLAVE_TX_UPDATE_HANDLER for none */
            this_spi->slave_tx_frame_handler = slave_tx_frame_handler;
800025c4:	fec42783          	lw	a5,-20(s0)
800025c8:	fe442703          	lw	a4,-28(s0)
800025cc:	02e7ae23          	sw	a4,60(a5)

            /* Keep a copy of the slave Tx frame value. */
            this_spi->slave_tx_frame = frame_value;
800025d0:	fec42783          	lw	a5,-20(s0)
800025d4:	fe842703          	lw	a4,-24(s0)
800025d8:	02e7ac23          	sw	a4,56(a5)

            /* Load one frame into Tx data register. */
            HAL_set_32bit_reg( this_spi->base_addr, TXLAST, this_spi->slave_tx_frame );
800025dc:	fec42783          	lw	a5,-20(s0)
800025e0:	0007a783          	lw	a5,0(a5)
800025e4:	02878713          	addi	a4,a5,40
800025e8:	fec42783          	lw	a5,-20(s0)
800025ec:	0387a783          	lw	a5,56(a5)
800025f0:	00078593          	mv	a1,a5
800025f4:	00070513          	mv	a0,a4
800025f8:	e64fe0ef          	jal	80000c5c <HW_set_32bit_reg>

            /* Enable Tx Done interrupt in order to reload the slave Tx frame after each
             * time it has been sent. */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTTXDONE, ENABLE );
800025fc:	fec42783          	lw	a5,-20(s0)
80002600:	0007a783          	lw	a5,0(a5)
80002604:	00100693          	li	a3,1
80002608:	00800613          	li	a2,8
8000260c:	00300593          	li	a1,3
80002610:	00078513          	mv	a0,a5
80002614:	965fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

            /* Make sure correct mode is selected */
            this_spi->slave_xfer_mode = SPI_SLAVE_XFER_FRAME;
80002618:	fec42783          	lw	a5,-20(s0)
8000261c:	00200713          	li	a4,2
80002620:	04e7a423          	sw	a4,72(a5)

            /* Ready to go so enable CoreSPI */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
80002624:	fec42783          	lw	a5,-20(s0)
80002628:	0007a783          	lw	a5,0(a5)
8000262c:	00100693          	li	a3,1
80002630:	00100613          	li	a2,1
80002634:	00000593          	li	a1,0
80002638:	00078513          	mv	a0,a5
8000263c:	93dfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        }
    }
}
80002640:	00000013          	nop
80002644:	01c12083          	lw	ra,28(sp)
80002648:	01812403          	lw	s0,24(sp)
8000264c:	02010113          	addi	sp,sp,32
80002650:	00008067          	ret

80002654 <SPI_set_slave_block_buffers>:
    uint32_t tx_buff_size,
    uint8_t * rx_buffer,
    uint32_t rx_buff_size,
    spi_block_rx_handler_t block_rx_handler
)
{
80002654:	fd010113          	addi	sp,sp,-48
80002658:	02112623          	sw	ra,44(sp)
8000265c:	02812423          	sw	s0,40(sp)
80002660:	03010413          	addi	s0,sp,48
80002664:	fea42623          	sw	a0,-20(s0)
80002668:	feb42423          	sw	a1,-24(s0)
8000266c:	fec42223          	sw	a2,-28(s0)
80002670:	fed42023          	sw	a3,-32(s0)
80002674:	fce42e23          	sw	a4,-36(s0)
80002678:	fcf42c23          	sw	a5,-40(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
8000267c:	fec42783          	lw	a5,-20(s0)
80002680:	22078c63          	beqz	a5,800028b8 <SPI_set_slave_block_buffers+0x264>
    {
        /* This function is only intended to be used with an SPI slave. */
        if( DISABLE == HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
80002684:	fec42783          	lw	a5,-20(s0)
80002688:	0007a783          	lw	a5,0(a5)
8000268c:	00200613          	li	a2,2
80002690:	00100593          	li	a1,1
80002694:	00078513          	mv	a0,a5
80002698:	971fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
8000269c:	00050793          	mv	a5,a0
800026a0:	20079c63          	bnez	a5,800028b8 <SPI_set_slave_block_buffers+0x264>
        {
			/* Disable the Core SPI while we configure */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
800026a4:	fec42783          	lw	a5,-20(s0)
800026a8:	0007a783          	lw	a5,0(a5)
800026ac:	00000693          	li	a3,0
800026b0:	00100613          	li	a2,1
800026b4:	00000593          	li	a1,0
800026b8:	00078513          	mv	a0,a5
800026bc:	8bdfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

	        /* Make sure correct mode is selected */
            this_spi->slave_xfer_mode = SPI_SLAVE_XFER_BLOCK;
800026c0:	fec42783          	lw	a5,-20(s0)
800026c4:	00100713          	li	a4,1
800026c8:	04e7a423          	sw	a4,72(a5)
            /*
             * No command handler should be setup at this stage so fake this
             * to ensure 0 padding works.
             */
            this_spi->cmd_done = 1u;
800026cc:	fec42783          	lw	a5,-20(s0)
800026d0:	00100713          	li	a4,1
800026d4:	02e7a223          	sw	a4,36(a5)

            /* Disable frame handlers as they are mutually exclusive with block Rx handler. */
            this_spi->frame_rx_handler = NULL_FRAME_HANDLER;
800026d8:	fec42783          	lw	a5,-20(s0)
800026dc:	0207aa23          	sw	zero,52(a5)
            this_spi->slave_tx_frame_handler = NULL_SLAVE_TX_UPDATE_HANDLER;
800026e0:	fec42783          	lw	a5,-20(s0)
800026e4:	0207ae23          	sw	zero,60(a5)

            /* Keep a copy of the pointer to the block Rx handler function. */
            this_spi->block_rx_handler = block_rx_handler;
800026e8:	fec42783          	lw	a5,-20(s0)
800026ec:	fd842703          	lw	a4,-40(s0)
800026f0:	04e7a023          	sw	a4,64(a5)

            /* Assign slave receive buffer */
            this_spi->slave_rx_buffer = rx_buffer;
800026f4:	fec42783          	lw	a5,-20(s0)
800026f8:	fe042703          	lw	a4,-32(s0)
800026fc:	02e7a423          	sw	a4,40(a5)
            this_spi->slave_rx_size = rx_buff_size;
80002700:	fec42783          	lw	a5,-20(s0)
80002704:	fdc42703          	lw	a4,-36(s0)
80002708:	02e7a623          	sw	a4,44(a5)
            this_spi->slave_rx_idx = 0U;
8000270c:	fec42783          	lw	a5,-20(s0)
80002710:	0207a823          	sw	zero,48(a5)

            /* Assign slave transmit buffer*/
            this_spi->slave_tx_buffer = tx_buffer;
80002714:	fec42783          	lw	a5,-20(s0)
80002718:	fe842703          	lw	a4,-24(s0)
8000271c:	00e7a423          	sw	a4,8(a5)
            this_spi->slave_tx_size = tx_buff_size;
80002720:	fec42783          	lw	a5,-20(s0)
80002724:	fe442703          	lw	a4,-28(s0)
80002728:	00e7a623          	sw	a4,12(a5)
            this_spi->slave_tx_idx = 0U;
8000272c:	fec42783          	lw	a5,-20(s0)
80002730:	0007a823          	sw	zero,16(a5)

    		/* Flush the receive and transmit FIFOs */
            HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80002734:	fec42783          	lw	a5,-20(s0)
80002738:	0007a783          	lw	a5,0(a5)
8000273c:	01c78793          	addi	a5,a5,28
80002740:	00300593          	li	a1,3
80002744:	00078513          	mv	a0,a5
80002748:	fc0fe0ef          	jal	80000f08 <HW_set_8bit_reg>

            /* Clear all interrupts */
            HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
8000274c:	fec42783          	lw	a5,-20(s0)
80002750:	0007a783          	lw	a5,0(a5)
80002754:	00478793          	addi	a5,a5,4
80002758:	0ff00593          	li	a1,255
8000275c:	00078513          	mv	a0,a5
80002760:	fa8fe0ef          	jal	80000f08 <HW_set_8bit_reg>

            /* Preload the transmit FIFO. */
            while( !(HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_TXFULL)) &&
80002764:	0480006f          	j	800027ac <SPI_set_slave_block_buffers+0x158>
                     ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) )
            {
                HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->slave_tx_buffer[this_spi->slave_tx_idx] );
80002768:	fec42783          	lw	a5,-20(s0)
8000276c:	0007a783          	lw	a5,0(a5)
80002770:	00c78693          	addi	a3,a5,12
80002774:	fec42783          	lw	a5,-20(s0)
80002778:	0087a703          	lw	a4,8(a5)
8000277c:	fec42783          	lw	a5,-20(s0)
80002780:	0107a783          	lw	a5,16(a5)
80002784:	00f707b3          	add	a5,a4,a5
80002788:	0007c783          	lbu	a5,0(a5)
8000278c:	00078593          	mv	a1,a5
80002790:	00068513          	mv	a0,a3
80002794:	cc8fe0ef          	jal	80000c5c <HW_set_32bit_reg>
                ++this_spi->slave_tx_idx;
80002798:	fec42783          	lw	a5,-20(s0)
8000279c:	0107a783          	lw	a5,16(a5)
800027a0:	00178713          	addi	a4,a5,1
800027a4:	fec42783          	lw	a5,-20(s0)
800027a8:	00e7a823          	sw	a4,16(a5)
            while( !(HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_TXFULL)) &&
800027ac:	fec42783          	lw	a5,-20(s0)
800027b0:	0007a783          	lw	a5,0(a5)
800027b4:	02078793          	addi	a5,a5,32
800027b8:	00800613          	li	a2,8
800027bc:	00300593          	li	a1,3
800027c0:	00078513          	mv	a0,a5
800027c4:	845fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
800027c8:	00050793          	mv	a5,a0
800027cc:	00079c63          	bnez	a5,800027e4 <SPI_set_slave_block_buffers+0x190>
                     ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) )
800027d0:	fec42783          	lw	a5,-20(s0)
800027d4:	0107a703          	lw	a4,16(a5)
800027d8:	fec42783          	lw	a5,-20(s0)
800027dc:	00c7a783          	lw	a5,12(a5)
            while( !(HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_TXFULL)) &&
800027e0:	f8f764e3          	bltu	a4,a5,80002768 <SPI_set_slave_block_buffers+0x114>
            }
            /*
             * Disable TXDATA interrupt as we will look after transmission in rx handling
             * because we know that once we have read a frame it is safe to send another one.
             */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTTXDATA,  DISABLE );
800027e4:	fec42783          	lw	a5,-20(s0)
800027e8:	0007a783          	lw	a5,0(a5)
800027ec:	01878793          	addi	a5,a5,24
800027f0:	00000693          	li	a3,0
800027f4:	08000613          	li	a2,128
800027f8:	00700593          	li	a1,7
800027fc:	00078513          	mv	a0,a5
80002800:	f78fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

            /* Enable Rx, FIFO error  and SSEND interrupts */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTRXOVFLOW, ENABLE );
80002804:	fec42783          	lw	a5,-20(s0)
80002808:	0007a783          	lw	a5,0(a5)
8000280c:	00100693          	li	a3,1
80002810:	01000613          	li	a2,16
80002814:	00400593          	li	a1,4
80002818:	00078513          	mv	a0,a5
8000281c:	f5cfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTTXURUN,   ENABLE );
80002820:	fec42783          	lw	a5,-20(s0)
80002824:	0007a783          	lw	a5,0(a5)
80002828:	00100693          	li	a3,1
8000282c:	02000613          	li	a2,32
80002830:	00500593          	li	a1,5
80002834:	00078513          	mv	a0,a5
80002838:	f40fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTRXDATA,   ENABLE );
8000283c:	fec42783          	lw	a5,-20(s0)
80002840:	0007a783          	lw	a5,0(a5)
80002844:	01878793          	addi	a5,a5,24
80002848:	00100693          	li	a3,1
8000284c:	04000613          	li	a2,64
80002850:	00600593          	li	a1,6
80002854:	00078513          	mv	a0,a5
80002858:	f20fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTSSEND,    ENABLE );
8000285c:	fec42783          	lw	a5,-20(s0)
80002860:	0007a783          	lw	a5,0(a5)
80002864:	01878793          	addi	a5,a5,24
80002868:	00100693          	li	a3,1
8000286c:	02000613          	li	a2,32
80002870:	00500593          	li	a1,5
80002874:	00078513          	mv	a0,a5
80002878:	f00fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

            /* Disable command handler until it is set explicitly */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD,      DISABLE );
8000287c:	fec42783          	lw	a5,-20(s0)
80002880:	0007a783          	lw	a5,0(a5)
80002884:	01878793          	addi	a5,a5,24
80002888:	00000693          	li	a3,0
8000288c:	01000613          	li	a2,16
80002890:	00400593          	li	a1,4
80002894:	00078513          	mv	a0,a5
80002898:	ee0fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>

            /* Now enable the CoreSPI */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
8000289c:	fec42783          	lw	a5,-20(s0)
800028a0:	0007a783          	lw	a5,0(a5)
800028a4:	00100693          	li	a3,1
800028a8:	00100613          	li	a2,1
800028ac:	00000593          	li	a1,0
800028b0:	00078513          	mv	a0,a5
800028b4:	ec4fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        }
    }
}
800028b8:	00000013          	nop
800028bc:	02c12083          	lw	ra,44(sp)
800028c0:	02812403          	lw	s0,40(sp)
800028c4:	03010113          	addi	sp,sp,48
800028c8:	00008067          	ret

800028cc <SPI_set_cmd_handler>:
(
    spi_instance_t * this_spi,
    spi_block_rx_handler_t cmd_handler,
    uint32_t cmd_size
)
{
800028cc:	fd010113          	addi	sp,sp,-48
800028d0:	02112623          	sw	ra,44(sp)
800028d4:	02812423          	sw	s0,40(sp)
800028d8:	03010413          	addi	s0,sp,48
800028dc:	fca42e23          	sw	a0,-36(s0)
800028e0:	fcb42c23          	sw	a1,-40(s0)
800028e4:	fcc42a23          	sw	a2,-44(s0)
    uint32_t ctrl2 = 0u;
800028e8:	fe042623          	sw	zero,-20(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( NULL_SLAVE_CMD_HANDLER != cmd_handler );
    HAL_ASSERT( 0u < cmd_size );

    if( ( NULL_INSTANCE != this_spi ) && ( 0u < cmd_size ) &&
800028ec:	fdc42783          	lw	a5,-36(s0)
800028f0:	0a078c63          	beqz	a5,800029a8 <SPI_set_cmd_handler+0xdc>
800028f4:	fd442783          	lw	a5,-44(s0)
800028f8:	0a078863          	beqz	a5,800029a8 <SPI_set_cmd_handler+0xdc>
800028fc:	fd842783          	lw	a5,-40(s0)
80002900:	0a078463          	beqz	a5,800029a8 <SPI_set_cmd_handler+0xdc>
        ( NULL_SLAVE_CMD_HANDLER != cmd_handler ) )
    {
		/* Disable the Core SPI while we configure */
        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80002904:	fdc42783          	lw	a5,-36(s0)
80002908:	0007a783          	lw	a5,0(a5)
8000290c:	00000693          	li	a3,0
80002910:	00100613          	li	a2,1
80002914:	00000593          	li	a1,0
80002918:	00078513          	mv	a0,a5
8000291c:	e5cfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
         * block mode was configured.
         *
         * Clear this flag so zero padding is disabled until command response
         * has been taken care of.
         */
        this_spi->cmd_done = 0u;
80002920:	fdc42783          	lw	a5,-36(s0)
80002924:	0207a223          	sw	zero,36(a5)

        /* Assign user handler for Command received interrupt */
        this_spi->cmd_handler = cmd_handler;
80002928:	fdc42783          	lw	a5,-36(s0)
8000292c:	fd842703          	lw	a4,-40(s0)
80002930:	02e7a023          	sw	a4,32(a5)

        /* Configure the command size and Enable Command received interrupt */
        ctrl2  = HAL_get_8bit_reg( this_spi->base_addr, CTRL2 );
80002934:	fdc42783          	lw	a5,-36(s0)
80002938:	0007a783          	lw	a5,0(a5)
8000293c:	01878793          	addi	a5,a5,24
80002940:	00078513          	mv	a0,a5
80002944:	e00fe0ef          	jal	80000f44 <HW_get_8bit_reg>
80002948:	00050793          	mv	a5,a0
8000294c:	fef42623          	sw	a5,-20(s0)

        /* First clear the count field then insert count and int enables */
        ctrl2 &= ~(uint32_t)CTRL2_CMDSIZE_MASK;
80002950:	fec42783          	lw	a5,-20(s0)
80002954:	ff87f793          	andi	a5,a5,-8
80002958:	fef42623          	sw	a5,-20(s0)
        ctrl2 |= (uint32_t)((cmd_size & CTRL2_CMDSIZE_MASK) | CTRL2_INTCMD_MASK | CTRL2_INTRXDATA_MASK);
8000295c:	fd442783          	lw	a5,-44(s0)
80002960:	0077f713          	andi	a4,a5,7
80002964:	fec42783          	lw	a5,-20(s0)
80002968:	00f767b3          	or	a5,a4,a5
8000296c:	0507e793          	ori	a5,a5,80
80002970:	fef42623          	sw	a5,-20(s0)
        HAL_set_8bit_reg( this_spi->base_addr, CTRL2, ctrl2 );
80002974:	fdc42783          	lw	a5,-36(s0)
80002978:	0007a783          	lw	a5,0(a5)
8000297c:	01878793          	addi	a5,a5,24
80002980:	fec42583          	lw	a1,-20(s0)
80002984:	00078513          	mv	a0,a5
80002988:	d80fe0ef          	jal	80000f08 <HW_set_8bit_reg>

        /* Now enable the CoreSPI */
        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
8000298c:	fdc42783          	lw	a5,-36(s0)
80002990:	0007a783          	lw	a5,0(a5)
80002994:	00100693          	li	a3,1
80002998:	00100613          	li	a2,1
8000299c:	00000593          	li	a1,0
800029a0:	00078513          	mv	a0,a5
800029a4:	dd4fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
    }
}
800029a8:	00000013          	nop
800029ac:	02c12083          	lw	ra,44(sp)
800029b0:	02812403          	lw	s0,40(sp)
800029b4:	03010113          	addi	sp,sp,48
800029b8:	00008067          	ret

800029bc <SPI_set_cmd_response>:
(
    spi_instance_t * this_spi,
    const uint8_t * resp_tx_buffer,
    uint32_t resp_buff_size
)
{
800029bc:	fe010113          	addi	sp,sp,-32
800029c0:	00112e23          	sw	ra,28(sp)
800029c4:	00812c23          	sw	s0,24(sp)
800029c8:	02010413          	addi	s0,sp,32
800029cc:	fea42623          	sw	a0,-20(s0)
800029d0:	feb42423          	sw	a1,-24(s0)
800029d4:	fec42223          	sw	a2,-28(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( NULL_BUFF != resp_tx_buffer );
    HAL_ASSERT( 0u < resp_buff_size );

    if( ( NULL_INSTANCE != this_spi ) && ( 0u < resp_buff_size ) &&
800029d8:	fec42783          	lw	a5,-20(s0)
800029dc:	02078e63          	beqz	a5,80002a18 <SPI_set_cmd_response+0x5c>
800029e0:	fe442783          	lw	a5,-28(s0)
800029e4:	02078a63          	beqz	a5,80002a18 <SPI_set_cmd_response+0x5c>
800029e8:	fe842783          	lw	a5,-24(s0)
800029ec:	02078663          	beqz	a5,80002a18 <SPI_set_cmd_response+0x5c>
        ( NULL_BUFF != resp_tx_buffer ) )
    {
        this_spi->resp_tx_buffer = resp_tx_buffer;
800029f0:	fec42783          	lw	a5,-20(s0)
800029f4:	fe842703          	lw	a4,-24(s0)
800029f8:	00e7aa23          	sw	a4,20(a5)
        this_spi->resp_buff_size = resp_buff_size;
800029fc:	fec42783          	lw	a5,-20(s0)
80002a00:	fe442703          	lw	a4,-28(s0)
80002a04:	00e7ac23          	sw	a4,24(a5)
        this_spi->resp_buff_tx_idx = 0u;
80002a08:	fec42783          	lw	a5,-20(s0)
80002a0c:	0007ae23          	sw	zero,28(a5)

        fill_slave_tx_fifo(this_spi);
80002a10:	fec42503          	lw	a0,-20(s0)
80002a14:	798000ef          	jal	800031ac <fill_slave_tx_fifo>
    }
}
80002a18:	00000013          	nop
80002a1c:	01c12083          	lw	ra,28(sp)
80002a20:	01812403          	lw	s0,24(sp)
80002a24:	02010113          	addi	sp,sp,32
80002a28:	00008067          	ret

80002a2c <SPI_enable>:
 */
void SPI_enable
(
    spi_instance_t * this_spi
)
{
80002a2c:	fe010113          	addi	sp,sp,-32
80002a30:	00112e23          	sw	ra,28(sp)
80002a34:	00812c23          	sw	s0,24(sp)
80002a38:	02010413          	addi	s0,sp,32
80002a3c:	fea42623          	sw	a0,-20(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
80002a40:	fec42783          	lw	a5,-20(s0)
80002a44:	02078063          	beqz	a5,80002a64 <SPI_enable+0x38>
    {
		/* Disable the Core SPI while we configure */
		HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
80002a48:	fec42783          	lw	a5,-20(s0)
80002a4c:	0007a783          	lw	a5,0(a5)
80002a50:	00100693          	li	a3,1
80002a54:	00100613          	li	a2,1
80002a58:	00000593          	li	a1,0
80002a5c:	00078513          	mv	a0,a5
80002a60:	d18fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
    }
}
80002a64:	00000013          	nop
80002a68:	01c12083          	lw	ra,28(sp)
80002a6c:	01812403          	lw	s0,24(sp)
80002a70:	02010113          	addi	sp,sp,32
80002a74:	00008067          	ret

80002a78 <SPI_disable>:
 */
void SPI_disable
(
    spi_instance_t * this_spi
)
{
80002a78:	fe010113          	addi	sp,sp,-32
80002a7c:	00112e23          	sw	ra,28(sp)
80002a80:	00812c23          	sw	s0,24(sp)
80002a84:	02010413          	addi	s0,sp,32
80002a88:	fea42623          	sw	a0,-20(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
80002a8c:	fec42783          	lw	a5,-20(s0)
80002a90:	02078063          	beqz	a5,80002ab0 <SPI_disable+0x38>
    {
		/* Disable the Core SPI while we configure */
		HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80002a94:	fec42783          	lw	a5,-20(s0)
80002a98:	0007a783          	lw	a5,0(a5)
80002a9c:	00000693          	li	a3,0
80002aa0:	00100613          	li	a2,1
80002aa4:	00000593          	li	a1,0
80002aa8:	00078513          	mv	a0,a5
80002aac:	cccfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
    }
}
80002ab0:	00000013          	nop
80002ab4:	01c12083          	lw	ra,28(sp)
80002ab8:	01812403          	lw	s0,24(sp)
80002abc:	02010113          	addi	sp,sp,32
80002ac0:	00008067          	ret

80002ac4 <SPI_isr>:
 */
void SPI_isr
(
    spi_instance_t * this_spi
)
{
80002ac4:	fd010113          	addi	sp,sp,-48
80002ac8:	02112623          	sw	ra,44(sp)
80002acc:	02812423          	sw	s0,40(sp)
80002ad0:	03010413          	addi	s0,sp,48
80002ad4:	fca42e23          	sw	a0,-36(s0)
/*
 * The assert and the NULL check here can be commented out to reduce the interrupt
 * latency once you are sure the interrupt vector code is correct.
 */
    HAL_ASSERT( NULL_INSTANCE != this_spi );
    if( NULL_INSTANCE != this_spi )
80002ad8:	fdc42783          	lw	a5,-36(s0)
80002adc:	6a078e63          	beqz	a5,80003198 <SPI_isr+0x6d4>
    {
        /* Handle receive. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_RXDATA ) )
80002ae0:	fdc42783          	lw	a5,-36(s0)
80002ae4:	0007a783          	lw	a5,0(a5)
80002ae8:	01078793          	addi	a5,a5,16
80002aec:	04000613          	li	a2,64
80002af0:	00600593          	li	a1,6
80002af4:	00078513          	mv	a0,a5
80002af8:	d10fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002afc:	00050793          	mv	a5,a0
80002b00:	00078713          	mv	a4,a5
80002b04:	00100793          	li	a5,1
80002b08:	30f71063          	bne	a4,a5,80002e08 <SPI_isr+0x344>
             *
             * Note the order of the checks here will effect interrupt latency and
             * for critical timing the mode you are using most often should probably be
             * be the first checked.
             */
            if( SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode ) /* Block handling mode. */
80002b0c:	fdc42783          	lw	a5,-36(s0)
80002b10:	0487a703          	lw	a4,72(a5)
80002b14:	00100793          	li	a5,1
80002b18:	24f71463          	bne	a4,a5,80002d60 <SPI_isr+0x29c>
            {
                while( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80002b1c:	0640006f          	j	80002b80 <SPI_isr+0xbc>
                {
                	/* Read irrespective to clear the RX IRQ */
                	rx_frame = HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80002b20:	fdc42783          	lw	a5,-36(s0)
80002b24:	0007a783          	lw	a5,0(a5)
80002b28:	00878793          	addi	a5,a5,8
80002b2c:	00078513          	mv	a0,a5
80002b30:	964fe0ef          	jal	80000c94 <HW_get_32bit_reg>
80002b34:	fea42423          	sw	a0,-24(s0)
                	if( this_spi->slave_rx_idx < this_spi->slave_rx_size )
80002b38:	fdc42783          	lw	a5,-36(s0)
80002b3c:	0307a703          	lw	a4,48(a5)
80002b40:	fdc42783          	lw	a5,-36(s0)
80002b44:	02c7a783          	lw	a5,44(a5)
80002b48:	02f77263          	bleu	a5,a4,80002b6c <SPI_isr+0xa8>
        			{
        				this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
80002b4c:	fdc42783          	lw	a5,-36(s0)
80002b50:	0287a703          	lw	a4,40(a5)
80002b54:	fdc42783          	lw	a5,-36(s0)
80002b58:	0307a783          	lw	a5,48(a5)
80002b5c:	00f707b3          	add	a5,a4,a5
80002b60:	fe842703          	lw	a4,-24(s0)
80002b64:	0ff77713          	andi	a4,a4,255
80002b68:	00e78023          	sb	a4,0(a5)
        			}
        			++this_spi->slave_rx_idx;
80002b6c:	fdc42783          	lw	a5,-36(s0)
80002b70:	0307a783          	lw	a5,48(a5)
80002b74:	00178713          	addi	a4,a5,1
80002b78:	fdc42783          	lw	a5,-36(s0)
80002b7c:	02e7a823          	sw	a4,48(a5)
                while( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80002b80:	fdc42783          	lw	a5,-36(s0)
80002b84:	0007a783          	lw	a5,0(a5)
80002b88:	02078793          	addi	a5,a5,32
80002b8c:	00400613          	li	a2,4
80002b90:	00200593          	li	a1,2
80002b94:	00078513          	mv	a0,a5
80002b98:	c70fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002b9c:	00050793          	mv	a5,a0
80002ba0:	f80780e3          	beqz	a5,80002b20 <SPI_isr+0x5c>
                }
                /*
                 * Now handle updating of tx FIFO to keep the data flowing.
                 * First see if there is anything in slave_tx_buffer to send.
                 */
            	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size )
80002ba4:	0480006f          	j	80002bec <SPI_isr+0x128>
            	    && ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) ) )
            	{
           			HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->slave_tx_buffer[this_spi->slave_tx_idx] );
80002ba8:	fdc42783          	lw	a5,-36(s0)
80002bac:	0007a783          	lw	a5,0(a5)
80002bb0:	00c78693          	addi	a3,a5,12
80002bb4:	fdc42783          	lw	a5,-36(s0)
80002bb8:	0087a703          	lw	a4,8(a5)
80002bbc:	fdc42783          	lw	a5,-36(s0)
80002bc0:	0107a783          	lw	a5,16(a5)
80002bc4:	00f707b3          	add	a5,a4,a5
80002bc8:	0007c783          	lbu	a5,0(a5)
80002bcc:	00078593          	mv	a1,a5
80002bd0:	00068513          	mv	a0,a3
80002bd4:	888fe0ef          	jal	80000c5c <HW_set_32bit_reg>
           			++this_spi->slave_tx_idx;
80002bd8:	fdc42783          	lw	a5,-36(s0)
80002bdc:	0107a783          	lw	a5,16(a5)
80002be0:	00178713          	addi	a4,a5,1
80002be4:	fdc42783          	lw	a5,-36(s0)
80002be8:	00e7a823          	sw	a4,16(a5)
            	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size )
80002bec:	fdc42783          	lw	a5,-36(s0)
80002bf0:	0107a703          	lw	a4,16(a5)
80002bf4:	fdc42783          	lw	a5,-36(s0)
80002bf8:	00c7a783          	lw	a5,12(a5)
80002bfc:	02f77463          	bleu	a5,a4,80002c24 <SPI_isr+0x160>
            	    && ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) ) )
80002c00:	fdc42783          	lw	a5,-36(s0)
80002c04:	0007a783          	lw	a5,0(a5)
80002c08:	02078793          	addi	a5,a5,32
80002c0c:	00800613          	li	a2,8
80002c10:	00300593          	li	a1,3
80002c14:	00078513          	mv	a0,a5
80002c18:	bf0fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002c1c:	00050793          	mv	a5,a0
80002c20:	f80784e3          	beqz	a5,80002ba8 <SPI_isr+0xe4>
           		}
            	/*
            	 * Next see if there is anything in resp_tx_buffer to send.
            	 */
            	if( this_spi->slave_tx_idx >= this_spi->slave_tx_size )
80002c24:	fdc42783          	lw	a5,-36(s0)
80002c28:	0107a703          	lw	a4,16(a5)
80002c2c:	fdc42783          	lw	a5,-36(s0)
80002c30:	00c7a783          	lw	a5,12(a5)
80002c34:	08f76263          	bltu	a4,a5,80002cb8 <SPI_isr+0x1f4>
            	{
                	while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size )
80002c38:	0480006f          	j	80002c80 <SPI_isr+0x1bc>
                	    && ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) ) )
                	{
               			HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx] );
80002c3c:	fdc42783          	lw	a5,-36(s0)
80002c40:	0007a783          	lw	a5,0(a5)
80002c44:	00c78693          	addi	a3,a5,12
80002c48:	fdc42783          	lw	a5,-36(s0)
80002c4c:	0147a703          	lw	a4,20(a5)
80002c50:	fdc42783          	lw	a5,-36(s0)
80002c54:	01c7a783          	lw	a5,28(a5)
80002c58:	00f707b3          	add	a5,a4,a5
80002c5c:	0007c783          	lbu	a5,0(a5)
80002c60:	00078593          	mv	a1,a5
80002c64:	00068513          	mv	a0,a3
80002c68:	ff5fd0ef          	jal	80000c5c <HW_set_32bit_reg>
               			++this_spi->resp_buff_tx_idx;
80002c6c:	fdc42783          	lw	a5,-36(s0)
80002c70:	01c7a783          	lw	a5,28(a5)
80002c74:	00178713          	addi	a4,a5,1
80002c78:	fdc42783          	lw	a5,-36(s0)
80002c7c:	00e7ae23          	sw	a4,28(a5)
                	while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size )
80002c80:	fdc42783          	lw	a5,-36(s0)
80002c84:	01c7a703          	lw	a4,28(a5)
80002c88:	fdc42783          	lw	a5,-36(s0)
80002c8c:	0187a783          	lw	a5,24(a5)
80002c90:	02f77463          	bleu	a5,a4,80002cb8 <SPI_isr+0x1f4>
                	    && ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) ) )
80002c94:	fdc42783          	lw	a5,-36(s0)
80002c98:	0007a783          	lw	a5,0(a5)
80002c9c:	02078793          	addi	a5,a5,32
80002ca0:	00800613          	li	a2,8
80002ca4:	00300593          	li	a1,3
80002ca8:	00078513          	mv	a0,a5
80002cac:	b5cfe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002cb0:	00050793          	mv	a5,a0
80002cb4:	f80784e3          	beqz	a5,80002c3c <SPI_isr+0x178>
                	}
				}
				/*
				 * Lastly, see if we are ready to pad with 0s .
				 */
				if( this_spi->cmd_done && ( this_spi->slave_tx_idx >= this_spi->slave_tx_size ) &&
80002cb8:	fdc42783          	lw	a5,-36(s0)
80002cbc:	0247a783          	lw	a5,36(a5)
80002cc0:	12078463          	beqz	a5,80002de8 <SPI_isr+0x324>
80002cc4:	fdc42783          	lw	a5,-36(s0)
80002cc8:	0107a703          	lw	a4,16(a5)
80002ccc:	fdc42783          	lw	a5,-36(s0)
80002cd0:	00c7a783          	lw	a5,12(a5)
80002cd4:	10f76a63          	bltu	a4,a5,80002de8 <SPI_isr+0x324>
				  ( this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size ) )
80002cd8:	fdc42783          	lw	a5,-36(s0)
80002cdc:	01c7a703          	lw	a4,28(a5)
80002ce0:	fdc42783          	lw	a5,-36(s0)
80002ce4:	0187a783          	lw	a5,24(a5)
				if( this_spi->cmd_done && ( this_spi->slave_tx_idx >= this_spi->slave_tx_size ) &&
80002ce8:	10f76063          	bltu	a4,a5,80002de8 <SPI_isr+0x324>
				{
	                guard = 1 + ((int32_t)this_spi->fifo_depth / 4);
80002cec:	fdc42783          	lw	a5,-36(s0)
80002cf0:	0447d783          	lhu	a5,68(a5)
80002cf4:	0027d793          	srli	a5,a5,0x2
80002cf8:	01079793          	slli	a5,a5,0x10
80002cfc:	0107d793          	srli	a5,a5,0x10
80002d00:	00178793          	addi	a5,a5,1
80002d04:	fef42623          	sw	a5,-20(s0)
	            	while( ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
80002d08:	0280006f          	j	80002d30 <SPI_isr+0x26c>
	            	{
						/*
						 * Pad TX FIFO with 0s for consistent behaviour if the master
						 * tries to transfer more than we expected.
						 */
						HAL_set_32bit_reg(this_spi->base_addr, TXDATA, 0x00u);
80002d0c:	fdc42783          	lw	a5,-36(s0)
80002d10:	0007a783          	lw	a5,0(a5)
80002d14:	00c78793          	addi	a5,a5,12
80002d18:	00000593          	li	a1,0
80002d1c:	00078513          	mv	a0,a5
80002d20:	f3dfd0ef          	jal	80000c5c <HW_set_32bit_reg>
						 * We use the guard count to cover the event that we are never
						 * seeing the TX FIFO full because the data is being pulled
						 * out as fast as we can stuff it in. In this case we never spend
						 * more than our allocated time spinning here.
						 */
						guard--;
80002d24:	fec42783          	lw	a5,-20(s0)
80002d28:	fff78793          	addi	a5,a5,-1
80002d2c:	fef42623          	sw	a5,-20(s0)
	            	while( ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
80002d30:	fdc42783          	lw	a5,-36(s0)
80002d34:	0007a783          	lw	a5,0(a5)
80002d38:	02078793          	addi	a5,a5,32
80002d3c:	00800613          	li	a2,8
80002d40:	00300593          	li	a1,3
80002d44:	00078513          	mv	a0,a5
80002d48:	ac0fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002d4c:	00050793          	mv	a5,a0
80002d50:	08079c63          	bnez	a5,80002de8 <SPI_isr+0x324>
	            	    && ( 0 != guard ) )
80002d54:	fec42783          	lw	a5,-20(s0)
80002d58:	fa079ae3          	bnez	a5,80002d0c <SPI_isr+0x248>
80002d5c:	08c0006f          	j	80002de8 <SPI_isr+0x324>
            		}
				}
			}
            else if( SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode ) /* Single frame handling mode. */
80002d60:	fdc42783          	lw	a5,-36(s0)
80002d64:	0487a703          	lw	a4,72(a5)
80002d68:	00200793          	li	a5,2
80002d6c:	06f71263          	bne	a4,a5,80002dd0 <SPI_isr+0x30c>
            {
                while( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80002d70:	0380006f          	j	80002da8 <SPI_isr+0x2e4>
                {
                	rx_frame = HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80002d74:	fdc42783          	lw	a5,-36(s0)
80002d78:	0007a783          	lw	a5,0(a5)
80002d7c:	00878793          	addi	a5,a5,8
80002d80:	00078513          	mv	a0,a5
80002d84:	f11fd0ef          	jal	80000c94 <HW_get_32bit_reg>
80002d88:	fea42423          	sw	a0,-24(s0)
                    if( NULL_FRAME_HANDLER != this_spi->frame_rx_handler )
80002d8c:	fdc42783          	lw	a5,-36(s0)
80002d90:	0347a783          	lw	a5,52(a5)
80002d94:	00078a63          	beqz	a5,80002da8 <SPI_isr+0x2e4>
                    {
                    	this_spi->frame_rx_handler( rx_frame );
80002d98:	fdc42783          	lw	a5,-36(s0)
80002d9c:	0347a783          	lw	a5,52(a5)
80002da0:	fe842503          	lw	a0,-24(s0)
80002da4:	000780e7          	jalr	a5
                while( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80002da8:	fdc42783          	lw	a5,-36(s0)
80002dac:	0007a783          	lw	a5,0(a5)
80002db0:	02078793          	addi	a5,a5,32
80002db4:	00400613          	li	a2,4
80002db8:	00200593          	li	a1,2
80002dbc:	00078513          	mv	a0,a5
80002dc0:	a48fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002dc4:	00050793          	mv	a5,a0
80002dc8:	fa0786e3          	beqz	a5,80002d74 <SPI_isr+0x2b0>
80002dcc:	01c0006f          	j	80002de8 <SPI_isr+0x324>
                    }
                }
            }
            else /* Slave transfer mode not set up so discard anything in RX FIFO */
            {
                HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_RXFIFORST_MASK );
80002dd0:	fdc42783          	lw	a5,-36(s0)
80002dd4:	0007a783          	lw	a5,0(a5)
80002dd8:	01c78793          	addi	a5,a5,28
80002ddc:	00100593          	li	a1,1
80002de0:	00078513          	mv	a0,a5
80002de4:	924fe0ef          	jal	80000f08 <HW_set_8bit_reg>
            }

            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_RXDATA, ENABLE );
80002de8:	fdc42783          	lw	a5,-36(s0)
80002dec:	0007a783          	lw	a5,0(a5)
80002df0:	00478793          	addi	a5,a5,4
80002df4:	00100693          	li	a3,1
80002df8:	04000613          	li	a2,64
80002dfc:	00600593          	li	a1,6
80002e00:	00078513          	mv	a0,a5
80002e04:	974fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        }

        /* Handle transmit. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_TXDONE ) )
80002e08:	fdc42783          	lw	a5,-36(s0)
80002e0c:	0007a783          	lw	a5,0(a5)
80002e10:	01078793          	addi	a5,a5,16
80002e14:	00100613          	li	a2,1
80002e18:	00000593          	li	a1,0
80002e1c:	00078513          	mv	a0,a5
80002e20:	9e8fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002e24:	00050793          	mv	a5,a0
80002e28:	00078713          	mv	a4,a5
80002e2c:	00100793          	li	a5,1
80002e30:	08f71e63          	bne	a4,a5,80002ecc <SPI_isr+0x408>
        	 * Note, the driver only currently uses the txdone interrupt when
        	 * in frame transmit mode. In block mode all TX handling is done by the
        	 * receive interrupt handling code as we know that for every frame received
        	 * a frame must be placed in the TX FIFO.
        	 */
            if( SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
80002e34:	fdc42783          	lw	a5,-36(s0)
80002e38:	0487a703          	lw	a4,72(a5)
80002e3c:	00200793          	li	a5,2
80002e40:	04f71263          	bne	a4,a5,80002e84 <SPI_isr+0x3c0>
            {
                /* Execute the user callback to update the slave_tx_frame */
        	    if( NULL_SLAVE_TX_UPDATE_HANDLER != this_spi->slave_tx_frame_handler )
80002e44:	fdc42783          	lw	a5,-36(s0)
80002e48:	03c7a783          	lw	a5,60(a5)
80002e4c:	00078a63          	beqz	a5,80002e60 <SPI_isr+0x39c>
                {
        		    this_spi->slave_tx_frame_handler ( this_spi );
80002e50:	fdc42783          	lw	a5,-36(s0)
80002e54:	03c7a783          	lw	a5,60(a5)
80002e58:	fdc42503          	lw	a0,-36(s0)
80002e5c:	000780e7          	jalr	a5
                }

                /* Reload slave tx frame into Tx data register. */
                HAL_set_32bit_reg( this_spi->base_addr, TXLAST, this_spi->slave_tx_frame );
80002e60:	fdc42783          	lw	a5,-36(s0)
80002e64:	0007a783          	lw	a5,0(a5)
80002e68:	02878713          	addi	a4,a5,40
80002e6c:	fdc42783          	lw	a5,-36(s0)
80002e70:	0387a783          	lw	a5,56(a5)
80002e74:	00078593          	mv	a1,a5
80002e78:	00070513          	mv	a0,a4
80002e7c:	de1fd0ef          	jal	80000c5c <HW_set_32bit_reg>
80002e80:	02c0006f          	j	80002eac <SPI_isr+0x3e8>
            }
            else if( SPI_SLAVE_XFER_BLOCK != this_spi->slave_xfer_mode )
80002e84:	fdc42783          	lw	a5,-36(s0)
80002e88:	0487a703          	lw	a4,72(a5)
80002e8c:	00100793          	li	a5,1
80002e90:	00f70e63          	beq	a4,a5,80002eac <SPI_isr+0x3e8>
            {
            	/* Slave transfer mode not set up so discard anything in TX FIFO */
                HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK );
80002e94:	fdc42783          	lw	a5,-36(s0)
80002e98:	0007a783          	lw	a5,0(a5)
80002e9c:	01c78793          	addi	a5,a5,28
80002ea0:	00200593          	li	a1,2
80002ea4:	00078513          	mv	a0,a5
80002ea8:	860fe0ef          	jal	80000f08 <HW_set_8bit_reg>
            else
            {
                /* Nothing to do, no slave mode configured */
            }

            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_TXDONE, ENABLE );
80002eac:	fdc42783          	lw	a5,-36(s0)
80002eb0:	0007a783          	lw	a5,0(a5)
80002eb4:	00478793          	addi	a5,a5,4
80002eb8:	00100693          	li	a3,1
80002ebc:	00100613          	li	a2,1
80002ec0:	00000593          	li	a1,0
80002ec4:	00078513          	mv	a0,a5
80002ec8:	8b0fe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        }


        /* Handle receive overflow. */
        if( ENABLE == HAL_get_8bit_reg_field(this_spi->base_addr, INTMASK_RXOVERFLOW))
80002ecc:	fdc42783          	lw	a5,-36(s0)
80002ed0:	0007a783          	lw	a5,0(a5)
80002ed4:	01078793          	addi	a5,a5,16
80002ed8:	00400613          	li	a2,4
80002edc:	00200593          	li	a1,2
80002ee0:	00078513          	mv	a0,a5
80002ee4:	924fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002ee8:	00050793          	mv	a5,a0
80002eec:	00078713          	mv	a4,a5
80002ef0:	00100793          	li	a5,1
80002ef4:	02f71e63          	bne	a4,a5,80002f30 <SPI_isr+0x46c>
        {
            HAL_set_8bit_reg(this_spi->base_addr, CMD, CMD_RXFIFORST_MASK);
80002ef8:	fdc42783          	lw	a5,-36(s0)
80002efc:	0007a783          	lw	a5,0(a5)
80002f00:	01c78793          	addi	a5,a5,28
80002f04:	00100593          	li	a1,1
80002f08:	00078513          	mv	a0,a5
80002f0c:	ffdfd0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg_field(this_spi->base_addr, INTCLR_RXOVERFLOW, ENABLE);
80002f10:	fdc42783          	lw	a5,-36(s0)
80002f14:	0007a783          	lw	a5,0(a5)
80002f18:	00478793          	addi	a5,a5,4
80002f1c:	00100693          	li	a3,1
80002f20:	00400613          	li	a2,4
80002f24:	00200593          	li	a1,2
80002f28:	00078513          	mv	a0,a5
80002f2c:	84cfe0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        }

        /* Handle transmit under run. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_TXUNDERRUN ) )
80002f30:	fdc42783          	lw	a5,-36(s0)
80002f34:	0007a783          	lw	a5,0(a5)
80002f38:	01078793          	addi	a5,a5,16
80002f3c:	00800613          	li	a2,8
80002f40:	00300593          	li	a1,3
80002f44:	00078513          	mv	a0,a5
80002f48:	8c0fe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002f4c:	00050793          	mv	a5,a0
80002f50:	00078713          	mv	a4,a5
80002f54:	00100793          	li	a5,1
80002f58:	02f71e63          	bne	a4,a5,80002f94 <SPI_isr+0x4d0>
        {
            HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK );
80002f5c:	fdc42783          	lw	a5,-36(s0)
80002f60:	0007a783          	lw	a5,0(a5)
80002f64:	01c78793          	addi	a5,a5,28
80002f68:	00200593          	li	a1,2
80002f6c:	00078513          	mv	a0,a5
80002f70:	f99fd0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_TXUNDERRUN, ENABLE );
80002f74:	fdc42783          	lw	a5,-36(s0)
80002f78:	0007a783          	lw	a5,0(a5)
80002f7c:	00478793          	addi	a5,a5,4
80002f80:	00100693          	li	a3,1
80002f84:	00800613          	li	a2,8
80002f88:	00300593          	li	a1,3
80002f8c:	00078513          	mv	a0,a5
80002f90:	fe9fd0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        }

        /* Handle command interrupt. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_CMDINT ) )
80002f94:	fdc42783          	lw	a5,-36(s0)
80002f98:	0007a783          	lw	a5,0(a5)
80002f9c:	01078793          	addi	a5,a5,16
80002fa0:	01000613          	li	a2,16
80002fa4:	00400593          	li	a1,4
80002fa8:	00078513          	mv	a0,a5
80002fac:	85cfe0ef          	jal	80001008 <HW_get_8bit_reg_field>
80002fb0:	00050793          	mv	a5,a0
80002fb4:	00078713          	mv	a4,a5
80002fb8:	00100793          	li	a5,1
80002fbc:	08f71463          	bne	a4,a5,80003044 <SPI_isr+0x580>
        {
            read_slave_rx_fifo( this_spi );
80002fc0:	fdc42503          	lw	a0,-36(s0)
80002fc4:	324000ef          	jal	800032e8 <read_slave_rx_fifo>

            /*
             * Call the command handler if one exists.
             */
			if( NULL_SLAVE_CMD_HANDLER != this_spi->cmd_handler )
80002fc8:	fdc42783          	lw	a5,-36(s0)
80002fcc:	0207a783          	lw	a5,32(a5)
80002fd0:	02078463          	beqz	a5,80002ff8 <SPI_isr+0x534>
            {
                this_spi->cmd_handler( this_spi->slave_rx_buffer, this_spi->slave_rx_idx );
80002fd4:	fdc42783          	lw	a5,-36(s0)
80002fd8:	0207a683          	lw	a3,32(a5)
80002fdc:	fdc42783          	lw	a5,-36(s0)
80002fe0:	0287a703          	lw	a4,40(a5)
80002fe4:	fdc42783          	lw	a5,-36(s0)
80002fe8:	0307a783          	lw	a5,48(a5)
80002fec:	00078593          	mv	a1,a5
80002ff0:	00070513          	mv	a0,a4
80002ff4:	000680e7          	jalr	a3
            }
            this_spi->cmd_done = 1u;
80002ff8:	fdc42783          	lw	a5,-36(s0)
80002ffc:	00100713          	li	a4,1
80003000:	02e7a223          	sw	a4,36(a5)
            /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD, DISABLE );
80003004:	fdc42783          	lw	a5,-36(s0)
80003008:	0007a783          	lw	a5,0(a5)
8000300c:	01878793          	addi	a5,a5,24
80003010:	00000693          	li	a3,0
80003014:	01000613          	li	a2,16
80003018:	00400593          	li	a1,4
8000301c:	00078513          	mv	a0,a5
80003020:	f59fd0ef          	jal	80000f78 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_CMDINT, ENABLE );
80003024:	fdc42783          	lw	a5,-36(s0)
80003028:	0007a783          	lw	a5,0(a5)
8000302c:	00478793          	addi	a5,a5,4
80003030:	00100693          	li	a3,1
80003034:	01000613          	li	a2,16
80003038:	00400593          	li	a1,4
8000303c:	00078513          	mv	a0,a5
80003040:	f39fd0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        }

        /* Handle slave select becoming de-asserted. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_SSEND) )
80003044:	fdc42783          	lw	a5,-36(s0)
80003048:	0007a783          	lw	a5,0(a5)
8000304c:	01078793          	addi	a5,a5,16
80003050:	02000613          	li	a2,32
80003054:	00500593          	li	a1,5
80003058:	00078513          	mv	a0,a5
8000305c:	fadfd0ef          	jal	80001008 <HW_get_8bit_reg_field>
80003060:	00050793          	mv	a5,a0
80003064:	00078713          	mv	a4,a5
80003068:	00100793          	li	a5,1
8000306c:	12f71663          	bne	a4,a5,80003198 <SPI_isr+0x6d4>
        {
        	/* Only supposed to do all this if transferring blocks... */
        	if(SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
80003070:	fdc42783          	lw	a5,-36(s0)
80003074:	0487a703          	lw	a4,72(a5)
80003078:	00100793          	li	a5,1
8000307c:	0ef71e63          	bne	a4,a5,80003178 <SPI_isr+0x6b4>
        	{
				uint32_t rx_size;

				/* Empty any remaining bytes in RX FIFO */
				read_slave_rx_fifo( this_spi );
80003080:	fdc42503          	lw	a0,-36(s0)
80003084:	264000ef          	jal	800032e8 <read_slave_rx_fifo>
				rx_size = this_spi->slave_rx_idx;
80003088:	fdc42783          	lw	a5,-36(s0)
8000308c:	0307a783          	lw	a5,48(a5)
80003090:	fef42223          	sw	a5,-28(s0)
				/*
				 * Re-enable command interrupt if required. 
				 * Must be done before re loading FIFO to ensure stale response
				 * data is not pushed into the FIFO.
				 */
				if(NULL_SLAVE_CMD_HANDLER != this_spi->cmd_handler)
80003094:	fdc42783          	lw	a5,-36(s0)
80003098:	0207a783          	lw	a5,32(a5)
8000309c:	06078263          	beqz	a5,80003100 <SPI_isr+0x63c>
				{
					this_spi->cmd_done = 0u;
800030a0:	fdc42783          	lw	a5,-36(s0)
800030a4:	0207a223          	sw	zero,36(a5)
					this_spi->resp_tx_buffer = 0u;
800030a8:	fdc42783          	lw	a5,-36(s0)
800030ac:	0007aa23          	sw	zero,20(a5)
					this_spi->resp_buff_size = 0u;
800030b0:	fdc42783          	lw	a5,-36(s0)
800030b4:	0007ac23          	sw	zero,24(a5)
					this_spi->resp_buff_tx_idx = 0u;
800030b8:	fdc42783          	lw	a5,-36(s0)
800030bc:	0007ae23          	sw	zero,28(a5)
					HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_CMDINT, ENABLE );
800030c0:	fdc42783          	lw	a5,-36(s0)
800030c4:	0007a783          	lw	a5,0(a5)
800030c8:	00478793          	addi	a5,a5,4
800030cc:	00100693          	li	a3,1
800030d0:	01000613          	li	a2,16
800030d4:	00400593          	li	a1,4
800030d8:	00078513          	mv	a0,a5
800030dc:	e9dfd0ef          	jal	80000f78 <HW_set_8bit_reg_field>
					HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD, ENABLE );
800030e0:	fdc42783          	lw	a5,-36(s0)
800030e4:	0007a783          	lw	a5,0(a5)
800030e8:	01878793          	addi	a5,a5,24
800030ec:	00100693          	li	a3,1
800030f0:	01000613          	li	a2,16
800030f4:	00400593          	li	a1,4
800030f8:	00078513          	mv	a0,a5
800030fc:	e7dfd0ef          	jal	80000f78 <HW_set_8bit_reg_field>
				/*
				 * Reset the transmit index to 0 to restart transmit at the start of the
				 * transmit buffer in the next transaction. This also requires flushing
				 * the Tx FIFO and refilling it with the start of Tx data buffer.
				 */
				this_spi->slave_tx_idx = 0u;
80003100:	fdc42783          	lw	a5,-36(s0)
80003104:	0007a823          	sw	zero,16(a5)
				HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80003108:	fdc42783          	lw	a5,-36(s0)
8000310c:	0007a783          	lw	a5,0(a5)
80003110:	01c78793          	addi	a5,a5,28
80003114:	00300593          	li	a1,3
80003118:	00078513          	mv	a0,a5
8000311c:	dedfd0ef          	jal	80000f08 <HW_set_8bit_reg>
				fill_slave_tx_fifo( this_spi );
80003120:	fdc42503          	lw	a0,-36(s0)
80003124:	088000ef          	jal	800031ac <fill_slave_tx_fifo>

				/* Prepare to receive next packet. */
				this_spi->slave_rx_idx = 0u;
80003128:	fdc42783          	lw	a5,-36(s0)
8000312c:	0207a823          	sw	zero,48(a5)
				/*
				 * Call the receive handler if one exists.
				 */
				if( NULL_BLOCK_HANDLER != this_spi->block_rx_handler )
80003130:	fdc42783          	lw	a5,-36(s0)
80003134:	0407a783          	lw	a5,64(a5)
80003138:	02078063          	beqz	a5,80003158 <SPI_isr+0x694>
				{
					this_spi->block_rx_handler( this_spi->slave_rx_buffer, rx_size );
8000313c:	fdc42783          	lw	a5,-36(s0)
80003140:	0407a703          	lw	a4,64(a5)
80003144:	fdc42783          	lw	a5,-36(s0)
80003148:	0287a783          	lw	a5,40(a5)
8000314c:	fe442583          	lw	a1,-28(s0)
80003150:	00078513          	mv	a0,a5
80003154:	000700e7          	jalr	a4
				}

				HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_RXDATA, ENABLE );
80003158:	fdc42783          	lw	a5,-36(s0)
8000315c:	0007a783          	lw	a5,0(a5)
80003160:	00478793          	addi	a5,a5,4
80003164:	00100693          	li	a3,1
80003168:	04000613          	li	a2,64
8000316c:	00600593          	li	a1,6
80003170:	00078513          	mv	a0,a5
80003174:	e05fd0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        	}

            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_SSEND, ENABLE );
80003178:	fdc42783          	lw	a5,-36(s0)
8000317c:	0007a783          	lw	a5,0(a5)
80003180:	00478793          	addi	a5,a5,4
80003184:	00100693          	li	a3,1
80003188:	02000613          	li	a2,32
8000318c:	00500593          	li	a1,5
80003190:	00078513          	mv	a0,a5
80003194:	de5fd0ef          	jal	80000f78 <HW_set_8bit_reg_field>
        }
    }
}
80003198:	00000013          	nop
8000319c:	02c12083          	lw	ra,44(sp)
800031a0:	02812403          	lw	s0,40(sp)
800031a4:	03010113          	addi	sp,sp,48
800031a8:	00008067          	ret

800031ac <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    spi_instance_t * this_spi
)
{
800031ac:	fe010113          	addi	sp,sp,-32
800031b0:	00112e23          	sw	ra,28(sp)
800031b4:	00812c23          	sw	s0,24(sp)
800031b8:	02010413          	addi	s0,sp,32
800031bc:	fea42623          	sw	a0,-20(s0)
	/* First see if slave_tx_buffer needs transmitting */
	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) &&
800031c0:	0480006f          	j	80003208 <fill_slave_tx_fifo+0x5c>
			!HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
	{
		HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->slave_tx_buffer[this_spi->slave_tx_idx] );
800031c4:	fec42783          	lw	a5,-20(s0)
800031c8:	0007a783          	lw	a5,0(a5)
800031cc:	00c78693          	addi	a3,a5,12
800031d0:	fec42783          	lw	a5,-20(s0)
800031d4:	0087a703          	lw	a4,8(a5)
800031d8:	fec42783          	lw	a5,-20(s0)
800031dc:	0107a783          	lw	a5,16(a5)
800031e0:	00f707b3          	add	a5,a4,a5
800031e4:	0007c783          	lbu	a5,0(a5)
800031e8:	00078593          	mv	a1,a5
800031ec:	00068513          	mv	a0,a3
800031f0:	a6dfd0ef          	jal	80000c5c <HW_set_32bit_reg>
		++this_spi->slave_tx_idx;
800031f4:	fec42783          	lw	a5,-20(s0)
800031f8:	0107a783          	lw	a5,16(a5)
800031fc:	00178713          	addi	a4,a5,1
80003200:	fec42783          	lw	a5,-20(s0)
80003204:	00e7a823          	sw	a4,16(a5)
	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) &&
80003208:	fec42783          	lw	a5,-20(s0)
8000320c:	0107a703          	lw	a4,16(a5)
80003210:	fec42783          	lw	a5,-20(s0)
80003214:	00c7a783          	lw	a5,12(a5)
80003218:	02f77463          	bleu	a5,a4,80003240 <fill_slave_tx_fifo+0x94>
			!HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
8000321c:	fec42783          	lw	a5,-20(s0)
80003220:	0007a783          	lw	a5,0(a5)
80003224:	02078793          	addi	a5,a5,32
80003228:	00800613          	li	a2,8
8000322c:	00300593          	li	a1,3
80003230:	00078513          	mv	a0,a5
80003234:	dd5fd0ef          	jal	80001008 <HW_get_8bit_reg_field>
80003238:	00050793          	mv	a5,a0
	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) &&
8000323c:	f80784e3          	beqz	a5,800031c4 <fill_slave_tx_fifo+0x18>
	}

    /* Then see if it is safe to look at putting resp_tx_buffer in FIFO? */
    if( this_spi->slave_tx_idx >= this_spi->slave_tx_size )
80003240:	fec42783          	lw	a5,-20(s0)
80003244:	0107a703          	lw	a4,16(a5)
80003248:	fec42783          	lw	a5,-20(s0)
8000324c:	00c7a783          	lw	a5,12(a5)
80003250:	08f76263          	bltu	a4,a5,800032d4 <fill_slave_tx_fifo+0x128>
    {
        while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size ) &&
80003254:	0480006f          	j	8000329c <fill_slave_tx_fifo+0xf0>
        		!HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
        {
			HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx] );
80003258:	fec42783          	lw	a5,-20(s0)
8000325c:	0007a783          	lw	a5,0(a5)
80003260:	00c78693          	addi	a3,a5,12
80003264:	fec42783          	lw	a5,-20(s0)
80003268:	0147a703          	lw	a4,20(a5)
8000326c:	fec42783          	lw	a5,-20(s0)
80003270:	01c7a783          	lw	a5,28(a5)
80003274:	00f707b3          	add	a5,a4,a5
80003278:	0007c783          	lbu	a5,0(a5)
8000327c:	00078593          	mv	a1,a5
80003280:	00068513          	mv	a0,a3
80003284:	9d9fd0ef          	jal	80000c5c <HW_set_32bit_reg>
			++this_spi->resp_buff_tx_idx;
80003288:	fec42783          	lw	a5,-20(s0)
8000328c:	01c7a783          	lw	a5,28(a5)
80003290:	00178713          	addi	a4,a5,1
80003294:	fec42783          	lw	a5,-20(s0)
80003298:	00e7ae23          	sw	a4,28(a5)
        while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size ) &&
8000329c:	fec42783          	lw	a5,-20(s0)
800032a0:	01c7a703          	lw	a4,28(a5)
800032a4:	fec42783          	lw	a5,-20(s0)
800032a8:	0187a783          	lw	a5,24(a5)
800032ac:	02f77463          	bleu	a5,a4,800032d4 <fill_slave_tx_fifo+0x128>
        		!HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
800032b0:	fec42783          	lw	a5,-20(s0)
800032b4:	0007a783          	lw	a5,0(a5)
800032b8:	02078793          	addi	a5,a5,32
800032bc:	00800613          	li	a2,8
800032c0:	00300593          	li	a1,3
800032c4:	00078513          	mv	a0,a5
800032c8:	d41fd0ef          	jal	80001008 <HW_get_8bit_reg_field>
800032cc:	00050793          	mv	a5,a0
        while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size ) &&
800032d0:	f80784e3          	beqz	a5,80003258 <fill_slave_tx_fifo+0xac>
        }
    }
}
800032d4:	00000013          	nop
800032d8:	01c12083          	lw	ra,28(sp)
800032dc:	01812403          	lw	s0,24(sp)
800032e0:	02010113          	addi	sp,sp,32
800032e4:	00008067          	ret

800032e8 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    spi_instance_t * this_spi
)
{
800032e8:	fd010113          	addi	sp,sp,-48
800032ec:	02112623          	sw	ra,44(sp)
800032f0:	02812423          	sw	s0,40(sp)
800032f4:	03010413          	addi	s0,sp,48
800032f8:	fca42e23          	sw	a0,-36(s0)
    uint32_t rx_frame;
    
    if( SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode ) /* Block handling mode. */
800032fc:	fdc42783          	lw	a5,-36(s0)
80003300:	0487a703          	lw	a4,72(a5)
80003304:	00100793          	li	a5,1
80003308:	08f71863          	bne	a4,a5,80003398 <read_slave_rx_fifo+0xb0>
    {
        while( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
8000330c:	0640006f          	j	80003370 <read_slave_rx_fifo+0x88>
        {
            rx_frame = HAL_get_32bit_reg( this_spi->base_addr, RXDATA ); /* Read irresepective to clear the RX IRQ */
80003310:	fdc42783          	lw	a5,-36(s0)
80003314:	0007a783          	lw	a5,0(a5)
80003318:	00878793          	addi	a5,a5,8
8000331c:	00078513          	mv	a0,a5
80003320:	975fd0ef          	jal	80000c94 <HW_get_32bit_reg>
80003324:	fea42623          	sw	a0,-20(s0)
        	if( this_spi->slave_rx_idx < this_spi->slave_rx_size )
80003328:	fdc42783          	lw	a5,-36(s0)
8000332c:	0307a703          	lw	a4,48(a5)
80003330:	fdc42783          	lw	a5,-36(s0)
80003334:	02c7a783          	lw	a5,44(a5)
80003338:	02f77263          	bleu	a5,a4,8000335c <read_slave_rx_fifo+0x74>
			{
				this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
8000333c:	fdc42783          	lw	a5,-36(s0)
80003340:	0287a703          	lw	a4,40(a5)
80003344:	fdc42783          	lw	a5,-36(s0)
80003348:	0307a783          	lw	a5,48(a5)
8000334c:	00f707b3          	add	a5,a4,a5
80003350:	fec42703          	lw	a4,-20(s0)
80003354:	0ff77713          	andi	a4,a4,255
80003358:	00e78023          	sb	a4,0(a5)
			}
			++this_spi->slave_rx_idx;
8000335c:	fdc42783          	lw	a5,-36(s0)
80003360:	0307a783          	lw	a5,48(a5)
80003364:	00178713          	addi	a4,a5,1
80003368:	fdc42783          	lw	a5,-36(s0)
8000336c:	02e7a823          	sw	a4,48(a5)
        while( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80003370:	fdc42783          	lw	a5,-36(s0)
80003374:	0007a783          	lw	a5,0(a5)
80003378:	02078793          	addi	a5,a5,32
8000337c:	00400613          	li	a2,4
80003380:	00200593          	li	a1,2
80003384:	00078513          	mv	a0,a5
80003388:	c81fd0ef          	jal	80001008 <HW_get_8bit_reg_field>
8000338c:	00050793          	mv	a5,a0
80003390:	f80780e3          	beqz	a5,80003310 <read_slave_rx_fifo+0x28>
    }
    else /* Slave transfer mode not set up so discard anything in RX FIFO */
    {
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_RXFIFORST_MASK );
    }
}
80003394:	08c0006f          	j	80003420 <read_slave_rx_fifo+0x138>
    else if( SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode ) /* Frame handling mode */
80003398:	fdc42783          	lw	a5,-36(s0)
8000339c:	0487a703          	lw	a4,72(a5)
800033a0:	00200793          	li	a5,2
800033a4:	06f71263          	bne	a4,a5,80003408 <read_slave_rx_fifo+0x120>
        while( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
800033a8:	0380006f          	j	800033e0 <read_slave_rx_fifo+0xf8>
            rx_frame = HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
800033ac:	fdc42783          	lw	a5,-36(s0)
800033b0:	0007a783          	lw	a5,0(a5)
800033b4:	00878793          	addi	a5,a5,8
800033b8:	00078513          	mv	a0,a5
800033bc:	8d9fd0ef          	jal	80000c94 <HW_get_32bit_reg>
800033c0:	fea42623          	sw	a0,-20(s0)
            if( NULL_FRAME_HANDLER != this_spi->frame_rx_handler )
800033c4:	fdc42783          	lw	a5,-36(s0)
800033c8:	0347a783          	lw	a5,52(a5)
800033cc:	00078a63          	beqz	a5,800033e0 <read_slave_rx_fifo+0xf8>
            	this_spi->frame_rx_handler( rx_frame );
800033d0:	fdc42783          	lw	a5,-36(s0)
800033d4:	0347a783          	lw	a5,52(a5)
800033d8:	fec42503          	lw	a0,-20(s0)
800033dc:	000780e7          	jalr	a5
        while( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
800033e0:	fdc42783          	lw	a5,-36(s0)
800033e4:	0007a783          	lw	a5,0(a5)
800033e8:	02078793          	addi	a5,a5,32
800033ec:	00400613          	li	a2,4
800033f0:	00200593          	li	a1,2
800033f4:	00078513          	mv	a0,a5
800033f8:	c11fd0ef          	jal	80001008 <HW_get_8bit_reg_field>
800033fc:	00050793          	mv	a5,a0
80003400:	fa0786e3          	beqz	a5,800033ac <read_slave_rx_fifo+0xc4>
}
80003404:	01c0006f          	j	80003420 <read_slave_rx_fifo+0x138>
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_RXFIFORST_MASK );
80003408:	fdc42783          	lw	a5,-36(s0)
8000340c:	0007a783          	lw	a5,0(a5)
80003410:	01c78793          	addi	a5,a5,28
80003414:	00100593          	li	a1,1
80003418:	00078513          	mv	a0,a5
8000341c:	aedfd0ef          	jal	80000f08 <HW_set_8bit_reg>
}
80003420:	00000013          	nop
80003424:	02c12083          	lw	ra,44(sp)
80003428:	02812403          	lw	s0,40(sp)
8000342c:	03010113          	addi	sp,sp,48
80003430:	00008067          	ret

80003434 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    const spi_instance_t * this_spi
)
{
80003434:	fe010113          	addi	sp,sp,-32
80003438:	00112e23          	sw	ra,28(sp)
8000343c:	00812c23          	sw	s0,24(sp)
80003440:	02010413          	addi	s0,sp,32
80003444:	fea42623          	sw	a0,-20(s0)
    /* Disable CoreSPI */
    HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80003448:	fec42783          	lw	a5,-20(s0)
8000344c:	0007a783          	lw	a5,0(a5)
80003450:	00000693          	li	a3,0
80003454:	00100613          	li	a2,1
80003458:	00000593          	li	a1,0
8000345c:	00078513          	mv	a0,a5
80003460:	b19fd0ef          	jal	80000f78 <HW_set_8bit_reg_field>

    /* Reset TX and RX FIFOs */
    HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80003464:	fec42783          	lw	a5,-20(s0)
80003468:	0007a783          	lw	a5,0(a5)
8000346c:	01c78793          	addi	a5,a5,28
80003470:	00300593          	li	a1,3
80003474:	00078513          	mv	a0,a5
80003478:	a91fd0ef          	jal	80000f08 <HW_set_8bit_reg>

    /* Clear all interrupts */
    HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
8000347c:	fec42783          	lw	a5,-20(s0)
80003480:	0007a783          	lw	a5,0(a5)
80003484:	00478793          	addi	a5,a5,4
80003488:	0ff00593          	li	a1,255
8000348c:	00078513          	mv	a0,a5
80003490:	a79fd0ef          	jal	80000f08 <HW_set_8bit_reg>

    /* Enable CoreSPI */
    HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
80003494:	fec42783          	lw	a5,-20(s0)
80003498:	0007a783          	lw	a5,0(a5)
8000349c:	00100693          	li	a3,1
800034a0:	00100613          	li	a2,1
800034a4:	00000593          	li	a1,0
800034a8:	00078513          	mv	a0,a5
800034ac:	acdfd0ef          	jal	80000f78 <HW_set_8bit_reg_field>
}
800034b0:	00000013          	nop
800034b4:	01c12083          	lw	ra,28(sp)
800034b8:	01812403          	lw	s0,24(sp)
800034bc:	02010113          	addi	sp,sp,32
800034c0:	00008067          	ret

800034c4 <GPIO_init>:
(
    gpio_instance_t *   this_gpio,
    addr_t              base_addr,
    gpio_apb_width_t    bus_width
)
{
800034c4:	fd010113          	addi	sp,sp,-48
800034c8:	02112623          	sw	ra,44(sp)
800034cc:	02812423          	sw	s0,40(sp)
800034d0:	03010413          	addi	s0,sp,48
800034d4:	fca42e23          	sw	a0,-36(s0)
800034d8:	fcb42c23          	sw	a1,-40(s0)
800034dc:	fcc42a23          	sw	a2,-44(s0)
    uint8_t i = 0;
800034e0:	fe0407a3          	sb	zero,-17(s0)
    addr_t cfg_reg_addr = base_addr;
800034e4:	fd842783          	lw	a5,-40(s0)
800034e8:	fef42423          	sw	a5,-24(s0)
    
    this_gpio->base_addr = base_addr;
800034ec:	fdc42783          	lw	a5,-36(s0)
800034f0:	fd842703          	lw	a4,-40(s0)
800034f4:	00e7a023          	sw	a4,0(a5)
    this_gpio->apb_bus_width = bus_width;
800034f8:	fdc42783          	lw	a5,-36(s0)
800034fc:	fd442703          	lw	a4,-44(s0)
80003500:	00e7a223          	sw	a4,4(a5)
    
    /* Clear configuration. */
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
80003504:	fe0407a3          	sb	zero,-17(s0)
80003508:	fd842783          	lw	a5,-40(s0)
8000350c:	fef42423          	sw	a5,-24(s0)
80003510:	0280006f          	j	80003538 <GPIO_init+0x74>
    {
        HW_set_8bit_reg( cfg_reg_addr, 0 );
80003514:	00000593          	li	a1,0
80003518:	fe842503          	lw	a0,-24(s0)
8000351c:	9edfd0ef          	jal	80000f08 <HW_set_8bit_reg>
        cfg_reg_addr += 4;
80003520:	fe842783          	lw	a5,-24(s0)
80003524:	00478793          	addi	a5,a5,4
80003528:	fef42423          	sw	a5,-24(s0)
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
8000352c:	fef44783          	lbu	a5,-17(s0)
80003530:	00178793          	addi	a5,a5,1
80003534:	fef407a3          	sb	a5,-17(s0)
80003538:	fef44703          	lbu	a4,-17(s0)
8000353c:	01f00793          	li	a5,31
80003540:	fce7fae3          	bleu	a4,a5,80003514 <GPIO_init+0x50>
    }
    /* Clear any pending interrupts */
    switch( this_gpio->apb_bus_width )
80003544:	fdc42783          	lw	a5,-36(s0)
80003548:	0047a783          	lw	a5,4(a5)
8000354c:	00100713          	li	a4,1
80003550:	02e78a63          	beq	a5,a4,80003584 <GPIO_init+0xc0>
80003554:	00100713          	li	a4,1
80003558:	06e7e463          	bltu	a5,a4,800035c0 <GPIO_init+0xfc>
8000355c:	00200713          	li	a4,2
80003560:	00e78463          	beq	a5,a4,80003568 <GPIO_init+0xa4>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80003564:	0c00006f          	j	80003624 <GPIO_init+0x160>
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
80003568:	fdc42783          	lw	a5,-36(s0)
8000356c:	0007a783          	lw	a5,0(a5)
80003570:	08078793          	addi	a5,a5,128
80003574:	fff00593          	li	a1,-1
80003578:	00078513          	mv	a0,a5
8000357c:	ee0fd0ef          	jal	80000c5c <HW_set_32bit_reg>
            break;
80003580:	0a40006f          	j	80003624 <GPIO_init+0x160>
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ0, (uint16_t)CLEAR_ALL_IRQ16 );
80003584:	fdc42783          	lw	a5,-36(s0)
80003588:	0007a783          	lw	a5,0(a5)
8000358c:	08078713          	addi	a4,a5,128
80003590:	000107b7          	lui	a5,0x10
80003594:	fff78593          	addi	a1,a5,-1 # ffff <_start-0x7fff0001>
80003598:	00070513          	mv	a0,a4
8000359c:	ff0fd0ef          	jal	80000d8c <HW_set_16bit_reg>
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
800035a0:	fdc42783          	lw	a5,-36(s0)
800035a4:	0007a783          	lw	a5,0(a5)
800035a8:	08478713          	addi	a4,a5,132
800035ac:	000107b7          	lui	a5,0x10
800035b0:	fff78593          	addi	a1,a5,-1 # ffff <_start-0x7fff0001>
800035b4:	00070513          	mv	a0,a4
800035b8:	fd4fd0ef          	jal	80000d8c <HW_set_16bit_reg>
            break;
800035bc:	0680006f          	j	80003624 <GPIO_init+0x160>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ0, (uint8_t)CLEAR_ALL_IRQ8 );
800035c0:	fdc42783          	lw	a5,-36(s0)
800035c4:	0007a783          	lw	a5,0(a5)
800035c8:	08078793          	addi	a5,a5,128
800035cc:	0ff00593          	li	a1,255
800035d0:	00078513          	mv	a0,a5
800035d4:	935fd0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ1, (uint8_t)CLEAR_ALL_IRQ8 );
800035d8:	fdc42783          	lw	a5,-36(s0)
800035dc:	0007a783          	lw	a5,0(a5)
800035e0:	08478793          	addi	a5,a5,132
800035e4:	0ff00593          	li	a1,255
800035e8:	00078513          	mv	a0,a5
800035ec:	91dfd0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ2, (uint8_t)CLEAR_ALL_IRQ8 );
800035f0:	fdc42783          	lw	a5,-36(s0)
800035f4:	0007a783          	lw	a5,0(a5)
800035f8:	08878793          	addi	a5,a5,136
800035fc:	0ff00593          	li	a1,255
80003600:	00078513          	mv	a0,a5
80003604:	905fd0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
80003608:	fdc42783          	lw	a5,-36(s0)
8000360c:	0007a783          	lw	a5,0(a5)
80003610:	08c78793          	addi	a5,a5,140
80003614:	0ff00593          	li	a1,255
80003618:	00078513          	mv	a0,a5
8000361c:	8edfd0ef          	jal	80000f08 <HW_set_8bit_reg>
            break;
80003620:	00000013          	nop
    }
}
80003624:	00000013          	nop
80003628:	02c12083          	lw	ra,44(sp)
8000362c:	02812403          	lw	s0,40(sp)
80003630:	03010113          	addi	sp,sp,48
80003634:	00008067          	ret

80003638 <GPIO_config>:
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    uint32_t            config
)
{
80003638:	fd010113          	addi	sp,sp,-48
8000363c:	02112623          	sw	ra,44(sp)
80003640:	02812423          	sw	s0,40(sp)
80003644:	03010413          	addi	s0,sp,48
80003648:	fca42e23          	sw	a0,-36(s0)
8000364c:	fcb42c23          	sw	a1,-40(s0)
80003650:	fcc42a23          	sw	a2,-44(s0)
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
80003654:	fd842703          	lw	a4,-40(s0)
80003658:	01f00793          	li	a5,31
8000365c:	02e7e863          	bltu	a5,a4,8000368c <GPIO_config+0x54>
    {
        uint32_t cfg_reg_addr = this_gpio->base_addr;
80003660:	fdc42783          	lw	a5,-36(s0)
80003664:	0007a783          	lw	a5,0(a5)
80003668:	fef42623          	sw	a5,-20(s0)
        cfg_reg_addr += (port_id * 4);
8000366c:	fd842783          	lw	a5,-40(s0)
80003670:	00279793          	slli	a5,a5,0x2
80003674:	fec42703          	lw	a4,-20(s0)
80003678:	00f707b3          	add	a5,a4,a5
8000367c:	fef42623          	sw	a5,-20(s0)
        HW_set_32bit_reg( cfg_reg_addr, config );
80003680:	fd442583          	lw	a1,-44(s0)
80003684:	fec42503          	lw	a0,-20(s0)
80003688:	dd4fd0ef          	jal	80000c5c <HW_set_32bit_reg>
         * It may also indicate that the base address passed as parameter to
         * GPIO_init() was incorrect.
         */
        HAL_ASSERT( HW_get_32bit_reg( cfg_reg_addr ) == config );
    }
}
8000368c:	00000013          	nop
80003690:	02c12083          	lw	ra,44(sp)
80003694:	02812403          	lw	s0,40(sp)
80003698:	03010113          	addi	sp,sp,48
8000369c:	00008067          	ret

800036a0 <GPIO_set_outputs>:
void GPIO_set_outputs
(
    gpio_instance_t *   this_gpio,
    uint32_t            value
)
{
800036a0:	fe010113          	addi	sp,sp,-32
800036a4:	00112e23          	sw	ra,28(sp)
800036a8:	00812c23          	sw	s0,24(sp)
800036ac:	02010413          	addi	s0,sp,32
800036b0:	fea42623          	sw	a0,-20(s0)
800036b4:	feb42423          	sw	a1,-24(s0)
    switch( this_gpio->apb_bus_width )
800036b8:	fec42783          	lw	a5,-20(s0)
800036bc:	0047a783          	lw	a5,4(a5)
800036c0:	00100713          	li	a4,1
800036c4:	02e78a63          	beq	a5,a4,800036f8 <GPIO_set_outputs+0x58>
800036c8:	00100713          	li	a4,1
800036cc:	06e7ee63          	bltu	a5,a4,80003748 <GPIO_set_outputs+0xa8>
800036d0:	00200713          	li	a4,2
800036d4:	00e78463          	beq	a5,a4,800036dc <GPIO_set_outputs+0x3c>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
            break;
            
        default:
            HAL_ASSERT(0);
            break;
800036d8:	1000006f          	j	800037d8 <GPIO_set_outputs+0x138>
            HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, value );
800036dc:	fec42783          	lw	a5,-20(s0)
800036e0:	0007a783          	lw	a5,0(a5)
800036e4:	0a078793          	addi	a5,a5,160
800036e8:	fe842583          	lw	a1,-24(s0)
800036ec:	00078513          	mv	a0,a5
800036f0:	d6cfd0ef          	jal	80000c5c <HW_set_32bit_reg>
            break;
800036f4:	0e40006f          	j	800037d8 <GPIO_set_outputs+0x138>
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT0, (uint16_t)value );
800036f8:	fec42783          	lw	a5,-20(s0)
800036fc:	0007a783          	lw	a5,0(a5)
80003700:	0a078793          	addi	a5,a5,160
80003704:	fe842703          	lw	a4,-24(s0)
80003708:	01071713          	slli	a4,a4,0x10
8000370c:	01075713          	srli	a4,a4,0x10
80003710:	00070593          	mv	a1,a4
80003714:	00078513          	mv	a0,a5
80003718:	e74fd0ef          	jal	80000d8c <HW_set_16bit_reg>
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
8000371c:	fec42783          	lw	a5,-20(s0)
80003720:	0007a783          	lw	a5,0(a5)
80003724:	0a478713          	addi	a4,a5,164
80003728:	fe842783          	lw	a5,-24(s0)
8000372c:	0107d793          	srli	a5,a5,0x10
80003730:	01079793          	slli	a5,a5,0x10
80003734:	0107d793          	srli	a5,a5,0x10
80003738:	00078593          	mv	a1,a5
8000373c:	00070513          	mv	a0,a4
80003740:	e4cfd0ef          	jal	80000d8c <HW_set_16bit_reg>
            break;
80003744:	0940006f          	j	800037d8 <GPIO_set_outputs+0x138>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT0, (uint8_t)value );
80003748:	fec42783          	lw	a5,-20(s0)
8000374c:	0007a783          	lw	a5,0(a5)
80003750:	0a078793          	addi	a5,a5,160
80003754:	fe842703          	lw	a4,-24(s0)
80003758:	0ff77713          	andi	a4,a4,255
8000375c:	00070593          	mv	a1,a4
80003760:	00078513          	mv	a0,a5
80003764:	fa4fd0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint8_t)(value >> 8) );
80003768:	fec42783          	lw	a5,-20(s0)
8000376c:	0007a783          	lw	a5,0(a5)
80003770:	0a478713          	addi	a4,a5,164
80003774:	fe842783          	lw	a5,-24(s0)
80003778:	0087d793          	srli	a5,a5,0x8
8000377c:	0ff7f793          	andi	a5,a5,255
80003780:	00078593          	mv	a1,a5
80003784:	00070513          	mv	a0,a4
80003788:	f80fd0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT2, (uint8_t)(value >> 16) );
8000378c:	fec42783          	lw	a5,-20(s0)
80003790:	0007a783          	lw	a5,0(a5)
80003794:	0a878713          	addi	a4,a5,168
80003798:	fe842783          	lw	a5,-24(s0)
8000379c:	0107d793          	srli	a5,a5,0x10
800037a0:	0ff7f793          	andi	a5,a5,255
800037a4:	00078593          	mv	a1,a5
800037a8:	00070513          	mv	a0,a4
800037ac:	f5cfd0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
800037b0:	fec42783          	lw	a5,-20(s0)
800037b4:	0007a783          	lw	a5,0(a5)
800037b8:	0ac78713          	addi	a4,a5,172
800037bc:	fe842783          	lw	a5,-24(s0)
800037c0:	0187d793          	srli	a5,a5,0x18
800037c4:	0ff7f793          	andi	a5,a5,255
800037c8:	00078593          	mv	a1,a5
800037cc:	00070513          	mv	a0,a4
800037d0:	f38fd0ef          	jal	80000f08 <HW_set_8bit_reg>
            break;
800037d4:	00000013          	nop
     * the number of GPIOs selected in the CoreGPIO hardware flow configuration.
     * It may also indicate that the base address or APB bus width passed as
     * parameter to the GPIO_init() function do not match the hardware design.
     */
    HAL_ASSERT( GPIO_get_outputs( this_gpio ) == value );
}
800037d8:	00000013          	nop
800037dc:	01c12083          	lw	ra,28(sp)
800037e0:	01812403          	lw	s0,24(sp)
800037e4:	02010113          	addi	sp,sp,32
800037e8:	00008067          	ret

800037ec <GPIO_get_inputs>:
 */
uint32_t GPIO_get_inputs
(
    gpio_instance_t *   this_gpio
)
{
800037ec:	fd010113          	addi	sp,sp,-48
800037f0:	02112623          	sw	ra,44(sp)
800037f4:	02812423          	sw	s0,40(sp)
800037f8:	03010413          	addi	s0,sp,48
800037fc:	fca42e23          	sw	a0,-36(s0)
    uint32_t gpio_in = 0;
80003800:	fe042623          	sw	zero,-20(s0)
    
    switch( this_gpio->apb_bus_width )
80003804:	fdc42783          	lw	a5,-36(s0)
80003808:	0047a783          	lw	a5,4(a5)
8000380c:	00100713          	li	a4,1
80003810:	02e78a63          	beq	a5,a4,80003844 <GPIO_get_inputs+0x58>
80003814:	00100713          	li	a4,1
80003818:	08e7e263          	bltu	a5,a4,8000389c <GPIO_get_inputs+0xb0>
8000381c:	00200713          	li	a4,2
80003820:	00e78463          	beq	a5,a4,80003828 <GPIO_get_inputs+0x3c>
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN3 ) << 24);
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80003824:	1280006f          	j	8000394c <GPIO_get_inputs+0x160>
            gpio_in = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_IN );
80003828:	fdc42783          	lw	a5,-36(s0)
8000382c:	0007a783          	lw	a5,0(a5)
80003830:	09078793          	addi	a5,a5,144
80003834:	00078513          	mv	a0,a5
80003838:	c5cfd0ef          	jal	80000c94 <HW_get_32bit_reg>
8000383c:	fea42623          	sw	a0,-20(s0)
            break;
80003840:	10c0006f          	j	8000394c <GPIO_get_inputs+0x160>
            gpio_in |= HAL_get_16bit_reg( this_gpio->base_addr, GPIO_IN0 );
80003844:	fdc42783          	lw	a5,-36(s0)
80003848:	0007a783          	lw	a5,0(a5)
8000384c:	09078793          	addi	a5,a5,144
80003850:	00078513          	mv	a0,a5
80003854:	d78fd0ef          	jal	80000dcc <HW_get_16bit_reg>
80003858:	00050793          	mv	a5,a0
8000385c:	00078713          	mv	a4,a5
80003860:	fec42783          	lw	a5,-20(s0)
80003864:	00e7e7b3          	or	a5,a5,a4
80003868:	fef42623          	sw	a5,-20(s0)
            gpio_in |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_IN1 ) << 16);
8000386c:	fdc42783          	lw	a5,-36(s0)
80003870:	0007a783          	lw	a5,0(a5)
80003874:	09478793          	addi	a5,a5,148
80003878:	00078513          	mv	a0,a5
8000387c:	d50fd0ef          	jal	80000dcc <HW_get_16bit_reg>
80003880:	00050793          	mv	a5,a0
80003884:	01079793          	slli	a5,a5,0x10
80003888:	00078713          	mv	a4,a5
8000388c:	fec42783          	lw	a5,-20(s0)
80003890:	00e7e7b3          	or	a5,a5,a4
80003894:	fef42623          	sw	a5,-20(s0)
            break;
80003898:	0b40006f          	j	8000394c <GPIO_get_inputs+0x160>
            gpio_in |= HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN0 );
8000389c:	fdc42783          	lw	a5,-36(s0)
800038a0:	0007a783          	lw	a5,0(a5)
800038a4:	09078793          	addi	a5,a5,144
800038a8:	00078513          	mv	a0,a5
800038ac:	e98fd0ef          	jal	80000f44 <HW_get_8bit_reg>
800038b0:	00050793          	mv	a5,a0
800038b4:	00078713          	mv	a4,a5
800038b8:	fec42783          	lw	a5,-20(s0)
800038bc:	00e7e7b3          	or	a5,a5,a4
800038c0:	fef42623          	sw	a5,-20(s0)
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN1 ) << 8);
800038c4:	fdc42783          	lw	a5,-36(s0)
800038c8:	0007a783          	lw	a5,0(a5)
800038cc:	09478793          	addi	a5,a5,148
800038d0:	00078513          	mv	a0,a5
800038d4:	e70fd0ef          	jal	80000f44 <HW_get_8bit_reg>
800038d8:	00050793          	mv	a5,a0
800038dc:	00879793          	slli	a5,a5,0x8
800038e0:	00078713          	mv	a4,a5
800038e4:	fec42783          	lw	a5,-20(s0)
800038e8:	00e7e7b3          	or	a5,a5,a4
800038ec:	fef42623          	sw	a5,-20(s0)
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN2 ) << 16);
800038f0:	fdc42783          	lw	a5,-36(s0)
800038f4:	0007a783          	lw	a5,0(a5)
800038f8:	09878793          	addi	a5,a5,152
800038fc:	00078513          	mv	a0,a5
80003900:	e44fd0ef          	jal	80000f44 <HW_get_8bit_reg>
80003904:	00050793          	mv	a5,a0
80003908:	01079793          	slli	a5,a5,0x10
8000390c:	00078713          	mv	a4,a5
80003910:	fec42783          	lw	a5,-20(s0)
80003914:	00e7e7b3          	or	a5,a5,a4
80003918:	fef42623          	sw	a5,-20(s0)
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN3 ) << 24);
8000391c:	fdc42783          	lw	a5,-36(s0)
80003920:	0007a783          	lw	a5,0(a5)
80003924:	09c78793          	addi	a5,a5,156
80003928:	00078513          	mv	a0,a5
8000392c:	e18fd0ef          	jal	80000f44 <HW_get_8bit_reg>
80003930:	00050793          	mv	a5,a0
80003934:	01879793          	slli	a5,a5,0x18
80003938:	00078713          	mv	a4,a5
8000393c:	fec42783          	lw	a5,-20(s0)
80003940:	00e7e7b3          	or	a5,a5,a4
80003944:	fef42623          	sw	a5,-20(s0)
            break;
80003948:	00000013          	nop
    }
    
    return gpio_in;
8000394c:	fec42783          	lw	a5,-20(s0)
}
80003950:	00078513          	mv	a0,a5
80003954:	02c12083          	lw	ra,44(sp)
80003958:	02812403          	lw	s0,40(sp)
8000395c:	03010113          	addi	sp,sp,48
80003960:	00008067          	ret

80003964 <GPIO_get_outputs>:
 */
uint32_t GPIO_get_outputs
(
    gpio_instance_t *   this_gpio
)
{
80003964:	fd010113          	addi	sp,sp,-48
80003968:	02112623          	sw	ra,44(sp)
8000396c:	02812423          	sw	s0,40(sp)
80003970:	03010413          	addi	s0,sp,48
80003974:	fca42e23          	sw	a0,-36(s0)
    uint32_t gpio_out = 0;
80003978:	fe042623          	sw	zero,-20(s0)
    
    switch( this_gpio->apb_bus_width )
8000397c:	fdc42783          	lw	a5,-36(s0)
80003980:	0047a783          	lw	a5,4(a5)
80003984:	00100713          	li	a4,1
80003988:	02e78a63          	beq	a5,a4,800039bc <GPIO_get_outputs+0x58>
8000398c:	00100713          	li	a4,1
80003990:	08e7e263          	bltu	a5,a4,80003a14 <GPIO_get_outputs+0xb0>
80003994:	00200713          	li	a4,2
80003998:	00e78463          	beq	a5,a4,800039a0 <GPIO_get_outputs+0x3c>
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT3 ) << 24);
            break;
            
        default:
            HAL_ASSERT(0);
            break;
8000399c:	1280006f          	j	80003ac4 <GPIO_get_outputs+0x160>
            gpio_out = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT );
800039a0:	fdc42783          	lw	a5,-36(s0)
800039a4:	0007a783          	lw	a5,0(a5)
800039a8:	0a078793          	addi	a5,a5,160
800039ac:	00078513          	mv	a0,a5
800039b0:	ae4fd0ef          	jal	80000c94 <HW_get_32bit_reg>
800039b4:	fea42623          	sw	a0,-20(s0)
            break;
800039b8:	10c0006f          	j	80003ac4 <GPIO_get_outputs+0x160>
            gpio_out |= HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT0 );
800039bc:	fdc42783          	lw	a5,-36(s0)
800039c0:	0007a783          	lw	a5,0(a5)
800039c4:	0a078793          	addi	a5,a5,160
800039c8:	00078513          	mv	a0,a5
800039cc:	c00fd0ef          	jal	80000dcc <HW_get_16bit_reg>
800039d0:	00050793          	mv	a5,a0
800039d4:	00078713          	mv	a4,a5
800039d8:	fec42783          	lw	a5,-20(s0)
800039dc:	00e7e7b3          	or	a5,a5,a4
800039e0:	fef42623          	sw	a5,-20(s0)
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT1 ) << 16);
800039e4:	fdc42783          	lw	a5,-36(s0)
800039e8:	0007a783          	lw	a5,0(a5)
800039ec:	0a478793          	addi	a5,a5,164
800039f0:	00078513          	mv	a0,a5
800039f4:	bd8fd0ef          	jal	80000dcc <HW_get_16bit_reg>
800039f8:	00050793          	mv	a5,a0
800039fc:	01079793          	slli	a5,a5,0x10
80003a00:	00078713          	mv	a4,a5
80003a04:	fec42783          	lw	a5,-20(s0)
80003a08:	00e7e7b3          	or	a5,a5,a4
80003a0c:	fef42623          	sw	a5,-20(s0)
            break;
80003a10:	0b40006f          	j	80003ac4 <GPIO_get_outputs+0x160>
            gpio_out |= HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT0 );
80003a14:	fdc42783          	lw	a5,-36(s0)
80003a18:	0007a783          	lw	a5,0(a5)
80003a1c:	0a078793          	addi	a5,a5,160
80003a20:	00078513          	mv	a0,a5
80003a24:	ba8fd0ef          	jal	80000dcc <HW_get_16bit_reg>
80003a28:	00050793          	mv	a5,a0
80003a2c:	00078713          	mv	a4,a5
80003a30:	fec42783          	lw	a5,-20(s0)
80003a34:	00e7e7b3          	or	a5,a5,a4
80003a38:	fef42623          	sw	a5,-20(s0)
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT1 ) << 8);
80003a3c:	fdc42783          	lw	a5,-36(s0)
80003a40:	0007a783          	lw	a5,0(a5)
80003a44:	0a478793          	addi	a5,a5,164
80003a48:	00078513          	mv	a0,a5
80003a4c:	b80fd0ef          	jal	80000dcc <HW_get_16bit_reg>
80003a50:	00050793          	mv	a5,a0
80003a54:	00879793          	slli	a5,a5,0x8
80003a58:	00078713          	mv	a4,a5
80003a5c:	fec42783          	lw	a5,-20(s0)
80003a60:	00e7e7b3          	or	a5,a5,a4
80003a64:	fef42623          	sw	a5,-20(s0)
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT2 ) << 16);
80003a68:	fdc42783          	lw	a5,-36(s0)
80003a6c:	0007a783          	lw	a5,0(a5)
80003a70:	0a878793          	addi	a5,a5,168
80003a74:	00078513          	mv	a0,a5
80003a78:	b54fd0ef          	jal	80000dcc <HW_get_16bit_reg>
80003a7c:	00050793          	mv	a5,a0
80003a80:	01079793          	slli	a5,a5,0x10
80003a84:	00078713          	mv	a4,a5
80003a88:	fec42783          	lw	a5,-20(s0)
80003a8c:	00e7e7b3          	or	a5,a5,a4
80003a90:	fef42623          	sw	a5,-20(s0)
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT3 ) << 24);
80003a94:	fdc42783          	lw	a5,-36(s0)
80003a98:	0007a783          	lw	a5,0(a5)
80003a9c:	0ac78793          	addi	a5,a5,172
80003aa0:	00078513          	mv	a0,a5
80003aa4:	b28fd0ef          	jal	80000dcc <HW_get_16bit_reg>
80003aa8:	00050793          	mv	a5,a0
80003aac:	01879793          	slli	a5,a5,0x18
80003ab0:	00078713          	mv	a4,a5
80003ab4:	fec42783          	lw	a5,-20(s0)
80003ab8:	00e7e7b3          	or	a5,a5,a4
80003abc:	fef42623          	sw	a5,-20(s0)
            break;
80003ac0:	00000013          	nop
    }
    
    return gpio_out;
80003ac4:	fec42783          	lw	a5,-20(s0)
}
80003ac8:	00078513          	mv	a0,a5
80003acc:	02c12083          	lw	ra,44(sp)
80003ad0:	02812403          	lw	s0,40(sp)
80003ad4:	03010113          	addi	sp,sp,48
80003ad8:	00008067          	ret

80003adc <GPIO_set_output>:
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    uint8_t             value
)
{
80003adc:	fd010113          	addi	sp,sp,-48
80003ae0:	02112623          	sw	ra,44(sp)
80003ae4:	02812423          	sw	s0,40(sp)
80003ae8:	03010413          	addi	s0,sp,48
80003aec:	fca42e23          	sw	a0,-36(s0)
80003af0:	fcb42c23          	sw	a1,-40(s0)
80003af4:	00060793          	mv	a5,a2
80003af8:	fcf40ba3          	sb	a5,-41(s0)
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
            
    switch( this_gpio->apb_bus_width )
80003afc:	fdc42783          	lw	a5,-36(s0)
80003b00:	0047a783          	lw	a5,4(a5)
80003b04:	00100713          	li	a4,1
80003b08:	08e78a63          	beq	a5,a4,80003b9c <GPIO_set_output+0xc0>
80003b0c:	00100713          	li	a4,1
80003b10:	14e7e063          	bltu	a5,a4,80003c50 <GPIO_set_output+0x174>
80003b14:	00200713          	li	a4,2
80003b18:	00e78463          	beq	a5,a4,80003b20 <GPIO_set_output+0x44>
            }
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80003b1c:	1e80006f          	j	80003d04 <GPIO_set_output+0x228>
                outputs_state = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT );
80003b20:	fdc42783          	lw	a5,-36(s0)
80003b24:	0007a783          	lw	a5,0(a5)
80003b28:	0a078793          	addi	a5,a5,160
80003b2c:	00078513          	mv	a0,a5
80003b30:	964fd0ef          	jal	80000c94 <HW_get_32bit_reg>
80003b34:	fea42623          	sw	a0,-20(s0)
                if ( 0 == value )
80003b38:	fd744783          	lbu	a5,-41(s0)
80003b3c:	02079463          	bnez	a5,80003b64 <GPIO_set_output+0x88>
                    outputs_state &= ~(1 << port_id);
80003b40:	00100713          	li	a4,1
80003b44:	fd842783          	lw	a5,-40(s0)
80003b48:	00f717b3          	sll	a5,a4,a5
80003b4c:	fff7c793          	not	a5,a5
80003b50:	00078713          	mv	a4,a5
80003b54:	fec42783          	lw	a5,-20(s0)
80003b58:	00e7f7b3          	and	a5,a5,a4
80003b5c:	fef42623          	sw	a5,-20(s0)
80003b60:	0200006f          	j	80003b80 <GPIO_set_output+0xa4>
                    outputs_state |= 1 << port_id;
80003b64:	00100713          	li	a4,1
80003b68:	fd842783          	lw	a5,-40(s0)
80003b6c:	00f717b3          	sll	a5,a4,a5
80003b70:	00078713          	mv	a4,a5
80003b74:	fec42783          	lw	a5,-20(s0)
80003b78:	00e7e7b3          	or	a5,a5,a4
80003b7c:	fef42623          	sw	a5,-20(s0)
                HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, outputs_state );
80003b80:	fdc42783          	lw	a5,-36(s0)
80003b84:	0007a783          	lw	a5,0(a5)
80003b88:	0a078793          	addi	a5,a5,160
80003b8c:	fec42583          	lw	a1,-20(s0)
80003b90:	00078513          	mv	a0,a5
80003b94:	8c8fd0ef          	jal	80000c5c <HW_set_32bit_reg>
            break;
80003b98:	16c0006f          	j	80003d04 <GPIO_set_output+0x228>
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 4) * 4);
80003b9c:	fdc42783          	lw	a5,-36(s0)
80003ba0:	0007a703          	lw	a4,0(a5)
80003ba4:	fd842783          	lw	a5,-40(s0)
80003ba8:	0047d793          	srli	a5,a5,0x4
80003bac:	00279793          	slli	a5,a5,0x2
80003bb0:	00f707b3          	add	a5,a4,a5
80003bb4:	0a078793          	addi	a5,a5,160
80003bb8:	fef42223          	sw	a5,-28(s0)
                outputs_state = HW_get_16bit_reg( gpio_out_reg_addr );
80003bbc:	fe442503          	lw	a0,-28(s0)
80003bc0:	a0cfd0ef          	jal	80000dcc <HW_get_16bit_reg>
80003bc4:	00050793          	mv	a5,a0
80003bc8:	fef41523          	sh	a5,-22(s0)
                if ( 0 == value )
80003bcc:	fd744783          	lbu	a5,-41(s0)
80003bd0:	04079063          	bnez	a5,80003c10 <GPIO_set_output+0x134>
                    outputs_state &= ~(1 << (port_id & 0x0F));
80003bd4:	fd842783          	lw	a5,-40(s0)
80003bd8:	00f7f793          	andi	a5,a5,15
80003bdc:	00100713          	li	a4,1
80003be0:	00f717b3          	sll	a5,a4,a5
80003be4:	01079793          	slli	a5,a5,0x10
80003be8:	4107d793          	srai	a5,a5,0x10
80003bec:	fff7c793          	not	a5,a5
80003bf0:	01079713          	slli	a4,a5,0x10
80003bf4:	41075713          	srai	a4,a4,0x10
80003bf8:	fea41783          	lh	a5,-22(s0)
80003bfc:	00f777b3          	and	a5,a4,a5
80003c00:	01079793          	slli	a5,a5,0x10
80003c04:	4107d793          	srai	a5,a5,0x10
80003c08:	fef41523          	sh	a5,-22(s0)
80003c0c:	0300006f          	j	80003c3c <GPIO_set_output+0x160>
                    outputs_state |= 1 << (port_id & 0x0F);
80003c10:	fd842783          	lw	a5,-40(s0)
80003c14:	00f7f793          	andi	a5,a5,15
80003c18:	00100713          	li	a4,1
80003c1c:	00f717b3          	sll	a5,a4,a5
80003c20:	01079713          	slli	a4,a5,0x10
80003c24:	41075713          	srai	a4,a4,0x10
80003c28:	fea41783          	lh	a5,-22(s0)
80003c2c:	00f767b3          	or	a5,a4,a5
80003c30:	01079793          	slli	a5,a5,0x10
80003c34:	4107d793          	srai	a5,a5,0x10
80003c38:	fef41523          	sh	a5,-22(s0)
                HW_set_16bit_reg( gpio_out_reg_addr, outputs_state );
80003c3c:	fea45783          	lhu	a5,-22(s0)
80003c40:	00078593          	mv	a1,a5
80003c44:	fe442503          	lw	a0,-28(s0)
80003c48:	944fd0ef          	jal	80000d8c <HW_set_16bit_reg>
            break;
80003c4c:	0b80006f          	j	80003d04 <GPIO_set_output+0x228>
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 3) * 4);
80003c50:	fdc42783          	lw	a5,-36(s0)
80003c54:	0007a703          	lw	a4,0(a5)
80003c58:	fd842783          	lw	a5,-40(s0)
80003c5c:	0037d793          	srli	a5,a5,0x3
80003c60:	00279793          	slli	a5,a5,0x2
80003c64:	00f707b3          	add	a5,a4,a5
80003c68:	0a078793          	addi	a5,a5,160
80003c6c:	fef42023          	sw	a5,-32(s0)
                outputs_state = HW_get_8bit_reg( gpio_out_reg_addr );
80003c70:	fe042503          	lw	a0,-32(s0)
80003c74:	ad0fd0ef          	jal	80000f44 <HW_get_8bit_reg>
80003c78:	00050793          	mv	a5,a0
80003c7c:	fef404a3          	sb	a5,-23(s0)
                if ( 0 == value )
80003c80:	fd744783          	lbu	a5,-41(s0)
80003c84:	04079063          	bnez	a5,80003cc4 <GPIO_set_output+0x1e8>
                    outputs_state &= ~(1 << (port_id & 0x07));
80003c88:	fd842783          	lw	a5,-40(s0)
80003c8c:	0077f793          	andi	a5,a5,7
80003c90:	00100713          	li	a4,1
80003c94:	00f717b3          	sll	a5,a4,a5
80003c98:	01879793          	slli	a5,a5,0x18
80003c9c:	4187d793          	srai	a5,a5,0x18
80003ca0:	fff7c793          	not	a5,a5
80003ca4:	01879713          	slli	a4,a5,0x18
80003ca8:	41875713          	srai	a4,a4,0x18
80003cac:	fe940783          	lb	a5,-23(s0)
80003cb0:	00f777b3          	and	a5,a4,a5
80003cb4:	01879793          	slli	a5,a5,0x18
80003cb8:	4187d793          	srai	a5,a5,0x18
80003cbc:	fef404a3          	sb	a5,-23(s0)
80003cc0:	0300006f          	j	80003cf0 <GPIO_set_output+0x214>
                    outputs_state |= 1 << (port_id & 0x07);
80003cc4:	fd842783          	lw	a5,-40(s0)
80003cc8:	0077f793          	andi	a5,a5,7
80003ccc:	00100713          	li	a4,1
80003cd0:	00f717b3          	sll	a5,a4,a5
80003cd4:	01879713          	slli	a4,a5,0x18
80003cd8:	41875713          	srai	a4,a4,0x18
80003cdc:	fe940783          	lb	a5,-23(s0)
80003ce0:	00f767b3          	or	a5,a4,a5
80003ce4:	01879793          	slli	a5,a5,0x18
80003ce8:	4187d793          	srai	a5,a5,0x18
80003cec:	fef404a3          	sb	a5,-23(s0)
                HW_set_8bit_reg( gpio_out_reg_addr, outputs_state );
80003cf0:	fe944783          	lbu	a5,-23(s0)
80003cf4:	00078593          	mv	a1,a5
80003cf8:	fe042503          	lw	a0,-32(s0)
80003cfc:	a0cfd0ef          	jal	80000f08 <HW_set_8bit_reg>
            break;
80003d00:	00000013          	nop
    }
}
80003d04:	00000013          	nop
80003d08:	02c12083          	lw	ra,44(sp)
80003d0c:	02812403          	lw	s0,40(sp)
80003d10:	03010113          	addi	sp,sp,48
80003d14:	00008067          	ret

80003d18 <GPIO_drive_inout>:
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    gpio_inout_state_t  inout_state
)
{
80003d18:	fd010113          	addi	sp,sp,-48
80003d1c:	02112623          	sw	ra,44(sp)
80003d20:	02812423          	sw	s0,40(sp)
80003d24:	03010413          	addi	s0,sp,48
80003d28:	fca42e23          	sw	a0,-36(s0)
80003d2c:	fcb42c23          	sw	a1,-40(s0)
80003d30:	fcc42a23          	sw	a2,-44(s0)
    uint32_t config;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
80003d34:	fdc42783          	lw	a5,-36(s0)
80003d38:	0007a783          	lw	a5,0(a5)
80003d3c:	fef42623          	sw	a5,-20(s0)
    
    HAL_ASSERT( port_id < NB_OF_GPIO );

    switch( inout_state )
80003d40:	fd442783          	lw	a5,-44(s0)
80003d44:	00100713          	li	a4,1
80003d48:	00e78c63          	beq	a5,a4,80003d60 <GPIO_drive_inout+0x48>
80003d4c:	00100713          	li	a4,1
80003d50:	06e7e263          	bltu	a5,a4,80003db4 <GPIO_drive_inout+0x9c>
80003d54:	00200713          	li	a4,2
80003d58:	0ae78863          	beq	a5,a4,80003e08 <GPIO_drive_inout+0xf0>
            HW_set_8bit_reg( cfg_reg_addr, config );
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80003d5c:	0f00006f          	j	80003e4c <GPIO_drive_inout+0x134>
            GPIO_set_output( this_gpio, port_id, 1 );
80003d60:	00100613          	li	a2,1
80003d64:	fd842583          	lw	a1,-40(s0)
80003d68:	fdc42503          	lw	a0,-36(s0)
80003d6c:	d71ff0ef          	jal	80003adc <GPIO_set_output>
            cfg_reg_addr = this_gpio->base_addr + (port_id * 4);
80003d70:	fdc42783          	lw	a5,-36(s0)
80003d74:	0007a703          	lw	a4,0(a5)
80003d78:	fd842783          	lw	a5,-40(s0)
80003d7c:	00279793          	slli	a5,a5,0x2
80003d80:	00f707b3          	add	a5,a4,a5
80003d84:	fef42623          	sw	a5,-20(s0)
            config = HW_get_8bit_reg( cfg_reg_addr );
80003d88:	fec42503          	lw	a0,-20(s0)
80003d8c:	9b8fd0ef          	jal	80000f44 <HW_get_8bit_reg>
80003d90:	00050793          	mv	a5,a0
80003d94:	fef42423          	sw	a5,-24(s0)
            config |= OUTPUT_BUFFER_ENABLE_MASK;
80003d98:	fe842783          	lw	a5,-24(s0)
80003d9c:	0047e793          	ori	a5,a5,4
80003da0:	fef42423          	sw	a5,-24(s0)
            HW_set_8bit_reg( cfg_reg_addr, config );
80003da4:	fe842583          	lw	a1,-24(s0)
80003da8:	fec42503          	lw	a0,-20(s0)
80003dac:	95cfd0ef          	jal	80000f08 <HW_set_8bit_reg>
            break;
80003db0:	09c0006f          	j	80003e4c <GPIO_drive_inout+0x134>
            GPIO_set_output( this_gpio, port_id, 0 );
80003db4:	00000613          	li	a2,0
80003db8:	fd842583          	lw	a1,-40(s0)
80003dbc:	fdc42503          	lw	a0,-36(s0)
80003dc0:	d1dff0ef          	jal	80003adc <GPIO_set_output>
            cfg_reg_addr = this_gpio->base_addr + (port_id * 4);
80003dc4:	fdc42783          	lw	a5,-36(s0)
80003dc8:	0007a703          	lw	a4,0(a5)
80003dcc:	fd842783          	lw	a5,-40(s0)
80003dd0:	00279793          	slli	a5,a5,0x2
80003dd4:	00f707b3          	add	a5,a4,a5
80003dd8:	fef42623          	sw	a5,-20(s0)
            config = HW_get_8bit_reg( cfg_reg_addr );
80003ddc:	fec42503          	lw	a0,-20(s0)
80003de0:	964fd0ef          	jal	80000f44 <HW_get_8bit_reg>
80003de4:	00050793          	mv	a5,a0
80003de8:	fef42423          	sw	a5,-24(s0)
            config |= OUTPUT_BUFFER_ENABLE_MASK;
80003dec:	fe842783          	lw	a5,-24(s0)
80003df0:	0047e793          	ori	a5,a5,4
80003df4:	fef42423          	sw	a5,-24(s0)
            HW_set_8bit_reg( cfg_reg_addr, config );
80003df8:	fe842583          	lw	a1,-24(s0)
80003dfc:	fec42503          	lw	a0,-20(s0)
80003e00:	908fd0ef          	jal	80000f08 <HW_set_8bit_reg>
            break;
80003e04:	0480006f          	j	80003e4c <GPIO_drive_inout+0x134>
            cfg_reg_addr = this_gpio->base_addr + (port_id * 4);
80003e08:	fdc42783          	lw	a5,-36(s0)
80003e0c:	0007a703          	lw	a4,0(a5)
80003e10:	fd842783          	lw	a5,-40(s0)
80003e14:	00279793          	slli	a5,a5,0x2
80003e18:	00f707b3          	add	a5,a4,a5
80003e1c:	fef42623          	sw	a5,-20(s0)
            config = HW_get_8bit_reg( cfg_reg_addr );
80003e20:	fec42503          	lw	a0,-20(s0)
80003e24:	920fd0ef          	jal	80000f44 <HW_get_8bit_reg>
80003e28:	00050793          	mv	a5,a0
80003e2c:	fef42423          	sw	a5,-24(s0)
            config &= ~OUTPUT_BUFFER_ENABLE_MASK;
80003e30:	fe842783          	lw	a5,-24(s0)
80003e34:	ffb7f793          	andi	a5,a5,-5
80003e38:	fef42423          	sw	a5,-24(s0)
            HW_set_8bit_reg( cfg_reg_addr, config );
80003e3c:	fe842583          	lw	a1,-24(s0)
80003e40:	fec42503          	lw	a0,-20(s0)
80003e44:	8c4fd0ef          	jal	80000f08 <HW_set_8bit_reg>
            break;
80003e48:	00000013          	nop
    }
}
80003e4c:	00000013          	nop
80003e50:	02c12083          	lw	ra,44(sp)
80003e54:	02812403          	lw	s0,40(sp)
80003e58:	03010113          	addi	sp,sp,48
80003e5c:	00008067          	ret

80003e60 <GPIO_enable_irq>:
void GPIO_enable_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
80003e60:	fd010113          	addi	sp,sp,-48
80003e64:	02112623          	sw	ra,44(sp)
80003e68:	02812423          	sw	s0,40(sp)
80003e6c:	03010413          	addi	s0,sp,48
80003e70:	fca42e23          	sw	a0,-36(s0)
80003e74:	fcb42c23          	sw	a1,-40(s0)
    uint32_t cfg_value;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
80003e78:	fdc42783          	lw	a5,-36(s0)
80003e7c:	0007a783          	lw	a5,0(a5)
80003e80:	fef42623          	sw	a5,-20(s0)
   
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
80003e84:	fd842703          	lw	a4,-40(s0)
80003e88:	01f00793          	li	a5,31
80003e8c:	04e7e063          	bltu	a5,a4,80003ecc <GPIO_enable_irq+0x6c>
    {
        cfg_reg_addr += (port_id * 4);
80003e90:	fd842783          	lw	a5,-40(s0)
80003e94:	00279793          	slli	a5,a5,0x2
80003e98:	fec42703          	lw	a4,-20(s0)
80003e9c:	00f707b3          	add	a5,a4,a5
80003ea0:	fef42623          	sw	a5,-20(s0)
        cfg_value = HW_get_8bit_reg( cfg_reg_addr );
80003ea4:	fec42503          	lw	a0,-20(s0)
80003ea8:	89cfd0ef          	jal	80000f44 <HW_get_8bit_reg>
80003eac:	00050793          	mv	a5,a0
80003eb0:	fef42423          	sw	a5,-24(s0)
        cfg_value |= GPIO_INT_ENABLE_MASK;
80003eb4:	fe842783          	lw	a5,-24(s0)
80003eb8:	0087e793          	ori	a5,a5,8
80003ebc:	fef42423          	sw	a5,-24(s0)
        HW_set_8bit_reg( cfg_reg_addr, cfg_value );
80003ec0:	fe842583          	lw	a1,-24(s0)
80003ec4:	fec42503          	lw	a0,-20(s0)
80003ec8:	840fd0ef          	jal	80000f08 <HW_set_8bit_reg>
    }
}
80003ecc:	00000013          	nop
80003ed0:	02c12083          	lw	ra,44(sp)
80003ed4:	02812403          	lw	s0,40(sp)
80003ed8:	03010113          	addi	sp,sp,48
80003edc:	00008067          	ret

80003ee0 <GPIO_disable_irq>:
void GPIO_disable_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
80003ee0:	fd010113          	addi	sp,sp,-48
80003ee4:	02112623          	sw	ra,44(sp)
80003ee8:	02812423          	sw	s0,40(sp)
80003eec:	03010413          	addi	s0,sp,48
80003ef0:	fca42e23          	sw	a0,-36(s0)
80003ef4:	fcb42c23          	sw	a1,-40(s0)
    uint32_t cfg_value;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
80003ef8:	fdc42783          	lw	a5,-36(s0)
80003efc:	0007a783          	lw	a5,0(a5)
80003f00:	fef42623          	sw	a5,-20(s0)
   
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
80003f04:	fd842703          	lw	a4,-40(s0)
80003f08:	01f00793          	li	a5,31
80003f0c:	04e7e063          	bltu	a5,a4,80003f4c <GPIO_disable_irq+0x6c>
    {
        cfg_reg_addr += (port_id * 4);
80003f10:	fd842783          	lw	a5,-40(s0)
80003f14:	00279793          	slli	a5,a5,0x2
80003f18:	fec42703          	lw	a4,-20(s0)
80003f1c:	00f707b3          	add	a5,a4,a5
80003f20:	fef42623          	sw	a5,-20(s0)
        cfg_value = HW_get_8bit_reg( cfg_reg_addr );
80003f24:	fec42503          	lw	a0,-20(s0)
80003f28:	81cfd0ef          	jal	80000f44 <HW_get_8bit_reg>
80003f2c:	00050793          	mv	a5,a0
80003f30:	fef42423          	sw	a5,-24(s0)
        cfg_value &= ~GPIO_INT_ENABLE_MASK;
80003f34:	fe842783          	lw	a5,-24(s0)
80003f38:	ff77f793          	andi	a5,a5,-9
80003f3c:	fef42423          	sw	a5,-24(s0)
        HW_set_8bit_reg( cfg_reg_addr, cfg_value );
80003f40:	fe842583          	lw	a1,-24(s0)
80003f44:	fec42503          	lw	a0,-20(s0)
80003f48:	fc1fc0ef          	jal	80000f08 <HW_set_8bit_reg>
    }
}
80003f4c:	00000013          	nop
80003f50:	02c12083          	lw	ra,44(sp)
80003f54:	02812403          	lw	s0,40(sp)
80003f58:	03010113          	addi	sp,sp,48
80003f5c:	00008067          	ret

80003f60 <GPIO_clear_irq>:
void GPIO_clear_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
80003f60:	fd010113          	addi	sp,sp,-48
80003f64:	02112623          	sw	ra,44(sp)
80003f68:	02812423          	sw	s0,40(sp)
80003f6c:	03010413          	addi	s0,sp,48
80003f70:	fca42e23          	sw	a0,-36(s0)
80003f74:	fcb42c23          	sw	a1,-40(s0)
    uint32_t irq_clr_value = ((uint32_t)1) << ((uint32_t)port_id);
80003f78:	00100713          	li	a4,1
80003f7c:	fd842783          	lw	a5,-40(s0)
80003f80:	00f717b3          	sll	a5,a4,a5
80003f84:	fef42623          	sw	a5,-20(s0)
    
    switch( this_gpio->apb_bus_width )
80003f88:	fdc42783          	lw	a5,-36(s0)
80003f8c:	0047a783          	lw	a5,4(a5)
80003f90:	00100713          	li	a4,1
80003f94:	02e78a63          	beq	a5,a4,80003fc8 <GPIO_clear_irq+0x68>
80003f98:	00100713          	li	a4,1
80003f9c:	06e7e463          	bltu	a5,a4,80004004 <GPIO_clear_irq+0xa4>
80003fa0:	00200713          	li	a4,2
80003fa4:	00e78463          	beq	a5,a4,80003fac <GPIO_clear_irq+0x4c>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, irq_clr_value >> 24 );
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80003fa8:	0d80006f          	j	80004080 <GPIO_clear_irq+0x120>
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, irq_clr_value );
80003fac:	fdc42783          	lw	a5,-36(s0)
80003fb0:	0007a783          	lw	a5,0(a5)
80003fb4:	08078793          	addi	a5,a5,128
80003fb8:	fec42583          	lw	a1,-20(s0)
80003fbc:	00078513          	mv	a0,a5
80003fc0:	c9dfc0ef          	jal	80000c5c <HW_set_32bit_reg>
            break;
80003fc4:	0bc0006f          	j	80004080 <GPIO_clear_irq+0x120>
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ0, irq_clr_value );
80003fc8:	fdc42783          	lw	a5,-36(s0)
80003fcc:	0007a783          	lw	a5,0(a5)
80003fd0:	08078793          	addi	a5,a5,128
80003fd4:	fec42583          	lw	a1,-20(s0)
80003fd8:	00078513          	mv	a0,a5
80003fdc:	db1fc0ef          	jal	80000d8c <HW_set_16bit_reg>
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, irq_clr_value >> 16 );
80003fe0:	fdc42783          	lw	a5,-36(s0)
80003fe4:	0007a783          	lw	a5,0(a5)
80003fe8:	08478713          	addi	a4,a5,132
80003fec:	fec42783          	lw	a5,-20(s0)
80003ff0:	0107d793          	srli	a5,a5,0x10
80003ff4:	00078593          	mv	a1,a5
80003ff8:	00070513          	mv	a0,a4
80003ffc:	d91fc0ef          	jal	80000d8c <HW_set_16bit_reg>
            break;
80004000:	0800006f          	j	80004080 <GPIO_clear_irq+0x120>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ0, irq_clr_value );
80004004:	fdc42783          	lw	a5,-36(s0)
80004008:	0007a783          	lw	a5,0(a5)
8000400c:	08078793          	addi	a5,a5,128
80004010:	fec42583          	lw	a1,-20(s0)
80004014:	00078513          	mv	a0,a5
80004018:	ef1fc0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ1, irq_clr_value >> 8 );
8000401c:	fdc42783          	lw	a5,-36(s0)
80004020:	0007a783          	lw	a5,0(a5)
80004024:	08478713          	addi	a4,a5,132
80004028:	fec42783          	lw	a5,-20(s0)
8000402c:	0087d793          	srli	a5,a5,0x8
80004030:	00078593          	mv	a1,a5
80004034:	00070513          	mv	a0,a4
80004038:	ed1fc0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ2, irq_clr_value >> 16 );
8000403c:	fdc42783          	lw	a5,-36(s0)
80004040:	0007a783          	lw	a5,0(a5)
80004044:	08878713          	addi	a4,a5,136
80004048:	fec42783          	lw	a5,-20(s0)
8000404c:	0107d793          	srli	a5,a5,0x10
80004050:	00078593          	mv	a1,a5
80004054:	00070513          	mv	a0,a4
80004058:	eb1fc0ef          	jal	80000f08 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, irq_clr_value >> 24 );
8000405c:	fdc42783          	lw	a5,-36(s0)
80004060:	0007a783          	lw	a5,0(a5)
80004064:	08c78713          	addi	a4,a5,140
80004068:	fec42783          	lw	a5,-20(s0)
8000406c:	0187d793          	srli	a5,a5,0x18
80004070:	00078593          	mv	a1,a5
80004074:	00070513          	mv	a0,a4
80004078:	e91fc0ef          	jal	80000f08 <HW_set_8bit_reg>
            break;
8000407c:	00000013          	nop
    }
}
80004080:	00000013          	nop
80004084:	02c12083          	lw	ra,44(sp)
80004088:	02812403          	lw	s0,40(sp)
8000408c:	03010113          	addi	sp,sp,48
80004090:	00008067          	ret

80004094 <draw_board>:
draw_board
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
80004094:	fd010113          	addi	sp,sp,-48
80004098:	02112623          	sw	ra,44(sp)
8000409c:	02812423          	sw	s0,40(sp)
800040a0:	03010413          	addi	s0,sp,48
800040a4:	fca42e23          	sw	a0,-36(s0)
800040a8:	fcb42c23          	sw	a1,-40(s0)
	 // fill screen white
	for(uint8_t x=0; x< TFT_WIDTH; x++)
800040ac:	fe0407a3          	sb	zero,-17(s0)
800040b0:	0340006f          	j	800040e4 <draw_board+0x50>
	{
		TFT_fastVLine(this_spi, x, 0, 320, ILI9341_WHITE, this_gpio);
800040b4:	fef44783          	lbu	a5,-17(s0)
800040b8:	01079593          	slli	a1,a5,0x10
800040bc:	4105d593          	srai	a1,a1,0x10
800040c0:	fd842783          	lw	a5,-40(s0)
800040c4:	fff00713          	li	a4,-1
800040c8:	14000693          	li	a3,320
800040cc:	00000613          	li	a2,0
800040d0:	fdc42503          	lw	a0,-36(s0)
800040d4:	180040ef          	jal	80008254 <TFT_fastVLine>
	for(uint8_t x=0; x< TFT_WIDTH; x++)
800040d8:	fef44783          	lbu	a5,-17(s0)
800040dc:	00178793          	addi	a5,a5,1
800040e0:	fef407a3          	sb	a5,-17(s0)
800040e4:	fef44703          	lbu	a4,-17(s0)
800040e8:	0ef00793          	li	a5,239
800040ec:	fce7f4e3          	bleu	a4,a5,800040b4 <draw_board+0x20>
	}
	// draw board fast (?)
	TFT_fastVLine(this_spi, 80, 0, 240, ILI9341_BLACK, this_gpio);
800040f0:	fd842783          	lw	a5,-40(s0)
800040f4:	00000713          	li	a4,0
800040f8:	0f000693          	li	a3,240
800040fc:	00000613          	li	a2,0
80004100:	05000593          	li	a1,80
80004104:	fdc42503          	lw	a0,-36(s0)
80004108:	14c040ef          	jal	80008254 <TFT_fastVLine>
	TFT_fastVLine(this_spi, 160, 0, 240, ILI9341_BLACK, this_gpio);
8000410c:	fd842783          	lw	a5,-40(s0)
80004110:	00000713          	li	a4,0
80004114:	0f000693          	li	a3,240
80004118:	00000613          	li	a2,0
8000411c:	0a000593          	li	a1,160
80004120:	fdc42503          	lw	a0,-36(s0)
80004124:	130040ef          	jal	80008254 <TFT_fastVLine>
	TFT_fastHLine(this_spi,0, 80, 240, ILI9341_BLACK, this_gpio);
80004128:	fd842783          	lw	a5,-40(s0)
8000412c:	00000713          	li	a4,0
80004130:	0f000693          	li	a3,240
80004134:	05000613          	li	a2,80
80004138:	00000593          	li	a1,0
8000413c:	fdc42503          	lw	a0,-36(s0)
80004140:	244040ef          	jal	80008384 <TFT_fastHLine>
	TFT_fastHLine(this_spi,0, 160, 240, ILI9341_BLACK, this_gpio);
80004144:	fd842783          	lw	a5,-40(s0)
80004148:	00000713          	li	a4,0
8000414c:	0f000693          	li	a3,240
80004150:	0a000613          	li	a2,160
80004154:	00000593          	li	a1,0
80004158:	fdc42503          	lw	a0,-36(s0)
8000415c:	228040ef          	jal	80008384 <TFT_fastHLine>
}
80004160:	00000013          	nop
80004164:	02c12083          	lw	ra,44(sp)
80004168:	02812403          	lw	s0,40(sp)
8000416c:	03010113          	addi	sp,sp,48
80004170:	00008067          	ret

80004174 <singlePlayerMode>:
singlePlayerMode
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
80004174:	fc010113          	addi	sp,sp,-64
80004178:	02112e23          	sw	ra,60(sp)
8000417c:	02812c23          	sw	s0,56(sp)
80004180:	04010413          	addi	s0,sp,64
80004184:	fca42623          	sw	a0,-52(s0)
80004188:	fcb42423          	sw	a1,-56(s0)
	draw_board(this_spi,this_gpio);
8000418c:	fc842583          	lw	a1,-56(s0)
80004190:	fcc42503          	lw	a0,-52(s0)
80004194:	f01ff0ef          	jal	80004094 <draw_board>
	uint8_t player = 1;
80004198:	00100793          	li	a5,1
8000419c:	fef403a3          	sb	a5,-25(s0)
	uint8_t winner = 0;
800041a0:	fe0407a3          	sb	zero,-17(s0)
	uint32_t counter = 0;
800041a4:	fe042423          	sw	zero,-24(s0)
	char board[9] = {' ',' ',' ',' ',' ',' ',' ',' ',' ' };
800041a8:	02000793          	li	a5,32
800041ac:	fcf40e23          	sb	a5,-36(s0)
800041b0:	02000793          	li	a5,32
800041b4:	fcf40ea3          	sb	a5,-35(s0)
800041b8:	02000793          	li	a5,32
800041bc:	fcf40f23          	sb	a5,-34(s0)
800041c0:	02000793          	li	a5,32
800041c4:	fcf40fa3          	sb	a5,-33(s0)
800041c8:	02000793          	li	a5,32
800041cc:	fef40023          	sb	a5,-32(s0)
800041d0:	02000793          	li	a5,32
800041d4:	fef400a3          	sb	a5,-31(s0)
800041d8:	02000793          	li	a5,32
800041dc:	fef40123          	sb	a5,-30(s0)
800041e0:	02000793          	li	a5,32
800041e4:	fef401a3          	sb	a5,-29(s0)
800041e8:	02000793          	li	a5,32
800041ec:	fef40223          	sb	a5,-28(s0)

	while( counter < 9 && winner == 0)
800041f0:	12c0006f          	j	8000431c <singlePlayerMode+0x1a8>
	{
		player = counter%2+1;
800041f4:	fe842783          	lw	a5,-24(s0)
800041f8:	0ff7f793          	andi	a5,a5,255
800041fc:	0017f793          	andi	a5,a5,1
80004200:	0ff7f793          	andi	a5,a5,255
80004204:	00178793          	addi	a5,a5,1
80004208:	fef403a3          	sb	a5,-25(s0)
		if (player == 1)
8000420c:	fe744703          	lbu	a4,-25(s0)
80004210:	00100793          	li	a5,1
80004214:	06f71463          	bne	a4,a5,8000427c <singlePlayerMode+0x108>
		{
			board[singlePlayerX(this_spi,this_gpio, board, player)] = 'X';
80004218:	fe744703          	lbu	a4,-25(s0)
8000421c:	fdc40793          	addi	a5,s0,-36
80004220:	00070693          	mv	a3,a4
80004224:	00078613          	mv	a2,a5
80004228:	fc842583          	lw	a1,-56(s0)
8000422c:	fcc42503          	lw	a0,-52(s0)
80004230:	114000ef          	jal	80004344 <singlePlayerX>
80004234:	00050793          	mv	a5,a0
80004238:	ff040713          	addi	a4,s0,-16
8000423c:	00f707b3          	add	a5,a4,a5
80004240:	05800713          	li	a4,88
80004244:	fee78623          	sb	a4,-20(a5)
			winner = check_winner(this_spi,board,player, this_gpio);
80004248:	fe744703          	lbu	a4,-25(s0)
8000424c:	fdc40793          	addi	a5,s0,-36
80004250:	fc842683          	lw	a3,-56(s0)
80004254:	00070613          	mv	a2,a4
80004258:	00078593          	mv	a1,a5
8000425c:	fcc42503          	lw	a0,-52(s0)
80004260:	1bc020ef          	jal	8000641c <check_winner>
80004264:	00050793          	mv	a5,a0
80004268:	fef407a3          	sb	a5,-17(s0)
			counter ++;
8000426c:	fe842783          	lw	a5,-24(s0)
80004270:	00178793          	addi	a5,a5,1
80004274:	fef42423          	sw	a5,-24(s0)
80004278:	0840006f          	j	800042fc <singlePlayerMode+0x188>
		}
		else
		{
			for(volatile uint32_t x=0; x < 0xF; x++);
8000427c:	fc042c23          	sw	zero,-40(s0)
80004280:	0100006f          	j	80004290 <singlePlayerMode+0x11c>
80004284:	fd842783          	lw	a5,-40(s0)
80004288:	00178793          	addi	a5,a5,1
8000428c:	fcf42c23          	sw	a5,-40(s0)
80004290:	fd842703          	lw	a4,-40(s0)
80004294:	00e00793          	li	a5,14
80004298:	fee7f6e3          	bleu	a4,a5,80004284 <singlePlayerMode+0x110>
			board[singlePlayerAI(this_spi, this_gpio, board, player)] = 'O';
8000429c:	fe744703          	lbu	a4,-25(s0)
800042a0:	fdc40793          	addi	a5,s0,-36
800042a4:	00070693          	mv	a3,a4
800042a8:	00078613          	mv	a2,a5
800042ac:	fc842583          	lw	a1,-56(s0)
800042b0:	fcc42503          	lw	a0,-52(s0)
800042b4:	0f1000ef          	jal	80004ba4 <singlePlayerAI>
800042b8:	00050793          	mv	a5,a0
800042bc:	ff040713          	addi	a4,s0,-16
800042c0:	00f707b3          	add	a5,a4,a5
800042c4:	04f00713          	li	a4,79
800042c8:	fee78623          	sb	a4,-20(a5)
			winner = check_winner(this_spi,board,player, this_gpio);
800042cc:	fe744703          	lbu	a4,-25(s0)
800042d0:	fdc40793          	addi	a5,s0,-36
800042d4:	fc842683          	lw	a3,-56(s0)
800042d8:	00070613          	mv	a2,a4
800042dc:	00078593          	mv	a1,a5
800042e0:	fcc42503          	lw	a0,-52(s0)
800042e4:	138020ef          	jal	8000641c <check_winner>
800042e8:	00050793          	mv	a5,a0
800042ec:	fef407a3          	sb	a5,-17(s0)
			counter ++;
800042f0:	fe842783          	lw	a5,-24(s0)
800042f4:	00178793          	addi	a5,a5,1
800042f8:	fef42423          	sw	a5,-24(s0)
		}

		if (winner == 0 && counter >=9)
800042fc:	fef44783          	lbu	a5,-17(s0)
80004300:	00079e63          	bnez	a5,8000431c <singlePlayerMode+0x1a8>
80004304:	fe842703          	lw	a4,-24(s0)
80004308:	00800793          	li	a5,8
8000430c:	00e7f863          	bleu	a4,a5,8000431c <singlePlayerMode+0x1a8>
		{
			drawGame(this_spi, this_gpio);
80004310:	fc842583          	lw	a1,-56(s0)
80004314:	fcc42503          	lw	a0,-52(s0)
80004318:	07c020ef          	jal	80006394 <drawGame>
	while( counter < 9 && winner == 0)
8000431c:	fe842703          	lw	a4,-24(s0)
80004320:	00800793          	li	a5,8
80004324:	00e7e663          	bltu	a5,a4,80004330 <singlePlayerMode+0x1bc>
80004328:	fef44783          	lbu	a5,-17(s0)
8000432c:	ec0784e3          	beqz	a5,800041f4 <singlePlayerMode+0x80>
		}
	}
}
80004330:	00000013          	nop
80004334:	03c12083          	lw	ra,60(sp)
80004338:	03812403          	lw	s0,56(sp)
8000433c:	04010113          	addi	sp,sp,64
80004340:	00008067          	ret

80004344 <singlePlayerX>:
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	char board[9],
	uint8_t player
)
{
80004344:	fc010113          	addi	sp,sp,-64
80004348:	02112e23          	sw	ra,60(sp)
8000434c:	02812c23          	sw	s0,56(sp)
80004350:	04010413          	addi	s0,sp,64
80004354:	fca42623          	sw	a0,-52(s0)
80004358:	fcb42423          	sw	a1,-56(s0)
8000435c:	fcc42223          	sw	a2,-60(s0)
80004360:	00068793          	mv	a5,a3
80004364:	fcf401a3          	sb	a5,-61(s0)
	uint16_t x,y;
	uint8_t z;
	uint16_t  x_pos0, y_pos0,x_pos1, y_pos1;//, sq_centre_x,sq_centre_y ;
	uint16_t  x_pos2, y_pos2,x_pos3, y_pos3;//, x_count, o_count;
	uint8_t choice = 0;
80004368:	fe0407a3          	sb	zero,-17(s0)

	while(choice == 0 && player == 1)
8000436c:	0090006f          	j	80004b74 <singlePlayerX+0x830>
	{

	   if ( ((TS_readRegister8(this_spi, this_gpio,STMPE_TSC_CTRL) ) & 0x80))
80004370:	04000613          	li	a2,64
80004374:	fc842583          	lw	a1,-56(s0)
80004378:	fcc42503          	lw	a0,-52(s0)
8000437c:	068030ef          	jal	800073e4 <TS_readRegister8>
80004380:	00050793          	mv	a5,a0
80004384:	01879793          	slli	a5,a5,0x18
80004388:	4187d793          	srai	a5,a5,0x18
8000438c:	7e07d463          	bgez	a5,80004b74 <singlePlayerX+0x830>
	   {
		//  player = counter%2+1;
		   TS_readData( this_spi, this_gpio, &x, &y, &z);
80004390:	fd940713          	addi	a4,s0,-39
80004394:	fda40693          	addi	a3,s0,-38
80004398:	fdc40793          	addi	a5,s0,-36
8000439c:	00078613          	mv	a2,a5
800043a0:	fc842583          	lw	a1,-56(s0)
800043a4:	fcc42503          	lw	a0,-52(s0)
800043a8:	1e4030ef          	jal	8000758c <TS_readData>
		  x = map( x, TS_MINX, TS_MAXX, 0, TFT_WIDTH);
800043ac:	fdc45503          	lhu	a0,-36(s0)
800043b0:	0f000713          	li	a4,240
800043b4:	00000693          	li	a3,0
800043b8:	000017b7          	lui	a5,0x1
800043bc:	ed878613          	addi	a2,a5,-296 # ed8 <_start-0x7ffff128>
800043c0:	09600593          	li	a1,150
800043c4:	769010ef          	jal	8000632c <map>
800043c8:	00050793          	mv	a5,a0
800043cc:	01079793          	slli	a5,a5,0x10
800043d0:	0107d793          	srli	a5,a5,0x10
800043d4:	fcf41e23          	sh	a5,-36(s0)
		  y = map( y, TS_MINY, TS_MAXY, 0, TFT_HEIGHT);
800043d8:	fda45503          	lhu	a0,-38(s0)
800043dc:	14000713          	li	a4,320
800043e0:	00000693          	li	a3,0
800043e4:	000017b7          	lui	a5,0x1
800043e8:	fa078613          	addi	a2,a5,-96 # fa0 <_start-0x7ffff060>
800043ec:	08200593          	li	a1,130
800043f0:	73d010ef          	jal	8000632c <map>
800043f4:	00050793          	mv	a5,a0
800043f8:	01079793          	slli	a5,a5,0x10
800043fc:	0107d793          	srli	a5,a5,0x10
80004400:	fcf41d23          	sh	a5,-38(s0)

		  if ((x < 80 && y < 80) && board[0]==' ')// 0
80004404:	fdc45703          	lhu	a4,-36(s0)
80004408:	04f00793          	li	a5,79
8000440c:	0ae7ec63          	bltu	a5,a4,800044c4 <singlePlayerX+0x180>
80004410:	fda45703          	lhu	a4,-38(s0)
80004414:	04f00793          	li	a5,79
80004418:	0ae7e663          	bltu	a5,a4,800044c4 <singlePlayerX+0x180>
8000441c:	fc442783          	lw	a5,-60(s0)
80004420:	0007c703          	lbu	a4,0(a5)
80004424:	02000793          	li	a5,32
80004428:	08f71e63          	bne	a4,a5,800044c4 <singlePlayerX+0x180>
		  {
			  x_pos0 = 20;  y_pos0=20;
8000442c:	01400793          	li	a5,20
80004430:	fef41623          	sh	a5,-20(s0)
80004434:	01400793          	li	a5,20
80004438:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =60 ;  y_pos1 =60;
8000443c:	03c00793          	li	a5,60
80004440:	fef41423          	sh	a5,-24(s0)
80004444:	03c00793          	li	a5,60
80004448:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 60;  y_pos2=20;
8000444c:	03c00793          	li	a5,60
80004450:	fef41223          	sh	a5,-28(s0)
80004454:	01400793          	li	a5,20
80004458:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =20 ;  y_pos3 =60;
8000445c:	01400793          	li	a5,20
80004460:	fef41023          	sh	a5,-32(s0)
80004464:	03c00793          	li	a5,60
80004468:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
8000446c:	fec41583          	lh	a1,-20(s0)
80004470:	fea41603          	lh	a2,-22(s0)
80004474:	fe841683          	lh	a3,-24(s0)
80004478:	fe641703          	lh	a4,-26(s0)
8000447c:	fc842803          	lw	a6,-56(s0)
80004480:	000107b7          	lui	a5,0x10
80004484:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80004488:	fcc42503          	lw	a0,-52(s0)
8000448c:	648040ef          	jal	80008ad4 <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004490:	fe441583          	lh	a1,-28(s0)
80004494:	fe241603          	lh	a2,-30(s0)
80004498:	fe041683          	lh	a3,-32(s0)
8000449c:	fde41703          	lh	a4,-34(s0)
800044a0:	fc842803          	lw	a6,-56(s0)
800044a4:	000107b7          	lui	a5,0x10
800044a8:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800044ac:	fcc42503          	lw	a0,-52(s0)
800044b0:	624040ef          	jal	80008ad4 <TFT_drawLine>
			  choice = 1;
800044b4:	00100793          	li	a5,1
800044b8:	fef407a3          	sb	a5,-17(s0)
			  return 0;
800044bc:	00000793          	li	a5,0
800044c0:	6d00006f          	j	80004b90 <singlePlayerX+0x84c>
		  }
		  else if(((x < 160 && x >80)&& y<80) && board[1]==' ')//&& pos1==0)// 1
800044c4:	fdc45703          	lhu	a4,-36(s0)
800044c8:	09f00793          	li	a5,159
800044cc:	0ce7e463          	bltu	a5,a4,80004594 <singlePlayerX+0x250>
800044d0:	fdc45703          	lhu	a4,-36(s0)
800044d4:	05000793          	li	a5,80
800044d8:	0ae7fe63          	bleu	a4,a5,80004594 <singlePlayerX+0x250>
800044dc:	fda45703          	lhu	a4,-38(s0)
800044e0:	04f00793          	li	a5,79
800044e4:	0ae7e863          	bltu	a5,a4,80004594 <singlePlayerX+0x250>
800044e8:	fc442783          	lw	a5,-60(s0)
800044ec:	00178793          	addi	a5,a5,1
800044f0:	0007c703          	lbu	a4,0(a5)
800044f4:	02000793          	li	a5,32
800044f8:	08f71e63          	bne	a4,a5,80004594 <singlePlayerX+0x250>
		  {
			  x_pos0 = 100; y_pos0=20;
800044fc:	06400793          	li	a5,100
80004500:	fef41623          	sh	a5,-20(s0)
80004504:	01400793          	li	a5,20
80004508:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =140 ; y_pos1 =60;
8000450c:	08c00793          	li	a5,140
80004510:	fef41423          	sh	a5,-24(s0)
80004514:	03c00793          	li	a5,60
80004518:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 140; y_pos2=20;
8000451c:	08c00793          	li	a5,140
80004520:	fef41223          	sh	a5,-28(s0)
80004524:	01400793          	li	a5,20
80004528:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =100 ; y_pos3 =60;
8000452c:	06400793          	li	a5,100
80004530:	fef41023          	sh	a5,-32(s0)
80004534:	03c00793          	li	a5,60
80004538:	fcf41f23          	sh	a5,-34(s0)
		  	  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
8000453c:	fec41583          	lh	a1,-20(s0)
80004540:	fea41603          	lh	a2,-22(s0)
80004544:	fe841683          	lh	a3,-24(s0)
80004548:	fe641703          	lh	a4,-26(s0)
8000454c:	fc842803          	lw	a6,-56(s0)
80004550:	000107b7          	lui	a5,0x10
80004554:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80004558:	fcc42503          	lw	a0,-52(s0)
8000455c:	578040ef          	jal	80008ad4 <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004560:	fe441583          	lh	a1,-28(s0)
80004564:	fe241603          	lh	a2,-30(s0)
80004568:	fe041683          	lh	a3,-32(s0)
8000456c:	fde41703          	lh	a4,-34(s0)
80004570:	fc842803          	lw	a6,-56(s0)
80004574:	000107b7          	lui	a5,0x10
80004578:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
8000457c:	fcc42503          	lw	a0,-52(s0)
80004580:	554040ef          	jal	80008ad4 <TFT_drawLine>
			  choice = 1;
80004584:	00100793          	li	a5,1
80004588:	fef407a3          	sb	a5,-17(s0)
			  return 1;
8000458c:	00100793          	li	a5,1
80004590:	6000006f          	j	80004b90 <singlePlayerX+0x84c>
		  }
		  else if(((x < 240 && x >160)&& y<80)&& board[2]==' ' )//&& pos2==0)// 2
80004594:	fdc45703          	lhu	a4,-36(s0)
80004598:	0ef00793          	li	a5,239
8000459c:	0ce7e463          	bltu	a5,a4,80004664 <singlePlayerX+0x320>
800045a0:	fdc45703          	lhu	a4,-36(s0)
800045a4:	0a000793          	li	a5,160
800045a8:	0ae7fe63          	bleu	a4,a5,80004664 <singlePlayerX+0x320>
800045ac:	fda45703          	lhu	a4,-38(s0)
800045b0:	04f00793          	li	a5,79
800045b4:	0ae7e863          	bltu	a5,a4,80004664 <singlePlayerX+0x320>
800045b8:	fc442783          	lw	a5,-60(s0)
800045bc:	00278793          	addi	a5,a5,2
800045c0:	0007c703          	lbu	a4,0(a5)
800045c4:	02000793          	li	a5,32
800045c8:	08f71e63          	bne	a4,a5,80004664 <singlePlayerX+0x320>
		  {
			  x_pos0 = 180;  y_pos0=20;
800045cc:	0b400793          	li	a5,180
800045d0:	fef41623          	sh	a5,-20(s0)
800045d4:	01400793          	li	a5,20
800045d8:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =220 ;  y_pos1 =60;
800045dc:	0dc00793          	li	a5,220
800045e0:	fef41423          	sh	a5,-24(s0)
800045e4:	03c00793          	li	a5,60
800045e8:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 220;  y_pos2=20;
800045ec:	0dc00793          	li	a5,220
800045f0:	fef41223          	sh	a5,-28(s0)
800045f4:	01400793          	li	a5,20
800045f8:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =180 ;  y_pos3 =60;
800045fc:	0b400793          	li	a5,180
80004600:	fef41023          	sh	a5,-32(s0)
80004604:	03c00793          	li	a5,60
80004608:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
8000460c:	fec41583          	lh	a1,-20(s0)
80004610:	fea41603          	lh	a2,-22(s0)
80004614:	fe841683          	lh	a3,-24(s0)
80004618:	fe641703          	lh	a4,-26(s0)
8000461c:	fc842803          	lw	a6,-56(s0)
80004620:	000107b7          	lui	a5,0x10
80004624:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80004628:	fcc42503          	lw	a0,-52(s0)
8000462c:	4a8040ef          	jal	80008ad4 <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004630:	fe441583          	lh	a1,-28(s0)
80004634:	fe241603          	lh	a2,-30(s0)
80004638:	fe041683          	lh	a3,-32(s0)
8000463c:	fde41703          	lh	a4,-34(s0)
80004640:	fc842803          	lw	a6,-56(s0)
80004644:	000107b7          	lui	a5,0x10
80004648:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
8000464c:	fcc42503          	lw	a0,-52(s0)
80004650:	484040ef          	jal	80008ad4 <TFT_drawLine>
			  choice = 1;
80004654:	00100793          	li	a5,1
80004658:	fef407a3          	sb	a5,-17(s0)
			  return 2;
8000465c:	00200793          	li	a5,2
80004660:	5300006f          	j	80004b90 <singlePlayerX+0x84c>
		  }
		  else if(x < 80 && (y>80 && y <160)&& board[3]==' ')// && pos3==0)// 3
80004664:	fdc45703          	lhu	a4,-36(s0)
80004668:	04f00793          	li	a5,79
8000466c:	0ce7e463          	bltu	a5,a4,80004734 <singlePlayerX+0x3f0>
80004670:	fda45703          	lhu	a4,-38(s0)
80004674:	05000793          	li	a5,80
80004678:	0ae7fe63          	bleu	a4,a5,80004734 <singlePlayerX+0x3f0>
8000467c:	fda45703          	lhu	a4,-38(s0)
80004680:	09f00793          	li	a5,159
80004684:	0ae7e863          	bltu	a5,a4,80004734 <singlePlayerX+0x3f0>
80004688:	fc442783          	lw	a5,-60(s0)
8000468c:	00378793          	addi	a5,a5,3
80004690:	0007c703          	lbu	a4,0(a5)
80004694:	02000793          	li	a5,32
80004698:	08f71e63          	bne	a4,a5,80004734 <singlePlayerX+0x3f0>
		  {
			  x_pos0 = 20;  y_pos0=100;
8000469c:	01400793          	li	a5,20
800046a0:	fef41623          	sh	a5,-20(s0)
800046a4:	06400793          	li	a5,100
800046a8:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =60 ;  y_pos1 =140;
800046ac:	03c00793          	li	a5,60
800046b0:	fef41423          	sh	a5,-24(s0)
800046b4:	08c00793          	li	a5,140
800046b8:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 60;  y_pos2=100;
800046bc:	03c00793          	li	a5,60
800046c0:	fef41223          	sh	a5,-28(s0)
800046c4:	06400793          	li	a5,100
800046c8:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =20 ;  y_pos3 =140;
800046cc:	01400793          	li	a5,20
800046d0:	fef41023          	sh	a5,-32(s0)
800046d4:	08c00793          	li	a5,140
800046d8:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
800046dc:	fec41583          	lh	a1,-20(s0)
800046e0:	fea41603          	lh	a2,-22(s0)
800046e4:	fe841683          	lh	a3,-24(s0)
800046e8:	fe641703          	lh	a4,-26(s0)
800046ec:	fc842803          	lw	a6,-56(s0)
800046f0:	000107b7          	lui	a5,0x10
800046f4:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800046f8:	fcc42503          	lw	a0,-52(s0)
800046fc:	3d8040ef          	jal	80008ad4 <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004700:	fe441583          	lh	a1,-28(s0)
80004704:	fe241603          	lh	a2,-30(s0)
80004708:	fe041683          	lh	a3,-32(s0)
8000470c:	fde41703          	lh	a4,-34(s0)
80004710:	fc842803          	lw	a6,-56(s0)
80004714:	000107b7          	lui	a5,0x10
80004718:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
8000471c:	fcc42503          	lw	a0,-52(s0)
80004720:	3b4040ef          	jal	80008ad4 <TFT_drawLine>
			  choice = 1;
80004724:	00100793          	li	a5,1
80004728:	fef407a3          	sb	a5,-17(s0)
			  return 3;
8000472c:	00300793          	li	a5,3
80004730:	4600006f          	j	80004b90 <singlePlayerX+0x84c>
		  }
		  else if((x < 160 && x >80)&& (y < 160 && y >80)&& board[4]==' ' )//&& pos4==0)// 4
80004734:	fdc45703          	lhu	a4,-36(s0)
80004738:	09f00793          	li	a5,159
8000473c:	0ce7ea63          	bltu	a5,a4,80004810 <singlePlayerX+0x4cc>
80004740:	fdc45703          	lhu	a4,-36(s0)
80004744:	05000793          	li	a5,80
80004748:	0ce7f463          	bleu	a4,a5,80004810 <singlePlayerX+0x4cc>
8000474c:	fda45703          	lhu	a4,-38(s0)
80004750:	09f00793          	li	a5,159
80004754:	0ae7ee63          	bltu	a5,a4,80004810 <singlePlayerX+0x4cc>
80004758:	fda45703          	lhu	a4,-38(s0)
8000475c:	05000793          	li	a5,80
80004760:	0ae7f863          	bleu	a4,a5,80004810 <singlePlayerX+0x4cc>
80004764:	fc442783          	lw	a5,-60(s0)
80004768:	00478793          	addi	a5,a5,4
8000476c:	0007c703          	lbu	a4,0(a5)
80004770:	02000793          	li	a5,32
80004774:	08f71e63          	bne	a4,a5,80004810 <singlePlayerX+0x4cc>
		  {
			  x_pos0 = 100;  y_pos0=100;
80004778:	06400793          	li	a5,100
8000477c:	fef41623          	sh	a5,-20(s0)
80004780:	06400793          	li	a5,100
80004784:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =140 ;  y_pos1 =140;
80004788:	08c00793          	li	a5,140
8000478c:	fef41423          	sh	a5,-24(s0)
80004790:	08c00793          	li	a5,140
80004794:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 140;  y_pos2=100;
80004798:	08c00793          	li	a5,140
8000479c:	fef41223          	sh	a5,-28(s0)
800047a0:	06400793          	li	a5,100
800047a4:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =100 ;  y_pos3 =140;
800047a8:	06400793          	li	a5,100
800047ac:	fef41023          	sh	a5,-32(s0)
800047b0:	08c00793          	li	a5,140
800047b4:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
800047b8:	fec41583          	lh	a1,-20(s0)
800047bc:	fea41603          	lh	a2,-22(s0)
800047c0:	fe841683          	lh	a3,-24(s0)
800047c4:	fe641703          	lh	a4,-26(s0)
800047c8:	fc842803          	lw	a6,-56(s0)
800047cc:	000107b7          	lui	a5,0x10
800047d0:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800047d4:	fcc42503          	lw	a0,-52(s0)
800047d8:	2fc040ef          	jal	80008ad4 <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
800047dc:	fe441583          	lh	a1,-28(s0)
800047e0:	fe241603          	lh	a2,-30(s0)
800047e4:	fe041683          	lh	a3,-32(s0)
800047e8:	fde41703          	lh	a4,-34(s0)
800047ec:	fc842803          	lw	a6,-56(s0)
800047f0:	000107b7          	lui	a5,0x10
800047f4:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800047f8:	fcc42503          	lw	a0,-52(s0)
800047fc:	2d8040ef          	jal	80008ad4 <TFT_drawLine>
			  choice = 1;
80004800:	00100793          	li	a5,1
80004804:	fef407a3          	sb	a5,-17(s0)
			  return 4;
80004808:	00400793          	li	a5,4
8000480c:	3840006f          	j	80004b90 <singlePlayerX+0x84c>
		 }
		  else if((x < 240 && x >160)&& (y>80 && y<160 ) && board[5]==' ')//&& pos5==0)// 5
80004810:	fdc45703          	lhu	a4,-36(s0)
80004814:	0ef00793          	li	a5,239
80004818:	0ce7ea63          	bltu	a5,a4,800048ec <singlePlayerX+0x5a8>
8000481c:	fdc45703          	lhu	a4,-36(s0)
80004820:	0a000793          	li	a5,160
80004824:	0ce7f463          	bleu	a4,a5,800048ec <singlePlayerX+0x5a8>
80004828:	fda45703          	lhu	a4,-38(s0)
8000482c:	05000793          	li	a5,80
80004830:	0ae7fe63          	bleu	a4,a5,800048ec <singlePlayerX+0x5a8>
80004834:	fda45703          	lhu	a4,-38(s0)
80004838:	09f00793          	li	a5,159
8000483c:	0ae7e863          	bltu	a5,a4,800048ec <singlePlayerX+0x5a8>
80004840:	fc442783          	lw	a5,-60(s0)
80004844:	00578793          	addi	a5,a5,5
80004848:	0007c703          	lbu	a4,0(a5)
8000484c:	02000793          	li	a5,32
80004850:	08f71e63          	bne	a4,a5,800048ec <singlePlayerX+0x5a8>
		  {
			  x_pos0 = 180;  y_pos0= 100;
80004854:	0b400793          	li	a5,180
80004858:	fef41623          	sh	a5,-20(s0)
8000485c:	06400793          	li	a5,100
80004860:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =220 ;  y_pos1 =140;
80004864:	0dc00793          	li	a5,220
80004868:	fef41423          	sh	a5,-24(s0)
8000486c:	08c00793          	li	a5,140
80004870:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 220;  y_pos2=100;
80004874:	0dc00793          	li	a5,220
80004878:	fef41223          	sh	a5,-28(s0)
8000487c:	06400793          	li	a5,100
80004880:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =180 ;  y_pos3 =140;
80004884:	0b400793          	li	a5,180
80004888:	fef41023          	sh	a5,-32(s0)
8000488c:	08c00793          	li	a5,140
80004890:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004894:	fec41583          	lh	a1,-20(s0)
80004898:	fea41603          	lh	a2,-22(s0)
8000489c:	fe841683          	lh	a3,-24(s0)
800048a0:	fe641703          	lh	a4,-26(s0)
800048a4:	fc842803          	lw	a6,-56(s0)
800048a8:	000107b7          	lui	a5,0x10
800048ac:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800048b0:	fcc42503          	lw	a0,-52(s0)
800048b4:	220040ef          	jal	80008ad4 <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
800048b8:	fe441583          	lh	a1,-28(s0)
800048bc:	fe241603          	lh	a2,-30(s0)
800048c0:	fe041683          	lh	a3,-32(s0)
800048c4:	fde41703          	lh	a4,-34(s0)
800048c8:	fc842803          	lw	a6,-56(s0)
800048cc:	000107b7          	lui	a5,0x10
800048d0:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800048d4:	fcc42503          	lw	a0,-52(s0)
800048d8:	1fc040ef          	jal	80008ad4 <TFT_drawLine>
			  choice = 1;
800048dc:	00100793          	li	a5,1
800048e0:	fef407a3          	sb	a5,-17(s0)
			  return 5;
800048e4:	00500793          	li	a5,5
800048e8:	2a80006f          	j	80004b90 <singlePlayerX+0x84c>
		  }
		  else if( x < 80 && (y<240 && y > 160)&& board[6]==' ' )//&& pos6==0)//6
800048ec:	fdc45703          	lhu	a4,-36(s0)
800048f0:	04f00793          	li	a5,79
800048f4:	0ce7e463          	bltu	a5,a4,800049bc <singlePlayerX+0x678>
800048f8:	fda45703          	lhu	a4,-38(s0)
800048fc:	0ef00793          	li	a5,239
80004900:	0ae7ee63          	bltu	a5,a4,800049bc <singlePlayerX+0x678>
80004904:	fda45703          	lhu	a4,-38(s0)
80004908:	0a000793          	li	a5,160
8000490c:	0ae7f863          	bleu	a4,a5,800049bc <singlePlayerX+0x678>
80004910:	fc442783          	lw	a5,-60(s0)
80004914:	00678793          	addi	a5,a5,6
80004918:	0007c703          	lbu	a4,0(a5)
8000491c:	02000793          	li	a5,32
80004920:	08f71e63          	bne	a4,a5,800049bc <singlePlayerX+0x678>
		  {
			  x_pos0 = 20;  y_pos0=180;
80004924:	01400793          	li	a5,20
80004928:	fef41623          	sh	a5,-20(s0)
8000492c:	0b400793          	li	a5,180
80004930:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =60 ;  y_pos1 =220;
80004934:	03c00793          	li	a5,60
80004938:	fef41423          	sh	a5,-24(s0)
8000493c:	0dc00793          	li	a5,220
80004940:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 60;  y_pos2=180;
80004944:	03c00793          	li	a5,60
80004948:	fef41223          	sh	a5,-28(s0)
8000494c:	0b400793          	li	a5,180
80004950:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =20 ;  y_pos3 =220;
80004954:	01400793          	li	a5,20
80004958:	fef41023          	sh	a5,-32(s0)
8000495c:	0dc00793          	li	a5,220
80004960:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004964:	fec41583          	lh	a1,-20(s0)
80004968:	fea41603          	lh	a2,-22(s0)
8000496c:	fe841683          	lh	a3,-24(s0)
80004970:	fe641703          	lh	a4,-26(s0)
80004974:	fc842803          	lw	a6,-56(s0)
80004978:	000107b7          	lui	a5,0x10
8000497c:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80004980:	fcc42503          	lw	a0,-52(s0)
80004984:	150040ef          	jal	80008ad4 <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004988:	fe441583          	lh	a1,-28(s0)
8000498c:	fe241603          	lh	a2,-30(s0)
80004990:	fe041683          	lh	a3,-32(s0)
80004994:	fde41703          	lh	a4,-34(s0)
80004998:	fc842803          	lw	a6,-56(s0)
8000499c:	000107b7          	lui	a5,0x10
800049a0:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800049a4:	fcc42503          	lw	a0,-52(s0)
800049a8:	12c040ef          	jal	80008ad4 <TFT_drawLine>
			  choice = 1;
800049ac:	00100793          	li	a5,1
800049b0:	fef407a3          	sb	a5,-17(s0)
			  return 6;
800049b4:	00600793          	li	a5,6
800049b8:	1d80006f          	j	80004b90 <singlePlayerX+0x84c>
		  }
		  else if((x < 160 && x >80)&&( y <240 && y>160)&& board[7]==' ')// && pos7==0) // 7
800049bc:	fdc45703          	lhu	a4,-36(s0)
800049c0:	09f00793          	li	a5,159
800049c4:	0ce7ea63          	bltu	a5,a4,80004a98 <singlePlayerX+0x754>
800049c8:	fdc45703          	lhu	a4,-36(s0)
800049cc:	05000793          	li	a5,80
800049d0:	0ce7f463          	bleu	a4,a5,80004a98 <singlePlayerX+0x754>
800049d4:	fda45703          	lhu	a4,-38(s0)
800049d8:	0ef00793          	li	a5,239
800049dc:	0ae7ee63          	bltu	a5,a4,80004a98 <singlePlayerX+0x754>
800049e0:	fda45703          	lhu	a4,-38(s0)
800049e4:	0a000793          	li	a5,160
800049e8:	0ae7f863          	bleu	a4,a5,80004a98 <singlePlayerX+0x754>
800049ec:	fc442783          	lw	a5,-60(s0)
800049f0:	00778793          	addi	a5,a5,7
800049f4:	0007c703          	lbu	a4,0(a5)
800049f8:	02000793          	li	a5,32
800049fc:	08f71e63          	bne	a4,a5,80004a98 <singlePlayerX+0x754>
		  {
			  x_pos0 = 100;	  y_pos0=180;
80004a00:	06400793          	li	a5,100
80004a04:	fef41623          	sh	a5,-20(s0)
80004a08:	0b400793          	li	a5,180
80004a0c:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =140 ;	  y_pos1 =220;
80004a10:	08c00793          	li	a5,140
80004a14:	fef41423          	sh	a5,-24(s0)
80004a18:	0dc00793          	li	a5,220
80004a1c:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 140;  y_pos2=180;
80004a20:	08c00793          	li	a5,140
80004a24:	fef41223          	sh	a5,-28(s0)
80004a28:	0b400793          	li	a5,180
80004a2c:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =100 ;	  y_pos3 =220;
80004a30:	06400793          	li	a5,100
80004a34:	fef41023          	sh	a5,-32(s0)
80004a38:	0dc00793          	li	a5,220
80004a3c:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004a40:	fec41583          	lh	a1,-20(s0)
80004a44:	fea41603          	lh	a2,-22(s0)
80004a48:	fe841683          	lh	a3,-24(s0)
80004a4c:	fe641703          	lh	a4,-26(s0)
80004a50:	fc842803          	lw	a6,-56(s0)
80004a54:	000107b7          	lui	a5,0x10
80004a58:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80004a5c:	fcc42503          	lw	a0,-52(s0)
80004a60:	074040ef          	jal	80008ad4 <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004a64:	fe441583          	lh	a1,-28(s0)
80004a68:	fe241603          	lh	a2,-30(s0)
80004a6c:	fe041683          	lh	a3,-32(s0)
80004a70:	fde41703          	lh	a4,-34(s0)
80004a74:	fc842803          	lw	a6,-56(s0)
80004a78:	000107b7          	lui	a5,0x10
80004a7c:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80004a80:	fcc42503          	lw	a0,-52(s0)
80004a84:	050040ef          	jal	80008ad4 <TFT_drawLine>
			  choice = 1;
80004a88:	00100793          	li	a5,1
80004a8c:	fef407a3          	sb	a5,-17(s0)
			  return 7;
80004a90:	00700793          	li	a5,7
80004a94:	0fc0006f          	j	80004b90 <singlePlayerX+0x84c>
		  }
		  else if((x < 240 && x >160)&&(y>160 && y<240) && board[8]==' ')//&& pos8==0)// 8
80004a98:	fdc45703          	lhu	a4,-36(s0)
80004a9c:	0ef00793          	li	a5,239
80004aa0:	0ce7ea63          	bltu	a5,a4,80004b74 <singlePlayerX+0x830>
80004aa4:	fdc45703          	lhu	a4,-36(s0)
80004aa8:	0a000793          	li	a5,160
80004aac:	0ce7f463          	bleu	a4,a5,80004b74 <singlePlayerX+0x830>
80004ab0:	fda45703          	lhu	a4,-38(s0)
80004ab4:	0a000793          	li	a5,160
80004ab8:	0ae7fe63          	bleu	a4,a5,80004b74 <singlePlayerX+0x830>
80004abc:	fda45703          	lhu	a4,-38(s0)
80004ac0:	0ef00793          	li	a5,239
80004ac4:	0ae7e863          	bltu	a5,a4,80004b74 <singlePlayerX+0x830>
80004ac8:	fc442783          	lw	a5,-60(s0)
80004acc:	00878793          	addi	a5,a5,8
80004ad0:	0007c703          	lbu	a4,0(a5)
80004ad4:	02000793          	li	a5,32
80004ad8:	08f71e63          	bne	a4,a5,80004b74 <singlePlayerX+0x830>
		  {
			  x_pos0 = 180;  y_pos0=180;
80004adc:	0b400793          	li	a5,180
80004ae0:	fef41623          	sh	a5,-20(s0)
80004ae4:	0b400793          	li	a5,180
80004ae8:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =220 ;  y_pos1 =220;
80004aec:	0dc00793          	li	a5,220
80004af0:	fef41423          	sh	a5,-24(s0)
80004af4:	0dc00793          	li	a5,220
80004af8:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 220;  y_pos2=180;
80004afc:	0dc00793          	li	a5,220
80004b00:	fef41223          	sh	a5,-28(s0)
80004b04:	0b400793          	li	a5,180
80004b08:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =180 ;  y_pos3 =220;
80004b0c:	0b400793          	li	a5,180
80004b10:	fef41023          	sh	a5,-32(s0)
80004b14:	0dc00793          	li	a5,220
80004b18:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004b1c:	fec41583          	lh	a1,-20(s0)
80004b20:	fea41603          	lh	a2,-22(s0)
80004b24:	fe841683          	lh	a3,-24(s0)
80004b28:	fe641703          	lh	a4,-26(s0)
80004b2c:	fc842803          	lw	a6,-56(s0)
80004b30:	000107b7          	lui	a5,0x10
80004b34:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80004b38:	fcc42503          	lw	a0,-52(s0)
80004b3c:	799030ef          	jal	80008ad4 <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004b40:	fe441583          	lh	a1,-28(s0)
80004b44:	fe241603          	lh	a2,-30(s0)
80004b48:	fe041683          	lh	a3,-32(s0)
80004b4c:	fde41703          	lh	a4,-34(s0)
80004b50:	fc842803          	lw	a6,-56(s0)
80004b54:	000107b7          	lui	a5,0x10
80004b58:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80004b5c:	fcc42503          	lw	a0,-52(s0)
80004b60:	775030ef          	jal	80008ad4 <TFT_drawLine>
			  choice = 1;
80004b64:	00100793          	li	a5,1
80004b68:	fef407a3          	sb	a5,-17(s0)
			  return 8;
80004b6c:	00800793          	li	a5,8
80004b70:	0200006f          	j	80004b90 <singlePlayerX+0x84c>
	while(choice == 0 && player == 1)
80004b74:	fef44783          	lbu	a5,-17(s0)
80004b78:	00079863          	bnez	a5,80004b88 <singlePlayerX+0x844>
80004b7c:	fc344703          	lbu	a4,-61(s0)
80004b80:	00100793          	li	a5,1
80004b84:	fef70663          	beq	a4,a5,80004370 <singlePlayerX+0x2c>
		  }
	   }
	  }
   choice = 0;
80004b88:	fe0407a3          	sb	zero,-17(s0)
   return -1;
80004b8c:	0ff00793          	li	a5,255

}
80004b90:	00078513          	mv	a0,a5
80004b94:	03c12083          	lw	ra,60(sp)
80004b98:	03812403          	lw	s0,56(sp)
80004b9c:	04010113          	addi	sp,sp,64
80004ba0:	00008067          	ret

80004ba4 <singlePlayerAI>:
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	char board[9],
	uint8_t player
)
{
80004ba4:	fc010113          	addi	sp,sp,-64
80004ba8:	02112e23          	sw	ra,60(sp)
80004bac:	02812c23          	sw	s0,56(sp)
80004bb0:	04010413          	addi	s0,sp,64
80004bb4:	fca42623          	sw	a0,-52(s0)
80004bb8:	fcb42423          	sw	a1,-56(s0)
80004bbc:	fcc42223          	sw	a2,-60(s0)
80004bc0:	00068793          	mv	a5,a3
80004bc4:	fcf401a3          	sb	a5,-61(s0)
	char AIboard[9];
	uint16_t sq_centre_x,sq_centre_y;
	// Can AI win in one move
	for(uint8_t i =0; i < 9; i ++)
80004bc8:	fe0407a3          	sb	zero,-17(s0)
80004bcc:	2ac0006f          	j	80004e78 <singlePlayerAI+0x2d4>
	{
		for (int boardcp = 0; boardcp < 9; boardcp++)
80004bd0:	fe042423          	sw	zero,-24(s0)
80004bd4:	0300006f          	j	80004c04 <singlePlayerAI+0x60>
		{
			AIboard[boardcp] = board[boardcp];
80004bd8:	fe842783          	lw	a5,-24(s0)
80004bdc:	fc442703          	lw	a4,-60(s0)
80004be0:	00f707b3          	add	a5,a4,a5
80004be4:	0007c703          	lbu	a4,0(a5)
80004be8:	fe842783          	lw	a5,-24(s0)
80004bec:	ff040693          	addi	a3,s0,-16
80004bf0:	00f687b3          	add	a5,a3,a5
80004bf4:	fee78423          	sb	a4,-24(a5)
		for (int boardcp = 0; boardcp < 9; boardcp++)
80004bf8:	fe842783          	lw	a5,-24(s0)
80004bfc:	00178793          	addi	a5,a5,1
80004c00:	fef42423          	sw	a5,-24(s0)
80004c04:	fe842703          	lw	a4,-24(s0)
80004c08:	00800793          	li	a5,8
80004c0c:	fce7d6e3          	ble	a4,a5,80004bd8 <singlePlayerAI+0x34>
		}
		if (AIboard[i] == ' ')
80004c10:	fef44783          	lbu	a5,-17(s0)
80004c14:	ff040713          	addi	a4,s0,-16
80004c18:	00f707b3          	add	a5,a4,a5
80004c1c:	fe87c703          	lbu	a4,-24(a5)
80004c20:	02000793          	li	a5,32
80004c24:	00f71c63          	bne	a4,a5,80004c3c <singlePlayerAI+0x98>
		{
			AIboard[i] = 'O';
80004c28:	fef44783          	lbu	a5,-17(s0)
80004c2c:	ff040713          	addi	a4,s0,-16
80004c30:	00f707b3          	add	a5,a4,a5
80004c34:	04f00713          	li	a4,79
80004c38:	fee78423          	sb	a4,-24(a5)
		}
		if (AIcheck_winner(AIboard,player) == 1)
80004c3c:	fc344703          	lbu	a4,-61(s0)
80004c40:	fd840793          	addi	a5,s0,-40
80004c44:	00070593          	mv	a1,a4
80004c48:	00078513          	mv	a0,a5
80004c4c:	755010ef          	jal	80006ba0 <AIcheck_winner>
80004c50:	00050793          	mv	a5,a0
80004c54:	00078713          	mv	a4,a5
80004c58:	00100793          	li	a5,1
80004c5c:	20f71863          	bne	a4,a5,80004e6c <singlePlayerAI+0x2c8>
		{
			if ( i == 0)
80004c60:	fef44783          	lbu	a5,-17(s0)
80004c64:	02079a63          	bnez	a5,80004c98 <singlePlayerAI+0xf4>
			{
				sq_centre_x = 40;  sq_centre_y = 40;
80004c68:	02800793          	li	a5,40
80004c6c:	fef41223          	sh	a5,-28(s0)
80004c70:	02800793          	li	a5,40
80004c74:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004c78:	fe441583          	lh	a1,-28(s0)
80004c7c:	fe241603          	lh	a2,-30(s0)
80004c80:	fc842783          	lw	a5,-56(s0)
80004c84:	01f00713          	li	a4,31
80004c88:	01e00693          	li	a3,30
80004c8c:	fcc42503          	lw	a0,-52(s0)
80004c90:	1e9030ef          	jal	80008678 <TFT_drawCircle>
80004c94:	03c0006f          	j	80004cd0 <singlePlayerAI+0x12c>
			}
			else if (i == 1)
80004c98:	fef44703          	lbu	a4,-17(s0)
80004c9c:	00100793          	li	a5,1
80004ca0:	02f71863          	bne	a4,a5,80004cd0 <singlePlayerAI+0x12c>
			{
				sq_centre_x = 120;
80004ca4:	07800793          	li	a5,120
80004ca8:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 40;
80004cac:	02800793          	li	a5,40
80004cb0:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004cb4:	fe441583          	lh	a1,-28(s0)
80004cb8:	fe241603          	lh	a2,-30(s0)
80004cbc:	fc842783          	lw	a5,-56(s0)
80004cc0:	01f00713          	li	a4,31
80004cc4:	01e00693          	li	a3,30
80004cc8:	fcc42503          	lw	a0,-52(s0)
80004ccc:	1ad030ef          	jal	80008678 <TFT_drawCircle>
			}
			if ( i == 2)
80004cd0:	fef44703          	lbu	a4,-17(s0)
80004cd4:	00200793          	li	a5,2
80004cd8:	02f71a63          	bne	a4,a5,80004d0c <singlePlayerAI+0x168>
			{
				sq_centre_x = 200;
80004cdc:	0c800793          	li	a5,200
80004ce0:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 40;
80004ce4:	02800793          	li	a5,40
80004ce8:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004cec:	fe441583          	lh	a1,-28(s0)
80004cf0:	fe241603          	lh	a2,-30(s0)
80004cf4:	fc842783          	lw	a5,-56(s0)
80004cf8:	01f00713          	li	a4,31
80004cfc:	01e00693          	li	a3,30
80004d00:	fcc42503          	lw	a0,-52(s0)
80004d04:	175030ef          	jal	80008678 <TFT_drawCircle>
80004d08:	03c0006f          	j	80004d44 <singlePlayerAI+0x1a0>
			}
			else if (i == 3)
80004d0c:	fef44703          	lbu	a4,-17(s0)
80004d10:	00300793          	li	a5,3
80004d14:	02f71863          	bne	a4,a5,80004d44 <singlePlayerAI+0x1a0>
			{
				sq_centre_x = 40;
80004d18:	02800793          	li	a5,40
80004d1c:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
80004d20:	07800793          	li	a5,120
80004d24:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004d28:	fe441583          	lh	a1,-28(s0)
80004d2c:	fe241603          	lh	a2,-30(s0)
80004d30:	fc842783          	lw	a5,-56(s0)
80004d34:	01f00713          	li	a4,31
80004d38:	01e00693          	li	a3,30
80004d3c:	fcc42503          	lw	a0,-52(s0)
80004d40:	139030ef          	jal	80008678 <TFT_drawCircle>
			}
			if ( i == 4)
80004d44:	fef44703          	lbu	a4,-17(s0)
80004d48:	00400793          	li	a5,4
80004d4c:	02f71a63          	bne	a4,a5,80004d80 <singlePlayerAI+0x1dc>
			{
				sq_centre_x = 120;
80004d50:	07800793          	li	a5,120
80004d54:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
80004d58:	07800793          	li	a5,120
80004d5c:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004d60:	fe441583          	lh	a1,-28(s0)
80004d64:	fe241603          	lh	a2,-30(s0)
80004d68:	fc842783          	lw	a5,-56(s0)
80004d6c:	01f00713          	li	a4,31
80004d70:	01e00693          	li	a3,30
80004d74:	fcc42503          	lw	a0,-52(s0)
80004d78:	101030ef          	jal	80008678 <TFT_drawCircle>
80004d7c:	03c0006f          	j	80004db8 <singlePlayerAI+0x214>
			}
			else if (i == 5)
80004d80:	fef44703          	lbu	a4,-17(s0)
80004d84:	00500793          	li	a5,5
80004d88:	02f71863          	bne	a4,a5,80004db8 <singlePlayerAI+0x214>
			{
				sq_centre_x = 200;
80004d8c:	0c800793          	li	a5,200
80004d90:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
80004d94:	07800793          	li	a5,120
80004d98:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004d9c:	fe441583          	lh	a1,-28(s0)
80004da0:	fe241603          	lh	a2,-30(s0)
80004da4:	fc842783          	lw	a5,-56(s0)
80004da8:	01f00713          	li	a4,31
80004dac:	01e00693          	li	a3,30
80004db0:	fcc42503          	lw	a0,-52(s0)
80004db4:	0c5030ef          	jal	80008678 <TFT_drawCircle>
			}
			if ( i == 6)
80004db8:	fef44703          	lbu	a4,-17(s0)
80004dbc:	00600793          	li	a5,6
80004dc0:	02f71a63          	bne	a4,a5,80004df4 <singlePlayerAI+0x250>
			{
				sq_centre_x = 40;
80004dc4:	02800793          	li	a5,40
80004dc8:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
80004dcc:	0c800793          	li	a5,200
80004dd0:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004dd4:	fe441583          	lh	a1,-28(s0)
80004dd8:	fe241603          	lh	a2,-30(s0)
80004ddc:	fc842783          	lw	a5,-56(s0)
80004de0:	01f00713          	li	a4,31
80004de4:	01e00693          	li	a3,30
80004de8:	fcc42503          	lw	a0,-52(s0)
80004dec:	08d030ef          	jal	80008678 <TFT_drawCircle>
80004df0:	03c0006f          	j	80004e2c <singlePlayerAI+0x288>
			}
			else if (i == 7)
80004df4:	fef44703          	lbu	a4,-17(s0)
80004df8:	00700793          	li	a5,7
80004dfc:	02f71863          	bne	a4,a5,80004e2c <singlePlayerAI+0x288>
			{
				sq_centre_x = 120;
80004e00:	07800793          	li	a5,120
80004e04:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
80004e08:	0c800793          	li	a5,200
80004e0c:	fef41123          	sh	a5,-30(s0)
                TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004e10:	fe441583          	lh	a1,-28(s0)
80004e14:	fe241603          	lh	a2,-30(s0)
80004e18:	fc842783          	lw	a5,-56(s0)
80004e1c:	01f00713          	li	a4,31
80004e20:	01e00693          	li	a3,30
80004e24:	fcc42503          	lw	a0,-52(s0)
80004e28:	051030ef          	jal	80008678 <TFT_drawCircle>
			}
			if ( i == 8)
80004e2c:	fef44703          	lbu	a4,-17(s0)
80004e30:	00800793          	li	a5,8
80004e34:	02f71863          	bne	a4,a5,80004e64 <singlePlayerAI+0x2c0>
			{
				sq_centre_x = 200;
80004e38:	0c800793          	li	a5,200
80004e3c:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
80004e40:	0c800793          	li	a5,200
80004e44:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004e48:	fe441583          	lh	a1,-28(s0)
80004e4c:	fe241603          	lh	a2,-30(s0)
80004e50:	fc842783          	lw	a5,-56(s0)
80004e54:	01f00713          	li	a4,31
80004e58:	01e00693          	li	a3,30
80004e5c:	fcc42503          	lw	a0,-52(s0)
80004e60:	019030ef          	jal	80008678 <TFT_drawCircle>
			}

			return i;
80004e64:	fef44783          	lbu	a5,-17(s0)
80004e68:	5e40006f          	j	8000544c <singlePlayerAI+0x8a8>
	for(uint8_t i =0; i < 9; i ++)
80004e6c:	fef44783          	lbu	a5,-17(s0)
80004e70:	00178793          	addi	a5,a5,1
80004e74:	fef407a3          	sb	a5,-17(s0)
80004e78:	fef44703          	lbu	a4,-17(s0)
80004e7c:	00800793          	li	a5,8
80004e80:	d4e7f8e3          	bleu	a4,a5,80004bd0 <singlePlayerAI+0x2c>
		}
	}

	// Can human win in one move
	for(uint8_t i =0; i < 9; i ++)
80004e84:	fe0403a3          	sb	zero,-25(s0)
80004e88:	2ac0006f          	j	80005134 <singlePlayerAI+0x590>
	{
		for (uint8_t brdcp = 0; brdcp < 9; brdcp++)
80004e8c:	fe040323          	sb	zero,-26(s0)
80004e90:	0300006f          	j	80004ec0 <singlePlayerAI+0x31c>
		{
			AIboard[brdcp] = board[brdcp];
80004e94:	fe644783          	lbu	a5,-26(s0)
80004e98:	fe644703          	lbu	a4,-26(s0)
80004e9c:	fc442683          	lw	a3,-60(s0)
80004ea0:	00e68733          	add	a4,a3,a4
80004ea4:	00074703          	lbu	a4,0(a4) # 2000 <_start-0x7fffe000>
80004ea8:	ff040693          	addi	a3,s0,-16
80004eac:	00f687b3          	add	a5,a3,a5
80004eb0:	fee78423          	sb	a4,-24(a5)
		for (uint8_t brdcp = 0; brdcp < 9; brdcp++)
80004eb4:	fe644783          	lbu	a5,-26(s0)
80004eb8:	00178793          	addi	a5,a5,1
80004ebc:	fef40323          	sb	a5,-26(s0)
80004ec0:	fe644703          	lbu	a4,-26(s0)
80004ec4:	00800793          	li	a5,8
80004ec8:	fce7f6e3          	bleu	a4,a5,80004e94 <singlePlayerAI+0x2f0>
		}
		if (AIboard[i] == ' ')
80004ecc:	fe744783          	lbu	a5,-25(s0)
80004ed0:	ff040713          	addi	a4,s0,-16
80004ed4:	00f707b3          	add	a5,a4,a5
80004ed8:	fe87c703          	lbu	a4,-24(a5)
80004edc:	02000793          	li	a5,32
80004ee0:	00f71c63          	bne	a4,a5,80004ef8 <singlePlayerAI+0x354>
		{
			AIboard[i] = 'X';
80004ee4:	fe744783          	lbu	a5,-25(s0)
80004ee8:	ff040713          	addi	a4,s0,-16
80004eec:	00f707b3          	add	a5,a4,a5
80004ef0:	05800713          	li	a4,88
80004ef4:	fee78423          	sb	a4,-24(a5)
		}
		if (AIcheck_winner(AIboard,player) == 1)
80004ef8:	fc344703          	lbu	a4,-61(s0)
80004efc:	fd840793          	addi	a5,s0,-40
80004f00:	00070593          	mv	a1,a4
80004f04:	00078513          	mv	a0,a5
80004f08:	499010ef          	jal	80006ba0 <AIcheck_winner>
80004f0c:	00050793          	mv	a5,a0
80004f10:	00078713          	mv	a4,a5
80004f14:	00100793          	li	a5,1
80004f18:	20f71863          	bne	a4,a5,80005128 <singlePlayerAI+0x584>
		{
			if ( i == 0)
80004f1c:	fe744783          	lbu	a5,-25(s0)
80004f20:	02079a63          	bnez	a5,80004f54 <singlePlayerAI+0x3b0>
			{
				sq_centre_x = 40;  sq_centre_y = 40;
80004f24:	02800793          	li	a5,40
80004f28:	fef41223          	sh	a5,-28(s0)
80004f2c:	02800793          	li	a5,40
80004f30:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004f34:	fe441583          	lh	a1,-28(s0)
80004f38:	fe241603          	lh	a2,-30(s0)
80004f3c:	fc842783          	lw	a5,-56(s0)
80004f40:	01f00713          	li	a4,31
80004f44:	01e00693          	li	a3,30
80004f48:	fcc42503          	lw	a0,-52(s0)
80004f4c:	72c030ef          	jal	80008678 <TFT_drawCircle>
80004f50:	03c0006f          	j	80004f8c <singlePlayerAI+0x3e8>
			}
			else if (i == 1)
80004f54:	fe744703          	lbu	a4,-25(s0)
80004f58:	00100793          	li	a5,1
80004f5c:	02f71863          	bne	a4,a5,80004f8c <singlePlayerAI+0x3e8>
			{
				sq_centre_x = 120;
80004f60:	07800793          	li	a5,120
80004f64:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 40;
80004f68:	02800793          	li	a5,40
80004f6c:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004f70:	fe441583          	lh	a1,-28(s0)
80004f74:	fe241603          	lh	a2,-30(s0)
80004f78:	fc842783          	lw	a5,-56(s0)
80004f7c:	01f00713          	li	a4,31
80004f80:	01e00693          	li	a3,30
80004f84:	fcc42503          	lw	a0,-52(s0)
80004f88:	6f0030ef          	jal	80008678 <TFT_drawCircle>
			}
			if ( i == 2)
80004f8c:	fe744703          	lbu	a4,-25(s0)
80004f90:	00200793          	li	a5,2
80004f94:	02f71a63          	bne	a4,a5,80004fc8 <singlePlayerAI+0x424>
			{
				sq_centre_x = 200;
80004f98:	0c800793          	li	a5,200
80004f9c:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 40;
80004fa0:	02800793          	li	a5,40
80004fa4:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004fa8:	fe441583          	lh	a1,-28(s0)
80004fac:	fe241603          	lh	a2,-30(s0)
80004fb0:	fc842783          	lw	a5,-56(s0)
80004fb4:	01f00713          	li	a4,31
80004fb8:	01e00693          	li	a3,30
80004fbc:	fcc42503          	lw	a0,-52(s0)
80004fc0:	6b8030ef          	jal	80008678 <TFT_drawCircle>
80004fc4:	03c0006f          	j	80005000 <singlePlayerAI+0x45c>
			}
			else if (i == 3)
80004fc8:	fe744703          	lbu	a4,-25(s0)
80004fcc:	00300793          	li	a5,3
80004fd0:	02f71863          	bne	a4,a5,80005000 <singlePlayerAI+0x45c>
			{
				sq_centre_x = 40;
80004fd4:	02800793          	li	a5,40
80004fd8:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
80004fdc:	07800793          	li	a5,120
80004fe0:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80004fe4:	fe441583          	lh	a1,-28(s0)
80004fe8:	fe241603          	lh	a2,-30(s0)
80004fec:	fc842783          	lw	a5,-56(s0)
80004ff0:	01f00713          	li	a4,31
80004ff4:	01e00693          	li	a3,30
80004ff8:	fcc42503          	lw	a0,-52(s0)
80004ffc:	67c030ef          	jal	80008678 <TFT_drawCircle>
			}
			if ( i == 4)
80005000:	fe744703          	lbu	a4,-25(s0)
80005004:	00400793          	li	a5,4
80005008:	02f71a63          	bne	a4,a5,8000503c <singlePlayerAI+0x498>
			{
				sq_centre_x = 120;
8000500c:	07800793          	li	a5,120
80005010:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
80005014:	07800793          	li	a5,120
80005018:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000501c:	fe441583          	lh	a1,-28(s0)
80005020:	fe241603          	lh	a2,-30(s0)
80005024:	fc842783          	lw	a5,-56(s0)
80005028:	01f00713          	li	a4,31
8000502c:	01e00693          	li	a3,30
80005030:	fcc42503          	lw	a0,-52(s0)
80005034:	644030ef          	jal	80008678 <TFT_drawCircle>
80005038:	03c0006f          	j	80005074 <singlePlayerAI+0x4d0>
			}
			else if (i == 5)
8000503c:	fe744703          	lbu	a4,-25(s0)
80005040:	00500793          	li	a5,5
80005044:	02f71863          	bne	a4,a5,80005074 <singlePlayerAI+0x4d0>
			{
				sq_centre_x = 200;
80005048:	0c800793          	li	a5,200
8000504c:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
80005050:	07800793          	li	a5,120
80005054:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005058:	fe441583          	lh	a1,-28(s0)
8000505c:	fe241603          	lh	a2,-30(s0)
80005060:	fc842783          	lw	a5,-56(s0)
80005064:	01f00713          	li	a4,31
80005068:	01e00693          	li	a3,30
8000506c:	fcc42503          	lw	a0,-52(s0)
80005070:	608030ef          	jal	80008678 <TFT_drawCircle>
			}
			if ( i == 6)
80005074:	fe744703          	lbu	a4,-25(s0)
80005078:	00600793          	li	a5,6
8000507c:	02f71a63          	bne	a4,a5,800050b0 <singlePlayerAI+0x50c>
			{
				sq_centre_x = 40;
80005080:	02800793          	li	a5,40
80005084:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
80005088:	0c800793          	li	a5,200
8000508c:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005090:	fe441583          	lh	a1,-28(s0)
80005094:	fe241603          	lh	a2,-30(s0)
80005098:	fc842783          	lw	a5,-56(s0)
8000509c:	01f00713          	li	a4,31
800050a0:	01e00693          	li	a3,30
800050a4:	fcc42503          	lw	a0,-52(s0)
800050a8:	5d0030ef          	jal	80008678 <TFT_drawCircle>
800050ac:	03c0006f          	j	800050e8 <singlePlayerAI+0x544>
			}
			else if (i == 7)
800050b0:	fe744703          	lbu	a4,-25(s0)
800050b4:	00700793          	li	a5,7
800050b8:	02f71863          	bne	a4,a5,800050e8 <singlePlayerAI+0x544>
			{
				sq_centre_x = 120;
800050bc:	07800793          	li	a5,120
800050c0:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
800050c4:	0c800793          	li	a5,200
800050c8:	fef41123          	sh	a5,-30(s0)
                TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800050cc:	fe441583          	lh	a1,-28(s0)
800050d0:	fe241603          	lh	a2,-30(s0)
800050d4:	fc842783          	lw	a5,-56(s0)
800050d8:	01f00713          	li	a4,31
800050dc:	01e00693          	li	a3,30
800050e0:	fcc42503          	lw	a0,-52(s0)
800050e4:	594030ef          	jal	80008678 <TFT_drawCircle>
			}
			if ( i == 8)
800050e8:	fe744703          	lbu	a4,-25(s0)
800050ec:	00800793          	li	a5,8
800050f0:	02f71863          	bne	a4,a5,80005120 <singlePlayerAI+0x57c>
			{
				sq_centre_x = 200;
800050f4:	0c800793          	li	a5,200
800050f8:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
800050fc:	0c800793          	li	a5,200
80005100:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005104:	fe441583          	lh	a1,-28(s0)
80005108:	fe241603          	lh	a2,-30(s0)
8000510c:	fc842783          	lw	a5,-56(s0)
80005110:	01f00713          	li	a4,31
80005114:	01e00693          	li	a3,30
80005118:	fcc42503          	lw	a0,-52(s0)
8000511c:	55c030ef          	jal	80008678 <TFT_drawCircle>
			}
			return i;
80005120:	fe744783          	lbu	a5,-25(s0)
80005124:	3280006f          	j	8000544c <singlePlayerAI+0x8a8>
	for(uint8_t i =0; i < 9; i ++)
80005128:	fe744783          	lbu	a5,-25(s0)
8000512c:	00178793          	addi	a5,a5,1
80005130:	fef403a3          	sb	a5,-25(s0)
80005134:	fe744703          	lbu	a4,-25(s0)
80005138:	00800793          	li	a5,8
8000513c:	d4e7f8e3          	bleu	a4,a5,80004e8c <singlePlayerAI+0x2e8>
		}
	}

	// attempt to take the corners if there free
	if (board[0] == ' ')
80005140:	fc442783          	lw	a5,-60(s0)
80005144:	0007c703          	lbu	a4,0(a5)
80005148:	02000793          	li	a5,32
8000514c:	04f71263          	bne	a4,a5,80005190 <singlePlayerAI+0x5ec>
	{
		board[0] = 'O';
80005150:	fc442783          	lw	a5,-60(s0)
80005154:	04f00713          	li	a4,79
80005158:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 40;  sq_centre_y = 40;
8000515c:	02800793          	li	a5,40
80005160:	fef41223          	sh	a5,-28(s0)
80005164:	02800793          	li	a5,40
80005168:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000516c:	fe441583          	lh	a1,-28(s0)
80005170:	fe241603          	lh	a2,-30(s0)
80005174:	fc842783          	lw	a5,-56(s0)
80005178:	01f00713          	li	a4,31
8000517c:	01e00693          	li	a3,30
80005180:	fcc42503          	lw	a0,-52(s0)
80005184:	4f4030ef          	jal	80008678 <TFT_drawCircle>
		return 0;
80005188:	00000793          	li	a5,0
8000518c:	2c00006f          	j	8000544c <singlePlayerAI+0x8a8>
		// may have to return the number that  we want to place the O
		// here
	}
	else if (board[2] == ' ')
80005190:	fc442783          	lw	a5,-60(s0)
80005194:	00278793          	addi	a5,a5,2
80005198:	0007c703          	lbu	a4,0(a5)
8000519c:	02000793          	li	a5,32
800051a0:	04f71463          	bne	a4,a5,800051e8 <singlePlayerAI+0x644>
	{
		board[2] = 'O';
800051a4:	fc442783          	lw	a5,-60(s0)
800051a8:	00278793          	addi	a5,a5,2
800051ac:	04f00713          	li	a4,79
800051b0:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 200;
800051b4:	0c800793          	li	a5,200
800051b8:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 40;
800051bc:	02800793          	li	a5,40
800051c0:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800051c4:	fe441583          	lh	a1,-28(s0)
800051c8:	fe241603          	lh	a2,-30(s0)
800051cc:	fc842783          	lw	a5,-56(s0)
800051d0:	01f00713          	li	a4,31
800051d4:	01e00693          	li	a3,30
800051d8:	fcc42503          	lw	a0,-52(s0)
800051dc:	49c030ef          	jal	80008678 <TFT_drawCircle>
		return 2;
800051e0:	00200793          	li	a5,2
800051e4:	2680006f          	j	8000544c <singlePlayerAI+0x8a8>
	}
	else if (board[6] == ' ')
800051e8:	fc442783          	lw	a5,-60(s0)
800051ec:	00678793          	addi	a5,a5,6
800051f0:	0007c703          	lbu	a4,0(a5)
800051f4:	02000793          	li	a5,32
800051f8:	04f71463          	bne	a4,a5,80005240 <singlePlayerAI+0x69c>
	{
		board[6] = 'O';
800051fc:	fc442783          	lw	a5,-60(s0)
80005200:	00678793          	addi	a5,a5,6
80005204:	04f00713          	li	a4,79
80005208:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 40;
8000520c:	02800793          	li	a5,40
80005210:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 200;
80005214:	0c800793          	li	a5,200
80005218:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000521c:	fe441583          	lh	a1,-28(s0)
80005220:	fe241603          	lh	a2,-30(s0)
80005224:	fc842783          	lw	a5,-56(s0)
80005228:	01f00713          	li	a4,31
8000522c:	01e00693          	li	a3,30
80005230:	fcc42503          	lw	a0,-52(s0)
80005234:	444030ef          	jal	80008678 <TFT_drawCircle>
		return 6;
80005238:	00600793          	li	a5,6
8000523c:	2100006f          	j	8000544c <singlePlayerAI+0x8a8>
	}
	else if (board[8] == ' ')
80005240:	fc442783          	lw	a5,-60(s0)
80005244:	00878793          	addi	a5,a5,8
80005248:	0007c703          	lbu	a4,0(a5)
8000524c:	02000793          	li	a5,32
80005250:	04f71463          	bne	a4,a5,80005298 <singlePlayerAI+0x6f4>
	{
		board[8] = 'O';
80005254:	fc442783          	lw	a5,-60(s0)
80005258:	00878793          	addi	a5,a5,8
8000525c:	04f00713          	li	a4,79
80005260:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 200;
80005264:	0c800793          	li	a5,200
80005268:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 200;
8000526c:	0c800793          	li	a5,200
80005270:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005274:	fe441583          	lh	a1,-28(s0)
80005278:	fe241603          	lh	a2,-30(s0)
8000527c:	fc842783          	lw	a5,-56(s0)
80005280:	01f00713          	li	a4,31
80005284:	01e00693          	li	a3,30
80005288:	fcc42503          	lw	a0,-52(s0)
8000528c:	3ec030ef          	jal	80008678 <TFT_drawCircle>
		return 8;
80005290:	00800793          	li	a5,8
80005294:	1b80006f          	j	8000544c <singlePlayerAI+0x8a8>
	}

	// try to take the centre square
	if (board[4] == ' ')
80005298:	fc442783          	lw	a5,-60(s0)
8000529c:	00478793          	addi	a5,a5,4
800052a0:	0007c703          	lbu	a4,0(a5)
800052a4:	02000793          	li	a5,32
800052a8:	04f71463          	bne	a4,a5,800052f0 <singlePlayerAI+0x74c>
	{
		board[4] = 'O';
800052ac:	fc442783          	lw	a5,-60(s0)
800052b0:	00478793          	addi	a5,a5,4
800052b4:	04f00713          	li	a4,79
800052b8:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 120;
800052bc:	07800793          	li	a5,120
800052c0:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 120;
800052c4:	07800793          	li	a5,120
800052c8:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800052cc:	fe441583          	lh	a1,-28(s0)
800052d0:	fe241603          	lh	a2,-30(s0)
800052d4:	fc842783          	lw	a5,-56(s0)
800052d8:	01f00713          	li	a4,31
800052dc:	01e00693          	li	a3,30
800052e0:	fcc42503          	lw	a0,-52(s0)
800052e4:	394030ef          	jal	80008678 <TFT_drawCircle>
		return 4;
800052e8:	00400793          	li	a5,4
800052ec:	1600006f          	j	8000544c <singlePlayerAI+0x8a8>
	}
	// sides
	if (board[1] == ' ')
800052f0:	fc442783          	lw	a5,-60(s0)
800052f4:	00178793          	addi	a5,a5,1
800052f8:	0007c703          	lbu	a4,0(a5)
800052fc:	02000793          	li	a5,32
80005300:	04f71463          	bne	a4,a5,80005348 <singlePlayerAI+0x7a4>
	{
		board[1] = 'O';
80005304:	fc442783          	lw	a5,-60(s0)
80005308:	00178793          	addi	a5,a5,1
8000530c:	04f00713          	li	a4,79
80005310:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 120;
80005314:	07800793          	li	a5,120
80005318:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 40;
8000531c:	02800793          	li	a5,40
80005320:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005324:	fe441583          	lh	a1,-28(s0)
80005328:	fe241603          	lh	a2,-30(s0)
8000532c:	fc842783          	lw	a5,-56(s0)
80005330:	01f00713          	li	a4,31
80005334:	01e00693          	li	a3,30
80005338:	fcc42503          	lw	a0,-52(s0)
8000533c:	33c030ef          	jal	80008678 <TFT_drawCircle>
		return 1;
80005340:	00100793          	li	a5,1
80005344:	1080006f          	j	8000544c <singlePlayerAI+0x8a8>
	}
	else if (board[3] == ' ')
80005348:	fc442783          	lw	a5,-60(s0)
8000534c:	00378793          	addi	a5,a5,3
80005350:	0007c703          	lbu	a4,0(a5)
80005354:	02000793          	li	a5,32
80005358:	04f71463          	bne	a4,a5,800053a0 <singlePlayerAI+0x7fc>
	{
		board[3] = 'O';
8000535c:	fc442783          	lw	a5,-60(s0)
80005360:	00378793          	addi	a5,a5,3
80005364:	04f00713          	li	a4,79
80005368:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 40;
8000536c:	02800793          	li	a5,40
80005370:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 120;
80005374:	07800793          	li	a5,120
80005378:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000537c:	fe441583          	lh	a1,-28(s0)
80005380:	fe241603          	lh	a2,-30(s0)
80005384:	fc842783          	lw	a5,-56(s0)
80005388:	01f00713          	li	a4,31
8000538c:	01e00693          	li	a3,30
80005390:	fcc42503          	lw	a0,-52(s0)
80005394:	2e4030ef          	jal	80008678 <TFT_drawCircle>
		return 3;
80005398:	00300793          	li	a5,3
8000539c:	0b00006f          	j	8000544c <singlePlayerAI+0x8a8>
	}
	else if (board[5] == ' ')
800053a0:	fc442783          	lw	a5,-60(s0)
800053a4:	00578793          	addi	a5,a5,5
800053a8:	0007c703          	lbu	a4,0(a5)
800053ac:	02000793          	li	a5,32
800053b0:	04f71463          	bne	a4,a5,800053f8 <singlePlayerAI+0x854>
	{
		board[5] = 'O';
800053b4:	fc442783          	lw	a5,-60(s0)
800053b8:	00578793          	addi	a5,a5,5
800053bc:	04f00713          	li	a4,79
800053c0:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 200;
800053c4:	0c800793          	li	a5,200
800053c8:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 120;
800053cc:	07800793          	li	a5,120
800053d0:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800053d4:	fe441583          	lh	a1,-28(s0)
800053d8:	fe241603          	lh	a2,-30(s0)
800053dc:	fc842783          	lw	a5,-56(s0)
800053e0:	01f00713          	li	a4,31
800053e4:	01e00693          	li	a3,30
800053e8:	fcc42503          	lw	a0,-52(s0)
800053ec:	28c030ef          	jal	80008678 <TFT_drawCircle>
		return 5;
800053f0:	00500793          	li	a5,5
800053f4:	0580006f          	j	8000544c <singlePlayerAI+0x8a8>
	}
	else if (board[7] == ' ')
800053f8:	fc442783          	lw	a5,-60(s0)
800053fc:	00778793          	addi	a5,a5,7
80005400:	0007c703          	lbu	a4,0(a5)
80005404:	02000793          	li	a5,32
80005408:	04f71063          	bne	a4,a5,80005448 <singlePlayerAI+0x8a4>
	{
		board[7] = 'O';
8000540c:	fc442783          	lw	a5,-60(s0)
80005410:	00778793          	addi	a5,a5,7
80005414:	04f00713          	li	a4,79
80005418:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 120;
8000541c:	07800793          	li	a5,120
80005420:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 200;
80005424:	0c800793          	li	a5,200
80005428:	fef41123          	sh	a5,-30(s0)
        TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000542c:	fe441583          	lh	a1,-28(s0)
80005430:	fe241603          	lh	a2,-30(s0)
80005434:	fc842783          	lw	a5,-56(s0)
80005438:	01f00713          	li	a4,31
8000543c:	01e00693          	li	a3,30
80005440:	fcc42503          	lw	a0,-52(s0)
80005444:	234030ef          	jal	80008678 <TFT_drawCircle>

	}
return -1;
80005448:	0ff00793          	li	a5,255

}
8000544c:	00078513          	mv	a0,a5
80005450:	03c12083          	lw	ra,60(sp)
80005454:	03812403          	lw	s0,56(sp)
80005458:	04010113          	addi	sp,sp,64
8000545c:	00008067          	ret

80005460 <twoPlayerMode>:
twoPlayerMode
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
80005460:	fa010113          	addi	sp,sp,-96
80005464:	04112e23          	sw	ra,92(sp)
80005468:	04812c23          	sw	s0,88(sp)
8000546c:	06010413          	addi	s0,sp,96
80005470:	faa42623          	sw	a0,-84(s0)
80005474:	fab42423          	sw	a1,-88(s0)
	uint16_t x,y;
	uint8_t z;
	uint16_t  x_pos0, y_pos0,x_pos1, y_pos1, sq_centre_x,sq_centre_y ;
	uint16_t  x_pos2, y_pos2,x_pos3, y_pos3;//, x_count, o_count;
	uint8_t player = 1;
80005478:	00100793          	li	a5,1
8000547c:	fcf40fa3          	sb	a5,-33(s0)
	uint8_t winner = 0;
80005480:	fe0407a3          	sb	zero,-17(s0)
	uint8_t pos0 = 0;
80005484:	fe040723          	sb	zero,-18(s0)
	uint8_t pos1 = 0;
80005488:	fe0406a3          	sb	zero,-19(s0)
	uint8_t pos2 = 0;
8000548c:	fe040623          	sb	zero,-20(s0)
	uint8_t pos3 = 0;
80005490:	fe0405a3          	sb	zero,-21(s0)
	uint8_t pos4 = 0;
80005494:	fe040523          	sb	zero,-22(s0)
	uint8_t pos5 = 0;
80005498:	fe0404a3          	sb	zero,-23(s0)
	uint8_t pos6 = 0;
8000549c:	fe040423          	sb	zero,-24(s0)
	uint8_t pos7 = 0;
800054a0:	fe0403a3          	sb	zero,-25(s0)
	uint8_t pos8 = 0;
800054a4:	fe040323          	sb	zero,-26(s0)
	//uint8_t pos9 = 0;
	uint32_t counter = 0;
800054a8:	fe042023          	sw	zero,-32(s0)
	char board[9] = {'1','2','3','4','5','6','7','8','9' };
800054ac:	03100793          	li	a5,49
800054b0:	faf40e23          	sb	a5,-68(s0)
800054b4:	03200793          	li	a5,50
800054b8:	faf40ea3          	sb	a5,-67(s0)
800054bc:	03300793          	li	a5,51
800054c0:	faf40f23          	sb	a5,-66(s0)
800054c4:	03400793          	li	a5,52
800054c8:	faf40fa3          	sb	a5,-65(s0)
800054cc:	03500793          	li	a5,53
800054d0:	fcf40023          	sb	a5,-64(s0)
800054d4:	03600793          	li	a5,54
800054d8:	fcf400a3          	sb	a5,-63(s0)
800054dc:	03700793          	li	a5,55
800054e0:	fcf40123          	sb	a5,-62(s0)
800054e4:	03800793          	li	a5,56
800054e8:	fcf401a3          	sb	a5,-61(s0)
800054ec:	03900793          	li	a5,57
800054f0:	fcf40223          	sb	a5,-60(s0)

	draw_board(this_spi,this_gpio);
800054f4:	fa842583          	lw	a1,-88(s0)
800054f8:	fac42503          	lw	a0,-84(s0)
800054fc:	b99fe0ef          	jal	80004094 <draw_board>
	while( counter < 9 && winner == 0)
80005500:	5e50006f          	j	800062e4 <twoPlayerMode+0xe84>
	{
		if ( ((TS_readRegister8(this_spi, this_gpio,STMPE_TSC_CTRL) ) & 0x80))
80005504:	04000613          	li	a2,64
80005508:	fa842583          	lw	a1,-88(s0)
8000550c:	fac42503          	lw	a0,-84(s0)
80005510:	6d5010ef          	jal	800073e4 <TS_readRegister8>
80005514:	00050793          	mv	a5,a0
80005518:	01879793          	slli	a5,a5,0x18
8000551c:	4187d793          	srai	a5,a5,0x18
80005520:	5c07d2e3          	bgez	a5,800062e4 <twoPlayerMode+0xe84>
		{
			player = counter%2+1;
80005524:	fe042783          	lw	a5,-32(s0)
80005528:	0ff7f793          	andi	a5,a5,255
8000552c:	0017f793          	andi	a5,a5,1
80005530:	0ff7f793          	andi	a5,a5,255
80005534:	00178793          	addi	a5,a5,1
80005538:	fcf40fa3          	sb	a5,-33(s0)
			TS_readData( this_spi, this_gpio, &x, &y, &z);
8000553c:	fc540713          	addi	a4,s0,-59
80005540:	fc640693          	addi	a3,s0,-58
80005544:	fc840793          	addi	a5,s0,-56
80005548:	00078613          	mv	a2,a5
8000554c:	fa842583          	lw	a1,-88(s0)
80005550:	fac42503          	lw	a0,-84(s0)
80005554:	038020ef          	jal	8000758c <TS_readData>
			x = map( x, TS_MINX, TS_MAXX, 0, TFT_WIDTH);
80005558:	fc845503          	lhu	a0,-56(s0)
8000555c:	0f000713          	li	a4,240
80005560:	00000693          	li	a3,0
80005564:	000017b7          	lui	a5,0x1
80005568:	ed878613          	addi	a2,a5,-296 # ed8 <_start-0x7ffff128>
8000556c:	09600593          	li	a1,150
80005570:	5bd000ef          	jal	8000632c <map>
80005574:	00050793          	mv	a5,a0
80005578:	01079793          	slli	a5,a5,0x10
8000557c:	0107d793          	srli	a5,a5,0x10
80005580:	fcf41423          	sh	a5,-56(s0)
			y = map( y, TS_MINY, TS_MAXY, 0, TFT_HEIGHT);
80005584:	fc645503          	lhu	a0,-58(s0)
80005588:	14000713          	li	a4,320
8000558c:	00000693          	li	a3,0
80005590:	000017b7          	lui	a5,0x1
80005594:	fa078613          	addi	a2,a5,-96 # fa0 <_start-0x7ffff060>
80005598:	08200593          	li	a1,130
8000559c:	591000ef          	jal	8000632c <map>
800055a0:	00050793          	mv	a5,a0
800055a4:	01079793          	slli	a5,a5,0x10
800055a8:	0107d793          	srli	a5,a5,0x10
800055ac:	fcf41323          	sh	a5,-58(s0)

			if ((x < 80 && y < 80) && pos0==0)// 0
800055b0:	fc845703          	lhu	a4,-56(s0)
800055b4:	04f00793          	li	a5,79
800055b8:	16e7e063          	bltu	a5,a4,80005718 <twoPlayerMode+0x2b8>
800055bc:	fc645703          	lhu	a4,-58(s0)
800055c0:	04f00793          	li	a5,79
800055c4:	14e7ea63          	bltu	a5,a4,80005718 <twoPlayerMode+0x2b8>
800055c8:	fee44783          	lbu	a5,-18(s0)
800055cc:	14079663          	bnez	a5,80005718 <twoPlayerMode+0x2b8>
			{
				x_pos0 = 20;  y_pos0=20;
800055d0:	01400793          	li	a5,20
800055d4:	fcf41e23          	sh	a5,-36(s0)
800055d8:	01400793          	li	a5,20
800055dc:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =60 ;  y_pos1 =60;
800055e0:	03c00793          	li	a5,60
800055e4:	fcf41c23          	sh	a5,-40(s0)
800055e8:	03c00793          	li	a5,60
800055ec:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 60;  y_pos2=20;
800055f0:	03c00793          	li	a5,60
800055f4:	fcf41a23          	sh	a5,-44(s0)
800055f8:	01400793          	li	a5,20
800055fc:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =20 ;  y_pos3 =60;
80005600:	01400793          	li	a5,20
80005604:	fcf41823          	sh	a5,-48(s0)
80005608:	03c00793          	li	a5,60
8000560c:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 40;  sq_centre_y = 40;
80005610:	02800793          	li	a5,40
80005614:	fcf41623          	sh	a5,-52(s0)
80005618:	02800793          	li	a5,40
8000561c:	fcf41523          	sh	a5,-54(s0)
				if (player == 1) // player X
80005620:	fdf44703          	lbu	a4,-33(s0)
80005624:	00100793          	li	a5,1
80005628:	08f71863          	bne	a4,a5,800056b8 <twoPlayerMode+0x258>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
8000562c:	fdc41583          	lh	a1,-36(s0)
80005630:	fda41603          	lh	a2,-38(s0)
80005634:	fd841683          	lh	a3,-40(s0)
80005638:	fd641703          	lh	a4,-42(s0)
8000563c:	fa842803          	lw	a6,-88(s0)
80005640:	000107b7          	lui	a5,0x10
80005644:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005648:	fac42503          	lw	a0,-84(s0)
8000564c:	488030ef          	jal	80008ad4 <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005650:	fd441583          	lh	a1,-44(s0)
80005654:	fd241603          	lh	a2,-46(s0)
80005658:	fd041683          	lh	a3,-48(s0)
8000565c:	fce41703          	lh	a4,-50(s0)
80005660:	fa842803          	lw	a6,-88(s0)
80005664:	000107b7          	lui	a5,0x10
80005668:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
8000566c:	fac42503          	lw	a0,-84(s0)
80005670:	464030ef          	jal	80008ad4 <TFT_drawLine>
					counter ++;
80005674:	fe042783          	lw	a5,-32(s0)
80005678:	00178793          	addi	a5,a5,1
8000567c:	fef42023          	sw	a5,-32(s0)
					pos0 = 1;
80005680:	00100793          	li	a5,1
80005684:	fef40723          	sb	a5,-18(s0)
					board[0] = 'X';
80005688:	05800793          	li	a5,88
8000568c:	faf40e23          	sb	a5,-68(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
80005690:	fdf44703          	lbu	a4,-33(s0)
80005694:	fbc40793          	addi	a5,s0,-68
80005698:	fa842683          	lw	a3,-88(s0)
8000569c:	00070613          	mv	a2,a4
800056a0:	00078593          	mv	a1,a5
800056a4:	fac42503          	lw	a0,-84(s0)
800056a8:	575000ef          	jal	8000641c <check_winner>
800056ac:	00050793          	mv	a5,a0
800056b0:	fef407a3          	sb	a5,-17(s0)
800056b4:	4310006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
				else // player O
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800056b8:	fcc41583          	lh	a1,-52(s0)
800056bc:	fca41603          	lh	a2,-54(s0)
800056c0:	fa842783          	lw	a5,-88(s0)
800056c4:	01f00713          	li	a4,31
800056c8:	01e00693          	li	a3,30
800056cc:	fac42503          	lw	a0,-84(s0)
800056d0:	7a9020ef          	jal	80008678 <TFT_drawCircle>
					counter ++;
800056d4:	fe042783          	lw	a5,-32(s0)
800056d8:	00178793          	addi	a5,a5,1
800056dc:	fef42023          	sw	a5,-32(s0)
					pos0 = 1;
800056e0:	00100793          	li	a5,1
800056e4:	fef40723          	sb	a5,-18(s0)
					board[0] = 'O';
800056e8:	04f00793          	li	a5,79
800056ec:	faf40e23          	sb	a5,-68(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
800056f0:	fdf44703          	lbu	a4,-33(s0)
800056f4:	fbc40793          	addi	a5,s0,-68
800056f8:	fa842683          	lw	a3,-88(s0)
800056fc:	00070613          	mv	a2,a4
80005700:	00078593          	mv	a1,a5
80005704:	fac42503          	lw	a0,-84(s0)
80005708:	515000ef          	jal	8000641c <check_winner>
8000570c:	00050793          	mv	a5,a0
80005710:	fef407a3          	sb	a5,-17(s0)
				if (player == 1) // player X
80005714:	3d10006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
			}
			else if(((x < 160 && x >80)&& y<80) && pos1==0)// 1
80005718:	fc845703          	lhu	a4,-56(s0)
8000571c:	09f00793          	li	a5,159
80005720:	16e7e663          	bltu	a5,a4,8000588c <twoPlayerMode+0x42c>
80005724:	fc845703          	lhu	a4,-56(s0)
80005728:	05000793          	li	a5,80
8000572c:	16e7f063          	bleu	a4,a5,8000588c <twoPlayerMode+0x42c>
80005730:	fc645703          	lhu	a4,-58(s0)
80005734:	04f00793          	li	a5,79
80005738:	14e7ea63          	bltu	a5,a4,8000588c <twoPlayerMode+0x42c>
8000573c:	fed44783          	lbu	a5,-19(s0)
80005740:	14079663          	bnez	a5,8000588c <twoPlayerMode+0x42c>
			{
				x_pos0 = 100;
80005744:	06400793          	li	a5,100
80005748:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=20;
8000574c:	01400793          	li	a5,20
80005750:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =140 ;
80005754:	08c00793          	li	a5,140
80005758:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =60;
8000575c:	03c00793          	li	a5,60
80005760:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 140;
80005764:	08c00793          	li	a5,140
80005768:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=20;
8000576c:	01400793          	li	a5,20
80005770:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =100 ;
80005774:	06400793          	li	a5,100
80005778:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =60;
8000577c:	03c00793          	li	a5,60
80005780:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 120;
80005784:	07800793          	li	a5,120
80005788:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 40;
8000578c:	02800793          	li	a5,40
80005790:	fcf41523          	sh	a5,-54(s0)
				if (player == 1) // player X
80005794:	fdf44703          	lbu	a4,-33(s0)
80005798:	00100793          	li	a5,1
8000579c:	08f71863          	bne	a4,a5,8000582c <twoPlayerMode+0x3cc>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
800057a0:	fdc41583          	lh	a1,-36(s0)
800057a4:	fda41603          	lh	a2,-38(s0)
800057a8:	fd841683          	lh	a3,-40(s0)
800057ac:	fd641703          	lh	a4,-42(s0)
800057b0:	fa842803          	lw	a6,-88(s0)
800057b4:	000107b7          	lui	a5,0x10
800057b8:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800057bc:	fac42503          	lw	a0,-84(s0)
800057c0:	314030ef          	jal	80008ad4 <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
800057c4:	fd441583          	lh	a1,-44(s0)
800057c8:	fd241603          	lh	a2,-46(s0)
800057cc:	fd041683          	lh	a3,-48(s0)
800057d0:	fce41703          	lh	a4,-50(s0)
800057d4:	fa842803          	lw	a6,-88(s0)
800057d8:	000107b7          	lui	a5,0x10
800057dc:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800057e0:	fac42503          	lw	a0,-84(s0)
800057e4:	2f0030ef          	jal	80008ad4 <TFT_drawLine>
					counter ++;
800057e8:	fe042783          	lw	a5,-32(s0)
800057ec:	00178793          	addi	a5,a5,1
800057f0:	fef42023          	sw	a5,-32(s0)
					pos1 = 1;
800057f4:	00100793          	li	a5,1
800057f8:	fef406a3          	sb	a5,-19(s0)
					board[1] = 'X';
800057fc:	05800793          	li	a5,88
80005800:	faf40ea3          	sb	a5,-67(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005804:	fdf44703          	lbu	a4,-33(s0)
80005808:	fbc40793          	addi	a5,s0,-68
8000580c:	fa842683          	lw	a3,-88(s0)
80005810:	00070613          	mv	a2,a4
80005814:	00078593          	mv	a1,a5
80005818:	fac42503          	lw	a0,-84(s0)
8000581c:	401000ef          	jal	8000641c <check_winner>
80005820:	00050793          	mv	a5,a0
80005824:	fef407a3          	sb	a5,-17(s0)
80005828:	2bd0006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000582c:	fcc41583          	lh	a1,-52(s0)
80005830:	fca41603          	lh	a2,-54(s0)
80005834:	fa842783          	lw	a5,-88(s0)
80005838:	01f00713          	li	a4,31
8000583c:	01e00693          	li	a3,30
80005840:	fac42503          	lw	a0,-84(s0)
80005844:	635020ef          	jal	80008678 <TFT_drawCircle>
					counter ++;
80005848:	fe042783          	lw	a5,-32(s0)
8000584c:	00178793          	addi	a5,a5,1
80005850:	fef42023          	sw	a5,-32(s0)
					pos1 = 1;
80005854:	00100793          	li	a5,1
80005858:	fef406a3          	sb	a5,-19(s0)
					board[1] = 'O';
8000585c:	04f00793          	li	a5,79
80005860:	faf40ea3          	sb	a5,-67(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
80005864:	fdf44703          	lbu	a4,-33(s0)
80005868:	fbc40793          	addi	a5,s0,-68
8000586c:	fa842683          	lw	a3,-88(s0)
80005870:	00070613          	mv	a2,a4
80005874:	00078593          	mv	a1,a5
80005878:	fac42503          	lw	a0,-84(s0)
8000587c:	3a1000ef          	jal	8000641c <check_winner>
80005880:	00050793          	mv	a5,a0
80005884:	fef407a3          	sb	a5,-17(s0)
				if (player == 1) // player X
80005888:	25d0006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
			}
			else if(((x < 240 && x >160)&& y<80) && pos2==0)// 2
8000588c:	fc845703          	lhu	a4,-56(s0)
80005890:	0ef00793          	li	a5,239
80005894:	16e7e663          	bltu	a5,a4,80005a00 <twoPlayerMode+0x5a0>
80005898:	fc845703          	lhu	a4,-56(s0)
8000589c:	0a000793          	li	a5,160
800058a0:	16e7f063          	bleu	a4,a5,80005a00 <twoPlayerMode+0x5a0>
800058a4:	fc645703          	lhu	a4,-58(s0)
800058a8:	04f00793          	li	a5,79
800058ac:	14e7ea63          	bltu	a5,a4,80005a00 <twoPlayerMode+0x5a0>
800058b0:	fec44783          	lbu	a5,-20(s0)
800058b4:	14079663          	bnez	a5,80005a00 <twoPlayerMode+0x5a0>
			{
				x_pos0 = 180;
800058b8:	0b400793          	li	a5,180
800058bc:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=20;
800058c0:	01400793          	li	a5,20
800058c4:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =220 ;
800058c8:	0dc00793          	li	a5,220
800058cc:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =60;
800058d0:	03c00793          	li	a5,60
800058d4:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 220;
800058d8:	0dc00793          	li	a5,220
800058dc:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=20;
800058e0:	01400793          	li	a5,20
800058e4:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =180 ;
800058e8:	0b400793          	li	a5,180
800058ec:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =60;
800058f0:	03c00793          	li	a5,60
800058f4:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 200;
800058f8:	0c800793          	li	a5,200
800058fc:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 40;
80005900:	02800793          	li	a5,40
80005904:	fcf41523          	sh	a5,-54(s0)
				if(player == 1)
80005908:	fdf44703          	lbu	a4,-33(s0)
8000590c:	00100793          	li	a5,1
80005910:	08f71863          	bne	a4,a5,800059a0 <twoPlayerMode+0x540>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80005914:	fdc41583          	lh	a1,-36(s0)
80005918:	fda41603          	lh	a2,-38(s0)
8000591c:	fd841683          	lh	a3,-40(s0)
80005920:	fd641703          	lh	a4,-42(s0)
80005924:	fa842803          	lw	a6,-88(s0)
80005928:	000107b7          	lui	a5,0x10
8000592c:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005930:	fac42503          	lw	a0,-84(s0)
80005934:	1a0030ef          	jal	80008ad4 <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005938:	fd441583          	lh	a1,-44(s0)
8000593c:	fd241603          	lh	a2,-46(s0)
80005940:	fd041683          	lh	a3,-48(s0)
80005944:	fce41703          	lh	a4,-50(s0)
80005948:	fa842803          	lw	a6,-88(s0)
8000594c:	000107b7          	lui	a5,0x10
80005950:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005954:	fac42503          	lw	a0,-84(s0)
80005958:	17c030ef          	jal	80008ad4 <TFT_drawLine>
					counter ++;
8000595c:	fe042783          	lw	a5,-32(s0)
80005960:	00178793          	addi	a5,a5,1
80005964:	fef42023          	sw	a5,-32(s0)
					pos2 = 1;
80005968:	00100793          	li	a5,1
8000596c:	fef40623          	sb	a5,-20(s0)
					board[2] = 'X';
80005970:	05800793          	li	a5,88
80005974:	faf40f23          	sb	a5,-66(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005978:	fdf44703          	lbu	a4,-33(s0)
8000597c:	fbc40793          	addi	a5,s0,-68
80005980:	fa842683          	lw	a3,-88(s0)
80005984:	00070613          	mv	a2,a4
80005988:	00078593          	mv	a1,a5
8000598c:	fac42503          	lw	a0,-84(s0)
80005990:	28d000ef          	jal	8000641c <check_winner>
80005994:	00050793          	mv	a5,a0
80005998:	fef407a3          	sb	a5,-17(s0)
8000599c:	1490006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800059a0:	fcc41583          	lh	a1,-52(s0)
800059a4:	fca41603          	lh	a2,-54(s0)
800059a8:	fa842783          	lw	a5,-88(s0)
800059ac:	01f00713          	li	a4,31
800059b0:	01e00693          	li	a3,30
800059b4:	fac42503          	lw	a0,-84(s0)
800059b8:	4c1020ef          	jal	80008678 <TFT_drawCircle>
					counter ++;
800059bc:	fe042783          	lw	a5,-32(s0)
800059c0:	00178793          	addi	a5,a5,1
800059c4:	fef42023          	sw	a5,-32(s0)
					pos2 = 1;
800059c8:	00100793          	li	a5,1
800059cc:	fef40623          	sb	a5,-20(s0)
					board[2] = 'O';
800059d0:	04f00793          	li	a5,79
800059d4:	faf40f23          	sb	a5,-66(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
800059d8:	fdf44703          	lbu	a4,-33(s0)
800059dc:	fbc40793          	addi	a5,s0,-68
800059e0:	fa842683          	lw	a3,-88(s0)
800059e4:	00070613          	mv	a2,a4
800059e8:	00078593          	mv	a1,a5
800059ec:	fac42503          	lw	a0,-84(s0)
800059f0:	22d000ef          	jal	8000641c <check_winner>
800059f4:	00050793          	mv	a5,a0
800059f8:	fef407a3          	sb	a5,-17(s0)
				if(player == 1)
800059fc:	0e90006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
			}
			else if(x < 80 && (y>80 && y <160) && pos3==0)// 3
80005a00:	fc845703          	lhu	a4,-56(s0)
80005a04:	04f00793          	li	a5,79
80005a08:	16e7e663          	bltu	a5,a4,80005b74 <twoPlayerMode+0x714>
80005a0c:	fc645703          	lhu	a4,-58(s0)
80005a10:	05000793          	li	a5,80
80005a14:	16e7f063          	bleu	a4,a5,80005b74 <twoPlayerMode+0x714>
80005a18:	fc645703          	lhu	a4,-58(s0)
80005a1c:	09f00793          	li	a5,159
80005a20:	14e7ea63          	bltu	a5,a4,80005b74 <twoPlayerMode+0x714>
80005a24:	feb44783          	lbu	a5,-21(s0)
80005a28:	14079663          	bnez	a5,80005b74 <twoPlayerMode+0x714>
			{
				x_pos0 = 20;
80005a2c:	01400793          	li	a5,20
80005a30:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=100;
80005a34:	06400793          	li	a5,100
80005a38:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =60 ;
80005a3c:	03c00793          	li	a5,60
80005a40:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =140;
80005a44:	08c00793          	li	a5,140
80005a48:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 60;
80005a4c:	03c00793          	li	a5,60
80005a50:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=100;
80005a54:	06400793          	li	a5,100
80005a58:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =20 ;
80005a5c:	01400793          	li	a5,20
80005a60:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =140;
80005a64:	08c00793          	li	a5,140
80005a68:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 40;
80005a6c:	02800793          	li	a5,40
80005a70:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 120;
80005a74:	07800793          	li	a5,120
80005a78:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80005a7c:	fdf44703          	lbu	a4,-33(s0)
80005a80:	00100793          	li	a5,1
80005a84:	08f71863          	bne	a4,a5,80005b14 <twoPlayerMode+0x6b4>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80005a88:	fdc41583          	lh	a1,-36(s0)
80005a8c:	fda41603          	lh	a2,-38(s0)
80005a90:	fd841683          	lh	a3,-40(s0)
80005a94:	fd641703          	lh	a4,-42(s0)
80005a98:	fa842803          	lw	a6,-88(s0)
80005a9c:	000107b7          	lui	a5,0x10
80005aa0:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005aa4:	fac42503          	lw	a0,-84(s0)
80005aa8:	02c030ef          	jal	80008ad4 <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005aac:	fd441583          	lh	a1,-44(s0)
80005ab0:	fd241603          	lh	a2,-46(s0)
80005ab4:	fd041683          	lh	a3,-48(s0)
80005ab8:	fce41703          	lh	a4,-50(s0)
80005abc:	fa842803          	lw	a6,-88(s0)
80005ac0:	000107b7          	lui	a5,0x10
80005ac4:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005ac8:	fac42503          	lw	a0,-84(s0)
80005acc:	008030ef          	jal	80008ad4 <TFT_drawLine>
					counter ++;
80005ad0:	fe042783          	lw	a5,-32(s0)
80005ad4:	00178793          	addi	a5,a5,1
80005ad8:	fef42023          	sw	a5,-32(s0)
					pos3 = 1;
80005adc:	00100793          	li	a5,1
80005ae0:	fef405a3          	sb	a5,-21(s0)
					board[3] = 'X';
80005ae4:	05800793          	li	a5,88
80005ae8:	faf40fa3          	sb	a5,-65(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
80005aec:	fdf44703          	lbu	a4,-33(s0)
80005af0:	fbc40793          	addi	a5,s0,-68
80005af4:	fa842683          	lw	a3,-88(s0)
80005af8:	00070613          	mv	a2,a4
80005afc:	00078593          	mv	a1,a5
80005b00:	fac42503          	lw	a0,-84(s0)
80005b04:	119000ef          	jal	8000641c <check_winner>
80005b08:	00050793          	mv	a5,a0
80005b0c:	fef407a3          	sb	a5,-17(s0)
80005b10:	7d40006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005b14:	fcc41583          	lh	a1,-52(s0)
80005b18:	fca41603          	lh	a2,-54(s0)
80005b1c:	fa842783          	lw	a5,-88(s0)
80005b20:	01f00713          	li	a4,31
80005b24:	01e00693          	li	a3,30
80005b28:	fac42503          	lw	a0,-84(s0)
80005b2c:	34d020ef          	jal	80008678 <TFT_drawCircle>
					counter ++;
80005b30:	fe042783          	lw	a5,-32(s0)
80005b34:	00178793          	addi	a5,a5,1
80005b38:	fef42023          	sw	a5,-32(s0)
					pos3 = 1;
80005b3c:	00100793          	li	a5,1
80005b40:	fef405a3          	sb	a5,-21(s0)
					board[3] = 'O';
80005b44:	04f00793          	li	a5,79
80005b48:	faf40fa3          	sb	a5,-65(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
80005b4c:	fdf44703          	lbu	a4,-33(s0)
80005b50:	fbc40793          	addi	a5,s0,-68
80005b54:	fa842683          	lw	a3,-88(s0)
80005b58:	00070613          	mv	a2,a4
80005b5c:	00078593          	mv	a1,a5
80005b60:	fac42503          	lw	a0,-84(s0)
80005b64:	0b9000ef          	jal	8000641c <check_winner>
80005b68:	00050793          	mv	a5,a0
80005b6c:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
80005b70:	7740006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
			}
			else if((x < 160 && x >80)&& (y < 160 && y >80) && pos4==0)// 4
80005b74:	fc845703          	lhu	a4,-56(s0)
80005b78:	09f00793          	li	a5,159
80005b7c:	16e7ec63          	bltu	a5,a4,80005cf4 <twoPlayerMode+0x894>
80005b80:	fc845703          	lhu	a4,-56(s0)
80005b84:	05000793          	li	a5,80
80005b88:	16e7f663          	bleu	a4,a5,80005cf4 <twoPlayerMode+0x894>
80005b8c:	fc645703          	lhu	a4,-58(s0)
80005b90:	09f00793          	li	a5,159
80005b94:	16e7e063          	bltu	a5,a4,80005cf4 <twoPlayerMode+0x894>
80005b98:	fc645703          	lhu	a4,-58(s0)
80005b9c:	05000793          	li	a5,80
80005ba0:	14e7fa63          	bleu	a4,a5,80005cf4 <twoPlayerMode+0x894>
80005ba4:	fea44783          	lbu	a5,-22(s0)
80005ba8:	14079663          	bnez	a5,80005cf4 <twoPlayerMode+0x894>
			{
				x_pos0 = 100;
80005bac:	06400793          	li	a5,100
80005bb0:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=100;
80005bb4:	06400793          	li	a5,100
80005bb8:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =140 ;
80005bbc:	08c00793          	li	a5,140
80005bc0:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =140;
80005bc4:	08c00793          	li	a5,140
80005bc8:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 140;
80005bcc:	08c00793          	li	a5,140
80005bd0:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=100;
80005bd4:	06400793          	li	a5,100
80005bd8:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =100 ;
80005bdc:	06400793          	li	a5,100
80005be0:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =140;
80005be4:	08c00793          	li	a5,140
80005be8:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 120;
80005bec:	07800793          	li	a5,120
80005bf0:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 120;
80005bf4:	07800793          	li	a5,120
80005bf8:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80005bfc:	fdf44703          	lbu	a4,-33(s0)
80005c00:	00100793          	li	a5,1
80005c04:	08f71863          	bne	a4,a5,80005c94 <twoPlayerMode+0x834>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80005c08:	fdc41583          	lh	a1,-36(s0)
80005c0c:	fda41603          	lh	a2,-38(s0)
80005c10:	fd841683          	lh	a3,-40(s0)
80005c14:	fd641703          	lh	a4,-42(s0)
80005c18:	fa842803          	lw	a6,-88(s0)
80005c1c:	000107b7          	lui	a5,0x10
80005c20:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005c24:	fac42503          	lw	a0,-84(s0)
80005c28:	6ad020ef          	jal	80008ad4 <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005c2c:	fd441583          	lh	a1,-44(s0)
80005c30:	fd241603          	lh	a2,-46(s0)
80005c34:	fd041683          	lh	a3,-48(s0)
80005c38:	fce41703          	lh	a4,-50(s0)
80005c3c:	fa842803          	lw	a6,-88(s0)
80005c40:	000107b7          	lui	a5,0x10
80005c44:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005c48:	fac42503          	lw	a0,-84(s0)
80005c4c:	689020ef          	jal	80008ad4 <TFT_drawLine>
					counter ++;
80005c50:	fe042783          	lw	a5,-32(s0)
80005c54:	00178793          	addi	a5,a5,1
80005c58:	fef42023          	sw	a5,-32(s0)
					pos4 = 1;
80005c5c:	00100793          	li	a5,1
80005c60:	fef40523          	sb	a5,-22(s0)
					board[4] = 'X';
80005c64:	05800793          	li	a5,88
80005c68:	fcf40023          	sb	a5,-64(s0)
					winner =   check_winner(this_spi,board,player,this_gpio);
80005c6c:	fdf44703          	lbu	a4,-33(s0)
80005c70:	fbc40793          	addi	a5,s0,-68
80005c74:	fa842683          	lw	a3,-88(s0)
80005c78:	00070613          	mv	a2,a4
80005c7c:	00078593          	mv	a1,a5
80005c80:	fac42503          	lw	a0,-84(s0)
80005c84:	798000ef          	jal	8000641c <check_winner>
80005c88:	00050793          	mv	a5,a0
80005c8c:	fef407a3          	sb	a5,-17(s0)
80005c90:	6540006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005c94:	fcc41583          	lh	a1,-52(s0)
80005c98:	fca41603          	lh	a2,-54(s0)
80005c9c:	fa842783          	lw	a5,-88(s0)
80005ca0:	01f00713          	li	a4,31
80005ca4:	01e00693          	li	a3,30
80005ca8:	fac42503          	lw	a0,-84(s0)
80005cac:	1cd020ef          	jal	80008678 <TFT_drawCircle>
					counter ++;
80005cb0:	fe042783          	lw	a5,-32(s0)
80005cb4:	00178793          	addi	a5,a5,1
80005cb8:	fef42023          	sw	a5,-32(s0)
					pos4 = 1;
80005cbc:	00100793          	li	a5,1
80005cc0:	fef40523          	sb	a5,-22(s0)
					board[4] = 'O';
80005cc4:	04f00793          	li	a5,79
80005cc8:	fcf40023          	sb	a5,-64(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005ccc:	fdf44703          	lbu	a4,-33(s0)
80005cd0:	fbc40793          	addi	a5,s0,-68
80005cd4:	fa842683          	lw	a3,-88(s0)
80005cd8:	00070613          	mv	a2,a4
80005cdc:	00078593          	mv	a1,a5
80005ce0:	fac42503          	lw	a0,-84(s0)
80005ce4:	738000ef          	jal	8000641c <check_winner>
80005ce8:	00050793          	mv	a5,a0
80005cec:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
80005cf0:	5f40006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
			}
			else if((x < 240 && x >160)&& (y>80 && y<160 ) && pos5==0)// 5
80005cf4:	fc845703          	lhu	a4,-56(s0)
80005cf8:	0ef00793          	li	a5,239
80005cfc:	16e7ec63          	bltu	a5,a4,80005e74 <twoPlayerMode+0xa14>
80005d00:	fc845703          	lhu	a4,-56(s0)
80005d04:	0a000793          	li	a5,160
80005d08:	16e7f663          	bleu	a4,a5,80005e74 <twoPlayerMode+0xa14>
80005d0c:	fc645703          	lhu	a4,-58(s0)
80005d10:	05000793          	li	a5,80
80005d14:	16e7f063          	bleu	a4,a5,80005e74 <twoPlayerMode+0xa14>
80005d18:	fc645703          	lhu	a4,-58(s0)
80005d1c:	09f00793          	li	a5,159
80005d20:	14e7ea63          	bltu	a5,a4,80005e74 <twoPlayerMode+0xa14>
80005d24:	fe944783          	lbu	a5,-23(s0)
80005d28:	14079663          	bnez	a5,80005e74 <twoPlayerMode+0xa14>
			{
				x_pos0 = 180;
80005d2c:	0b400793          	li	a5,180
80005d30:	fcf41e23          	sh	a5,-36(s0)
				y_pos0= 100;
80005d34:	06400793          	li	a5,100
80005d38:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =220 ;
80005d3c:	0dc00793          	li	a5,220
80005d40:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =140;
80005d44:	08c00793          	li	a5,140
80005d48:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 220;
80005d4c:	0dc00793          	li	a5,220
80005d50:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=100;
80005d54:	06400793          	li	a5,100
80005d58:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =180 ;
80005d5c:	0b400793          	li	a5,180
80005d60:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =140;
80005d64:	08c00793          	li	a5,140
80005d68:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 200;
80005d6c:	0c800793          	li	a5,200
80005d70:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 120;
80005d74:	07800793          	li	a5,120
80005d78:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80005d7c:	fdf44703          	lbu	a4,-33(s0)
80005d80:	00100793          	li	a5,1
80005d84:	08f71863          	bne	a4,a5,80005e14 <twoPlayerMode+0x9b4>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80005d88:	fdc41583          	lh	a1,-36(s0)
80005d8c:	fda41603          	lh	a2,-38(s0)
80005d90:	fd841683          	lh	a3,-40(s0)
80005d94:	fd641703          	lh	a4,-42(s0)
80005d98:	fa842803          	lw	a6,-88(s0)
80005d9c:	000107b7          	lui	a5,0x10
80005da0:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005da4:	fac42503          	lw	a0,-84(s0)
80005da8:	52d020ef          	jal	80008ad4 <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005dac:	fd441583          	lh	a1,-44(s0)
80005db0:	fd241603          	lh	a2,-46(s0)
80005db4:	fd041683          	lh	a3,-48(s0)
80005db8:	fce41703          	lh	a4,-50(s0)
80005dbc:	fa842803          	lw	a6,-88(s0)
80005dc0:	000107b7          	lui	a5,0x10
80005dc4:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005dc8:	fac42503          	lw	a0,-84(s0)
80005dcc:	509020ef          	jal	80008ad4 <TFT_drawLine>
					counter ++;
80005dd0:	fe042783          	lw	a5,-32(s0)
80005dd4:	00178793          	addi	a5,a5,1
80005dd8:	fef42023          	sw	a5,-32(s0)
					pos5 = 1;
80005ddc:	00100793          	li	a5,1
80005de0:	fef404a3          	sb	a5,-23(s0)
					board[5] = 'X';
80005de4:	05800793          	li	a5,88
80005de8:	fcf400a3          	sb	a5,-63(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005dec:	fdf44703          	lbu	a4,-33(s0)
80005df0:	fbc40793          	addi	a5,s0,-68
80005df4:	fa842683          	lw	a3,-88(s0)
80005df8:	00070613          	mv	a2,a4
80005dfc:	00078593          	mv	a1,a5
80005e00:	fac42503          	lw	a0,-84(s0)
80005e04:	618000ef          	jal	8000641c <check_winner>
80005e08:	00050793          	mv	a5,a0
80005e0c:	fef407a3          	sb	a5,-17(s0)
80005e10:	4d40006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005e14:	fcc41583          	lh	a1,-52(s0)
80005e18:	fca41603          	lh	a2,-54(s0)
80005e1c:	fa842783          	lw	a5,-88(s0)
80005e20:	01f00713          	li	a4,31
80005e24:	01e00693          	li	a3,30
80005e28:	fac42503          	lw	a0,-84(s0)
80005e2c:	04d020ef          	jal	80008678 <TFT_drawCircle>
					counter ++;
80005e30:	fe042783          	lw	a5,-32(s0)
80005e34:	00178793          	addi	a5,a5,1
80005e38:	fef42023          	sw	a5,-32(s0)
					pos5 = 1;
80005e3c:	00100793          	li	a5,1
80005e40:	fef404a3          	sb	a5,-23(s0)
					board[5] =    'O';
80005e44:	04f00793          	li	a5,79
80005e48:	fcf400a3          	sb	a5,-63(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005e4c:	fdf44703          	lbu	a4,-33(s0)
80005e50:	fbc40793          	addi	a5,s0,-68
80005e54:	fa842683          	lw	a3,-88(s0)
80005e58:	00070613          	mv	a2,a4
80005e5c:	00078593          	mv	a1,a5
80005e60:	fac42503          	lw	a0,-84(s0)
80005e64:	5b8000ef          	jal	8000641c <check_winner>
80005e68:	00050793          	mv	a5,a0
80005e6c:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
80005e70:	4740006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
			}
			else if( x < 80 && (y<240 && y > 160) && pos6==0)//6
80005e74:	fc845703          	lhu	a4,-56(s0)
80005e78:	04f00793          	li	a5,79
80005e7c:	16e7e663          	bltu	a5,a4,80005fe8 <twoPlayerMode+0xb88>
80005e80:	fc645703          	lhu	a4,-58(s0)
80005e84:	0ef00793          	li	a5,239
80005e88:	16e7e063          	bltu	a5,a4,80005fe8 <twoPlayerMode+0xb88>
80005e8c:	fc645703          	lhu	a4,-58(s0)
80005e90:	0a000793          	li	a5,160
80005e94:	14e7fa63          	bleu	a4,a5,80005fe8 <twoPlayerMode+0xb88>
80005e98:	fe844783          	lbu	a5,-24(s0)
80005e9c:	14079663          	bnez	a5,80005fe8 <twoPlayerMode+0xb88>
			{
				x_pos0 = 20;
80005ea0:	01400793          	li	a5,20
80005ea4:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=180;
80005ea8:	0b400793          	li	a5,180
80005eac:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =60 ;
80005eb0:	03c00793          	li	a5,60
80005eb4:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =220;
80005eb8:	0dc00793          	li	a5,220
80005ebc:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 60;
80005ec0:	03c00793          	li	a5,60
80005ec4:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=180;
80005ec8:	0b400793          	li	a5,180
80005ecc:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =20 ;
80005ed0:	01400793          	li	a5,20
80005ed4:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =220;
80005ed8:	0dc00793          	li	a5,220
80005edc:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 40;
80005ee0:	02800793          	li	a5,40
80005ee4:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 200;
80005ee8:	0c800793          	li	a5,200
80005eec:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80005ef0:	fdf44703          	lbu	a4,-33(s0)
80005ef4:	00100793          	li	a5,1
80005ef8:	08f71863          	bne	a4,a5,80005f88 <twoPlayerMode+0xb28>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80005efc:	fdc41583          	lh	a1,-36(s0)
80005f00:	fda41603          	lh	a2,-38(s0)
80005f04:	fd841683          	lh	a3,-40(s0)
80005f08:	fd641703          	lh	a4,-42(s0)
80005f0c:	fa842803          	lw	a6,-88(s0)
80005f10:	000107b7          	lui	a5,0x10
80005f14:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005f18:	fac42503          	lw	a0,-84(s0)
80005f1c:	3b9020ef          	jal	80008ad4 <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005f20:	fd441583          	lh	a1,-44(s0)
80005f24:	fd241603          	lh	a2,-46(s0)
80005f28:	fd041683          	lh	a3,-48(s0)
80005f2c:	fce41703          	lh	a4,-50(s0)
80005f30:	fa842803          	lw	a6,-88(s0)
80005f34:	000107b7          	lui	a5,0x10
80005f38:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80005f3c:	fac42503          	lw	a0,-84(s0)
80005f40:	395020ef          	jal	80008ad4 <TFT_drawLine>
					counter ++;
80005f44:	fe042783          	lw	a5,-32(s0)
80005f48:	00178793          	addi	a5,a5,1
80005f4c:	fef42023          	sw	a5,-32(s0)
					pos6 = 1;
80005f50:	00100793          	li	a5,1
80005f54:	fef40423          	sb	a5,-24(s0)
					board[6] =   'X';
80005f58:	05800793          	li	a5,88
80005f5c:	fcf40123          	sb	a5,-62(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005f60:	fdf44703          	lbu	a4,-33(s0)
80005f64:	fbc40793          	addi	a5,s0,-68
80005f68:	fa842683          	lw	a3,-88(s0)
80005f6c:	00070613          	mv	a2,a4
80005f70:	00078593          	mv	a1,a5
80005f74:	fac42503          	lw	a0,-84(s0)
80005f78:	4a4000ef          	jal	8000641c <check_winner>
80005f7c:	00050793          	mv	a5,a0
80005f80:	fef407a3          	sb	a5,-17(s0)
80005f84:	3600006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005f88:	fcc41583          	lh	a1,-52(s0)
80005f8c:	fca41603          	lh	a2,-54(s0)
80005f90:	fa842783          	lw	a5,-88(s0)
80005f94:	01f00713          	li	a4,31
80005f98:	01e00693          	li	a3,30
80005f9c:	fac42503          	lw	a0,-84(s0)
80005fa0:	6d8020ef          	jal	80008678 <TFT_drawCircle>
					counter ++;
80005fa4:	fe042783          	lw	a5,-32(s0)
80005fa8:	00178793          	addi	a5,a5,1
80005fac:	fef42023          	sw	a5,-32(s0)
					pos6 = 1;
80005fb0:	00100793          	li	a5,1
80005fb4:	fef40423          	sb	a5,-24(s0)
					board[6] = 'O';
80005fb8:	04f00793          	li	a5,79
80005fbc:	fcf40123          	sb	a5,-62(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005fc0:	fdf44703          	lbu	a4,-33(s0)
80005fc4:	fbc40793          	addi	a5,s0,-68
80005fc8:	fa842683          	lw	a3,-88(s0)
80005fcc:	00070613          	mv	a2,a4
80005fd0:	00078593          	mv	a1,a5
80005fd4:	fac42503          	lw	a0,-84(s0)
80005fd8:	444000ef          	jal	8000641c <check_winner>
80005fdc:	00050793          	mv	a5,a0
80005fe0:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
80005fe4:	3000006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
			}
			else if((x < 160 && x >80)&&( y <240 && y>160) && pos7==0) // 7
80005fe8:	fc845703          	lhu	a4,-56(s0)
80005fec:	09f00793          	li	a5,159
80005ff0:	16e7ec63          	bltu	a5,a4,80006168 <twoPlayerMode+0xd08>
80005ff4:	fc845703          	lhu	a4,-56(s0)
80005ff8:	05000793          	li	a5,80
80005ffc:	16e7f663          	bleu	a4,a5,80006168 <twoPlayerMode+0xd08>
80006000:	fc645703          	lhu	a4,-58(s0)
80006004:	0ef00793          	li	a5,239
80006008:	16e7e063          	bltu	a5,a4,80006168 <twoPlayerMode+0xd08>
8000600c:	fc645703          	lhu	a4,-58(s0)
80006010:	0a000793          	li	a5,160
80006014:	14e7fa63          	bleu	a4,a5,80006168 <twoPlayerMode+0xd08>
80006018:	fe744783          	lbu	a5,-25(s0)
8000601c:	14079663          	bnez	a5,80006168 <twoPlayerMode+0xd08>
			{
				x_pos0 = 100;
80006020:	06400793          	li	a5,100
80006024:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=180;
80006028:	0b400793          	li	a5,180
8000602c:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =140 ;
80006030:	08c00793          	li	a5,140
80006034:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =220;
80006038:	0dc00793          	li	a5,220
8000603c:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 140;
80006040:	08c00793          	li	a5,140
80006044:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=180;
80006048:	0b400793          	li	a5,180
8000604c:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =100 ;
80006050:	06400793          	li	a5,100
80006054:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =220;
80006058:	0dc00793          	li	a5,220
8000605c:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 120;
80006060:	07800793          	li	a5,120
80006064:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 200;
80006068:	0c800793          	li	a5,200
8000606c:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80006070:	fdf44703          	lbu	a4,-33(s0)
80006074:	00100793          	li	a5,1
80006078:	08f71863          	bne	a4,a5,80006108 <twoPlayerMode+0xca8>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
8000607c:	fdc41583          	lh	a1,-36(s0)
80006080:	fda41603          	lh	a2,-38(s0)
80006084:	fd841683          	lh	a3,-40(s0)
80006088:	fd641703          	lh	a4,-42(s0)
8000608c:	fa842803          	lw	a6,-88(s0)
80006090:	000107b7          	lui	a5,0x10
80006094:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006098:	fac42503          	lw	a0,-84(s0)
8000609c:	239020ef          	jal	80008ad4 <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
800060a0:	fd441583          	lh	a1,-44(s0)
800060a4:	fd241603          	lh	a2,-46(s0)
800060a8:	fd041683          	lh	a3,-48(s0)
800060ac:	fce41703          	lh	a4,-50(s0)
800060b0:	fa842803          	lw	a6,-88(s0)
800060b4:	000107b7          	lui	a5,0x10
800060b8:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800060bc:	fac42503          	lw	a0,-84(s0)
800060c0:	215020ef          	jal	80008ad4 <TFT_drawLine>
					counter ++;
800060c4:	fe042783          	lw	a5,-32(s0)
800060c8:	00178793          	addi	a5,a5,1
800060cc:	fef42023          	sw	a5,-32(s0)
					pos7 = 1;
800060d0:	00100793          	li	a5,1
800060d4:	fef403a3          	sb	a5,-25(s0)
					board[7] = 'X';
800060d8:	05800793          	li	a5,88
800060dc:	fcf401a3          	sb	a5,-61(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
800060e0:	fdf44703          	lbu	a4,-33(s0)
800060e4:	fbc40793          	addi	a5,s0,-68
800060e8:	fa842683          	lw	a3,-88(s0)
800060ec:	00070613          	mv	a2,a4
800060f0:	00078593          	mv	a1,a5
800060f4:	fac42503          	lw	a0,-84(s0)
800060f8:	324000ef          	jal	8000641c <check_winner>
800060fc:	00050793          	mv	a5,a0
80006100:	fef407a3          	sb	a5,-17(s0)
80006104:	1e00006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80006108:	fcc41583          	lh	a1,-52(s0)
8000610c:	fca41603          	lh	a2,-54(s0)
80006110:	fa842783          	lw	a5,-88(s0)
80006114:	01f00713          	li	a4,31
80006118:	01e00693          	li	a3,30
8000611c:	fac42503          	lw	a0,-84(s0)
80006120:	558020ef          	jal	80008678 <TFT_drawCircle>
					counter ++;
80006124:	fe042783          	lw	a5,-32(s0)
80006128:	00178793          	addi	a5,a5,1
8000612c:	fef42023          	sw	a5,-32(s0)
					pos7 = 1;
80006130:	00100793          	li	a5,1
80006134:	fef403a3          	sb	a5,-25(s0)
					board[7] = 'O';
80006138:	04f00793          	li	a5,79
8000613c:	fcf401a3          	sb	a5,-61(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80006140:	fdf44703          	lbu	a4,-33(s0)
80006144:	fbc40793          	addi	a5,s0,-68
80006148:	fa842683          	lw	a3,-88(s0)
8000614c:	00070613          	mv	a2,a4
80006150:	00078593          	mv	a1,a5
80006154:	fac42503          	lw	a0,-84(s0)
80006158:	2c4000ef          	jal	8000641c <check_winner>
8000615c:	00050793          	mv	a5,a0
80006160:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
80006164:	1800006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
			}
			else if((x < 240 && x >160)&&(y>160 && y<240) && pos8==0)// 8
80006168:	fc845703          	lhu	a4,-56(s0)
8000616c:	0ef00793          	li	a5,239
80006170:	16e7ea63          	bltu	a5,a4,800062e4 <twoPlayerMode+0xe84>
80006174:	fc845703          	lhu	a4,-56(s0)
80006178:	0a000793          	li	a5,160
8000617c:	16e7f463          	bleu	a4,a5,800062e4 <twoPlayerMode+0xe84>
80006180:	fc645703          	lhu	a4,-58(s0)
80006184:	0a000793          	li	a5,160
80006188:	14e7fe63          	bleu	a4,a5,800062e4 <twoPlayerMode+0xe84>
8000618c:	fc645703          	lhu	a4,-58(s0)
80006190:	0ef00793          	li	a5,239
80006194:	14e7e863          	bltu	a5,a4,800062e4 <twoPlayerMode+0xe84>
80006198:	fe644783          	lbu	a5,-26(s0)
8000619c:	14079463          	bnez	a5,800062e4 <twoPlayerMode+0xe84>
			{
				x_pos0 = 180;
800061a0:	0b400793          	li	a5,180
800061a4:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=180;
800061a8:	0b400793          	li	a5,180
800061ac:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =220 ;
800061b0:	0dc00793          	li	a5,220
800061b4:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =220;
800061b8:	0dc00793          	li	a5,220
800061bc:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 220;
800061c0:	0dc00793          	li	a5,220
800061c4:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=180;
800061c8:	0b400793          	li	a5,180
800061cc:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =180 ;
800061d0:	0b400793          	li	a5,180
800061d4:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =220;
800061d8:	0dc00793          	li	a5,220
800061dc:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 200;
800061e0:	0c800793          	li	a5,200
800061e4:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 200;
800061e8:	0c800793          	li	a5,200
800061ec:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
800061f0:	fdf44703          	lbu	a4,-33(s0)
800061f4:	00100793          	li	a5,1
800061f8:	08f71863          	bne	a4,a5,80006288 <twoPlayerMode+0xe28>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
800061fc:	fdc41583          	lh	a1,-36(s0)
80006200:	fda41603          	lh	a2,-38(s0)
80006204:	fd841683          	lh	a3,-40(s0)
80006208:	fd641703          	lh	a4,-42(s0)
8000620c:	fa842803          	lw	a6,-88(s0)
80006210:	000107b7          	lui	a5,0x10
80006214:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006218:	fac42503          	lw	a0,-84(s0)
8000621c:	0b9020ef          	jal	80008ad4 <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80006220:	fd441583          	lh	a1,-44(s0)
80006224:	fd241603          	lh	a2,-46(s0)
80006228:	fd041683          	lh	a3,-48(s0)
8000622c:	fce41703          	lh	a4,-50(s0)
80006230:	fa842803          	lw	a6,-88(s0)
80006234:	000107b7          	lui	a5,0x10
80006238:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
8000623c:	fac42503          	lw	a0,-84(s0)
80006240:	095020ef          	jal	80008ad4 <TFT_drawLine>
					counter ++;
80006244:	fe042783          	lw	a5,-32(s0)
80006248:	00178793          	addi	a5,a5,1
8000624c:	fef42023          	sw	a5,-32(s0)
					pos8 = 1;
80006250:	00100793          	li	a5,1
80006254:	fef40323          	sb	a5,-26(s0)
					board[8] = 'X';
80006258:	05800793          	li	a5,88
8000625c:	fcf40223          	sb	a5,-60(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80006260:	fdf44703          	lbu	a4,-33(s0)
80006264:	fbc40793          	addi	a5,s0,-68
80006268:	fa842683          	lw	a3,-88(s0)
8000626c:	00070613          	mv	a2,a4
80006270:	00078593          	mv	a1,a5
80006274:	fac42503          	lw	a0,-84(s0)
80006278:	1a4000ef          	jal	8000641c <check_winner>
8000627c:	00050793          	mv	a5,a0
80006280:	fef407a3          	sb	a5,-17(s0)
80006284:	0600006f          	j	800062e4 <twoPlayerMode+0xe84>
				}
				else
				{
					board[8] = 'O';
80006288:	04f00793          	li	a5,79
8000628c:	fcf40223          	sb	a5,-60(s0)
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80006290:	fcc41583          	lh	a1,-52(s0)
80006294:	fca41603          	lh	a2,-54(s0)
80006298:	fa842783          	lw	a5,-88(s0)
8000629c:	01f00713          	li	a4,31
800062a0:	01e00693          	li	a3,30
800062a4:	fac42503          	lw	a0,-84(s0)
800062a8:	3d0020ef          	jal	80008678 <TFT_drawCircle>
					counter ++;
800062ac:	fe042783          	lw	a5,-32(s0)
800062b0:	00178793          	addi	a5,a5,1
800062b4:	fef42023          	sw	a5,-32(s0)
					pos8 = 1;
800062b8:	00100793          	li	a5,1
800062bc:	fef40323          	sb	a5,-26(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
800062c0:	fdf44703          	lbu	a4,-33(s0)
800062c4:	fbc40793          	addi	a5,s0,-68
800062c8:	fa842683          	lw	a3,-88(s0)
800062cc:	00070613          	mv	a2,a4
800062d0:	00078593          	mv	a1,a5
800062d4:	fac42503          	lw	a0,-84(s0)
800062d8:	144000ef          	jal	8000641c <check_winner>
800062dc:	00050793          	mv	a5,a0
800062e0:	fef407a3          	sb	a5,-17(s0)
	while( counter < 9 && winner == 0)
800062e4:	fe042703          	lw	a4,-32(s0)
800062e8:	00800793          	li	a5,8
800062ec:	00e7e663          	bltu	a5,a4,800062f8 <twoPlayerMode+0xe98>
800062f0:	fef44783          	lbu	a5,-17(s0)
800062f4:	a0078863          	beqz	a5,80005504 <twoPlayerMode+0xa4>
				}
			}
			}
		}

	if (winner == 0 && counter >=9)
800062f8:	fef44783          	lbu	a5,-17(s0)
800062fc:	00079e63          	bnez	a5,80006318 <twoPlayerMode+0xeb8>
80006300:	fe042703          	lw	a4,-32(s0)
80006304:	00800793          	li	a5,8
80006308:	00e7f863          	bleu	a4,a5,80006318 <twoPlayerMode+0xeb8>
	{
		drawGame(this_spi,this_gpio);
8000630c:	fa842583          	lw	a1,-88(s0)
80006310:	fac42503          	lw	a0,-84(s0)
80006314:	080000ef          	jal	80006394 <drawGame>
	}
}
80006318:	00000013          	nop
8000631c:	05c12083          	lw	ra,92(sp)
80006320:	05812403          	lw	s0,88(sp)
80006324:	06010113          	addi	sp,sp,96
80006328:	00008067          	ret

8000632c <map>:
	uint16_t in_min,
	uint16_t in_max,
	uint16_t out_min,
	uint16_t out_max
)
{
8000632c:	fe010113          	addi	sp,sp,-32
80006330:	00812e23          	sw	s0,28(sp)
80006334:	02010413          	addi	s0,sp,32
80006338:	00070793          	mv	a5,a4
8000633c:	fea41723          	sh	a0,-18(s0)
80006340:	feb41623          	sh	a1,-20(s0)
80006344:	fec41523          	sh	a2,-22(s0)
80006348:	fed41423          	sh	a3,-24(s0)
8000634c:	fef41323          	sh	a5,-26(s0)
	return (coord - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
80006350:	fee45703          	lhu	a4,-18(s0)
80006354:	fec45783          	lhu	a5,-20(s0)
80006358:	40f70733          	sub	a4,a4,a5
8000635c:	fe645683          	lhu	a3,-26(s0)
80006360:	fe845783          	lhu	a5,-24(s0)
80006364:	40f687b3          	sub	a5,a3,a5
80006368:	02f70733          	mul	a4,a4,a5
8000636c:	fea45683          	lhu	a3,-22(s0)
80006370:	fec45783          	lhu	a5,-20(s0)
80006374:	40f687b3          	sub	a5,a3,a5
80006378:	02f74733          	div	a4,a4,a5
8000637c:	fe845783          	lhu	a5,-24(s0)
80006380:	00f707b3          	add	a5,a4,a5
}
80006384:	00078513          	mv	a0,a5
80006388:	01c12403          	lw	s0,28(sp)
8000638c:	02010113          	addi	sp,sp,32
80006390:	00008067          	ret

80006394 <drawGame>:
drawGame
(
	spi_instance_t *this_spi,
	gpio_instance_t *this_gpio
)
{
80006394:	fe010113          	addi	sp,sp,-32
80006398:	00112e23          	sw	ra,28(sp)
8000639c:	00812c23          	sw	s0,24(sp)
800063a0:	02010413          	addi	s0,sp,32
800063a4:	fea42623          	sw	a0,-20(s0)
800063a8:	feb42423          	sw	a1,-24(s0)
    TFT_drawLine(this_spi, 50, 50,  190, 190 ,ILI9341_GREEN,this_gpio);
800063ac:	fe842803          	lw	a6,-24(s0)
800063b0:	7e000793          	li	a5,2016
800063b4:	0be00713          	li	a4,190
800063b8:	0be00693          	li	a3,190
800063bc:	03200613          	li	a2,50
800063c0:	03200593          	li	a1,50
800063c4:	fec42503          	lw	a0,-20(s0)
800063c8:	70c020ef          	jal	80008ad4 <TFT_drawLine>
    TFT_drawLine(this_spi, 190, 50,  50, 190 ,ILI9341_GREEN,this_gpio);
800063cc:	fe842803          	lw	a6,-24(s0)
800063d0:	7e000793          	li	a5,2016
800063d4:	0be00713          	li	a4,190
800063d8:	03200693          	li	a3,50
800063dc:	03200613          	li	a2,50
800063e0:	0be00593          	li	a1,190
800063e4:	fec42503          	lw	a0,-20(s0)
800063e8:	6ec020ef          	jal	80008ad4 <TFT_drawLine>
    TFT_drawCircle(this_spi ,120,120, 100, ILI9341_GREEN, this_gpio);
800063ec:	fe842783          	lw	a5,-24(s0)
800063f0:	7e000713          	li	a4,2016
800063f4:	06400693          	li	a3,100
800063f8:	07800613          	li	a2,120
800063fc:	07800593          	li	a1,120
80006400:	fec42503          	lw	a0,-20(s0)
80006404:	274020ef          	jal	80008678 <TFT_drawCircle>
}
80006408:	00000013          	nop
8000640c:	01c12083          	lw	ra,28(sp)
80006410:	01812403          	lw	s0,24(sp)
80006414:	02010113          	addi	sp,sp,32
80006418:	00008067          	ret

8000641c <check_winner>:
	spi_instance_t * this_spi,
	char board[],
	uint8_t player,
	gpio_instance_t * this_gpio
)
{
8000641c:	fe010113          	addi	sp,sp,-32
80006420:	00112e23          	sw	ra,28(sp)
80006424:	00812c23          	sw	s0,24(sp)
80006428:	02010413          	addi	s0,sp,32
8000642c:	fea42623          	sw	a0,-20(s0)
80006430:	feb42423          	sw	a1,-24(s0)
80006434:	00060793          	mv	a5,a2
80006438:	fed42023          	sw	a3,-32(s0)
8000643c:	fef403a3          	sb	a5,-25(s0)
	if (board[0] == 'X' && board[3] == 'X' && board[6] == 'X')
80006440:	fe842783          	lw	a5,-24(s0)
80006444:	0007c703          	lbu	a4,0(a5)
80006448:	05800793          	li	a5,88
8000644c:	06f71e63          	bne	a4,a5,800064c8 <check_winner+0xac>
80006450:	fe842783          	lw	a5,-24(s0)
80006454:	00378793          	addi	a5,a5,3
80006458:	0007c703          	lbu	a4,0(a5)
8000645c:	05800793          	li	a5,88
80006460:	06f71463          	bne	a4,a5,800064c8 <check_winner+0xac>
80006464:	fe842783          	lw	a5,-24(s0)
80006468:	00678793          	addi	a5,a5,6
8000646c:	0007c703          	lbu	a4,0(a5)
80006470:	05800793          	li	a5,88
80006474:	04f71a63          	bne	a4,a5,800064c8 <check_winner+0xac>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006478:	fe042803          	lw	a6,-32(s0)
8000647c:	000107b7          	lui	a5,0x10
80006480:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006484:	0f000713          	li	a4,240
80006488:	0f000693          	li	a3,240
8000648c:	00000613          	li	a2,0
80006490:	00000593          	li	a1,0
80006494:	fec42503          	lw	a0,-20(s0)
80006498:	63c020ef          	jal	80008ad4 <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
8000649c:	fe042803          	lw	a6,-32(s0)
800064a0:	000107b7          	lui	a5,0x10
800064a4:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800064a8:	0f000713          	li	a4,240
800064ac:	00000693          	li	a3,0
800064b0:	00000613          	li	a2,0
800064b4:	0f000593          	li	a1,240
800064b8:	fec42503          	lw	a0,-20(s0)
800064bc:	618020ef          	jal	80008ad4 <TFT_drawLine>
		return 1;
800064c0:	00100793          	li	a5,1
800064c4:	6c80006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[1] == 'X' && board[4] == 'X' && board[7] == 'X')
800064c8:	fe842783          	lw	a5,-24(s0)
800064cc:	00178793          	addi	a5,a5,1
800064d0:	0007c703          	lbu	a4,0(a5)
800064d4:	05800793          	li	a5,88
800064d8:	06f71e63          	bne	a4,a5,80006554 <check_winner+0x138>
800064dc:	fe842783          	lw	a5,-24(s0)
800064e0:	00478793          	addi	a5,a5,4
800064e4:	0007c703          	lbu	a4,0(a5)
800064e8:	05800793          	li	a5,88
800064ec:	06f71463          	bne	a4,a5,80006554 <check_winner+0x138>
800064f0:	fe842783          	lw	a5,-24(s0)
800064f4:	00778793          	addi	a5,a5,7
800064f8:	0007c703          	lbu	a4,0(a5)
800064fc:	05800793          	li	a5,88
80006500:	04f71a63          	bne	a4,a5,80006554 <check_winner+0x138>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006504:	fe042803          	lw	a6,-32(s0)
80006508:	000107b7          	lui	a5,0x10
8000650c:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006510:	0f000713          	li	a4,240
80006514:	0f000693          	li	a3,240
80006518:	00000613          	li	a2,0
8000651c:	00000593          	li	a1,0
80006520:	fec42503          	lw	a0,-20(s0)
80006524:	5b0020ef          	jal	80008ad4 <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
80006528:	fe042803          	lw	a6,-32(s0)
8000652c:	000107b7          	lui	a5,0x10
80006530:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006534:	0f000713          	li	a4,240
80006538:	00000693          	li	a3,0
8000653c:	00000613          	li	a2,0
80006540:	0f000593          	li	a1,240
80006544:	fec42503          	lw	a0,-20(s0)
80006548:	58c020ef          	jal	80008ad4 <TFT_drawLine>
		return 1;
8000654c:	00100793          	li	a5,1
80006550:	63c0006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[2] == 'X' && board[5] == 'X' && board[8] == 'X')
80006554:	fe842783          	lw	a5,-24(s0)
80006558:	00278793          	addi	a5,a5,2
8000655c:	0007c703          	lbu	a4,0(a5)
80006560:	05800793          	li	a5,88
80006564:	06f71e63          	bne	a4,a5,800065e0 <check_winner+0x1c4>
80006568:	fe842783          	lw	a5,-24(s0)
8000656c:	00578793          	addi	a5,a5,5
80006570:	0007c703          	lbu	a4,0(a5)
80006574:	05800793          	li	a5,88
80006578:	06f71463          	bne	a4,a5,800065e0 <check_winner+0x1c4>
8000657c:	fe842783          	lw	a5,-24(s0)
80006580:	00878793          	addi	a5,a5,8
80006584:	0007c703          	lbu	a4,0(a5)
80006588:	05800793          	li	a5,88
8000658c:	04f71a63          	bne	a4,a5,800065e0 <check_winner+0x1c4>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006590:	fe042803          	lw	a6,-32(s0)
80006594:	000107b7          	lui	a5,0x10
80006598:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
8000659c:	0f000713          	li	a4,240
800065a0:	0f000693          	li	a3,240
800065a4:	00000613          	li	a2,0
800065a8:	00000593          	li	a1,0
800065ac:	fec42503          	lw	a0,-20(s0)
800065b0:	524020ef          	jal	80008ad4 <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
800065b4:	fe042803          	lw	a6,-32(s0)
800065b8:	000107b7          	lui	a5,0x10
800065bc:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800065c0:	0f000713          	li	a4,240
800065c4:	00000693          	li	a3,0
800065c8:	00000613          	li	a2,0
800065cc:	0f000593          	li	a1,240
800065d0:	fec42503          	lw	a0,-20(s0)
800065d4:	500020ef          	jal	80008ad4 <TFT_drawLine>
		return 1;
800065d8:	00100793          	li	a5,1
800065dc:	5b00006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[0] == 'X' && board[1] == 'X' && board[2] == 'X')
800065e0:	fe842783          	lw	a5,-24(s0)
800065e4:	0007c703          	lbu	a4,0(a5)
800065e8:	05800793          	li	a5,88
800065ec:	06f71e63          	bne	a4,a5,80006668 <check_winner+0x24c>
800065f0:	fe842783          	lw	a5,-24(s0)
800065f4:	00178793          	addi	a5,a5,1
800065f8:	0007c703          	lbu	a4,0(a5)
800065fc:	05800793          	li	a5,88
80006600:	06f71463          	bne	a4,a5,80006668 <check_winner+0x24c>
80006604:	fe842783          	lw	a5,-24(s0)
80006608:	00278793          	addi	a5,a5,2
8000660c:	0007c703          	lbu	a4,0(a5)
80006610:	05800793          	li	a5,88
80006614:	04f71a63          	bne	a4,a5,80006668 <check_winner+0x24c>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006618:	fe042803          	lw	a6,-32(s0)
8000661c:	000107b7          	lui	a5,0x10
80006620:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006624:	0f000713          	li	a4,240
80006628:	0f000693          	li	a3,240
8000662c:	00000613          	li	a2,0
80006630:	00000593          	li	a1,0
80006634:	fec42503          	lw	a0,-20(s0)
80006638:	49c020ef          	jal	80008ad4 <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
8000663c:	fe042803          	lw	a6,-32(s0)
80006640:	000107b7          	lui	a5,0x10
80006644:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006648:	0f000713          	li	a4,240
8000664c:	00000693          	li	a3,0
80006650:	00000613          	li	a2,0
80006654:	0f000593          	li	a1,240
80006658:	fec42503          	lw	a0,-20(s0)
8000665c:	478020ef          	jal	80008ad4 <TFT_drawLine>
		return 1;
80006660:	00100793          	li	a5,1
80006664:	5280006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[3] == 'X' && board[4] == 'X' && board[5] == 'X')
80006668:	fe842783          	lw	a5,-24(s0)
8000666c:	00378793          	addi	a5,a5,3
80006670:	0007c703          	lbu	a4,0(a5)
80006674:	05800793          	li	a5,88
80006678:	06f71e63          	bne	a4,a5,800066f4 <check_winner+0x2d8>
8000667c:	fe842783          	lw	a5,-24(s0)
80006680:	00478793          	addi	a5,a5,4
80006684:	0007c703          	lbu	a4,0(a5)
80006688:	05800793          	li	a5,88
8000668c:	06f71463          	bne	a4,a5,800066f4 <check_winner+0x2d8>
80006690:	fe842783          	lw	a5,-24(s0)
80006694:	00578793          	addi	a5,a5,5
80006698:	0007c703          	lbu	a4,0(a5)
8000669c:	05800793          	li	a5,88
800066a0:	04f71a63          	bne	a4,a5,800066f4 <check_winner+0x2d8>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
800066a4:	fe042803          	lw	a6,-32(s0)
800066a8:	000107b7          	lui	a5,0x10
800066ac:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800066b0:	0f000713          	li	a4,240
800066b4:	0f000693          	li	a3,240
800066b8:	00000613          	li	a2,0
800066bc:	00000593          	li	a1,0
800066c0:	fec42503          	lw	a0,-20(s0)
800066c4:	410020ef          	jal	80008ad4 <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
800066c8:	fe042803          	lw	a6,-32(s0)
800066cc:	000107b7          	lui	a5,0x10
800066d0:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800066d4:	0f000713          	li	a4,240
800066d8:	00000693          	li	a3,0
800066dc:	00000613          	li	a2,0
800066e0:	0f000593          	li	a1,240
800066e4:	fec42503          	lw	a0,-20(s0)
800066e8:	3ec020ef          	jal	80008ad4 <TFT_drawLine>
		return 1;
800066ec:	00100793          	li	a5,1
800066f0:	49c0006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[6] == 'X' && board[7] == 'X' && board[8] == 'X')
800066f4:	fe842783          	lw	a5,-24(s0)
800066f8:	00678793          	addi	a5,a5,6
800066fc:	0007c703          	lbu	a4,0(a5)
80006700:	05800793          	li	a5,88
80006704:	06f71e63          	bne	a4,a5,80006780 <check_winner+0x364>
80006708:	fe842783          	lw	a5,-24(s0)
8000670c:	00778793          	addi	a5,a5,7
80006710:	0007c703          	lbu	a4,0(a5)
80006714:	05800793          	li	a5,88
80006718:	06f71463          	bne	a4,a5,80006780 <check_winner+0x364>
8000671c:	fe842783          	lw	a5,-24(s0)
80006720:	00878793          	addi	a5,a5,8
80006724:	0007c703          	lbu	a4,0(a5)
80006728:	05800793          	li	a5,88
8000672c:	04f71a63          	bne	a4,a5,80006780 <check_winner+0x364>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006730:	fe042803          	lw	a6,-32(s0)
80006734:	000107b7          	lui	a5,0x10
80006738:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
8000673c:	0f000713          	li	a4,240
80006740:	0f000693          	li	a3,240
80006744:	00000613          	li	a2,0
80006748:	00000593          	li	a1,0
8000674c:	fec42503          	lw	a0,-20(s0)
80006750:	384020ef          	jal	80008ad4 <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
80006754:	fe042803          	lw	a6,-32(s0)
80006758:	000107b7          	lui	a5,0x10
8000675c:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006760:	0f000713          	li	a4,240
80006764:	00000693          	li	a3,0
80006768:	00000613          	li	a2,0
8000676c:	0f000593          	li	a1,240
80006770:	fec42503          	lw	a0,-20(s0)
80006774:	360020ef          	jal	80008ad4 <TFT_drawLine>
		return 1;
80006778:	00100793          	li	a5,1
8000677c:	4100006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[0] == 'X' && board[4] == 'X' && board[8] == 'X')
80006780:	fe842783          	lw	a5,-24(s0)
80006784:	0007c703          	lbu	a4,0(a5)
80006788:	05800793          	li	a5,88
8000678c:	06f71e63          	bne	a4,a5,80006808 <check_winner+0x3ec>
80006790:	fe842783          	lw	a5,-24(s0)
80006794:	00478793          	addi	a5,a5,4
80006798:	0007c703          	lbu	a4,0(a5)
8000679c:	05800793          	li	a5,88
800067a0:	06f71463          	bne	a4,a5,80006808 <check_winner+0x3ec>
800067a4:	fe842783          	lw	a5,-24(s0)
800067a8:	00878793          	addi	a5,a5,8
800067ac:	0007c703          	lbu	a4,0(a5)
800067b0:	05800793          	li	a5,88
800067b4:	04f71a63          	bne	a4,a5,80006808 <check_winner+0x3ec>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
800067b8:	fe042803          	lw	a6,-32(s0)
800067bc:	000107b7          	lui	a5,0x10
800067c0:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800067c4:	0f000713          	li	a4,240
800067c8:	0f000693          	li	a3,240
800067cc:	00000613          	li	a2,0
800067d0:	00000593          	li	a1,0
800067d4:	fec42503          	lw	a0,-20(s0)
800067d8:	2fc020ef          	jal	80008ad4 <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
800067dc:	fe042803          	lw	a6,-32(s0)
800067e0:	000107b7          	lui	a5,0x10
800067e4:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
800067e8:	0f000713          	li	a4,240
800067ec:	00000693          	li	a3,0
800067f0:	00000613          	li	a2,0
800067f4:	0f000593          	li	a1,240
800067f8:	fec42503          	lw	a0,-20(s0)
800067fc:	2d8020ef          	jal	80008ad4 <TFT_drawLine>
		return 1;
80006800:	00100793          	li	a5,1
80006804:	3880006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[2] == 'X' && board[4] == 'X' && board[6] == 'X')
80006808:	fe842783          	lw	a5,-24(s0)
8000680c:	00278793          	addi	a5,a5,2
80006810:	0007c703          	lbu	a4,0(a5)
80006814:	05800793          	li	a5,88
80006818:	06f71e63          	bne	a4,a5,80006894 <check_winner+0x478>
8000681c:	fe842783          	lw	a5,-24(s0)
80006820:	00478793          	addi	a5,a5,4
80006824:	0007c703          	lbu	a4,0(a5)
80006828:	05800793          	li	a5,88
8000682c:	06f71463          	bne	a4,a5,80006894 <check_winner+0x478>
80006830:	fe842783          	lw	a5,-24(s0)
80006834:	00678793          	addi	a5,a5,6
80006838:	0007c703          	lbu	a4,0(a5)
8000683c:	05800793          	li	a5,88
80006840:	04f71a63          	bne	a4,a5,80006894 <check_winner+0x478>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006844:	fe042803          	lw	a6,-32(s0)
80006848:	000107b7          	lui	a5,0x10
8000684c:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006850:	0f000713          	li	a4,240
80006854:	0f000693          	li	a3,240
80006858:	00000613          	li	a2,0
8000685c:	00000593          	li	a1,0
80006860:	fec42503          	lw	a0,-20(s0)
80006864:	270020ef          	jal	80008ad4 <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
80006868:	fe042803          	lw	a6,-32(s0)
8000686c:	000107b7          	lui	a5,0x10
80006870:	80078793          	addi	a5,a5,-2048 # f800 <_start-0x7fff0800>
80006874:	0f000713          	li	a4,240
80006878:	00000693          	li	a3,0
8000687c:	00000613          	li	a2,0
80006880:	0f000593          	li	a1,240
80006884:	fec42503          	lw	a0,-20(s0)
80006888:	24c020ef          	jal	80008ad4 <TFT_drawLine>
		return 1;
8000688c:	00100793          	li	a5,1
80006890:	2fc0006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[0] == 'O' && board[3] == 'O' && board[6] == 'O')
80006894:	fe842783          	lw	a5,-24(s0)
80006898:	0007c703          	lbu	a4,0(a5)
8000689c:	04f00793          	li	a5,79
800068a0:	04f71863          	bne	a4,a5,800068f0 <check_winner+0x4d4>
800068a4:	fe842783          	lw	a5,-24(s0)
800068a8:	00378793          	addi	a5,a5,3
800068ac:	0007c703          	lbu	a4,0(a5)
800068b0:	04f00793          	li	a5,79
800068b4:	02f71e63          	bne	a4,a5,800068f0 <check_winner+0x4d4>
800068b8:	fe842783          	lw	a5,-24(s0)
800068bc:	00678793          	addi	a5,a5,6
800068c0:	0007c703          	lbu	a4,0(a5)
800068c4:	04f00793          	li	a5,79
800068c8:	02f71463          	bne	a4,a5,800068f0 <check_winner+0x4d4>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
800068cc:	fe042783          	lw	a5,-32(s0)
800068d0:	01f00713          	li	a4,31
800068d4:	06400693          	li	a3,100
800068d8:	07800613          	li	a2,120
800068dc:	07800593          	li	a1,120
800068e0:	fec42503          	lw	a0,-20(s0)
800068e4:	595010ef          	jal	80008678 <TFT_drawCircle>
		return 1;
800068e8:	00100793          	li	a5,1
800068ec:	2a00006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[1] == 'O' && board[4] == 'O' && board[7] == 'O')
800068f0:	fe842783          	lw	a5,-24(s0)
800068f4:	00178793          	addi	a5,a5,1
800068f8:	0007c703          	lbu	a4,0(a5)
800068fc:	04f00793          	li	a5,79
80006900:	04f71863          	bne	a4,a5,80006950 <check_winner+0x534>
80006904:	fe842783          	lw	a5,-24(s0)
80006908:	00478793          	addi	a5,a5,4
8000690c:	0007c703          	lbu	a4,0(a5)
80006910:	04f00793          	li	a5,79
80006914:	02f71e63          	bne	a4,a5,80006950 <check_winner+0x534>
80006918:	fe842783          	lw	a5,-24(s0)
8000691c:	00778793          	addi	a5,a5,7
80006920:	0007c703          	lbu	a4,0(a5)
80006924:	04f00793          	li	a5,79
80006928:	02f71463          	bne	a4,a5,80006950 <check_winner+0x534>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
8000692c:	fe042783          	lw	a5,-32(s0)
80006930:	01f00713          	li	a4,31
80006934:	06400693          	li	a3,100
80006938:	07800613          	li	a2,120
8000693c:	07800593          	li	a1,120
80006940:	fec42503          	lw	a0,-20(s0)
80006944:	535010ef          	jal	80008678 <TFT_drawCircle>
		return 1;
80006948:	00100793          	li	a5,1
8000694c:	2400006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[2] == 'O' && board[5] == 'O' && board[8] == 'O')
80006950:	fe842783          	lw	a5,-24(s0)
80006954:	00278793          	addi	a5,a5,2
80006958:	0007c703          	lbu	a4,0(a5)
8000695c:	04f00793          	li	a5,79
80006960:	04f71863          	bne	a4,a5,800069b0 <check_winner+0x594>
80006964:	fe842783          	lw	a5,-24(s0)
80006968:	00578793          	addi	a5,a5,5
8000696c:	0007c703          	lbu	a4,0(a5)
80006970:	04f00793          	li	a5,79
80006974:	02f71e63          	bne	a4,a5,800069b0 <check_winner+0x594>
80006978:	fe842783          	lw	a5,-24(s0)
8000697c:	00878793          	addi	a5,a5,8
80006980:	0007c703          	lbu	a4,0(a5)
80006984:	04f00793          	li	a5,79
80006988:	02f71463          	bne	a4,a5,800069b0 <check_winner+0x594>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
8000698c:	fe042783          	lw	a5,-32(s0)
80006990:	01f00713          	li	a4,31
80006994:	06400693          	li	a3,100
80006998:	07800613          	li	a2,120
8000699c:	07800593          	li	a1,120
800069a0:	fec42503          	lw	a0,-20(s0)
800069a4:	4d5010ef          	jal	80008678 <TFT_drawCircle>
		return 1;
800069a8:	00100793          	li	a5,1
800069ac:	1e00006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[0] == 'O' && board[1] == 'O' && board[2] == 'O')
800069b0:	fe842783          	lw	a5,-24(s0)
800069b4:	0007c703          	lbu	a4,0(a5)
800069b8:	04f00793          	li	a5,79
800069bc:	04f71863          	bne	a4,a5,80006a0c <check_winner+0x5f0>
800069c0:	fe842783          	lw	a5,-24(s0)
800069c4:	00178793          	addi	a5,a5,1
800069c8:	0007c703          	lbu	a4,0(a5)
800069cc:	04f00793          	li	a5,79
800069d0:	02f71e63          	bne	a4,a5,80006a0c <check_winner+0x5f0>
800069d4:	fe842783          	lw	a5,-24(s0)
800069d8:	00278793          	addi	a5,a5,2
800069dc:	0007c703          	lbu	a4,0(a5)
800069e0:	04f00793          	li	a5,79
800069e4:	02f71463          	bne	a4,a5,80006a0c <check_winner+0x5f0>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
800069e8:	fe042783          	lw	a5,-32(s0)
800069ec:	01f00713          	li	a4,31
800069f0:	06400693          	li	a3,100
800069f4:	07800613          	li	a2,120
800069f8:	07800593          	li	a1,120
800069fc:	fec42503          	lw	a0,-20(s0)
80006a00:	479010ef          	jal	80008678 <TFT_drawCircle>
		return 1;
80006a04:	00100793          	li	a5,1
80006a08:	1840006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[3] == 'O' && board[4] == 'O' && board[5] == 'O')
80006a0c:	fe842783          	lw	a5,-24(s0)
80006a10:	00378793          	addi	a5,a5,3
80006a14:	0007c703          	lbu	a4,0(a5)
80006a18:	04f00793          	li	a5,79
80006a1c:	04f71863          	bne	a4,a5,80006a6c <check_winner+0x650>
80006a20:	fe842783          	lw	a5,-24(s0)
80006a24:	00478793          	addi	a5,a5,4
80006a28:	0007c703          	lbu	a4,0(a5)
80006a2c:	04f00793          	li	a5,79
80006a30:	02f71e63          	bne	a4,a5,80006a6c <check_winner+0x650>
80006a34:	fe842783          	lw	a5,-24(s0)
80006a38:	00578793          	addi	a5,a5,5
80006a3c:	0007c703          	lbu	a4,0(a5)
80006a40:	04f00793          	li	a5,79
80006a44:	02f71463          	bne	a4,a5,80006a6c <check_winner+0x650>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006a48:	fe042783          	lw	a5,-32(s0)
80006a4c:	01f00713          	li	a4,31
80006a50:	06400693          	li	a3,100
80006a54:	07800613          	li	a2,120
80006a58:	07800593          	li	a1,120
80006a5c:	fec42503          	lw	a0,-20(s0)
80006a60:	419010ef          	jal	80008678 <TFT_drawCircle>
		return 1;
80006a64:	00100793          	li	a5,1
80006a68:	1240006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[6] == 'O' && board[7] == 'O' && board[8] == 'O')
80006a6c:	fe842783          	lw	a5,-24(s0)
80006a70:	00678793          	addi	a5,a5,6
80006a74:	0007c703          	lbu	a4,0(a5)
80006a78:	04f00793          	li	a5,79
80006a7c:	04f71863          	bne	a4,a5,80006acc <check_winner+0x6b0>
80006a80:	fe842783          	lw	a5,-24(s0)
80006a84:	00778793          	addi	a5,a5,7
80006a88:	0007c703          	lbu	a4,0(a5)
80006a8c:	04f00793          	li	a5,79
80006a90:	02f71e63          	bne	a4,a5,80006acc <check_winner+0x6b0>
80006a94:	fe842783          	lw	a5,-24(s0)
80006a98:	00878793          	addi	a5,a5,8
80006a9c:	0007c703          	lbu	a4,0(a5)
80006aa0:	04f00793          	li	a5,79
80006aa4:	02f71463          	bne	a4,a5,80006acc <check_winner+0x6b0>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006aa8:	fe042783          	lw	a5,-32(s0)
80006aac:	01f00713          	li	a4,31
80006ab0:	06400693          	li	a3,100
80006ab4:	07800613          	li	a2,120
80006ab8:	07800593          	li	a1,120
80006abc:	fec42503          	lw	a0,-20(s0)
80006ac0:	3b9010ef          	jal	80008678 <TFT_drawCircle>
		return 1;
80006ac4:	00100793          	li	a5,1
80006ac8:	0c40006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[0] == 'O' && board[4] == 'O' && board[8] == 'O')
80006acc:	fe842783          	lw	a5,-24(s0)
80006ad0:	0007c703          	lbu	a4,0(a5)
80006ad4:	04f00793          	li	a5,79
80006ad8:	04f71863          	bne	a4,a5,80006b28 <check_winner+0x70c>
80006adc:	fe842783          	lw	a5,-24(s0)
80006ae0:	00478793          	addi	a5,a5,4
80006ae4:	0007c703          	lbu	a4,0(a5)
80006ae8:	04f00793          	li	a5,79
80006aec:	02f71e63          	bne	a4,a5,80006b28 <check_winner+0x70c>
80006af0:	fe842783          	lw	a5,-24(s0)
80006af4:	00878793          	addi	a5,a5,8
80006af8:	0007c703          	lbu	a4,0(a5)
80006afc:	04f00793          	li	a5,79
80006b00:	02f71463          	bne	a4,a5,80006b28 <check_winner+0x70c>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006b04:	fe042783          	lw	a5,-32(s0)
80006b08:	01f00713          	li	a4,31
80006b0c:	06400693          	li	a3,100
80006b10:	07800613          	li	a2,120
80006b14:	07800593          	li	a1,120
80006b18:	fec42503          	lw	a0,-20(s0)
80006b1c:	35d010ef          	jal	80008678 <TFT_drawCircle>
		return 1;
80006b20:	00100793          	li	a5,1
80006b24:	0680006f          	j	80006b8c <check_winner+0x770>
	}
	else if (board[2] == 'O' && board[4] == 'O' && board[6] == 'O')
80006b28:	fe842783          	lw	a5,-24(s0)
80006b2c:	00278793          	addi	a5,a5,2
80006b30:	0007c703          	lbu	a4,0(a5)
80006b34:	04f00793          	li	a5,79
80006b38:	04f71863          	bne	a4,a5,80006b88 <check_winner+0x76c>
80006b3c:	fe842783          	lw	a5,-24(s0)
80006b40:	00478793          	addi	a5,a5,4
80006b44:	0007c703          	lbu	a4,0(a5)
80006b48:	04f00793          	li	a5,79
80006b4c:	02f71e63          	bne	a4,a5,80006b88 <check_winner+0x76c>
80006b50:	fe842783          	lw	a5,-24(s0)
80006b54:	00678793          	addi	a5,a5,6
80006b58:	0007c703          	lbu	a4,0(a5)
80006b5c:	04f00793          	li	a5,79
80006b60:	02f71463          	bne	a4,a5,80006b88 <check_winner+0x76c>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006b64:	fe042783          	lw	a5,-32(s0)
80006b68:	01f00713          	li	a4,31
80006b6c:	06400693          	li	a3,100
80006b70:	07800613          	li	a2,120
80006b74:	07800593          	li	a1,120
80006b78:	fec42503          	lw	a0,-20(s0)
80006b7c:	2fd010ef          	jal	80008678 <TFT_drawCircle>
		return 1;
80006b80:	00100793          	li	a5,1
80006b84:	0080006f          	j	80006b8c <check_winner+0x770>
	}

	return 0;
80006b88:	00000793          	li	a5,0
}
80006b8c:	00078513          	mv	a0,a5
80006b90:	01c12083          	lw	ra,28(sp)
80006b94:	01812403          	lw	s0,24(sp)
80006b98:	02010113          	addi	sp,sp,32
80006b9c:	00008067          	ret

80006ba0 <AIcheck_winner>:


uint8_t AIcheck_winner(char board[], uint8_t player)
{
80006ba0:	fe010113          	addi	sp,sp,-32
80006ba4:	00812e23          	sw	s0,28(sp)
80006ba8:	02010413          	addi	s0,sp,32
80006bac:	fea42623          	sw	a0,-20(s0)
80006bb0:	00058793          	mv	a5,a1
80006bb4:	fef405a3          	sb	a5,-21(s0)
	if (board[0] == 'X' && board[3] == 'X' && board[6] == 'X')
80006bb8:	fec42783          	lw	a5,-20(s0)
80006bbc:	0007c703          	lbu	a4,0(a5)
80006bc0:	05800793          	li	a5,88
80006bc4:	02f71a63          	bne	a4,a5,80006bf8 <AIcheck_winner+0x58>
80006bc8:	fec42783          	lw	a5,-20(s0)
80006bcc:	00378793          	addi	a5,a5,3
80006bd0:	0007c703          	lbu	a4,0(a5)
80006bd4:	05800793          	li	a5,88
80006bd8:	02f71063          	bne	a4,a5,80006bf8 <AIcheck_winner+0x58>
80006bdc:	fec42783          	lw	a5,-20(s0)
80006be0:	00678793          	addi	a5,a5,6
80006be4:	0007c703          	lbu	a4,0(a5)
80006be8:	05800793          	li	a5,88
80006bec:	00f71663          	bne	a4,a5,80006bf8 <AIcheck_winner+0x58>
	{
    	return 1;
80006bf0:	00100793          	li	a5,1
80006bf4:	3f00006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[1] == 'X' && board[4] == 'X' && board[7] == 'X')
80006bf8:	fec42783          	lw	a5,-20(s0)
80006bfc:	00178793          	addi	a5,a5,1
80006c00:	0007c703          	lbu	a4,0(a5)
80006c04:	05800793          	li	a5,88
80006c08:	02f71a63          	bne	a4,a5,80006c3c <AIcheck_winner+0x9c>
80006c0c:	fec42783          	lw	a5,-20(s0)
80006c10:	00478793          	addi	a5,a5,4
80006c14:	0007c703          	lbu	a4,0(a5)
80006c18:	05800793          	li	a5,88
80006c1c:	02f71063          	bne	a4,a5,80006c3c <AIcheck_winner+0x9c>
80006c20:	fec42783          	lw	a5,-20(s0)
80006c24:	00778793          	addi	a5,a5,7
80006c28:	0007c703          	lbu	a4,0(a5)
80006c2c:	05800793          	li	a5,88
80006c30:	00f71663          	bne	a4,a5,80006c3c <AIcheck_winner+0x9c>
	{
	    return 1;
80006c34:	00100793          	li	a5,1
80006c38:	3ac0006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[2] == 'X' && board[5] == 'X' && board[8] == 'X')
80006c3c:	fec42783          	lw	a5,-20(s0)
80006c40:	00278793          	addi	a5,a5,2
80006c44:	0007c703          	lbu	a4,0(a5)
80006c48:	05800793          	li	a5,88
80006c4c:	02f71a63          	bne	a4,a5,80006c80 <AIcheck_winner+0xe0>
80006c50:	fec42783          	lw	a5,-20(s0)
80006c54:	00578793          	addi	a5,a5,5
80006c58:	0007c703          	lbu	a4,0(a5)
80006c5c:	05800793          	li	a5,88
80006c60:	02f71063          	bne	a4,a5,80006c80 <AIcheck_winner+0xe0>
80006c64:	fec42783          	lw	a5,-20(s0)
80006c68:	00878793          	addi	a5,a5,8
80006c6c:	0007c703          	lbu	a4,0(a5)
80006c70:	05800793          	li	a5,88
80006c74:	00f71663          	bne	a4,a5,80006c80 <AIcheck_winner+0xe0>
	{
    	return 1;
80006c78:	00100793          	li	a5,1
80006c7c:	3680006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[0] == 'X' && board[1] == 'X' && board[2] == 'X')
80006c80:	fec42783          	lw	a5,-20(s0)
80006c84:	0007c703          	lbu	a4,0(a5)
80006c88:	05800793          	li	a5,88
80006c8c:	02f71a63          	bne	a4,a5,80006cc0 <AIcheck_winner+0x120>
80006c90:	fec42783          	lw	a5,-20(s0)
80006c94:	00178793          	addi	a5,a5,1
80006c98:	0007c703          	lbu	a4,0(a5)
80006c9c:	05800793          	li	a5,88
80006ca0:	02f71063          	bne	a4,a5,80006cc0 <AIcheck_winner+0x120>
80006ca4:	fec42783          	lw	a5,-20(s0)
80006ca8:	00278793          	addi	a5,a5,2
80006cac:	0007c703          	lbu	a4,0(a5)
80006cb0:	05800793          	li	a5,88
80006cb4:	00f71663          	bne	a4,a5,80006cc0 <AIcheck_winner+0x120>
	{
	    return 1;
80006cb8:	00100793          	li	a5,1
80006cbc:	3280006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[3] == 'X' && board[4] == 'X' && board[5] == 'X')
80006cc0:	fec42783          	lw	a5,-20(s0)
80006cc4:	00378793          	addi	a5,a5,3
80006cc8:	0007c703          	lbu	a4,0(a5)
80006ccc:	05800793          	li	a5,88
80006cd0:	02f71a63          	bne	a4,a5,80006d04 <AIcheck_winner+0x164>
80006cd4:	fec42783          	lw	a5,-20(s0)
80006cd8:	00478793          	addi	a5,a5,4
80006cdc:	0007c703          	lbu	a4,0(a5)
80006ce0:	05800793          	li	a5,88
80006ce4:	02f71063          	bne	a4,a5,80006d04 <AIcheck_winner+0x164>
80006ce8:	fec42783          	lw	a5,-20(s0)
80006cec:	00578793          	addi	a5,a5,5
80006cf0:	0007c703          	lbu	a4,0(a5)
80006cf4:	05800793          	li	a5,88
80006cf8:	00f71663          	bne	a4,a5,80006d04 <AIcheck_winner+0x164>
	{
	    return 1;
80006cfc:	00100793          	li	a5,1
80006d00:	2e40006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[6] == 'X' && board[7] == 'X' && board[8] == 'X')
80006d04:	fec42783          	lw	a5,-20(s0)
80006d08:	00678793          	addi	a5,a5,6
80006d0c:	0007c703          	lbu	a4,0(a5)
80006d10:	05800793          	li	a5,88
80006d14:	02f71a63          	bne	a4,a5,80006d48 <AIcheck_winner+0x1a8>
80006d18:	fec42783          	lw	a5,-20(s0)
80006d1c:	00778793          	addi	a5,a5,7
80006d20:	0007c703          	lbu	a4,0(a5)
80006d24:	05800793          	li	a5,88
80006d28:	02f71063          	bne	a4,a5,80006d48 <AIcheck_winner+0x1a8>
80006d2c:	fec42783          	lw	a5,-20(s0)
80006d30:	00878793          	addi	a5,a5,8
80006d34:	0007c703          	lbu	a4,0(a5)
80006d38:	05800793          	li	a5,88
80006d3c:	00f71663          	bne	a4,a5,80006d48 <AIcheck_winner+0x1a8>
	{
		return 1;
80006d40:	00100793          	li	a5,1
80006d44:	2a00006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[0] == 'X' && board[4] == 'X' && board[8] == 'X')
80006d48:	fec42783          	lw	a5,-20(s0)
80006d4c:	0007c703          	lbu	a4,0(a5)
80006d50:	05800793          	li	a5,88
80006d54:	02f71a63          	bne	a4,a5,80006d88 <AIcheck_winner+0x1e8>
80006d58:	fec42783          	lw	a5,-20(s0)
80006d5c:	00478793          	addi	a5,a5,4
80006d60:	0007c703          	lbu	a4,0(a5)
80006d64:	05800793          	li	a5,88
80006d68:	02f71063          	bne	a4,a5,80006d88 <AIcheck_winner+0x1e8>
80006d6c:	fec42783          	lw	a5,-20(s0)
80006d70:	00878793          	addi	a5,a5,8
80006d74:	0007c703          	lbu	a4,0(a5)
80006d78:	05800793          	li	a5,88
80006d7c:	00f71663          	bne	a4,a5,80006d88 <AIcheck_winner+0x1e8>
	{
		return 1;
80006d80:	00100793          	li	a5,1
80006d84:	2600006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[2] == 'X' && board[4] == 'X' && board[6] == 'X')
80006d88:	fec42783          	lw	a5,-20(s0)
80006d8c:	00278793          	addi	a5,a5,2
80006d90:	0007c703          	lbu	a4,0(a5)
80006d94:	05800793          	li	a5,88
80006d98:	02f71a63          	bne	a4,a5,80006dcc <AIcheck_winner+0x22c>
80006d9c:	fec42783          	lw	a5,-20(s0)
80006da0:	00478793          	addi	a5,a5,4
80006da4:	0007c703          	lbu	a4,0(a5)
80006da8:	05800793          	li	a5,88
80006dac:	02f71063          	bne	a4,a5,80006dcc <AIcheck_winner+0x22c>
80006db0:	fec42783          	lw	a5,-20(s0)
80006db4:	00678793          	addi	a5,a5,6
80006db8:	0007c703          	lbu	a4,0(a5)
80006dbc:	05800793          	li	a5,88
80006dc0:	00f71663          	bne	a4,a5,80006dcc <AIcheck_winner+0x22c>
	{
		return 1;
80006dc4:	00100793          	li	a5,1
80006dc8:	21c0006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[0] == 'O' && board[3] == 'O' && board[6] == 'O')
80006dcc:	fec42783          	lw	a5,-20(s0)
80006dd0:	0007c703          	lbu	a4,0(a5)
80006dd4:	04f00793          	li	a5,79
80006dd8:	02f71a63          	bne	a4,a5,80006e0c <AIcheck_winner+0x26c>
80006ddc:	fec42783          	lw	a5,-20(s0)
80006de0:	00378793          	addi	a5,a5,3
80006de4:	0007c703          	lbu	a4,0(a5)
80006de8:	04f00793          	li	a5,79
80006dec:	02f71063          	bne	a4,a5,80006e0c <AIcheck_winner+0x26c>
80006df0:	fec42783          	lw	a5,-20(s0)
80006df4:	00678793          	addi	a5,a5,6
80006df8:	0007c703          	lbu	a4,0(a5)
80006dfc:	04f00793          	li	a5,79
80006e00:	00f71663          	bne	a4,a5,80006e0c <AIcheck_winner+0x26c>
	{
		return 1;
80006e04:	00100793          	li	a5,1
80006e08:	1dc0006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[1] == 'O' && board[4] == 'O' && board[7] == 'O')
80006e0c:	fec42783          	lw	a5,-20(s0)
80006e10:	00178793          	addi	a5,a5,1
80006e14:	0007c703          	lbu	a4,0(a5)
80006e18:	04f00793          	li	a5,79
80006e1c:	02f71a63          	bne	a4,a5,80006e50 <AIcheck_winner+0x2b0>
80006e20:	fec42783          	lw	a5,-20(s0)
80006e24:	00478793          	addi	a5,a5,4
80006e28:	0007c703          	lbu	a4,0(a5)
80006e2c:	04f00793          	li	a5,79
80006e30:	02f71063          	bne	a4,a5,80006e50 <AIcheck_winner+0x2b0>
80006e34:	fec42783          	lw	a5,-20(s0)
80006e38:	00778793          	addi	a5,a5,7
80006e3c:	0007c703          	lbu	a4,0(a5)
80006e40:	04f00793          	li	a5,79
80006e44:	00f71663          	bne	a4,a5,80006e50 <AIcheck_winner+0x2b0>
	{
		return 1;
80006e48:	00100793          	li	a5,1
80006e4c:	1980006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[2] == 'O' && board[5] == 'O' && board[8] == 'O')
80006e50:	fec42783          	lw	a5,-20(s0)
80006e54:	00278793          	addi	a5,a5,2
80006e58:	0007c703          	lbu	a4,0(a5)
80006e5c:	04f00793          	li	a5,79
80006e60:	02f71a63          	bne	a4,a5,80006e94 <AIcheck_winner+0x2f4>
80006e64:	fec42783          	lw	a5,-20(s0)
80006e68:	00578793          	addi	a5,a5,5
80006e6c:	0007c703          	lbu	a4,0(a5)
80006e70:	04f00793          	li	a5,79
80006e74:	02f71063          	bne	a4,a5,80006e94 <AIcheck_winner+0x2f4>
80006e78:	fec42783          	lw	a5,-20(s0)
80006e7c:	00878793          	addi	a5,a5,8
80006e80:	0007c703          	lbu	a4,0(a5)
80006e84:	04f00793          	li	a5,79
80006e88:	00f71663          	bne	a4,a5,80006e94 <AIcheck_winner+0x2f4>
	{
		return 1;
80006e8c:	00100793          	li	a5,1
80006e90:	1540006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[0] == 'O' && board[1] == 'O' && board[2] == 'O')
80006e94:	fec42783          	lw	a5,-20(s0)
80006e98:	0007c703          	lbu	a4,0(a5)
80006e9c:	04f00793          	li	a5,79
80006ea0:	02f71a63          	bne	a4,a5,80006ed4 <AIcheck_winner+0x334>
80006ea4:	fec42783          	lw	a5,-20(s0)
80006ea8:	00178793          	addi	a5,a5,1
80006eac:	0007c703          	lbu	a4,0(a5)
80006eb0:	04f00793          	li	a5,79
80006eb4:	02f71063          	bne	a4,a5,80006ed4 <AIcheck_winner+0x334>
80006eb8:	fec42783          	lw	a5,-20(s0)
80006ebc:	00278793          	addi	a5,a5,2
80006ec0:	0007c703          	lbu	a4,0(a5)
80006ec4:	04f00793          	li	a5,79
80006ec8:	00f71663          	bne	a4,a5,80006ed4 <AIcheck_winner+0x334>
	{
		return 1;
80006ecc:	00100793          	li	a5,1
80006ed0:	1140006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[3] == 'O' && board[4] == 'O' && board[5] == 'O')
80006ed4:	fec42783          	lw	a5,-20(s0)
80006ed8:	00378793          	addi	a5,a5,3
80006edc:	0007c703          	lbu	a4,0(a5)
80006ee0:	04f00793          	li	a5,79
80006ee4:	02f71a63          	bne	a4,a5,80006f18 <AIcheck_winner+0x378>
80006ee8:	fec42783          	lw	a5,-20(s0)
80006eec:	00478793          	addi	a5,a5,4
80006ef0:	0007c703          	lbu	a4,0(a5)
80006ef4:	04f00793          	li	a5,79
80006ef8:	02f71063          	bne	a4,a5,80006f18 <AIcheck_winner+0x378>
80006efc:	fec42783          	lw	a5,-20(s0)
80006f00:	00578793          	addi	a5,a5,5
80006f04:	0007c703          	lbu	a4,0(a5)
80006f08:	04f00793          	li	a5,79
80006f0c:	00f71663          	bne	a4,a5,80006f18 <AIcheck_winner+0x378>
	{
		return 1;
80006f10:	00100793          	li	a5,1
80006f14:	0d00006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[6] == 'O' && board[7] == 'O' && board[8] == 'O')
80006f18:	fec42783          	lw	a5,-20(s0)
80006f1c:	00678793          	addi	a5,a5,6
80006f20:	0007c703          	lbu	a4,0(a5)
80006f24:	04f00793          	li	a5,79
80006f28:	02f71a63          	bne	a4,a5,80006f5c <AIcheck_winner+0x3bc>
80006f2c:	fec42783          	lw	a5,-20(s0)
80006f30:	00778793          	addi	a5,a5,7
80006f34:	0007c703          	lbu	a4,0(a5)
80006f38:	04f00793          	li	a5,79
80006f3c:	02f71063          	bne	a4,a5,80006f5c <AIcheck_winner+0x3bc>
80006f40:	fec42783          	lw	a5,-20(s0)
80006f44:	00878793          	addi	a5,a5,8
80006f48:	0007c703          	lbu	a4,0(a5)
80006f4c:	04f00793          	li	a5,79
80006f50:	00f71663          	bne	a4,a5,80006f5c <AIcheck_winner+0x3bc>
	{
		return 1;
80006f54:	00100793          	li	a5,1
80006f58:	08c0006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[0] == 'O' && board[4] == 'O' && board[8] == 'O')
80006f5c:	fec42783          	lw	a5,-20(s0)
80006f60:	0007c703          	lbu	a4,0(a5)
80006f64:	04f00793          	li	a5,79
80006f68:	02f71a63          	bne	a4,a5,80006f9c <AIcheck_winner+0x3fc>
80006f6c:	fec42783          	lw	a5,-20(s0)
80006f70:	00478793          	addi	a5,a5,4
80006f74:	0007c703          	lbu	a4,0(a5)
80006f78:	04f00793          	li	a5,79
80006f7c:	02f71063          	bne	a4,a5,80006f9c <AIcheck_winner+0x3fc>
80006f80:	fec42783          	lw	a5,-20(s0)
80006f84:	00878793          	addi	a5,a5,8
80006f88:	0007c703          	lbu	a4,0(a5)
80006f8c:	04f00793          	li	a5,79
80006f90:	00f71663          	bne	a4,a5,80006f9c <AIcheck_winner+0x3fc>
	{
		return 1;
80006f94:	00100793          	li	a5,1
80006f98:	04c0006f          	j	80006fe4 <AIcheck_winner+0x444>
	}
	else if (board[2] == 'O' && board[4] == 'O' && board[6] == 'O')
80006f9c:	fec42783          	lw	a5,-20(s0)
80006fa0:	00278793          	addi	a5,a5,2
80006fa4:	0007c703          	lbu	a4,0(a5)
80006fa8:	04f00793          	li	a5,79
80006fac:	02f71a63          	bne	a4,a5,80006fe0 <AIcheck_winner+0x440>
80006fb0:	fec42783          	lw	a5,-20(s0)
80006fb4:	00478793          	addi	a5,a5,4
80006fb8:	0007c703          	lbu	a4,0(a5)
80006fbc:	04f00793          	li	a5,79
80006fc0:	02f71063          	bne	a4,a5,80006fe0 <AIcheck_winner+0x440>
80006fc4:	fec42783          	lw	a5,-20(s0)
80006fc8:	00678793          	addi	a5,a5,6
80006fcc:	0007c703          	lbu	a4,0(a5)
80006fd0:	04f00793          	li	a5,79
80006fd4:	00f71663          	bne	a4,a5,80006fe0 <AIcheck_winner+0x440>
	{
		return 1;
80006fd8:	00100793          	li	a5,1
80006fdc:	0080006f          	j	80006fe4 <AIcheck_winner+0x444>
	}

return 0;
80006fe0:	00000793          	li	a5,0
}
80006fe4:	00078513          	mv	a0,a5
80006fe8:	01c12403          	lw	s0,28(sp)
80006fec:	02010113          	addi	sp,sp,32
80006ff0:	00008067          	ret

80006ff4 <gameMenu>:
gameMenu
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
80006ff4:	fd010113          	addi	sp,sp,-48
80006ff8:	02112623          	sw	ra,44(sp)
80006ffc:	02812423          	sw	s0,40(sp)
80007000:	03010413          	addi	s0,sp,48
80007004:	fca42e23          	sw	a0,-36(s0)
80007008:	fcb42c23          	sw	a1,-40(s0)
	TFT_fillScreen(this_spi, this_gpio, ILI9341_WHITE);
8000700c:	000107b7          	lui	a5,0x10
80007010:	fff78613          	addi	a2,a5,-1 # ffff <_start-0x7fff0001>
80007014:	fd842583          	lw	a1,-40(s0)
80007018:	fdc42503          	lw	a0,-36(s0)
8000701c:	7cd000ef          	jal	80007fe8 <TFT_fillScreen>
	for (volatile uint16_t t=0x00;t <0xFF; t ++ );
80007020:	fe041323          	sh	zero,-26(s0)
80007024:	0200006f          	j	80007044 <gameMenu+0x50>
80007028:	fe645783          	lhu	a5,-26(s0)
8000702c:	01079793          	slli	a5,a5,0x10
80007030:	0107d793          	srli	a5,a5,0x10
80007034:	00178793          	addi	a5,a5,1
80007038:	01079793          	slli	a5,a5,0x10
8000703c:	0107d793          	srli	a5,a5,0x10
80007040:	fef41323          	sh	a5,-26(s0)
80007044:	fe645783          	lhu	a5,-26(s0)
80007048:	01079713          	slli	a4,a5,0x10
8000704c:	01075713          	srli	a4,a4,0x10
80007050:	0fe00793          	li	a5,254
80007054:	fce7fae3          	bleu	a4,a5,80007028 <gameMenu+0x34>
	TFT_fastVLine(this_spi, 120, 0, 320, ILI9341_BLACK, this_gpio);
80007058:	fd842783          	lw	a5,-40(s0)
8000705c:	00000713          	li	a4,0
80007060:	14000693          	li	a3,320
80007064:	00000613          	li	a2,0
80007068:	07800593          	li	a1,120
8000706c:	fdc42503          	lw	a0,-36(s0)
80007070:	1e4010ef          	jal	80008254 <TFT_fastVLine>
	TFT_fillrect(this_spi, 160,140, 40, 40,this_gpio,ILI9341_RED);
80007074:	000107b7          	lui	a5,0x10
80007078:	80078813          	addi	a6,a5,-2048 # f800 <_start-0x7fff0800>
8000707c:	fd842783          	lw	a5,-40(s0)
80007080:	02800713          	li	a4,40
80007084:	02800693          	li	a3,40
80007088:	08c00613          	li	a2,140
8000708c:	0a000593          	li	a1,160
80007090:	fdc42503          	lw	a0,-36(s0)
80007094:	5b9000ef          	jal	80007e4c <TFT_fillrect>
	TFT_fillrect(this_spi, 60,110, 40, 40,this_gpio,ILI9341_RED);
80007098:	000107b7          	lui	a5,0x10
8000709c:	80078813          	addi	a6,a5,-2048 # f800 <_start-0x7fff0800>
800070a0:	fd842783          	lw	a5,-40(s0)
800070a4:	02800713          	li	a4,40
800070a8:	02800693          	li	a3,40
800070ac:	06e00613          	li	a2,110
800070b0:	03c00593          	li	a1,60
800070b4:	fdc42503          	lw	a0,-36(s0)
800070b8:	595000ef          	jal	80007e4c <TFT_fillrect>
	TFT_fillrect(this_spi, 60,170, 40, 40,this_gpio,ILI9341_RED);
800070bc:	000107b7          	lui	a5,0x10
800070c0:	80078813          	addi	a6,a5,-2048 # f800 <_start-0x7fff0800>
800070c4:	fd842783          	lw	a5,-40(s0)
800070c8:	02800713          	li	a4,40
800070cc:	02800693          	li	a3,40
800070d0:	0aa00613          	li	a2,170
800070d4:	03c00593          	li	a1,60
800070d8:	fdc42503          	lw	a0,-36(s0)
800070dc:	571000ef          	jal	80007e4c <TFT_fillrect>
	uint16_t x, y;
	uint8_t z;
	uint8_t game = 0;
800070e0:	fe0407a3          	sb	zero,-17(s0)
	while(game == 0)
800070e4:	0dc0006f          	j	800071c0 <gameMenu+0x1cc>
	{
		if ( ((TS_readRegister8(this_spi, this_gpio,STMPE_TSC_CTRL) ) & 0x80))
800070e8:	04000613          	li	a2,64
800070ec:	fd842583          	lw	a1,-40(s0)
800070f0:	fdc42503          	lw	a0,-36(s0)
800070f4:	2f0000ef          	jal	800073e4 <TS_readRegister8>
800070f8:	00050793          	mv	a5,a0
800070fc:	01879793          	slli	a5,a5,0x18
80007100:	4187d793          	srai	a5,a5,0x18
80007104:	0a07de63          	bgez	a5,800071c0 <gameMenu+0x1cc>
		{
			TS_readData( this_spi, this_gpio, &x, &y, &z);
80007108:	fe940713          	addi	a4,s0,-23
8000710c:	fea40693          	addi	a3,s0,-22
80007110:	fec40793          	addi	a5,s0,-20
80007114:	00078613          	mv	a2,a5
80007118:	fd842583          	lw	a1,-40(s0)
8000711c:	fdc42503          	lw	a0,-36(s0)
80007120:	46c000ef          	jal	8000758c <TS_readData>
			x = map( x, TS_MINX, TS_MAXX, 0, TFT_WIDTH);
80007124:	fec45503          	lhu	a0,-20(s0)
80007128:	0f000713          	li	a4,240
8000712c:	00000693          	li	a3,0
80007130:	000017b7          	lui	a5,0x1
80007134:	ed878613          	addi	a2,a5,-296 # ed8 <_start-0x7ffff128>
80007138:	09600593          	li	a1,150
8000713c:	9f0ff0ef          	jal	8000632c <map>
80007140:	00050793          	mv	a5,a0
80007144:	01079793          	slli	a5,a5,0x10
80007148:	0107d793          	srli	a5,a5,0x10
8000714c:	fef41623          	sh	a5,-20(s0)
			y = map( y, TS_MINY, TS_MAXY, 0, TFT_HEIGHT);
80007150:	fea45503          	lhu	a0,-22(s0)
80007154:	14000713          	li	a4,320
80007158:	00000693          	li	a3,0
8000715c:	000017b7          	lui	a5,0x1
80007160:	fa078613          	addi	a2,a5,-96 # fa0 <_start-0x7ffff060>
80007164:	08200593          	li	a1,130
80007168:	9c4ff0ef          	jal	8000632c <map>
8000716c:	00050793          	mv	a5,a0
80007170:	01079793          	slli	a5,a5,0x10
80007174:	0107d793          	srli	a5,a5,0x10
80007178:	fef41523          	sh	a5,-22(s0)

			if (x <120)
8000717c:	fec45703          	lhu	a4,-20(s0)
80007180:	07700793          	li	a5,119
80007184:	00e7ee63          	bltu	a5,a4,800071a0 <gameMenu+0x1ac>
			{
				game = 1;
80007188:	00100793          	li	a5,1
8000718c:	fef407a3          	sb	a5,-17(s0)
				twoPlayerMode(this_spi, this_gpio);
80007190:	fd842583          	lw	a1,-40(s0)
80007194:	fdc42503          	lw	a0,-36(s0)
80007198:	ac8fe0ef          	jal	80005460 <twoPlayerMode>
8000719c:	0240006f          	j	800071c0 <gameMenu+0x1cc>
			}
			else if (x > 120)
800071a0:	fec45703          	lhu	a4,-20(s0)
800071a4:	07800793          	li	a5,120
800071a8:	00e7fc63          	bleu	a4,a5,800071c0 <gameMenu+0x1cc>
			{
				game = 1;
800071ac:	00100793          	li	a5,1
800071b0:	fef407a3          	sb	a5,-17(s0)
				singlePlayerMode(this_spi, this_gpio);
800071b4:	fd842583          	lw	a1,-40(s0)
800071b8:	fdc42503          	lw	a0,-36(s0)
800071bc:	fb9fc0ef          	jal	80004174 <singlePlayerMode>
	while(game == 0)
800071c0:	fef44783          	lbu	a5,-17(s0)
800071c4:	f20782e3          	beqz	a5,800070e8 <gameMenu+0xf4>
			}
		}
	}
}
800071c8:	00000013          	nop
800071cc:	02c12083          	lw	ra,44(sp)
800071d0:	02812403          	lw	s0,40(sp)
800071d4:	03010113          	addi	sp,sp,48
800071d8:	00008067          	ret

800071dc <TS_begin>:
TS_begin
(
	spi_instance_t *  this_spi,
	gpio_instance_t * this_gpio
)
{
800071dc:	fd010113          	addi	sp,sp,-48
800071e0:	02112623          	sw	ra,44(sp)
800071e4:	02812423          	sw	s0,40(sp)
800071e8:	03010413          	addi	s0,sp,48
800071ec:	fca42e23          	sw	a0,-36(s0)
800071f0:	fcb42c23          	sw	a1,-40(s0)
	TS_writeRegister8( this_spi, this_gpio , STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
800071f4:	00200693          	li	a3,2
800071f8:	00300613          	li	a2,3
800071fc:	fd842583          	lw	a1,-40(s0)
80007200:	fdc42503          	lw	a0,-36(s0)
80007204:	288000ef          	jal	8000748c <TS_writeRegister8>
	for(volatile uint32_t delay =0; delay < 0xFFF; delay++);
80007208:	fe042423          	sw	zero,-24(s0)
8000720c:	0100006f          	j	8000721c <TS_begin+0x40>
80007210:	fe842783          	lw	a5,-24(s0)
80007214:	00178793          	addi	a5,a5,1
80007218:	fef42423          	sw	a5,-24(s0)
8000721c:	fe842703          	lw	a4,-24(s0)
80007220:	000017b7          	lui	a5,0x1
80007224:	ffe78793          	addi	a5,a5,-2 # ffe <_start-0x7ffff002>
80007228:	fee7f4e3          	bleu	a4,a5,80007210 <TS_begin+0x34>
	//uint8_t readData = 0;
	for(uint8_t loop =0; loop <65; loop++)
8000722c:	fe0407a3          	sb	zero,-17(s0)
80007230:	0240006f          	j	80007254 <TS_begin+0x78>
	{
		TS_readRegister8(  this_spi,  this_gpio ,  loop);
80007234:	fef44783          	lbu	a5,-17(s0)
80007238:	00078613          	mv	a2,a5
8000723c:	fd842583          	lw	a1,-40(s0)
80007240:	fdc42503          	lw	a0,-36(s0)
80007244:	1a0000ef          	jal	800073e4 <TS_readRegister8>
	for(uint8_t loop =0; loop <65; loop++)
80007248:	fef44783          	lbu	a5,-17(s0)
8000724c:	00178793          	addi	a5,a5,1
80007250:	fef407a3          	sb	a5,-17(s0)
80007254:	fef44703          	lbu	a4,-17(s0)
80007258:	04000793          	li	a5,64
8000725c:	fce7fce3          	bleu	a4,a5,80007234 <TS_begin+0x58>
	}
	TS_writeRegister8(this_spi, this_gpio ,STMPE_SYS_CTRL2, 0x0); // turn on clocks!
80007260:	00000693          	li	a3,0
80007264:	00400613          	li	a2,4
80007268:	fd842583          	lw	a1,-40(s0)
8000726c:	fdc42503          	lw	a0,-36(s0)
80007270:	21c000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_TSC_CTRL, (STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN)); // XYZ and enable!
80007274:	00100693          	li	a3,1
80007278:	04000613          	li	a2,64
8000727c:	fd842583          	lw	a1,-40(s0)
80007280:	fdc42503          	lw	a0,-36(s0)
80007284:	208000ef          	jal	8000748c <TS_writeRegister8>
	  //Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	TS_readRegister8(this_spi, this_gpio, STMPE_TSC_CTRL);
80007288:	04000613          	li	a2,64
8000728c:	fd842583          	lw	a1,-40(s0)
80007290:	fdc42503          	lw	a0,-36(s0)
80007294:	150000ef          	jal	800073e4 <TS_readRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
80007298:	00100693          	li	a3,1
8000729c:	00a00613          	li	a2,10
800072a0:	fd842583          	lw	a1,-40(s0)
800072a4:	fdc42503          	lw	a0,-36(s0)
800072a8:	1e4000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_ADC_CTRL1, (STMPE_ADC_CTRL1_10BIT | (0x6 << 4))); // 96 clocks per conversion
800072ac:	06000693          	li	a3,96
800072b0:	02000613          	li	a2,32
800072b4:	fd842583          	lw	a1,-40(s0)
800072b8:	fdc42503          	lw	a0,-36(s0)
800072bc:	1d0000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
800072c0:	00200693          	li	a3,2
800072c4:	02100613          	li	a2,33
800072c8:	fd842583          	lw	a1,-40(s0)
800072cc:	fdc42503          	lw	a0,-36(s0)
800072d0:	1bc000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_TSC_CFG, (STMPE_TSC_CFG_4SAMPLE | STMPE_TSC_CFG_DELAY_1MS | STMPE_TSC_CFG_SETTLE_5MS));
800072d4:	0a400693          	li	a3,164
800072d8:	04100613          	li	a2,65
800072dc:	fd842583          	lw	a1,-40(s0)
800072e0:	fdc42503          	lw	a0,-36(s0)
800072e4:	1a8000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_TSC_FRACTION_Z, 0x6);
800072e8:	00600693          	li	a3,6
800072ec:	05600613          	li	a2,86
800072f0:	fd842583          	lw	a1,-40(s0)
800072f4:	fdc42503          	lw	a0,-36(s0)
800072f8:	194000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_FIFO_TH, 1);
800072fc:	00100693          	li	a3,1
80007300:	04a00613          	li	a2,74
80007304:	fd842583          	lw	a1,-40(s0)
80007308:	fdc42503          	lw	a0,-36(s0)
8000730c:	180000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
80007310:	00100693          	li	a3,1
80007314:	04b00613          	li	a2,75
80007318:	fd842583          	lw	a1,-40(s0)
8000731c:	fdc42503          	lw	a0,-36(s0)
80007320:	16c000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_FIFO_STA, 0);    // unreset
80007324:	00000693          	li	a3,0
80007328:	04b00613          	li	a2,75
8000732c:	fd842583          	lw	a1,-40(s0)
80007330:	fdc42503          	lw	a0,-36(s0)
80007334:	158000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_20MA);
80007338:	00000693          	li	a3,0
8000733c:	05800613          	li	a2,88
80007340:	fd842583          	lw	a1,-40(s0)
80007344:	fdc42503          	lw	a0,-36(s0)
80007348:	144000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_INT_STA, 0xFF); // reset all ints
8000734c:	0ff00693          	li	a3,255
80007350:	00b00613          	li	a2,11
80007354:	fd842583          	lw	a1,-40(s0)
80007358:	fdc42503          	lw	a0,-36(s0)
8000735c:	130000ef          	jal	8000748c <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_INT_CTRL, STMPE_INT_CTRL_POL_HIGH | STMPE_INT_CTRL_ENABLE);
80007360:	00500693          	li	a3,5
80007364:	00900613          	li	a2,9
80007368:	fd842583          	lw	a1,-40(s0)
8000736c:	fdc42503          	lw	a0,-36(s0)
80007370:	11c000ef          	jal	8000748c <TS_writeRegister8>
}
80007374:	00000013          	nop
80007378:	02c12083          	lw	ra,44(sp)
8000737c:	02812403          	lw	s0,40(sp)
80007380:	03010113          	addi	sp,sp,48
80007384:	00008067          	ret

80007388 <TS_write>:
(
	spi_instance_t * this_spi,
	uint8_t data_bits,
	gpio_instance_t * this_gpio
)
{
80007388:	fe010113          	addi	sp,sp,-32
8000738c:	00112e23          	sw	ra,28(sp)
80007390:	00812c23          	sw	s0,24(sp)
80007394:	02010413          	addi	s0,sp,32
80007398:	fea42623          	sw	a0,-20(s0)
8000739c:	00058793          	mv	a5,a1
800073a0:	fec42223          	sw	a2,-28(s0)
800073a4:	fef405a3          	sb	a5,-21(s0)
	* Selects SPI slave 0
	* transfers data passed in to spi device
	* deselets SPI slave 0
	*/
	//GPIO_set_output( this_gpio, GPIO_5, 0 ); // Chip Select Signal TS
	SPI_set_slave_select(this_spi, SPI_SLAVE_1); // check this is the TS
800073a8:	00100593          	li	a1,1
800073ac:	fec42503          	lw	a0,-20(s0)
800073b0:	ef8fa0ef          	jal	80001aa8 <SPI_set_slave_select>
	SPI_transfer_frame(this_spi, data_bits);
800073b4:	feb44783          	lbu	a5,-21(s0)
800073b8:	00078593          	mv	a1,a5
800073bc:	fec42503          	lw	a0,-20(s0)
800073c0:	8adfa0ef          	jal	80001c6c <SPI_transfer_frame>
	SPI_clear_slave_select(this_spi, SPI_SLAVE_1);// check this is the TS
800073c4:	00100593          	li	a1,1
800073c8:	fec42503          	lw	a0,-20(s0)
800073cc:	fbcfa0ef          	jal	80001b88 <SPI_clear_slave_select>
	//GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal TS
}
800073d0:	00000013          	nop
800073d4:	01c12083          	lw	ra,28(sp)
800073d8:	01812403          	lw	s0,24(sp)
800073dc:	02010113          	addi	sp,sp,32
800073e0:	00008067          	ret

800073e4 <TS_readRegister8>:
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	uint8_t addr
)
{
800073e4:	fd010113          	addi	sp,sp,-48
800073e8:	02112623          	sw	ra,44(sp)
800073ec:	02812423          	sw	s0,40(sp)
800073f0:	03010413          	addi	s0,sp,48
800073f4:	fca42e23          	sw	a0,-36(s0)
800073f8:	fcb42c23          	sw	a1,-40(s0)
800073fc:	00060793          	mv	a5,a2
80007400:	fcf40ba3          	sb	a5,-41(s0)
    uint8_t master_rx  =0x00;
80007404:	fe0407a3          	sb	zero,-17(s0)
   // uint8_t txdata = 0x00;
    //uint8_t rw_bit = 1;
    //txdata = (rw_bit << 7)|addr;
    GPIO_set_output( this_gpio, GPIO_5, 0 ); // Chip Select Signal TS
80007408:	00000613          	li	a2,0
8000740c:	00500593          	li	a1,5
80007410:	fd842503          	lw	a0,-40(s0)
80007414:	ec8fc0ef          	jal	80003adc <GPIO_set_output>
    SPI_set_slave_select(this_spi, SPI_SLAVE_1);  // check this is the TS
80007418:	00100593          	li	a1,1
8000741c:	fdc42503          	lw	a0,-36(s0)
80007420:	e88fa0ef          	jal	80001aa8 <SPI_set_slave_select>
    master_rx = SPI_transfer_frame( this_spi,(0x80 | addr));// txdata );
80007424:	fd744783          	lbu	a5,-41(s0)
80007428:	f807e793          	ori	a5,a5,-128
8000742c:	0ff7f793          	andi	a5,a5,255
80007430:	00078593          	mv	a1,a5
80007434:	fdc42503          	lw	a0,-36(s0)
80007438:	835fa0ef          	jal	80001c6c <SPI_transfer_frame>
8000743c:	00050793          	mv	a5,a0
80007440:	fef407a3          	sb	a5,-17(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x0 );
80007444:	00000593          	li	a1,0
80007448:	fdc42503          	lw	a0,-36(s0)
8000744c:	821fa0ef          	jal	80001c6c <SPI_transfer_frame>
80007450:	00050793          	mv	a5,a0
80007454:	fef407a3          	sb	a5,-17(s0)
    SPI_clear_slave_select( this_spi, SPI_SLAVE_1 ); // check this is the TS
80007458:	00100593          	li	a1,1
8000745c:	fdc42503          	lw	a0,-36(s0)
80007460:	f28fa0ef          	jal	80001b88 <SPI_clear_slave_select>
    GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal TS
80007464:	00100613          	li	a2,1
80007468:	00500593          	li	a1,5
8000746c:	fd842503          	lw	a0,-40(s0)
80007470:	e6cfc0ef          	jal	80003adc <GPIO_set_output>
    return master_rx;
80007474:	fef44783          	lbu	a5,-17(s0)
}
80007478:	00078513          	mv	a0,a5
8000747c:	02c12083          	lw	ra,44(sp)
80007480:	02812403          	lw	s0,40(sp)
80007484:	03010113          	addi	sp,sp,48
80007488:	00008067          	ret

8000748c <TS_writeRegister8>:
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	uint8_t addr,
	uint8_t data_bits
)
{
8000748c:	fe010113          	addi	sp,sp,-32
80007490:	00112e23          	sw	ra,28(sp)
80007494:	00812c23          	sw	s0,24(sp)
80007498:	02010413          	addi	s0,sp,32
8000749c:	fea42623          	sw	a0,-20(s0)
800074a0:	feb42423          	sw	a1,-24(s0)
800074a4:	00060713          	mv	a4,a2
800074a8:	00068793          	mv	a5,a3
800074ac:	fee403a3          	sb	a4,-25(s0)
800074b0:	fef40323          	sb	a5,-26(s0)
	GPIO_set_output( this_gpio, GPIO_5, 0 ); // Chip Select Signal TS
800074b4:	00000613          	li	a2,0
800074b8:	00500593          	li	a1,5
800074bc:	fe842503          	lw	a0,-24(s0)
800074c0:	e1cfc0ef          	jal	80003adc <GPIO_set_output>
	TS_write( this_spi, addr, this_gpio );
800074c4:	fe744783          	lbu	a5,-25(s0)
800074c8:	fe842603          	lw	a2,-24(s0)
800074cc:	00078593          	mv	a1,a5
800074d0:	fec42503          	lw	a0,-20(s0)
800074d4:	eb5ff0ef          	jal	80007388 <TS_write>
	TS_write( this_spi, data_bits, this_gpio );
800074d8:	fe644783          	lbu	a5,-26(s0)
800074dc:	fe842603          	lw	a2,-24(s0)
800074e0:	00078593          	mv	a1,a5
800074e4:	fec42503          	lw	a0,-20(s0)
800074e8:	ea1ff0ef          	jal	80007388 <TS_write>
    GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal TS
800074ec:	00100613          	li	a2,1
800074f0:	00500593          	li	a1,5
800074f4:	fe842503          	lw	a0,-24(s0)
800074f8:	de4fc0ef          	jal	80003adc <GPIO_set_output>
}
800074fc:	00000013          	nop
80007500:	01c12083          	lw	ra,28(sp)
80007504:	01812403          	lw	s0,24(sp)
80007508:	02010113          	addi	sp,sp,32
8000750c:	00008067          	ret

80007510 <TS_getVersion>:
TS_getVersion
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
80007510:	fd010113          	addi	sp,sp,-48
80007514:	02112623          	sw	ra,44(sp)
80007518:	02812423          	sw	s0,40(sp)
8000751c:	03010413          	addi	s0,sp,48
80007520:	fca42e23          	sw	a0,-36(s0)
80007524:	fcb42c23          	sw	a1,-40(s0)
	uint16_t versionNumber;
    versionNumber = TS_readRegister8( this_spi, this_gpio , 0);
80007528:	00000613          	li	a2,0
8000752c:	fd842583          	lw	a1,-40(s0)
80007530:	fdc42503          	lw	a0,-36(s0)
80007534:	eb1ff0ef          	jal	800073e4 <TS_readRegister8>
80007538:	00050793          	mv	a5,a0
8000753c:	fef41723          	sh	a5,-18(s0)
	versionNumber <<= 8;
80007540:	fee45783          	lhu	a5,-18(s0)
80007544:	00879793          	slli	a5,a5,0x8
80007548:	fef41723          	sh	a5,-18(s0)
	versionNumber |= TS_readRegister8( this_spi, this_gpio , 1);
8000754c:	00100613          	li	a2,1
80007550:	fd842583          	lw	a1,-40(s0)
80007554:	fdc42503          	lw	a0,-36(s0)
80007558:	e8dff0ef          	jal	800073e4 <TS_readRegister8>
8000755c:	00050793          	mv	a5,a0
80007560:	01079713          	slli	a4,a5,0x10
80007564:	01075713          	srli	a4,a4,0x10
80007568:	fee45783          	lhu	a5,-18(s0)
8000756c:	00f767b3          	or	a5,a4,a5
80007570:	fef41723          	sh	a5,-18(s0)
	return versionNumber;
80007574:	fee45783          	lhu	a5,-18(s0)
}
80007578:	00078513          	mv	a0,a5
8000757c:	02c12083          	lw	ra,44(sp)
80007580:	02812403          	lw	s0,40(sp)
80007584:	03010113          	addi	sp,sp,48
80007588:	00008067          	ret

8000758c <TS_readData>:
	gpio_instance_t * this_gpio,
	uint16_t *x,
	uint16_t *y,
	uint8_t *z
)
{
8000758c:	fc010113          	addi	sp,sp,-64
80007590:	02112e23          	sw	ra,60(sp)
80007594:	02812c23          	sw	s0,56(sp)
80007598:	02912a23          	sw	s1,52(sp)
8000759c:	04010413          	addi	s0,sp,64
800075a0:	fca42e23          	sw	a0,-36(s0)
800075a4:	fcb42c23          	sw	a1,-40(s0)
800075a8:	fcc42a23          	sw	a2,-44(s0)
800075ac:	fcd42823          	sw	a3,-48(s0)
800075b0:	fce42623          	sw	a4,-52(s0)
	uint8_t data[4];
	for (uint8_t loop=0;loop<4;loop++)
800075b4:	fe0407a3          	sb	zero,-17(s0)
800075b8:	0380006f          	j	800075f0 <TS_readData+0x64>
	{
		data[loop]= TS_readRegister8 (this_spi, this_gpio, 0xD7);
800075bc:	fef44483          	lbu	s1,-17(s0)
800075c0:	0d700613          	li	a2,215
800075c4:	fd842583          	lw	a1,-40(s0)
800075c8:	fdc42503          	lw	a0,-36(s0)
800075cc:	e19ff0ef          	jal	800073e4 <TS_readRegister8>
800075d0:	00050793          	mv	a5,a0
800075d4:	00078713          	mv	a4,a5
800075d8:	ff040793          	addi	a5,s0,-16
800075dc:	009787b3          	add	a5,a5,s1
800075e0:	fee78c23          	sb	a4,-8(a5)
	for (uint8_t loop=0;loop<4;loop++)
800075e4:	fef44783          	lbu	a5,-17(s0)
800075e8:	00178793          	addi	a5,a5,1
800075ec:	fef407a3          	sb	a5,-17(s0)
800075f0:	fef44703          	lbu	a4,-17(s0)
800075f4:	00300793          	li	a5,3
800075f8:	fce7f2e3          	bleu	a4,a5,800075bc <TS_readData+0x30>
	}
	*x= data[0];
800075fc:	fe844783          	lbu	a5,-24(s0)
80007600:	01079713          	slli	a4,a5,0x10
80007604:	01075713          	srli	a4,a4,0x10
80007608:	fd442783          	lw	a5,-44(s0)
8000760c:	00e79023          	sh	a4,0(a5)
	*x <<= 4;
80007610:	fd442783          	lw	a5,-44(s0)
80007614:	0007d783          	lhu	a5,0(a5)
80007618:	00479793          	slli	a5,a5,0x4
8000761c:	01079713          	slli	a4,a5,0x10
80007620:	01075713          	srli	a4,a4,0x10
80007624:	fd442783          	lw	a5,-44(s0)
80007628:	00e79023          	sh	a4,0(a5)
	*x |= (data[1] >> 4);
8000762c:	fd442783          	lw	a5,-44(s0)
80007630:	0007d703          	lhu	a4,0(a5)
80007634:	fe944783          	lbu	a5,-23(s0)
80007638:	0047d793          	srli	a5,a5,0x4
8000763c:	0ff7f793          	andi	a5,a5,255
80007640:	01079793          	slli	a5,a5,0x10
80007644:	0107d793          	srli	a5,a5,0x10
80007648:	00f767b3          	or	a5,a4,a5
8000764c:	01079713          	slli	a4,a5,0x10
80007650:	01075713          	srli	a4,a4,0x10
80007654:	fd442783          	lw	a5,-44(s0)
80007658:	00e79023          	sh	a4,0(a5)
	*y = data[1] & 0x0F;
8000765c:	fe944783          	lbu	a5,-23(s0)
80007660:	01079793          	slli	a5,a5,0x10
80007664:	0107d793          	srli	a5,a5,0x10
80007668:	00f7f793          	andi	a5,a5,15
8000766c:	01079713          	slli	a4,a5,0x10
80007670:	01075713          	srli	a4,a4,0x10
80007674:	fd042783          	lw	a5,-48(s0)
80007678:	00e79023          	sh	a4,0(a5)
	*y <<= 8;
8000767c:	fd042783          	lw	a5,-48(s0)
80007680:	0007d783          	lhu	a5,0(a5)
80007684:	00879793          	slli	a5,a5,0x8
80007688:	01079713          	slli	a4,a5,0x10
8000768c:	01075713          	srli	a4,a4,0x10
80007690:	fd042783          	lw	a5,-48(s0)
80007694:	00e79023          	sh	a4,0(a5)
	*y |= data[2];
80007698:	fd042783          	lw	a5,-48(s0)
8000769c:	0007d703          	lhu	a4,0(a5)
800076a0:	fea44783          	lbu	a5,-22(s0)
800076a4:	01079793          	slli	a5,a5,0x10
800076a8:	0107d793          	srli	a5,a5,0x10
800076ac:	00f767b3          	or	a5,a4,a5
800076b0:	01079713          	slli	a4,a5,0x10
800076b4:	01075713          	srli	a4,a4,0x10
800076b8:	fd042783          	lw	a5,-48(s0)
800076bc:	00e79023          	sh	a4,0(a5)
	*z = data[3];
800076c0:	feb44703          	lbu	a4,-21(s0)
800076c4:	fcc42783          	lw	a5,-52(s0)
800076c8:	00e78023          	sb	a4,0(a5)
	if( TS_readRegister8(this_spi, this_gpio,STMPE_FIFO_STA)& STMPE_FIFO_STA_EMPTY) // buffer empty?
800076cc:	04b00613          	li	a2,75
800076d0:	fd842583          	lw	a1,-40(s0)
800076d4:	fdc42503          	lw	a0,-36(s0)
800076d8:	d0dff0ef          	jal	800073e4 <TS_readRegister8>
800076dc:	00050793          	mv	a5,a0
800076e0:	0207f793          	andi	a5,a5,32
800076e4:	00078c63          	beqz	a5,800076fc <TS_readData+0x170>
	{
		TS_writeRegister8(this_spi, this_gpio,STMPE_INT_STA, 0xFF);
800076e8:	0ff00693          	li	a3,255
800076ec:	00b00613          	li	a2,11
800076f0:	fd842583          	lw	a1,-40(s0)
800076f4:	fdc42503          	lw	a0,-36(s0)
800076f8:	d95ff0ef          	jal	8000748c <TS_writeRegister8>
	}
}
800076fc:	00000013          	nop
80007700:	03c12083          	lw	ra,60(sp)
80007704:	03812403          	lw	s0,56(sp)
80007708:	03412483          	lw	s1,52(sp)
8000770c:	04010113          	addi	sp,sp,64
80007710:	00008067          	ret

80007714 <TS_touched>:
TS_touched
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
80007714:	fe010113          	addi	sp,sp,-32
80007718:	00112e23          	sw	ra,28(sp)
8000771c:	00812c23          	sw	s0,24(sp)
80007720:	02010413          	addi	s0,sp,32
80007724:	fea42623          	sw	a0,-20(s0)
80007728:	feb42423          	sw	a1,-24(s0)
	return ((TS_readRegister8(this_spi, this_gpio,STMPE_TSC_CTRL) ) & 0x80);
8000772c:	04000613          	li	a2,64
80007730:	fe842583          	lw	a1,-24(s0)
80007734:	fec42503          	lw	a0,-20(s0)
80007738:	cadff0ef          	jal	800073e4 <TS_readRegister8>
8000773c:	00050793          	mv	a5,a0
80007740:	0807f793          	andi	a5,a5,128
}
80007744:	00078513          	mv	a0,a5
80007748:	01c12083          	lw	ra,28(sp)
8000774c:	01812403          	lw	s0,24(sp)
80007750:	02010113          	addi	sp,sp,32
80007754:	00008067          	ret

80007758 <TFT_spiwrite>:
TFT_spiwrite
(
	spi_instance_t * this_spi,
	uint8_t  data_bits
)
{
80007758:	fe010113          	addi	sp,sp,-32
8000775c:	00112e23          	sw	ra,28(sp)
80007760:	00812c23          	sw	s0,24(sp)
80007764:	02010413          	addi	s0,sp,32
80007768:	fea42623          	sw	a0,-20(s0)
8000776c:	00058793          	mv	a5,a1
80007770:	fef405a3          	sb	a5,-21(s0)
   /*
    * Selects SPI slave 0
    * transfers data passed in to spi device
    * deselets SPI slave 0
    */
    SPI_set_slave_select(this_spi, SPI_SLAVE_0);
80007774:	00000593          	li	a1,0
80007778:	fec42503          	lw	a0,-20(s0)
8000777c:	b2cfa0ef          	jal	80001aa8 <SPI_set_slave_select>
    SPI_transfer_frame(this_spi, data_bits);
80007780:	feb44783          	lbu	a5,-21(s0)
80007784:	00078593          	mv	a1,a5
80007788:	fec42503          	lw	a0,-20(s0)
8000778c:	ce0fa0ef          	jal	80001c6c <SPI_transfer_frame>
    SPI_clear_slave_select(this_spi, SPI_SLAVE_0);
80007790:	00000593          	li	a1,0
80007794:	fec42503          	lw	a0,-20(s0)
80007798:	bf0fa0ef          	jal	80001b88 <SPI_clear_slave_select>
}
8000779c:	00000013          	nop
800077a0:	01c12083          	lw	ra,28(sp)
800077a4:	01812403          	lw	s0,24(sp)
800077a8:	02010113          	addi	sp,sp,32
800077ac:	00008067          	ret

800077b0 <TFT_begin>:
TFT_begin
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
800077b0:	fd010113          	addi	sp,sp,-48
800077b4:	02112623          	sw	ra,44(sp)
800077b8:	02812423          	sw	s0,40(sp)
800077bc:	03010413          	addi	s0,sp,48
800077c0:	fca42e23          	sw	a0,-36(s0)
800077c4:	fcb42c23          	sw	a1,-40(s0)
    GPIO_set_output( this_gpio, GPIO_6, 0 ); // ARD RESET
800077c8:	00000613          	li	a2,0
800077cc:	00600593          	li	a1,6
800077d0:	fd842503          	lw	a0,-40(s0)
800077d4:	b08fc0ef          	jal	80003adc <GPIO_set_output>
    for( volatile uint16_t x=0; x<0xfff; x++ ){} /// delay
800077d8:	fe041723          	sh	zero,-18(s0)
800077dc:	0200006f          	j	800077fc <TFT_begin+0x4c>
800077e0:	fee45783          	lhu	a5,-18(s0)
800077e4:	01079793          	slli	a5,a5,0x10
800077e8:	0107d793          	srli	a5,a5,0x10
800077ec:	00178793          	addi	a5,a5,1
800077f0:	01079793          	slli	a5,a5,0x10
800077f4:	0107d793          	srli	a5,a5,0x10
800077f8:	fef41723          	sh	a5,-18(s0)
800077fc:	fee45783          	lhu	a5,-18(s0)
80007800:	01079713          	slli	a4,a5,0x10
80007804:	01075713          	srli	a4,a4,0x10
80007808:	000017b7          	lui	a5,0x1
8000780c:	ffe78793          	addi	a5,a5,-2 # ffe <_start-0x7ffff002>
80007810:	fce7f8e3          	bleu	a4,a5,800077e0 <TFT_begin+0x30>
    GPIO_set_output( this_gpio, GPIO_6, 1 ); // ARD RESET
80007814:	00100613          	li	a2,1
80007818:	00600593          	li	a1,6
8000781c:	fd842503          	lw	a0,-40(s0)
80007820:	abcfc0ef          	jal	80003adc <GPIO_set_output>
    for( volatile uint16_t y=0; y<0xfff; y++ );
80007824:	fe041623          	sh	zero,-20(s0)
80007828:	0200006f          	j	80007848 <TFT_begin+0x98>
8000782c:	fec45783          	lhu	a5,-20(s0)
80007830:	01079793          	slli	a5,a5,0x10
80007834:	0107d793          	srli	a5,a5,0x10
80007838:	00178793          	addi	a5,a5,1
8000783c:	01079793          	slli	a5,a5,0x10
80007840:	0107d793          	srli	a5,a5,0x10
80007844:	fef41623          	sh	a5,-20(s0)
80007848:	fec45783          	lhu	a5,-20(s0)
8000784c:	01079713          	slli	a4,a5,0x10
80007850:	01075713          	srli	a4,a4,0x10
80007854:	000017b7          	lui	a5,0x1
80007858:	ffe78793          	addi	a5,a5,-2 # ffe <_start-0x7ffff002>
8000785c:	fce7f8e3          	bleu	a4,a5,8000782c <TFT_begin+0x7c>
    TFT_writecommand( this_spi, 0xEF, this_gpio );
80007860:	fd842603          	lw	a2,-40(s0)
80007864:	0ef00593          	li	a1,239
80007868:	fdc42503          	lw	a0,-36(s0)
8000786c:	7d4000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x03, this_gpio  );
80007870:	fd842603          	lw	a2,-40(s0)
80007874:	00300593          	li	a1,3
80007878:	fdc42503          	lw	a0,-36(s0)
8000787c:	029000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x80 , this_gpio );
80007880:	fd842603          	lw	a2,-40(s0)
80007884:	08000593          	li	a1,128
80007888:	fdc42503          	lw	a0,-36(s0)
8000788c:	019000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x02, this_gpio  );
80007890:	fd842603          	lw	a2,-40(s0)
80007894:	00200593          	li	a1,2
80007898:	fdc42503          	lw	a0,-36(s0)
8000789c:	009000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, 0xCF, this_gpio );
800078a0:	fd842603          	lw	a2,-40(s0)
800078a4:	0cf00593          	li	a1,207
800078a8:	fdc42503          	lw	a0,-36(s0)
800078ac:	794000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00 , this_gpio );
800078b0:	fd842603          	lw	a2,-40(s0)
800078b4:	00000593          	li	a1,0
800078b8:	fdc42503          	lw	a0,-36(s0)
800078bc:	7e8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0xC1 , this_gpio );
800078c0:	fd842603          	lw	a2,-40(s0)
800078c4:	0c100593          	li	a1,193
800078c8:	fdc42503          	lw	a0,-36(s0)
800078cc:	7d8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x30 , this_gpio );
800078d0:	fd842603          	lw	a2,-40(s0)
800078d4:	03000593          	li	a1,48
800078d8:	fdc42503          	lw	a0,-36(s0)
800078dc:	7c8000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, 0xED, this_gpio );
800078e0:	fd842603          	lw	a2,-40(s0)
800078e4:	0ed00593          	li	a1,237
800078e8:	fdc42503          	lw	a0,-36(s0)
800078ec:	754000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x64 , this_gpio );
800078f0:	fd842603          	lw	a2,-40(s0)
800078f4:	06400593          	li	a1,100
800078f8:	fdc42503          	lw	a0,-36(s0)
800078fc:	7a8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x03 , this_gpio );
80007900:	fd842603          	lw	a2,-40(s0)
80007904:	00300593          	li	a1,3
80007908:	fdc42503          	lw	a0,-36(s0)
8000790c:	798000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x12 , this_gpio );
80007910:	fd842603          	lw	a2,-40(s0)
80007914:	01200593          	li	a1,18
80007918:	fdc42503          	lw	a0,-36(s0)
8000791c:	788000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x81 , this_gpio );
80007920:	fd842603          	lw	a2,-40(s0)
80007924:	08100593          	li	a1,129
80007928:	fdc42503          	lw	a0,-36(s0)
8000792c:	778000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, 0xE8, this_gpio );
80007930:	fd842603          	lw	a2,-40(s0)
80007934:	0e800593          	li	a1,232
80007938:	fdc42503          	lw	a0,-36(s0)
8000793c:	704000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x85 , this_gpio );
80007940:	fd842603          	lw	a2,-40(s0)
80007944:	08500593          	li	a1,133
80007948:	fdc42503          	lw	a0,-36(s0)
8000794c:	758000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007950:	fd842603          	lw	a2,-40(s0)
80007954:	00000593          	li	a1,0
80007958:	fdc42503          	lw	a0,-36(s0)
8000795c:	748000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x78 , this_gpio );
80007960:	fd842603          	lw	a2,-40(s0)
80007964:	07800593          	li	a1,120
80007968:	fdc42503          	lw	a0,-36(s0)
8000796c:	738000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, 0xCB, this_gpio );
80007970:	fd842603          	lw	a2,-40(s0)
80007974:	0cb00593          	li	a1,203
80007978:	fdc42503          	lw	a0,-36(s0)
8000797c:	6c4000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x39 , this_gpio );
80007980:	fd842603          	lw	a2,-40(s0)
80007984:	03900593          	li	a1,57
80007988:	fdc42503          	lw	a0,-36(s0)
8000798c:	718000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x2C , this_gpio );
80007990:	fd842603          	lw	a2,-40(s0)
80007994:	02c00593          	li	a1,44
80007998:	fdc42503          	lw	a0,-36(s0)
8000799c:	708000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x00 , this_gpio );
800079a0:	fd842603          	lw	a2,-40(s0)
800079a4:	00000593          	li	a1,0
800079a8:	fdc42503          	lw	a0,-36(s0)
800079ac:	6f8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x34 , this_gpio );
800079b0:	fd842603          	lw	a2,-40(s0)
800079b4:	03400593          	li	a1,52
800079b8:	fdc42503          	lw	a0,-36(s0)
800079bc:	6e8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x02 , this_gpio );
800079c0:	fd842603          	lw	a2,-40(s0)
800079c4:	00200593          	li	a1,2
800079c8:	fdc42503          	lw	a0,-36(s0)
800079cc:	6d8000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, 0xF7, this_gpio);
800079d0:	fd842603          	lw	a2,-40(s0)
800079d4:	0f700593          	li	a1,247
800079d8:	fdc42503          	lw	a0,-36(s0)
800079dc:	664000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x20 , this_gpio );
800079e0:	fd842603          	lw	a2,-40(s0)
800079e4:	02000593          	li	a1,32
800079e8:	fdc42503          	lw	a0,-36(s0)
800079ec:	6b8000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, 0xEA, this_gpio );
800079f0:	fd842603          	lw	a2,-40(s0)
800079f4:	0ea00593          	li	a1,234
800079f8:	fdc42503          	lw	a0,-36(s0)
800079fc:	644000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007a00:	fd842603          	lw	a2,-40(s0)
80007a04:	00000593          	li	a1,0
80007a08:	fdc42503          	lw	a0,-36(s0)
80007a0c:	698000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007a10:	fd842603          	lw	a2,-40(s0)
80007a14:	00000593          	li	a1,0
80007a18:	fdc42503          	lw	a0,-36(s0)
80007a1c:	688000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_PWCTR1, this_gpio );    //Power control
80007a20:	fd842603          	lw	a2,-40(s0)
80007a24:	0c000593          	li	a1,192
80007a28:	fdc42503          	lw	a0,-36(s0)
80007a2c:	614000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x23 , this_gpio );   //VRH[5:0]
80007a30:	fd842603          	lw	a2,-40(s0)
80007a34:	02300593          	li	a1,35
80007a38:	fdc42503          	lw	a0,-36(s0)
80007a3c:	668000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_PWCTR2, this_gpio );    //Power control
80007a40:	fd842603          	lw	a2,-40(s0)
80007a44:	0c100593          	li	a1,193
80007a48:	fdc42503          	lw	a0,-36(s0)
80007a4c:	5f4000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x10, this_gpio  );   //SAP[2:0];BT[3:0]
80007a50:	fd842603          	lw	a2,-40(s0)
80007a54:	01000593          	li	a1,16
80007a58:	fdc42503          	lw	a0,-36(s0)
80007a5c:	648000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_VMCTR1, this_gpio );    //VCM control
80007a60:	fd842603          	lw	a2,-40(s0)
80007a64:	0c500593          	li	a1,197
80007a68:	fdc42503          	lw	a0,-36(s0)
80007a6c:	5d4000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x3e, this_gpio  ); //¶Ô±È¶Èµ÷œÚ
80007a70:	fd842603          	lw	a2,-40(s0)
80007a74:	03e00593          	li	a1,62
80007a78:	fdc42503          	lw	a0,-36(s0)
80007a7c:	628000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x28 , this_gpio );
80007a80:	fd842603          	lw	a2,-40(s0)
80007a84:	02800593          	li	a1,40
80007a88:	fdc42503          	lw	a0,-36(s0)
80007a8c:	618000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_VMCTR2, this_gpio );    //VCM control2
80007a90:	fd842603          	lw	a2,-40(s0)
80007a94:	0c700593          	li	a1,199
80007a98:	fdc42503          	lw	a0,-36(s0)
80007a9c:	5a4000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x86, this_gpio  );  //--
80007aa0:	fd842603          	lw	a2,-40(s0)
80007aa4:	08600593          	li	a1,134
80007aa8:	fdc42503          	lw	a0,-36(s0)
80007aac:	5f8000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_MADCTL, this_gpio ); // Mem Access Ctrl
80007ab0:	fd842603          	lw	a2,-40(s0)
80007ab4:	03600593          	li	a1,54
80007ab8:	fdc42503          	lw	a0,-36(s0)
80007abc:	584000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x48 , this_gpio );
80007ac0:	fd842603          	lw	a2,-40(s0)
80007ac4:	04800593          	li	a1,72
80007ac8:	fdc42503          	lw	a0,-36(s0)
80007acc:	5d8000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_PIXFMT, this_gpio );
80007ad0:	fd842603          	lw	a2,-40(s0)
80007ad4:	03a00593          	li	a1,58
80007ad8:	fdc42503          	lw	a0,-36(s0)
80007adc:	564000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x55 , this_gpio );
80007ae0:	fd842603          	lw	a2,-40(s0)
80007ae4:	05500593          	li	a1,85
80007ae8:	fdc42503          	lw	a0,-36(s0)
80007aec:	5b8000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_FRMCTR1, this_gpio );
80007af0:	fd842603          	lw	a2,-40(s0)
80007af4:	0b100593          	li	a1,177
80007af8:	fdc42503          	lw	a0,-36(s0)
80007afc:	544000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007b00:	fd842603          	lw	a2,-40(s0)
80007b04:	00000593          	li	a1,0
80007b08:	fdc42503          	lw	a0,-36(s0)
80007b0c:	598000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x18 , this_gpio );
80007b10:	fd842603          	lw	a2,-40(s0)
80007b14:	01800593          	li	a1,24
80007b18:	fdc42503          	lw	a0,-36(s0)
80007b1c:	588000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_DFUNCTR, this_gpio ); // Disp Fn Ctrl
80007b20:	fd842603          	lw	a2,-40(s0)
80007b24:	0b600593          	li	a1,182
80007b28:	fdc42503          	lw	a0,-36(s0)
80007b2c:	514000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x08 , this_gpio );
80007b30:	fd842603          	lw	a2,-40(s0)
80007b34:	00800593          	li	a1,8
80007b38:	fdc42503          	lw	a0,-36(s0)
80007b3c:	568000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x82 , this_gpio );
80007b40:	fd842603          	lw	a2,-40(s0)
80007b44:	08200593          	li	a1,130
80007b48:	fdc42503          	lw	a0,-36(s0)
80007b4c:	558000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x27 , this_gpio );
80007b50:	fd842603          	lw	a2,-40(s0)
80007b54:	02700593          	li	a1,39
80007b58:	fdc42503          	lw	a0,-36(s0)
80007b5c:	548000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, 0xF2, this_gpio );// 3Gamma Function Disable
80007b60:	fd842603          	lw	a2,-40(s0)
80007b64:	0f200593          	li	a1,242
80007b68:	fdc42503          	lw	a0,-36(s0)
80007b6c:	4d4000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007b70:	fd842603          	lw	a2,-40(s0)
80007b74:	00000593          	li	a1,0
80007b78:	fdc42503          	lw	a0,-36(s0)
80007b7c:	528000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_GAMMASET, this_gpio );//Gamma curve sel
80007b80:	fd842603          	lw	a2,-40(s0)
80007b84:	02600593          	li	a1,38
80007b88:	fdc42503          	lw	a0,-36(s0)
80007b8c:	4b4000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x01, this_gpio );
80007b90:	fd842603          	lw	a2,-40(s0)
80007b94:	00100593          	li	a1,1
80007b98:	fdc42503          	lw	a0,-36(s0)
80007b9c:	508000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_GMCTRP1, this_gpio );    //Set Gamma
80007ba0:	fd842603          	lw	a2,-40(s0)
80007ba4:	0e000593          	li	a1,224
80007ba8:	fdc42503          	lw	a0,-36(s0)
80007bac:	494000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x0F , this_gpio );
80007bb0:	fd842603          	lw	a2,-40(s0)
80007bb4:	00f00593          	li	a1,15
80007bb8:	fdc42503          	lw	a0,-36(s0)
80007bbc:	4e8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x31 , this_gpio );
80007bc0:	fd842603          	lw	a2,-40(s0)
80007bc4:	03100593          	li	a1,49
80007bc8:	fdc42503          	lw	a0,-36(s0)
80007bcc:	4d8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x2B , this_gpio );
80007bd0:	fd842603          	lw	a2,-40(s0)
80007bd4:	02b00593          	li	a1,43
80007bd8:	fdc42503          	lw	a0,-36(s0)
80007bdc:	4c8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x0C , this_gpio );
80007be0:	fd842603          	lw	a2,-40(s0)
80007be4:	00c00593          	li	a1,12
80007be8:	fdc42503          	lw	a0,-36(s0)
80007bec:	4b8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x0E , this_gpio );
80007bf0:	fd842603          	lw	a2,-40(s0)
80007bf4:	00e00593          	li	a1,14
80007bf8:	fdc42503          	lw	a0,-36(s0)
80007bfc:	4a8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x08 , this_gpio );
80007c00:	fd842603          	lw	a2,-40(s0)
80007c04:	00800593          	li	a1,8
80007c08:	fdc42503          	lw	a0,-36(s0)
80007c0c:	498000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x4E, this_gpio  );
80007c10:	fd842603          	lw	a2,-40(s0)
80007c14:	04e00593          	li	a1,78
80007c18:	fdc42503          	lw	a0,-36(s0)
80007c1c:	488000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0xF1 , this_gpio );
80007c20:	fd842603          	lw	a2,-40(s0)
80007c24:	0f100593          	li	a1,241
80007c28:	fdc42503          	lw	a0,-36(s0)
80007c2c:	478000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x37 , this_gpio );
80007c30:	fd842603          	lw	a2,-40(s0)
80007c34:	03700593          	li	a1,55
80007c38:	fdc42503          	lw	a0,-36(s0)
80007c3c:	468000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x07 , this_gpio );
80007c40:	fd842603          	lw	a2,-40(s0)
80007c44:	00700593          	li	a1,7
80007c48:	fdc42503          	lw	a0,-36(s0)
80007c4c:	458000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x10 , this_gpio );
80007c50:	fd842603          	lw	a2,-40(s0)
80007c54:	01000593          	li	a1,16
80007c58:	fdc42503          	lw	a0,-36(s0)
80007c5c:	448000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x03 , this_gpio );
80007c60:	fd842603          	lw	a2,-40(s0)
80007c64:	00300593          	li	a1,3
80007c68:	fdc42503          	lw	a0,-36(s0)
80007c6c:	438000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x0E , this_gpio );
80007c70:	fd842603          	lw	a2,-40(s0)
80007c74:	00e00593          	li	a1,14
80007c78:	fdc42503          	lw	a0,-36(s0)
80007c7c:	428000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x09 , this_gpio );
80007c80:	fd842603          	lw	a2,-40(s0)
80007c84:	00900593          	li	a1,9
80007c88:	fdc42503          	lw	a0,-36(s0)
80007c8c:	418000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007c90:	fd842603          	lw	a2,-40(s0)
80007c94:	00000593          	li	a1,0
80007c98:	fdc42503          	lw	a0,-36(s0)
80007c9c:	408000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_GMCTRN1, this_gpio );    //Set Gamma
80007ca0:	fd842603          	lw	a2,-40(s0)
80007ca4:	0e100593          	li	a1,225
80007ca8:	fdc42503          	lw	a0,-36(s0)
80007cac:	394000ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00, this_gpio  );
80007cb0:	fd842603          	lw	a2,-40(s0)
80007cb4:	00000593          	li	a1,0
80007cb8:	fdc42503          	lw	a0,-36(s0)
80007cbc:	3e8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x0E, this_gpio );
80007cc0:	fd842603          	lw	a2,-40(s0)
80007cc4:	00e00593          	li	a1,14
80007cc8:	fdc42503          	lw	a0,-36(s0)
80007ccc:	3d8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x14 , this_gpio );
80007cd0:	fd842603          	lw	a2,-40(s0)
80007cd4:	01400593          	li	a1,20
80007cd8:	fdc42503          	lw	a0,-36(s0)
80007cdc:	3c8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x03, this_gpio  );
80007ce0:	fd842603          	lw	a2,-40(s0)
80007ce4:	00300593          	li	a1,3
80007ce8:	fdc42503          	lw	a0,-36(s0)
80007cec:	3b8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x11 , this_gpio );
80007cf0:	fd842603          	lw	a2,-40(s0)
80007cf4:	01100593          	li	a1,17
80007cf8:	fdc42503          	lw	a0,-36(s0)
80007cfc:	3a8000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x07 , this_gpio );
80007d00:	fd842603          	lw	a2,-40(s0)
80007d04:	00700593          	li	a1,7
80007d08:	fdc42503          	lw	a0,-36(s0)
80007d0c:	398000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x31 , this_gpio );
80007d10:	fd842603          	lw	a2,-40(s0)
80007d14:	03100593          	li	a1,49
80007d18:	fdc42503          	lw	a0,-36(s0)
80007d1c:	388000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0xC1 , this_gpio );
80007d20:	fd842603          	lw	a2,-40(s0)
80007d24:	0c100593          	li	a1,193
80007d28:	fdc42503          	lw	a0,-36(s0)
80007d2c:	378000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x48, this_gpio  );
80007d30:	fd842603          	lw	a2,-40(s0)
80007d34:	04800593          	li	a1,72
80007d38:	fdc42503          	lw	a0,-36(s0)
80007d3c:	368000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x08, this_gpio  );
80007d40:	fd842603          	lw	a2,-40(s0)
80007d44:	00800593          	li	a1,8
80007d48:	fdc42503          	lw	a0,-36(s0)
80007d4c:	358000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x0F, this_gpio  );
80007d50:	fd842603          	lw	a2,-40(s0)
80007d54:	00f00593          	li	a1,15
80007d58:	fdc42503          	lw	a0,-36(s0)
80007d5c:	348000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x0C , this_gpio );
80007d60:	fd842603          	lw	a2,-40(s0)
80007d64:	00c00593          	li	a1,12
80007d68:	fdc42503          	lw	a0,-36(s0)
80007d6c:	338000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x31 , this_gpio );
80007d70:	fd842603          	lw	a2,-40(s0)
80007d74:	03100593          	li	a1,49
80007d78:	fdc42503          	lw	a0,-36(s0)
80007d7c:	328000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x36 , this_gpio );
80007d80:	fd842603          	lw	a2,-40(s0)
80007d84:	03600593          	li	a1,54
80007d88:	fdc42503          	lw	a0,-36(s0)
80007d8c:	318000ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, 0x0F , this_gpio );
80007d90:	fd842603          	lw	a2,-40(s0)
80007d94:	00f00593          	li	a1,15
80007d98:	fdc42503          	lw	a0,-36(s0)
80007d9c:	308000ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_SLPOUT, this_gpio );
80007da0:	fd842603          	lw	a2,-40(s0)
80007da4:	01100593          	li	a1,17
80007da8:	fdc42503          	lw	a0,-36(s0)
80007dac:	294000ef          	jal	80008040 <TFT_writecommand>
    for(volatile uint16_t x=0; x<0xfff; x++){} /// delay
80007db0:	fe041523          	sh	zero,-22(s0)
80007db4:	0200006f          	j	80007dd4 <TFT_begin+0x624>
80007db8:	fea45783          	lhu	a5,-22(s0)
80007dbc:	01079793          	slli	a5,a5,0x10
80007dc0:	0107d793          	srli	a5,a5,0x10
80007dc4:	00178793          	addi	a5,a5,1
80007dc8:	01079793          	slli	a5,a5,0x10
80007dcc:	0107d793          	srli	a5,a5,0x10
80007dd0:	fef41523          	sh	a5,-22(s0)
80007dd4:	fea45783          	lhu	a5,-22(s0)
80007dd8:	01079713          	slli	a4,a5,0x10
80007ddc:	01075713          	srli	a4,a4,0x10
80007de0:	000017b7          	lui	a5,0x1
80007de4:	ffe78793          	addi	a5,a5,-2 # ffe <_start-0x7ffff002>
80007de8:	fce7f8e3          	bleu	a4,a5,80007db8 <TFT_begin+0x608>
    TFT_writecommand( this_spi, ILI9341_DISPON, this_gpio );
80007dec:	fd842603          	lw	a2,-40(s0)
80007df0:	02900593          	li	a1,41
80007df4:	fdc42503          	lw	a0,-36(s0)
80007df8:	248000ef          	jal	80008040 <TFT_writecommand>
    for(volatile uint16_t x=0; x<0xfff; x++){} /// delay
80007dfc:	fe041423          	sh	zero,-24(s0)
80007e00:	0200006f          	j	80007e20 <TFT_begin+0x670>
80007e04:	fe845783          	lhu	a5,-24(s0)
80007e08:	01079793          	slli	a5,a5,0x10
80007e0c:	0107d793          	srli	a5,a5,0x10
80007e10:	00178793          	addi	a5,a5,1
80007e14:	01079793          	slli	a5,a5,0x10
80007e18:	0107d793          	srli	a5,a5,0x10
80007e1c:	fef41423          	sh	a5,-24(s0)
80007e20:	fe845783          	lhu	a5,-24(s0)
80007e24:	01079713          	slli	a4,a5,0x10
80007e28:	01075713          	srli	a4,a4,0x10
80007e2c:	000017b7          	lui	a5,0x1
80007e30:	ffe78793          	addi	a5,a5,-2 # ffe <_start-0x7ffff002>
80007e34:	fce7f8e3          	bleu	a4,a5,80007e04 <TFT_begin+0x654>
}
80007e38:	00000013          	nop
80007e3c:	02c12083          	lw	ra,44(sp)
80007e40:	02812403          	lw	s0,40(sp)
80007e44:	03010113          	addi	sp,sp,48
80007e48:	00008067          	ret

80007e4c <TFT_fillrect>:
	int16_t width,
	int16_t height,
	gpio_instance_t * this_gpio,
	uint16_t colour
)
{
80007e4c:	fc010113          	addi	sp,sp,-64
80007e50:	02112e23          	sw	ra,60(sp)
80007e54:	02812c23          	sw	s0,56(sp)
80007e58:	04010413          	addi	s0,sp,64
80007e5c:	fca42e23          	sw	a0,-36(s0)
80007e60:	fcf42823          	sw	a5,-48(s0)
80007e64:	00080793          	mv	a5,a6
80007e68:	fcb41d23          	sh	a1,-38(s0)
80007e6c:	fcc41c23          	sh	a2,-40(s0)
80007e70:	fcd41b23          	sh	a3,-42(s0)
80007e74:	fce41a23          	sh	a4,-44(s0)
80007e78:	fcf41723          	sh	a5,-50(s0)
    if (xpt >= TFT_WIDTH) width = TFT_WIDTH - xpt;
80007e7c:	fda41703          	lh	a4,-38(s0)
80007e80:	0ef00793          	li	a5,239
80007e84:	00e7de63          	ble	a4,a5,80007ea0 <TFT_fillrect+0x54>
80007e88:	fda45783          	lhu	a5,-38(s0)
80007e8c:	0f000713          	li	a4,240
80007e90:	40f707b3          	sub	a5,a4,a5
80007e94:	01079793          	slli	a5,a5,0x10
80007e98:	0107d793          	srli	a5,a5,0x10
80007e9c:	fcf41b23          	sh	a5,-42(s0)
    if (xpt >= TFT_HEIGHT) height = TFT_HEIGHT - ypt;
80007ea0:	fda41703          	lh	a4,-38(s0)
80007ea4:	13f00793          	li	a5,319
80007ea8:	00e7de63          	ble	a4,a5,80007ec4 <TFT_fillrect+0x78>
80007eac:	fd845783          	lhu	a5,-40(s0)
80007eb0:	14000713          	li	a4,320
80007eb4:	40f707b3          	sub	a5,a4,a5
80007eb8:	01079793          	slli	a5,a5,0x10
80007ebc:	0107d793          	srli	a5,a5,0x10
80007ec0:	fcf41a23          	sh	a5,-44(s0)

    TFT_setAddrWindow(this_spi, xpt, ypt, xpt+width-1, ypt+height-1, this_gpio);
80007ec4:	fda45583          	lhu	a1,-38(s0)
80007ec8:	fd845603          	lhu	a2,-40(s0)
80007ecc:	fda45703          	lhu	a4,-38(s0)
80007ed0:	fd645783          	lhu	a5,-42(s0)
80007ed4:	00f707b3          	add	a5,a4,a5
80007ed8:	01079793          	slli	a5,a5,0x10
80007edc:	0107d793          	srli	a5,a5,0x10
80007ee0:	fff78793          	addi	a5,a5,-1
80007ee4:	01079693          	slli	a3,a5,0x10
80007ee8:	0106d693          	srli	a3,a3,0x10
80007eec:	fd845703          	lhu	a4,-40(s0)
80007ef0:	fd445783          	lhu	a5,-44(s0)
80007ef4:	00f707b3          	add	a5,a4,a5
80007ef8:	01079793          	slli	a5,a5,0x10
80007efc:	0107d793          	srli	a5,a5,0x10
80007f00:	fff78793          	addi	a5,a5,-1
80007f04:	01079713          	slli	a4,a5,0x10
80007f08:	01075713          	srli	a4,a4,0x10
80007f0c:	fd042783          	lw	a5,-48(s0)
80007f10:	fdc42503          	lw	a0,-36(s0)
80007f14:	1e4000ef          	jal	800080f8 <TFT_setAddrWindow>
    int8_t colour_msb = colour >> 8;
80007f18:	fce45783          	lhu	a5,-50(s0)
80007f1c:	0087d793          	srli	a5,a5,0x8
80007f20:	01079793          	slli	a5,a5,0x10
80007f24:	0107d793          	srli	a5,a5,0x10
80007f28:	fef407a3          	sb	a5,-17(s0)
    int8_t colour_lsb = colour;
80007f2c:	fce45783          	lhu	a5,-50(s0)
80007f30:	fef40723          	sb	a5,-18(s0)

    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
80007f34:	00100613          	li	a2,1
80007f38:	00400593          	li	a1,4
80007f3c:	fd042503          	lw	a0,-48(s0)
80007f40:	b9dfb0ef          	jal	80003adc <GPIO_set_output>

    for(ypt = height; ypt >0; ypt--)
80007f44:	fd445783          	lhu	a5,-44(s0)
80007f48:	fcf41c23          	sh	a5,-40(s0)
80007f4c:	0700006f          	j	80007fbc <TFT_fillrect+0x170>
    {
        for( xpt = width; xpt > 0; xpt--)
80007f50:	fd645783          	lhu	a5,-42(s0)
80007f54:	fcf41d23          	sh	a5,-38(s0)
80007f58:	0400006f          	j	80007f98 <TFT_fillrect+0x14c>
        {
            TFT_spiwrite( this_spi, colour_msb );
80007f5c:	fef44783          	lbu	a5,-17(s0)
80007f60:	00078593          	mv	a1,a5
80007f64:	fdc42503          	lw	a0,-36(s0)
80007f68:	ff0ff0ef          	jal	80007758 <TFT_spiwrite>
            TFT_spiwrite( this_spi, colour_lsb );
80007f6c:	fee44783          	lbu	a5,-18(s0)
80007f70:	00078593          	mv	a1,a5
80007f74:	fdc42503          	lw	a0,-36(s0)
80007f78:	fe0ff0ef          	jal	80007758 <TFT_spiwrite>
        for( xpt = width; xpt > 0; xpt--)
80007f7c:	fda41783          	lh	a5,-38(s0)
80007f80:	01079793          	slli	a5,a5,0x10
80007f84:	0107d793          	srli	a5,a5,0x10
80007f88:	fff78793          	addi	a5,a5,-1
80007f8c:	01079793          	slli	a5,a5,0x10
80007f90:	0107d793          	srli	a5,a5,0x10
80007f94:	fcf41d23          	sh	a5,-38(s0)
80007f98:	fda41783          	lh	a5,-38(s0)
80007f9c:	fcf040e3          	bgtz	a5,80007f5c <TFT_fillrect+0x110>
    for(ypt = height; ypt >0; ypt--)
80007fa0:	fd841783          	lh	a5,-40(s0)
80007fa4:	01079793          	slli	a5,a5,0x10
80007fa8:	0107d793          	srli	a5,a5,0x10
80007fac:	fff78793          	addi	a5,a5,-1
80007fb0:	01079793          	slli	a5,a5,0x10
80007fb4:	0107d793          	srli	a5,a5,0x10
80007fb8:	fcf41c23          	sh	a5,-40(s0)
80007fbc:	fd841783          	lh	a5,-40(s0)
80007fc0:	f8f048e3          	bgtz	a5,80007f50 <TFT_fillrect+0x104>
        }
    }
    GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal
80007fc4:	00100613          	li	a2,1
80007fc8:	00500593          	li	a1,5
80007fcc:	fd042503          	lw	a0,-48(s0)
80007fd0:	b0dfb0ef          	jal	80003adc <GPIO_set_output>
}
80007fd4:	00000013          	nop
80007fd8:	03c12083          	lw	ra,60(sp)
80007fdc:	03812403          	lw	s0,56(sp)
80007fe0:	04010113          	addi	sp,sp,64
80007fe4:	00008067          	ret

80007fe8 <TFT_fillScreen>:
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	uint16_t colour
)
{
80007fe8:	fe010113          	addi	sp,sp,-32
80007fec:	00112e23          	sw	ra,28(sp)
80007ff0:	00812c23          	sw	s0,24(sp)
80007ff4:	02010413          	addi	s0,sp,32
80007ff8:	fea42623          	sw	a0,-20(s0)
80007ffc:	feb42423          	sw	a1,-24(s0)
80008000:	00060793          	mv	a5,a2
80008004:	fef41323          	sh	a5,-26(s0)
	TFT_fillrect(this_spi, 0,0, TFT_WIDTH, TFT_HEIGHT,this_gpio,colour);
80008008:	fe645783          	lhu	a5,-26(s0)
8000800c:	00078813          	mv	a6,a5
80008010:	fe842783          	lw	a5,-24(s0)
80008014:	14000713          	li	a4,320
80008018:	0f000693          	li	a3,240
8000801c:	00000613          	li	a2,0
80008020:	00000593          	li	a1,0
80008024:	fec42503          	lw	a0,-20(s0)
80008028:	e25ff0ef          	jal	80007e4c <TFT_fillrect>
}
8000802c:	00000013          	nop
80008030:	01c12083          	lw	ra,28(sp)
80008034:	01812403          	lw	s0,24(sp)
80008038:	02010113          	addi	sp,sp,32
8000803c:	00008067          	ret

80008040 <TFT_writecommand>:
(
	spi_instance_t * this_spi,
	uint8_t data_bits,
	gpio_instance_t * this_gpio
)
{
80008040:	fe010113          	addi	sp,sp,-32
80008044:	00112e23          	sw	ra,28(sp)
80008048:	00812c23          	sw	s0,24(sp)
8000804c:	02010413          	addi	s0,sp,32
80008050:	fea42623          	sw	a0,-20(s0)
80008054:	00058793          	mv	a5,a1
80008058:	fec42223          	sw	a2,-28(s0)
8000805c:	fef405a3          	sb	a5,-21(s0)
    GPIO_set_output( this_gpio, GPIO_4, 0 ); // Data Command Signal
80008060:	00000613          	li	a2,0
80008064:	00400593          	li	a1,4
80008068:	fe442503          	lw	a0,-28(s0)
8000806c:	a71fb0ef          	jal	80003adc <GPIO_set_output>
    TFT_spiwrite( this_spi, data_bits );
80008070:	feb44783          	lbu	a5,-21(s0)
80008074:	00078593          	mv	a1,a5
80008078:	fec42503          	lw	a0,-20(s0)
8000807c:	edcff0ef          	jal	80007758 <TFT_spiwrite>
    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
80008080:	00100613          	li	a2,1
80008084:	00400593          	li	a1,4
80008088:	fe442503          	lw	a0,-28(s0)
8000808c:	a51fb0ef          	jal	80003adc <GPIO_set_output>
}
80008090:	00000013          	nop
80008094:	01c12083          	lw	ra,28(sp)
80008098:	01812403          	lw	s0,24(sp)
8000809c:	02010113          	addi	sp,sp,32
800080a0:	00008067          	ret

800080a4 <TFT_writedata>:
(
	spi_instance_t * this_spi,
	uint8_t c,
	gpio_instance_t * this_gpio
)
{
800080a4:	fe010113          	addi	sp,sp,-32
800080a8:	00112e23          	sw	ra,28(sp)
800080ac:	00812c23          	sw	s0,24(sp)
800080b0:	02010413          	addi	s0,sp,32
800080b4:	fea42623          	sw	a0,-20(s0)
800080b8:	00058793          	mv	a5,a1
800080bc:	fec42223          	sw	a2,-28(s0)
800080c0:	fef405a3          	sb	a5,-21(s0)

    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
800080c4:	00100613          	li	a2,1
800080c8:	00400593          	li	a1,4
800080cc:	fe442503          	lw	a0,-28(s0)
800080d0:	a0dfb0ef          	jal	80003adc <GPIO_set_output>
    TFT_spiwrite( this_spi, c );
800080d4:	feb44783          	lbu	a5,-21(s0)
800080d8:	00078593          	mv	a1,a5
800080dc:	fec42503          	lw	a0,-20(s0)
800080e0:	e78ff0ef          	jal	80007758 <TFT_spiwrite>
}
800080e4:	00000013          	nop
800080e8:	01c12083          	lw	ra,28(sp)
800080ec:	01812403          	lw	s0,24(sp)
800080f0:	02010113          	addi	sp,sp,32
800080f4:	00008067          	ret

800080f8 <TFT_setAddrWindow>:
	uint16_t y_zero,
    uint16_t x_one,
	uint16_t y_one,
	gpio_instance_t * this_gpio
)
{
800080f8:	fe010113          	addi	sp,sp,-32
800080fc:	00112e23          	sw	ra,28(sp)
80008100:	00812c23          	sw	s0,24(sp)
80008104:	02010413          	addi	s0,sp,32
80008108:	fea42623          	sw	a0,-20(s0)
8000810c:	fef42023          	sw	a5,-32(s0)
80008110:	feb41523          	sh	a1,-22(s0)
80008114:	fec41423          	sh	a2,-24(s0)
80008118:	fed41323          	sh	a3,-26(s0)
8000811c:	fee41223          	sh	a4,-28(s0)
    TFT_writecommand( this_spi,  ILI9341_CASET, this_gpio );
80008120:	fe042603          	lw	a2,-32(s0)
80008124:	02a00593          	li	a1,42
80008128:	fec42503          	lw	a0,-20(s0)
8000812c:	f15ff0ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, (x_zero >> 8), this_gpio );
80008130:	fea45783          	lhu	a5,-22(s0)
80008134:	0087d793          	srli	a5,a5,0x8
80008138:	01079793          	slli	a5,a5,0x10
8000813c:	0107d793          	srli	a5,a5,0x10
80008140:	0ff7f793          	andi	a5,a5,255
80008144:	fe042603          	lw	a2,-32(s0)
80008148:	00078593          	mv	a1,a5
8000814c:	fec42503          	lw	a0,-20(s0)
80008150:	f55ff0ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, (x_zero & 0xFF), this_gpio );
80008154:	fea45783          	lhu	a5,-22(s0)
80008158:	0ff7f793          	andi	a5,a5,255
8000815c:	fe042603          	lw	a2,-32(s0)
80008160:	00078593          	mv	a1,a5
80008164:	fec42503          	lw	a0,-20(s0)
80008168:	f3dff0ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, (x_one >> 8), this_gpio );
8000816c:	fe645783          	lhu	a5,-26(s0)
80008170:	0087d793          	srli	a5,a5,0x8
80008174:	01079793          	slli	a5,a5,0x10
80008178:	0107d793          	srli	a5,a5,0x10
8000817c:	0ff7f793          	andi	a5,a5,255
80008180:	fe042603          	lw	a2,-32(s0)
80008184:	00078593          	mv	a1,a5
80008188:	fec42503          	lw	a0,-20(s0)
8000818c:	f19ff0ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, (x_one & 0xFF), this_gpio );
80008190:	fe645783          	lhu	a5,-26(s0)
80008194:	0ff7f793          	andi	a5,a5,255
80008198:	fe042603          	lw	a2,-32(s0)
8000819c:	00078593          	mv	a1,a5
800081a0:	fec42503          	lw	a0,-20(s0)
800081a4:	f01ff0ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi,  ILI9341_PASET, this_gpio );
800081a8:	fe042603          	lw	a2,-32(s0)
800081ac:	02b00593          	li	a1,43
800081b0:	fec42503          	lw	a0,-20(s0)
800081b4:	e8dff0ef          	jal	80008040 <TFT_writecommand>
    TFT_writedata( this_spi, (y_zero >> 8), this_gpio );
800081b8:	fe845783          	lhu	a5,-24(s0)
800081bc:	0087d793          	srli	a5,a5,0x8
800081c0:	01079793          	slli	a5,a5,0x10
800081c4:	0107d793          	srli	a5,a5,0x10
800081c8:	0ff7f793          	andi	a5,a5,255
800081cc:	fe042603          	lw	a2,-32(s0)
800081d0:	00078593          	mv	a1,a5
800081d4:	fec42503          	lw	a0,-20(s0)
800081d8:	ecdff0ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, (y_zero & 0xFF), this_gpio );
800081dc:	fe845783          	lhu	a5,-24(s0)
800081e0:	0ff7f793          	andi	a5,a5,255
800081e4:	fe042603          	lw	a2,-32(s0)
800081e8:	00078593          	mv	a1,a5
800081ec:	fec42503          	lw	a0,-20(s0)
800081f0:	eb5ff0ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, (y_one >> 8), this_gpio );
800081f4:	fe445783          	lhu	a5,-28(s0)
800081f8:	0087d793          	srli	a5,a5,0x8
800081fc:	01079793          	slli	a5,a5,0x10
80008200:	0107d793          	srli	a5,a5,0x10
80008204:	0ff7f793          	andi	a5,a5,255
80008208:	fe042603          	lw	a2,-32(s0)
8000820c:	00078593          	mv	a1,a5
80008210:	fec42503          	lw	a0,-20(s0)
80008214:	e91ff0ef          	jal	800080a4 <TFT_writedata>
    TFT_writedata( this_spi, (y_one & 0xFF), this_gpio );
80008218:	fe445783          	lhu	a5,-28(s0)
8000821c:	0ff7f793          	andi	a5,a5,255
80008220:	fe042603          	lw	a2,-32(s0)
80008224:	00078593          	mv	a1,a5
80008228:	fec42503          	lw	a0,-20(s0)
8000822c:	e79ff0ef          	jal	800080a4 <TFT_writedata>

    TFT_writecommand( this_spi,  ILI9341_RAMWR, this_gpio );
80008230:	fe042603          	lw	a2,-32(s0)
80008234:	02c00593          	li	a1,44
80008238:	fec42503          	lw	a0,-20(s0)
8000823c:	e05ff0ef          	jal	80008040 <TFT_writecommand>
}
80008240:	00000013          	nop
80008244:	01c12083          	lw	ra,28(sp)
80008248:	01812403          	lw	s0,24(sp)
8000824c:	02010113          	addi	sp,sp,32
80008250:	00008067          	ret

80008254 <TFT_fastVLine>:
	int16_t pos_y,
	int16_t height,
	int16_t colour,
	gpio_instance_t * this_gpio
)
{
80008254:	fd010113          	addi	sp,sp,-48
80008258:	02112623          	sw	ra,44(sp)
8000825c:	02812423          	sw	s0,40(sp)
80008260:	03010413          	addi	s0,sp,48
80008264:	fca42e23          	sw	a0,-36(s0)
80008268:	fcf42823          	sw	a5,-48(s0)
8000826c:	fcb41d23          	sh	a1,-38(s0)
80008270:	fcc41c23          	sh	a2,-40(s0)
80008274:	fcd41b23          	sh	a3,-42(s0)
80008278:	fce41a23          	sh	a4,-44(s0)
    if((pos_x >= TFT_WIDTH) || (pos_y >= TFT_HEIGHT)) return;
8000827c:	fda41703          	lh	a4,-38(s0)
80008280:	0ef00793          	li	a5,239
80008284:	0ee7c663          	blt	a5,a4,80008370 <TFT_fastVLine+0x11c>
80008288:	fd841703          	lh	a4,-40(s0)
8000828c:	13f00793          	li	a5,319
80008290:	0ee7c063          	blt	a5,a4,80008370 <TFT_fastVLine+0x11c>

    if((pos_y+height-1) >= TFT_HEIGHT)
80008294:	fd841703          	lh	a4,-40(s0)
80008298:	fd641783          	lh	a5,-42(s0)
8000829c:	00f707b3          	add	a5,a4,a5
800082a0:	fff78713          	addi	a4,a5,-1
800082a4:	13f00793          	li	a5,319
800082a8:	00e7de63          	ble	a4,a5,800082c4 <TFT_fastVLine+0x70>
        height = TFT_HEIGHT -pos_y;
800082ac:	fd845783          	lhu	a5,-40(s0)
800082b0:	14000713          	li	a4,320
800082b4:	40f707b3          	sub	a5,a4,a5
800082b8:	01079793          	slli	a5,a5,0x10
800082bc:	0107d793          	srli	a5,a5,0x10
800082c0:	fcf41b23          	sh	a5,-42(s0)

    TFT_setAddrWindow(this_spi, pos_x, pos_y, pos_x, pos_y+height-1, this_gpio);
800082c4:	fda45583          	lhu	a1,-38(s0)
800082c8:	fd845603          	lhu	a2,-40(s0)
800082cc:	fda45683          	lhu	a3,-38(s0)
800082d0:	fd845703          	lhu	a4,-40(s0)
800082d4:	fd645783          	lhu	a5,-42(s0)
800082d8:	00f707b3          	add	a5,a4,a5
800082dc:	01079793          	slli	a5,a5,0x10
800082e0:	0107d793          	srli	a5,a5,0x10
800082e4:	fff78793          	addi	a5,a5,-1
800082e8:	01079713          	slli	a4,a5,0x10
800082ec:	01075713          	srli	a4,a4,0x10
800082f0:	fd042783          	lw	a5,-48(s0)
800082f4:	fdc42503          	lw	a0,-36(s0)
800082f8:	e01ff0ef          	jal	800080f8 <TFT_setAddrWindow>
    uint8_t colour_msb = colour >> 8;
800082fc:	fd441783          	lh	a5,-44(s0)
80008300:	4087d793          	srai	a5,a5,0x8
80008304:	01079793          	slli	a5,a5,0x10
80008308:	4107d793          	srai	a5,a5,0x10
8000830c:	fef407a3          	sb	a5,-17(s0)
    uint8_t colour_lsb = colour;
80008310:	fd445783          	lhu	a5,-44(s0)
80008314:	fef40723          	sb	a5,-18(s0)

    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
80008318:	00100613          	li	a2,1
8000831c:	00400593          	li	a1,4
80008320:	fd042503          	lw	a0,-48(s0)
80008324:	fb8fb0ef          	jal	80003adc <GPIO_set_output>

    while(height --)
80008328:	0240006f          	j	8000834c <TFT_fastVLine+0xf8>
    {
        TFT_spiwrite( this_spi,colour_msb );
8000832c:	fef44783          	lbu	a5,-17(s0)
80008330:	00078593          	mv	a1,a5
80008334:	fdc42503          	lw	a0,-36(s0)
80008338:	c20ff0ef          	jal	80007758 <TFT_spiwrite>
        TFT_spiwrite( this_spi, colour_lsb);
8000833c:	fee44783          	lbu	a5,-18(s0)
80008340:	00078593          	mv	a1,a5
80008344:	fdc42503          	lw	a0,-36(s0)
80008348:	c10ff0ef          	jal	80007758 <TFT_spiwrite>
    while(height --)
8000834c:	fd641783          	lh	a5,-42(s0)
80008350:	01079713          	slli	a4,a5,0x10
80008354:	01075713          	srli	a4,a4,0x10
80008358:	fff70713          	addi	a4,a4,-1
8000835c:	01071713          	slli	a4,a4,0x10
80008360:	01075713          	srli	a4,a4,0x10
80008364:	fce41b23          	sh	a4,-42(s0)
80008368:	fc0792e3          	bnez	a5,8000832c <TFT_fastVLine+0xd8>
8000836c:	0080006f          	j	80008374 <TFT_fastVLine+0x120>
    if((pos_x >= TFT_WIDTH) || (pos_y >= TFT_HEIGHT)) return;
80008370:	00000013          	nop
    }

}
80008374:	02c12083          	lw	ra,44(sp)
80008378:	02812403          	lw	s0,40(sp)
8000837c:	03010113          	addi	sp,sp,48
80008380:	00008067          	ret

80008384 <TFT_fastHLine>:
	int16_t pos_y,
	int16_t width,
	int16_t colour,
	gpio_instance_t * this_gpio
)
{
80008384:	fd010113          	addi	sp,sp,-48
80008388:	02112623          	sw	ra,44(sp)
8000838c:	02812423          	sw	s0,40(sp)
80008390:	03010413          	addi	s0,sp,48
80008394:	fca42e23          	sw	a0,-36(s0)
80008398:	fcf42823          	sw	a5,-48(s0)
8000839c:	fcb41d23          	sh	a1,-38(s0)
800083a0:	fcc41c23          	sh	a2,-40(s0)
800083a4:	fcd41b23          	sh	a3,-42(s0)
800083a8:	fce41a23          	sh	a4,-44(s0)
    if((pos_x >= TFT_WIDTH) || (pos_y >= TFT_HEIGHT)) return;
800083ac:	fda41703          	lh	a4,-38(s0)
800083b0:	0ef00793          	li	a5,239
800083b4:	0ee7c663          	blt	a5,a4,800084a0 <TFT_fastHLine+0x11c>
800083b8:	fd841703          	lh	a4,-40(s0)
800083bc:	13f00793          	li	a5,319
800083c0:	0ee7c063          	blt	a5,a4,800084a0 <TFT_fastHLine+0x11c>

    if((pos_x+width-1) >= TFT_WIDTH)
800083c4:	fda41703          	lh	a4,-38(s0)
800083c8:	fd641783          	lh	a5,-42(s0)
800083cc:	00f707b3          	add	a5,a4,a5
800083d0:	fff78713          	addi	a4,a5,-1
800083d4:	0ef00793          	li	a5,239
800083d8:	00e7de63          	ble	a4,a5,800083f4 <TFT_fastHLine+0x70>
        width = TFT_WIDTH -pos_x;
800083dc:	fda45783          	lhu	a5,-38(s0)
800083e0:	0f000713          	li	a4,240
800083e4:	40f707b3          	sub	a5,a4,a5
800083e8:	01079793          	slli	a5,a5,0x10
800083ec:	0107d793          	srli	a5,a5,0x10
800083f0:	fcf41b23          	sh	a5,-42(s0)

    TFT_setAddrWindow( this_spi,pos_x, pos_y, pos_x+width-1, pos_y,  this_gpio);
800083f4:	fda45583          	lhu	a1,-38(s0)
800083f8:	fd845603          	lhu	a2,-40(s0)
800083fc:	fda45703          	lhu	a4,-38(s0)
80008400:	fd645783          	lhu	a5,-42(s0)
80008404:	00f707b3          	add	a5,a4,a5
80008408:	01079793          	slli	a5,a5,0x10
8000840c:	0107d793          	srli	a5,a5,0x10
80008410:	fff78793          	addi	a5,a5,-1
80008414:	01079693          	slli	a3,a5,0x10
80008418:	0106d693          	srli	a3,a3,0x10
8000841c:	fd845703          	lhu	a4,-40(s0)
80008420:	fd042783          	lw	a5,-48(s0)
80008424:	fdc42503          	lw	a0,-36(s0)
80008428:	cd1ff0ef          	jal	800080f8 <TFT_setAddrWindow>
    uint8_t colour_msb = colour >> 8;
8000842c:	fd441783          	lh	a5,-44(s0)
80008430:	4087d793          	srai	a5,a5,0x8
80008434:	01079793          	slli	a5,a5,0x10
80008438:	4107d793          	srai	a5,a5,0x10
8000843c:	fef407a3          	sb	a5,-17(s0)
    uint8_t colour_lsb = colour;
80008440:	fd445783          	lhu	a5,-44(s0)
80008444:	fef40723          	sb	a5,-18(s0)

    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
80008448:	00100613          	li	a2,1
8000844c:	00400593          	li	a1,4
80008450:	fd042503          	lw	a0,-48(s0)
80008454:	e88fb0ef          	jal	80003adc <GPIO_set_output>

    while(width --)
80008458:	0240006f          	j	8000847c <TFT_fastHLine+0xf8>
    {
        TFT_spiwrite( this_spi,colour_msb);
8000845c:	fef44783          	lbu	a5,-17(s0)
80008460:	00078593          	mv	a1,a5
80008464:	fdc42503          	lw	a0,-36(s0)
80008468:	af0ff0ef          	jal	80007758 <TFT_spiwrite>
        TFT_spiwrite(this_spi, colour_lsb );
8000846c:	fee44783          	lbu	a5,-18(s0)
80008470:	00078593          	mv	a1,a5
80008474:	fdc42503          	lw	a0,-36(s0)
80008478:	ae0ff0ef          	jal	80007758 <TFT_spiwrite>
    while(width --)
8000847c:	fd641783          	lh	a5,-42(s0)
80008480:	01079713          	slli	a4,a5,0x10
80008484:	01075713          	srli	a4,a4,0x10
80008488:	fff70713          	addi	a4,a4,-1
8000848c:	01071713          	slli	a4,a4,0x10
80008490:	01075713          	srli	a4,a4,0x10
80008494:	fce41b23          	sh	a4,-42(s0)
80008498:	fc0792e3          	bnez	a5,8000845c <TFT_fastHLine+0xd8>
8000849c:	0080006f          	j	800084a4 <TFT_fastHLine+0x120>
    if((pos_x >= TFT_WIDTH) || (pos_y >= TFT_HEIGHT)) return;
800084a0:	00000013          	nop
    }
}
800084a4:	02c12083          	lw	ra,44(sp)
800084a8:	02812403          	lw	s0,40(sp)
800084ac:	03010113          	addi	sp,sp,48
800084b0:	00008067          	ret

800084b4 <testRead>:
testRead
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
800084b4:	fd010113          	addi	sp,sp,-48
800084b8:	02112623          	sw	ra,44(sp)
800084bc:	02812423          	sw	s0,40(sp)
800084c0:	03010413          	addi	s0,sp,48
800084c4:	fca42e23          	sw	a0,-36(s0)
800084c8:	fcb42c23          	sw	a1,-40(s0)
    uint32_t master_rx ;//= 0x00000000;
    SPI_set_slave_select(this_spi, SPI_SLAVE_0);
800084cc:	00000593          	li	a1,0
800084d0:	fdc42503          	lw	a0,-36(s0)
800084d4:	dd4f90ef          	jal	80001aa8 <SPI_set_slave_select>
    GPIO_set_output( this_gpio, GPIO_4, 0 ); // Data Command Signal
800084d8:	00000613          	li	a2,0
800084dc:	00400593          	li	a1,4
800084e0:	fd842503          	lw	a0,-40(s0)
800084e4:	df8fb0ef          	jal	80003adc <GPIO_set_output>
    //GPIO_set_output( this_gpio, GPIO_5, 0 ); // Chip Select Signal
    SPI_transfer_frame( this_spi, ILI9341_RDMODE );
800084e8:	00a00593          	li	a1,10
800084ec:	fdc42503          	lw	a0,-36(s0)
800084f0:	f7cf90ef          	jal	80001c6c <SPI_transfer_frame>
    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
800084f4:	00100613          	li	a2,1
800084f8:	00400593          	li	a1,4
800084fc:	fd842503          	lw	a0,-40(s0)
80008500:	ddcfb0ef          	jal	80003adc <GPIO_set_output>
    master_rx = SPI_transfer_frame( this_spi, 0x00 );// Dont care
80008504:	00000593          	li	a1,0
80008508:	fdc42503          	lw	a0,-36(s0)
8000850c:	f60f90ef          	jal	80001c6c <SPI_transfer_frame>
80008510:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
80008514:	00000593          	li	a1,0
80008518:	fdc42503          	lw	a0,-36(s0)
8000851c:	f50f90ef          	jal	80001c6c <SPI_transfer_frame>
80008520:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
80008524:	00000593          	li	a1,0
80008528:	fdc42503          	lw	a0,-36(s0)
8000852c:	f40f90ef          	jal	80001c6c <SPI_transfer_frame>
80008530:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
80008534:	00000593          	li	a1,0
80008538:	fdc42503          	lw	a0,-36(s0)
8000853c:	f30f90ef          	jal	80001c6c <SPI_transfer_frame>
80008540:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
80008544:	00000593          	li	a1,0
80008548:	fdc42503          	lw	a0,-36(s0)
8000854c:	f20f90ef          	jal	80001c6c <SPI_transfer_frame>
80008550:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
80008554:	00000593          	li	a1,0
80008558:	fdc42503          	lw	a0,-36(s0)
8000855c:	f10f90ef          	jal	80001c6c <SPI_transfer_frame>
80008560:	fea42623          	sw	a0,-20(s0)
    SPI_clear_slave_select( this_spi, SPI_SLAVE_0 );
80008564:	00000593          	li	a1,0
80008568:	fdc42503          	lw	a0,-36(s0)
8000856c:	e1cf90ef          	jal	80001b88 <SPI_clear_slave_select>
    //GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal
    return master_rx;
80008570:	fec42783          	lw	a5,-20(s0)
}
80008574:	00078513          	mv	a0,a5
80008578:	02c12083          	lw	ra,44(sp)
8000857c:	02812403          	lw	s0,40(sp)
80008580:	03010113          	addi	sp,sp,48
80008584:	00008067          	ret

80008588 <TFT_drawPixel>:
	int16_t xPt,
	int16_t yPt,
	uint16_t colour,
	gpio_instance_t * this_gpio
)
{
80008588:	fd010113          	addi	sp,sp,-48
8000858c:	02112623          	sw	ra,44(sp)
80008590:	02812423          	sw	s0,40(sp)
80008594:	03010413          	addi	s0,sp,48
80008598:	fca42e23          	sw	a0,-36(s0)
8000859c:	00068793          	mv	a5,a3
800085a0:	fce42823          	sw	a4,-48(s0)
800085a4:	fcb41d23          	sh	a1,-38(s0)
800085a8:	fcc41c23          	sh	a2,-40(s0)
800085ac:	fcf41b23          	sh	a5,-42(s0)
    if ((xPt < 0)||(xPt >= TFT_WIDTH)||(yPt < 0)||(yPt >= TFT_HEIGHT)) return;
800085b0:	fda41783          	lh	a5,-38(s0)
800085b4:	0a07c863          	bltz	a5,80008664 <TFT_drawPixel+0xdc>
800085b8:	fda41703          	lh	a4,-38(s0)
800085bc:	0ef00793          	li	a5,239
800085c0:	0ae7c263          	blt	a5,a4,80008664 <TFT_drawPixel+0xdc>
800085c4:	fd841783          	lh	a5,-40(s0)
800085c8:	0807ce63          	bltz	a5,80008664 <TFT_drawPixel+0xdc>
800085cc:	fd841703          	lh	a4,-40(s0)
800085d0:	13f00793          	li	a5,319
800085d4:	08e7c863          	blt	a5,a4,80008664 <TFT_drawPixel+0xdc>
    uint8_t colour_msb = 0;
800085d8:	fe0407a3          	sb	zero,-17(s0)
    colour_msb = colour >> 8;
800085dc:	fd645783          	lhu	a5,-42(s0)
800085e0:	0087d793          	srli	a5,a5,0x8
800085e4:	01079793          	slli	a5,a5,0x10
800085e8:	0107d793          	srli	a5,a5,0x10
800085ec:	fef407a3          	sb	a5,-17(s0)
    uint8_t colour_lsb = 0;
800085f0:	fe040723          	sb	zero,-18(s0)
    colour_lsb = colour;
800085f4:	fd645783          	lhu	a5,-42(s0)
800085f8:	fef40723          	sb	a5,-18(s0)
    TFT_setAddrWindow(this_spi, xPt, yPt, xPt+1 ,yPt+1, this_gpio);
800085fc:	fda45583          	lhu	a1,-38(s0)
80008600:	fd845603          	lhu	a2,-40(s0)
80008604:	fda45783          	lhu	a5,-38(s0)
80008608:	00178793          	addi	a5,a5,1
8000860c:	01079693          	slli	a3,a5,0x10
80008610:	0106d693          	srli	a3,a3,0x10
80008614:	fd845783          	lhu	a5,-40(s0)
80008618:	00178793          	addi	a5,a5,1
8000861c:	01079713          	slli	a4,a5,0x10
80008620:	01075713          	srli	a4,a4,0x10
80008624:	fd042783          	lw	a5,-48(s0)
80008628:	fdc42503          	lw	a0,-36(s0)
8000862c:	acdff0ef          	jal	800080f8 <TFT_setAddrWindow>
    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
80008630:	00100613          	li	a2,1
80008634:	00400593          	li	a1,4
80008638:	fd042503          	lw	a0,-48(s0)
8000863c:	ca0fb0ef          	jal	80003adc <GPIO_set_output>
    TFT_spiwrite( this_spi, colour_msb );
80008640:	fef44783          	lbu	a5,-17(s0)
80008644:	00078593          	mv	a1,a5
80008648:	fdc42503          	lw	a0,-36(s0)
8000864c:	90cff0ef          	jal	80007758 <TFT_spiwrite>
    TFT_spiwrite( this_spi, colour_lsb );
80008650:	fee44783          	lbu	a5,-18(s0)
80008654:	00078593          	mv	a1,a5
80008658:	fdc42503          	lw	a0,-36(s0)
8000865c:	8fcff0ef          	jal	80007758 <TFT_spiwrite>
80008660:	0080006f          	j	80008668 <TFT_drawPixel+0xe0>
    if ((xPt < 0)||(xPt >= TFT_WIDTH)||(yPt < 0)||(yPt >= TFT_HEIGHT)) return;
80008664:	00000013          	nop
}
80008668:	02c12083          	lw	ra,44(sp)
8000866c:	02812403          	lw	s0,40(sp)
80008670:	03010113          	addi	sp,sp,48
80008674:	00008067          	ret

80008678 <TFT_drawCircle>:
	int16_t y0,
	int16_t radius,
	uint16_t color,
	gpio_instance_t * this_gpio
)
{
80008678:	fd010113          	addi	sp,sp,-48
8000867c:	02112623          	sw	ra,44(sp)
80008680:	02812423          	sw	s0,40(sp)
80008684:	03010413          	addi	s0,sp,48
80008688:	fca42e23          	sw	a0,-36(s0)
8000868c:	fcf42823          	sw	a5,-48(s0)
80008690:	fcb41d23          	sh	a1,-38(s0)
80008694:	fcc41c23          	sh	a2,-40(s0)
80008698:	fcd41b23          	sh	a3,-42(s0)
8000869c:	fce41a23          	sh	a4,-44(s0)
  int16_t f = 1 - radius;
800086a0:	fd645783          	lhu	a5,-42(s0)
800086a4:	00100713          	li	a4,1
800086a8:	40f707b3          	sub	a5,a4,a5
800086ac:	01079793          	slli	a5,a5,0x10
800086b0:	0107d793          	srli	a5,a5,0x10
800086b4:	fef41723          	sh	a5,-18(s0)
  int16_t ddF_x = 1;
800086b8:	00100793          	li	a5,1
800086bc:	fef41623          	sh	a5,-20(s0)
  int16_t ddF_y = -2 * radius;
800086c0:	fd645783          	lhu	a5,-42(s0)
800086c4:	00000713          	li	a4,0
800086c8:	40f707b3          	sub	a5,a4,a5
800086cc:	00179793          	slli	a5,a5,0x1
800086d0:	01079793          	slli	a5,a5,0x10
800086d4:	0107d793          	srli	a5,a5,0x10
800086d8:	fef41523          	sh	a5,-22(s0)
  int16_t x = 0;
800086dc:	fe041423          	sh	zero,-24(s0)
  int16_t y = radius;
800086e0:	fd645783          	lhu	a5,-42(s0)
800086e4:	fef41323          	sh	a5,-26(s0)

  TFT_drawPixel(this_spi, x0  , y0+radius, color, this_gpio);
800086e8:	fd845703          	lhu	a4,-40(s0)
800086ec:	fd645783          	lhu	a5,-42(s0)
800086f0:	00f707b3          	add	a5,a4,a5
800086f4:	01079793          	slli	a5,a5,0x10
800086f8:	0107d793          	srli	a5,a5,0x10
800086fc:	01079613          	slli	a2,a5,0x10
80008700:	41065613          	srai	a2,a2,0x10
80008704:	fd445683          	lhu	a3,-44(s0)
80008708:	fda41783          	lh	a5,-38(s0)
8000870c:	fd042703          	lw	a4,-48(s0)
80008710:	00078593          	mv	a1,a5
80008714:	fdc42503          	lw	a0,-36(s0)
80008718:	e71ff0ef          	jal	80008588 <TFT_drawPixel>
  TFT_drawPixel(this_spi, x0  , y0-radius, color, this_gpio);
8000871c:	fd845703          	lhu	a4,-40(s0)
80008720:	fd645783          	lhu	a5,-42(s0)
80008724:	40f707b3          	sub	a5,a4,a5
80008728:	01079793          	slli	a5,a5,0x10
8000872c:	0107d793          	srli	a5,a5,0x10
80008730:	01079613          	slli	a2,a5,0x10
80008734:	41065613          	srai	a2,a2,0x10
80008738:	fd445683          	lhu	a3,-44(s0)
8000873c:	fda41783          	lh	a5,-38(s0)
80008740:	fd042703          	lw	a4,-48(s0)
80008744:	00078593          	mv	a1,a5
80008748:	fdc42503          	lw	a0,-36(s0)
8000874c:	e3dff0ef          	jal	80008588 <TFT_drawPixel>
  TFT_drawPixel(this_spi,x0+radius, y0  , color, this_gpio);
80008750:	fda45703          	lhu	a4,-38(s0)
80008754:	fd645783          	lhu	a5,-42(s0)
80008758:	00f707b3          	add	a5,a4,a5
8000875c:	01079793          	slli	a5,a5,0x10
80008760:	0107d793          	srli	a5,a5,0x10
80008764:	01079793          	slli	a5,a5,0x10
80008768:	4107d793          	srai	a5,a5,0x10
8000876c:	fd445683          	lhu	a3,-44(s0)
80008770:	fd841603          	lh	a2,-40(s0)
80008774:	fd042703          	lw	a4,-48(s0)
80008778:	00078593          	mv	a1,a5
8000877c:	fdc42503          	lw	a0,-36(s0)
80008780:	e09ff0ef          	jal	80008588 <TFT_drawPixel>
  TFT_drawPixel(this_spi,x0-radius, y0  , color, this_gpio);
80008784:	fda45703          	lhu	a4,-38(s0)
80008788:	fd645783          	lhu	a5,-42(s0)
8000878c:	40f707b3          	sub	a5,a4,a5
80008790:	01079793          	slli	a5,a5,0x10
80008794:	0107d793          	srli	a5,a5,0x10
80008798:	01079793          	slli	a5,a5,0x10
8000879c:	4107d793          	srai	a5,a5,0x10
800087a0:	fd445683          	lhu	a3,-44(s0)
800087a4:	fd841603          	lh	a2,-40(s0)
800087a8:	fd042703          	lw	a4,-48(s0)
800087ac:	00078593          	mv	a1,a5
800087b0:	fdc42503          	lw	a0,-36(s0)
800087b4:	dd5ff0ef          	jal	80008588 <TFT_drawPixel>

  while (x<y) {
800087b8:	2fc0006f          	j	80008ab4 <TFT_drawCircle+0x43c>
    if (f >= 0) {
800087bc:	fee41783          	lh	a5,-18(s0)
800087c0:	0407c663          	bltz	a5,8000880c <TFT_drawCircle+0x194>
      y--;
800087c4:	fe641783          	lh	a5,-26(s0)
800087c8:	01079793          	slli	a5,a5,0x10
800087cc:	0107d793          	srli	a5,a5,0x10
800087d0:	fff78793          	addi	a5,a5,-1
800087d4:	01079793          	slli	a5,a5,0x10
800087d8:	0107d793          	srli	a5,a5,0x10
800087dc:	fef41323          	sh	a5,-26(s0)
      ddF_y += 2;
800087e0:	fea45783          	lhu	a5,-22(s0)
800087e4:	00278793          	addi	a5,a5,2
800087e8:	01079793          	slli	a5,a5,0x10
800087ec:	0107d793          	srli	a5,a5,0x10
800087f0:	fef41523          	sh	a5,-22(s0)
      f += ddF_y;
800087f4:	fee45703          	lhu	a4,-18(s0)
800087f8:	fea45783          	lhu	a5,-22(s0)
800087fc:	00f707b3          	add	a5,a4,a5
80008800:	01079793          	slli	a5,a5,0x10
80008804:	0107d793          	srli	a5,a5,0x10
80008808:	fef41723          	sh	a5,-18(s0)
    }
    x++;
8000880c:	fe841783          	lh	a5,-24(s0)
80008810:	01079793          	slli	a5,a5,0x10
80008814:	0107d793          	srli	a5,a5,0x10
80008818:	00178793          	addi	a5,a5,1
8000881c:	01079793          	slli	a5,a5,0x10
80008820:	0107d793          	srli	a5,a5,0x10
80008824:	fef41423          	sh	a5,-24(s0)
    ddF_x += 2;
80008828:	fec45783          	lhu	a5,-20(s0)
8000882c:	00278793          	addi	a5,a5,2
80008830:	01079793          	slli	a5,a5,0x10
80008834:	0107d793          	srli	a5,a5,0x10
80008838:	fef41623          	sh	a5,-20(s0)
    f += ddF_x;
8000883c:	fee45703          	lhu	a4,-18(s0)
80008840:	fec45783          	lhu	a5,-20(s0)
80008844:	00f707b3          	add	a5,a4,a5
80008848:	01079793          	slli	a5,a5,0x10
8000884c:	0107d793          	srli	a5,a5,0x10
80008850:	fef41723          	sh	a5,-18(s0)

    TFT_drawPixel(this_spi,x0 + x, y0 + y, color, this_gpio);
80008854:	fda45703          	lhu	a4,-38(s0)
80008858:	fe845783          	lhu	a5,-24(s0)
8000885c:	00f707b3          	add	a5,a4,a5
80008860:	01079793          	slli	a5,a5,0x10
80008864:	0107d793          	srli	a5,a5,0x10
80008868:	01079593          	slli	a1,a5,0x10
8000886c:	4105d593          	srai	a1,a1,0x10
80008870:	fd845703          	lhu	a4,-40(s0)
80008874:	fe645783          	lhu	a5,-26(s0)
80008878:	00f707b3          	add	a5,a4,a5
8000887c:	01079793          	slli	a5,a5,0x10
80008880:	0107d793          	srli	a5,a5,0x10
80008884:	01079793          	slli	a5,a5,0x10
80008888:	4107d793          	srai	a5,a5,0x10
8000888c:	fd445683          	lhu	a3,-44(s0)
80008890:	fd042703          	lw	a4,-48(s0)
80008894:	00078613          	mv	a2,a5
80008898:	fdc42503          	lw	a0,-36(s0)
8000889c:	cedff0ef          	jal	80008588 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 - x, y0 + y, color, this_gpio);
800088a0:	fda45703          	lhu	a4,-38(s0)
800088a4:	fe845783          	lhu	a5,-24(s0)
800088a8:	40f707b3          	sub	a5,a4,a5
800088ac:	01079793          	slli	a5,a5,0x10
800088b0:	0107d793          	srli	a5,a5,0x10
800088b4:	01079593          	slli	a1,a5,0x10
800088b8:	4105d593          	srai	a1,a1,0x10
800088bc:	fd845703          	lhu	a4,-40(s0)
800088c0:	fe645783          	lhu	a5,-26(s0)
800088c4:	00f707b3          	add	a5,a4,a5
800088c8:	01079793          	slli	a5,a5,0x10
800088cc:	0107d793          	srli	a5,a5,0x10
800088d0:	01079793          	slli	a5,a5,0x10
800088d4:	4107d793          	srai	a5,a5,0x10
800088d8:	fd445683          	lhu	a3,-44(s0)
800088dc:	fd042703          	lw	a4,-48(s0)
800088e0:	00078613          	mv	a2,a5
800088e4:	fdc42503          	lw	a0,-36(s0)
800088e8:	ca1ff0ef          	jal	80008588 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 + x, y0 - y, color, this_gpio);
800088ec:	fda45703          	lhu	a4,-38(s0)
800088f0:	fe845783          	lhu	a5,-24(s0)
800088f4:	00f707b3          	add	a5,a4,a5
800088f8:	01079793          	slli	a5,a5,0x10
800088fc:	0107d793          	srli	a5,a5,0x10
80008900:	01079593          	slli	a1,a5,0x10
80008904:	4105d593          	srai	a1,a1,0x10
80008908:	fd845703          	lhu	a4,-40(s0)
8000890c:	fe645783          	lhu	a5,-26(s0)
80008910:	40f707b3          	sub	a5,a4,a5
80008914:	01079793          	slli	a5,a5,0x10
80008918:	0107d793          	srli	a5,a5,0x10
8000891c:	01079793          	slli	a5,a5,0x10
80008920:	4107d793          	srai	a5,a5,0x10
80008924:	fd445683          	lhu	a3,-44(s0)
80008928:	fd042703          	lw	a4,-48(s0)
8000892c:	00078613          	mv	a2,a5
80008930:	fdc42503          	lw	a0,-36(s0)
80008934:	c55ff0ef          	jal	80008588 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 - x, y0 - y, color, this_gpio);
80008938:	fda45703          	lhu	a4,-38(s0)
8000893c:	fe845783          	lhu	a5,-24(s0)
80008940:	40f707b3          	sub	a5,a4,a5
80008944:	01079793          	slli	a5,a5,0x10
80008948:	0107d793          	srli	a5,a5,0x10
8000894c:	01079593          	slli	a1,a5,0x10
80008950:	4105d593          	srai	a1,a1,0x10
80008954:	fd845703          	lhu	a4,-40(s0)
80008958:	fe645783          	lhu	a5,-26(s0)
8000895c:	40f707b3          	sub	a5,a4,a5
80008960:	01079793          	slli	a5,a5,0x10
80008964:	0107d793          	srli	a5,a5,0x10
80008968:	01079793          	slli	a5,a5,0x10
8000896c:	4107d793          	srai	a5,a5,0x10
80008970:	fd445683          	lhu	a3,-44(s0)
80008974:	fd042703          	lw	a4,-48(s0)
80008978:	00078613          	mv	a2,a5
8000897c:	fdc42503          	lw	a0,-36(s0)
80008980:	c09ff0ef          	jal	80008588 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 + y, y0 + x, color, this_gpio);
80008984:	fda45703          	lhu	a4,-38(s0)
80008988:	fe645783          	lhu	a5,-26(s0)
8000898c:	00f707b3          	add	a5,a4,a5
80008990:	01079793          	slli	a5,a5,0x10
80008994:	0107d793          	srli	a5,a5,0x10
80008998:	01079593          	slli	a1,a5,0x10
8000899c:	4105d593          	srai	a1,a1,0x10
800089a0:	fd845703          	lhu	a4,-40(s0)
800089a4:	fe845783          	lhu	a5,-24(s0)
800089a8:	00f707b3          	add	a5,a4,a5
800089ac:	01079793          	slli	a5,a5,0x10
800089b0:	0107d793          	srli	a5,a5,0x10
800089b4:	01079793          	slli	a5,a5,0x10
800089b8:	4107d793          	srai	a5,a5,0x10
800089bc:	fd445683          	lhu	a3,-44(s0)
800089c0:	fd042703          	lw	a4,-48(s0)
800089c4:	00078613          	mv	a2,a5
800089c8:	fdc42503          	lw	a0,-36(s0)
800089cc:	bbdff0ef          	jal	80008588 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 - y, y0 + x, color, this_gpio);
800089d0:	fda45703          	lhu	a4,-38(s0)
800089d4:	fe645783          	lhu	a5,-26(s0)
800089d8:	40f707b3          	sub	a5,a4,a5
800089dc:	01079793          	slli	a5,a5,0x10
800089e0:	0107d793          	srli	a5,a5,0x10
800089e4:	01079593          	slli	a1,a5,0x10
800089e8:	4105d593          	srai	a1,a1,0x10
800089ec:	fd845703          	lhu	a4,-40(s0)
800089f0:	fe845783          	lhu	a5,-24(s0)
800089f4:	00f707b3          	add	a5,a4,a5
800089f8:	01079793          	slli	a5,a5,0x10
800089fc:	0107d793          	srli	a5,a5,0x10
80008a00:	01079793          	slli	a5,a5,0x10
80008a04:	4107d793          	srai	a5,a5,0x10
80008a08:	fd445683          	lhu	a3,-44(s0)
80008a0c:	fd042703          	lw	a4,-48(s0)
80008a10:	00078613          	mv	a2,a5
80008a14:	fdc42503          	lw	a0,-36(s0)
80008a18:	b71ff0ef          	jal	80008588 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 + y, y0 - x, color, this_gpio);
80008a1c:	fda45703          	lhu	a4,-38(s0)
80008a20:	fe645783          	lhu	a5,-26(s0)
80008a24:	00f707b3          	add	a5,a4,a5
80008a28:	01079793          	slli	a5,a5,0x10
80008a2c:	0107d793          	srli	a5,a5,0x10
80008a30:	01079593          	slli	a1,a5,0x10
80008a34:	4105d593          	srai	a1,a1,0x10
80008a38:	fd845703          	lhu	a4,-40(s0)
80008a3c:	fe845783          	lhu	a5,-24(s0)
80008a40:	40f707b3          	sub	a5,a4,a5
80008a44:	01079793          	slli	a5,a5,0x10
80008a48:	0107d793          	srli	a5,a5,0x10
80008a4c:	01079793          	slli	a5,a5,0x10
80008a50:	4107d793          	srai	a5,a5,0x10
80008a54:	fd445683          	lhu	a3,-44(s0)
80008a58:	fd042703          	lw	a4,-48(s0)
80008a5c:	00078613          	mv	a2,a5
80008a60:	fdc42503          	lw	a0,-36(s0)
80008a64:	b25ff0ef          	jal	80008588 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 - y, y0 - x, color, this_gpio);
80008a68:	fda45703          	lhu	a4,-38(s0)
80008a6c:	fe645783          	lhu	a5,-26(s0)
80008a70:	40f707b3          	sub	a5,a4,a5
80008a74:	01079793          	slli	a5,a5,0x10
80008a78:	0107d793          	srli	a5,a5,0x10
80008a7c:	01079593          	slli	a1,a5,0x10
80008a80:	4105d593          	srai	a1,a1,0x10
80008a84:	fd845703          	lhu	a4,-40(s0)
80008a88:	fe845783          	lhu	a5,-24(s0)
80008a8c:	40f707b3          	sub	a5,a4,a5
80008a90:	01079793          	slli	a5,a5,0x10
80008a94:	0107d793          	srli	a5,a5,0x10
80008a98:	01079793          	slli	a5,a5,0x10
80008a9c:	4107d793          	srai	a5,a5,0x10
80008aa0:	fd445683          	lhu	a3,-44(s0)
80008aa4:	fd042703          	lw	a4,-48(s0)
80008aa8:	00078613          	mv	a2,a5
80008aac:	fdc42503          	lw	a0,-36(s0)
80008ab0:	ad9ff0ef          	jal	80008588 <TFT_drawPixel>
  while (x<y) {
80008ab4:	fe841703          	lh	a4,-24(s0)
80008ab8:	fe641783          	lh	a5,-26(s0)
80008abc:	d0f740e3          	blt	a4,a5,800087bc <TFT_drawCircle+0x144>
  }
}
80008ac0:	00000013          	nop
80008ac4:	02c12083          	lw	ra,44(sp)
80008ac8:	02812403          	lw	s0,40(sp)
80008acc:	03010113          	addi	sp,sp,48
80008ad0:	00008067          	ret

80008ad4 <TFT_drawLine>:
	int16_t x1,
	int16_t y1,
	uint16_t color,
	gpio_instance_t * this_gpio
)
{
80008ad4:	fb010113          	addi	sp,sp,-80
80008ad8:	04112623          	sw	ra,76(sp)
80008adc:	04812423          	sw	s0,72(sp)
80008ae0:	05010413          	addi	s0,sp,80
80008ae4:	fca42623          	sw	a0,-52(s0)
80008ae8:	fb042e23          	sw	a6,-68(s0)
80008aec:	fcb41523          	sh	a1,-54(s0)
80008af0:	fcc41423          	sh	a2,-56(s0)
80008af4:	fcd41323          	sh	a3,-58(s0)
80008af8:	fce41223          	sh	a4,-60(s0)
80008afc:	fcf41123          	sh	a5,-62(s0)
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
80008b00:	fc441703          	lh	a4,-60(s0)
80008b04:	fc841783          	lh	a5,-56(s0)
80008b08:	40f70733          	sub	a4,a4,a5
80008b0c:	41f75793          	srai	a5,a4,0x1f
80008b10:	00e7c733          	xor	a4,a5,a4
80008b14:	40f70733          	sub	a4,a4,a5
80008b18:	fc641683          	lh	a3,-58(s0)
80008b1c:	fca41783          	lh	a5,-54(s0)
80008b20:	40f687b3          	sub	a5,a3,a5
80008b24:	41f7d693          	srai	a3,a5,0x1f
80008b28:	00f6c7b3          	xor	a5,a3,a5
80008b2c:	40d787b3          	sub	a5,a5,a3
80008b30:	00e7a7b3          	slt	a5,a5,a4
80008b34:	0ff7f793          	andi	a5,a5,255
80008b38:	fef41523          	sh	a5,-22(s0)
  if (steep) {
80008b3c:	fea41783          	lh	a5,-22(s0)
80008b40:	02078a63          	beqz	a5,80008b74 <TFT_drawLine+0xa0>
    _swap_int16_t(x0, y0);
80008b44:	fca45783          	lhu	a5,-54(s0)
80008b48:	fef41423          	sh	a5,-24(s0)
80008b4c:	fc845783          	lhu	a5,-56(s0)
80008b50:	fcf41523          	sh	a5,-54(s0)
80008b54:	fe845783          	lhu	a5,-24(s0)
80008b58:	fcf41423          	sh	a5,-56(s0)
    _swap_int16_t(x1, y1);
80008b5c:	fc645783          	lhu	a5,-58(s0)
80008b60:	fef41323          	sh	a5,-26(s0)
80008b64:	fc445783          	lhu	a5,-60(s0)
80008b68:	fcf41323          	sh	a5,-58(s0)
80008b6c:	fe645783          	lhu	a5,-26(s0)
80008b70:	fcf41223          	sh	a5,-60(s0)
  }

  if (x0 > x1) {
80008b74:	fca41703          	lh	a4,-54(s0)
80008b78:	fc641783          	lh	a5,-58(s0)
80008b7c:	02e7da63          	ble	a4,a5,80008bb0 <TFT_drawLine+0xdc>
    _swap_int16_t(x0, x1);
80008b80:	fca45783          	lhu	a5,-54(s0)
80008b84:	fef41223          	sh	a5,-28(s0)
80008b88:	fc645783          	lhu	a5,-58(s0)
80008b8c:	fcf41523          	sh	a5,-54(s0)
80008b90:	fe445783          	lhu	a5,-28(s0)
80008b94:	fcf41323          	sh	a5,-58(s0)
    _swap_int16_t(y0, y1);
80008b98:	fc845783          	lhu	a5,-56(s0)
80008b9c:	fef41123          	sh	a5,-30(s0)
80008ba0:	fc445783          	lhu	a5,-60(s0)
80008ba4:	fcf41423          	sh	a5,-56(s0)
80008ba8:	fe245783          	lhu	a5,-30(s0)
80008bac:	fcf41223          	sh	a5,-60(s0)
  }

  int16_t dx, dy;
  dx = x1 - x0;
80008bb0:	fc645703          	lhu	a4,-58(s0)
80008bb4:	fca45783          	lhu	a5,-54(s0)
80008bb8:	40f707b3          	sub	a5,a4,a5
80008bbc:	01079793          	slli	a5,a5,0x10
80008bc0:	0107d793          	srli	a5,a5,0x10
80008bc4:	fef41023          	sh	a5,-32(s0)
  dy = abs(y1 - y0);
80008bc8:	fc441703          	lh	a4,-60(s0)
80008bcc:	fc841783          	lh	a5,-56(s0)
80008bd0:	40f707b3          	sub	a5,a4,a5
80008bd4:	41f7d713          	srai	a4,a5,0x1f
80008bd8:	00f747b3          	xor	a5,a4,a5
80008bdc:	40e787b3          	sub	a5,a5,a4
80008be0:	fcf41f23          	sh	a5,-34(s0)

  int16_t err = dx / 2;
80008be4:	fe041783          	lh	a5,-32(s0)
80008be8:	01f7d713          	srli	a4,a5,0x1f
80008bec:	00f707b3          	add	a5,a4,a5
80008bf0:	4017d793          	srai	a5,a5,0x1
80008bf4:	fef41723          	sh	a5,-18(s0)
  int16_t ystep;

  if (y0 < y1) {
80008bf8:	fc841703          	lh	a4,-56(s0)
80008bfc:	fc441783          	lh	a5,-60(s0)
80008c00:	00f75863          	ble	a5,a4,80008c10 <TFT_drawLine+0x13c>
    ystep = 1;
80008c04:	00100793          	li	a5,1
80008c08:	fef41623          	sh	a5,-20(s0)
80008c0c:	0c00006f          	j	80008ccc <TFT_drawLine+0x1f8>
  } else {
    ystep = -1;
80008c10:	fff00793          	li	a5,-1
80008c14:	fef41623          	sh	a5,-20(s0)
  }

  for (; x0<=x1; x0++) {
80008c18:	0b40006f          	j	80008ccc <TFT_drawLine+0x1f8>
    if (steep) {
80008c1c:	fea41783          	lh	a5,-22(s0)
80008c20:	02078263          	beqz	a5,80008c44 <TFT_drawLine+0x170>
    	TFT_drawPixel(this_spi,y0, x0, color, this_gpio);
80008c24:	fc245683          	lhu	a3,-62(s0)
80008c28:	fca41603          	lh	a2,-54(s0)
80008c2c:	fc841783          	lh	a5,-56(s0)
80008c30:	fbc42703          	lw	a4,-68(s0)
80008c34:	00078593          	mv	a1,a5
80008c38:	fcc42503          	lw	a0,-52(s0)
80008c3c:	94dff0ef          	jal	80008588 <TFT_drawPixel>
80008c40:	0200006f          	j	80008c60 <TFT_drawLine+0x18c>
    } else {
    	TFT_drawPixel(this_spi,x0, y0, color,this_gpio);
80008c44:	fc245683          	lhu	a3,-62(s0)
80008c48:	fc841603          	lh	a2,-56(s0)
80008c4c:	fca41783          	lh	a5,-54(s0)
80008c50:	fbc42703          	lw	a4,-68(s0)
80008c54:	00078593          	mv	a1,a5
80008c58:	fcc42503          	lw	a0,-52(s0)
80008c5c:	92dff0ef          	jal	80008588 <TFT_drawPixel>
    }
    err -= dy;
80008c60:	fee45703          	lhu	a4,-18(s0)
80008c64:	fde45783          	lhu	a5,-34(s0)
80008c68:	40f707b3          	sub	a5,a4,a5
80008c6c:	01079793          	slli	a5,a5,0x10
80008c70:	0107d793          	srli	a5,a5,0x10
80008c74:	fef41723          	sh	a5,-18(s0)
    if (err < 0) {
80008c78:	fee41783          	lh	a5,-18(s0)
80008c7c:	0207da63          	bgez	a5,80008cb0 <TFT_drawLine+0x1dc>
      y0 += ystep;
80008c80:	fc845703          	lhu	a4,-56(s0)
80008c84:	fec45783          	lhu	a5,-20(s0)
80008c88:	00f707b3          	add	a5,a4,a5
80008c8c:	01079793          	slli	a5,a5,0x10
80008c90:	0107d793          	srli	a5,a5,0x10
80008c94:	fcf41423          	sh	a5,-56(s0)
      err += dx;
80008c98:	fee45703          	lhu	a4,-18(s0)
80008c9c:	fe045783          	lhu	a5,-32(s0)
80008ca0:	00f707b3          	add	a5,a4,a5
80008ca4:	01079793          	slli	a5,a5,0x10
80008ca8:	0107d793          	srli	a5,a5,0x10
80008cac:	fef41723          	sh	a5,-18(s0)
  for (; x0<=x1; x0++) {
80008cb0:	fca41783          	lh	a5,-54(s0)
80008cb4:	01079793          	slli	a5,a5,0x10
80008cb8:	0107d793          	srli	a5,a5,0x10
80008cbc:	00178793          	addi	a5,a5,1
80008cc0:	01079793          	slli	a5,a5,0x10
80008cc4:	0107d793          	srli	a5,a5,0x10
80008cc8:	fcf41523          	sh	a5,-54(s0)
80008ccc:	fca41703          	lh	a4,-54(s0)
80008cd0:	fc641783          	lh	a5,-58(s0)
80008cd4:	f4e7d4e3          	ble	a4,a5,80008c1c <TFT_drawLine+0x148>
    }
  }
}
80008cd8:	00000013          	nop
80008cdc:	04c12083          	lw	ra,76(sp)
80008ce0:	04812403          	lw	s0,72(sp)
80008ce4:	05010113          	addi	sp,sp,80
80008ce8:	00008067          	ret

80008cec <main>:

/*-------------------------------------------------------------------------*//**
 * main() function.
 */
int main()
{
80008cec:	fe010113          	addi	sp,sp,-32
80008cf0:	00112e23          	sw	ra,28(sp)
80008cf4:	00812c23          	sw	s0,24(sp)
80008cf8:	02010413          	addi	s0,sp,32
    g_10ms_count = 0;
80008cfc:	8002b7b7          	lui	a5,0x8002b
80008d00:	a007ae23          	sw	zero,-1508(a5) # 8002aa1c <_end+0xfffffff8>

    /**************************************************************************
     * Initialize the CoreGPIO driver with the base address of the CoreGPIO
     * instance to use and the initial state of the outputs.
     *************************************************************************/
    GPIO_init( &g_gpio, COREGPIO_OUT_BASE_ADDR, GPIO_APB_32_BITS_BUS );
80008d04:	00200613          	li	a2,2
80008d08:	700055b7          	lui	a1,0x70005
80008d0c:	8002b7b7          	lui	a5,0x8002b
80008d10:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008d14:	fb0fa0ef          	jal	800034c4 <GPIO_init>
    GPIO_set_outputs(&g_gpio, 0);
80008d18:	00000593          	li	a1,0
80008d1c:	8002b7b7          	lui	a5,0x8002b
80008d20:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008d24:	97dfa0ef          	jal	800036a0 <GPIO_set_outputs>
   
    /**************************************************************************
     * Configure the GPIOs.
     ************************************3*************************************/
	GPIO_set_output( &g_gpio, GPIO_0, 0x00 );
80008d28:	00000613          	li	a2,0
80008d2c:	00000593          	li	a1,0
80008d30:	8002b7b7          	lui	a5,0x8002b
80008d34:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008d38:	da5fa0ef          	jal	80003adc <GPIO_set_output>
	GPIO_set_output( &g_gpio, GPIO_1, 0x00 );
80008d3c:	00000613          	li	a2,0
80008d40:	00100593          	li	a1,1
80008d44:	8002b7b7          	lui	a5,0x8002b
80008d48:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008d4c:	d91fa0ef          	jal	80003adc <GPIO_set_output>
    GPIO_config( &g_gpio, GPIO_4, GPIO_OUTPUT_MODE); // Data Command Signal
80008d50:	00500613          	li	a2,5
80008d54:	00400593          	li	a1,4
80008d58:	8002b7b7          	lui	a5,0x8002b
80008d5c:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008d60:	8d9fa0ef          	jal	80003638 <GPIO_config>
	GPIO_set_output( &g_gpio, GPIO_4, 1 ); // Data Command Signal
80008d64:	00100613          	li	a2,1
80008d68:	00400593          	li	a1,4
80008d6c:	8002b7b7          	lui	a5,0x8002b
80008d70:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008d74:	d69fa0ef          	jal	80003adc <GPIO_set_output>
	GPIO_config( &g_gpio, GPIO_6, GPIO_OUTPUT_MODE); // reset Signal
80008d78:	00500613          	li	a2,5
80008d7c:	00600593          	li	a1,6
80008d80:	8002b7b7          	lui	a5,0x8002b
80008d84:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008d88:	8b1fa0ef          	jal	80003638 <GPIO_config>
	GPIO_set_output( &g_gpio, GPIO_6, 1 ); // reset Signal
80008d8c:	00100613          	li	a2,1
80008d90:	00600593          	li	a1,6
80008d94:	8002b7b7          	lui	a5,0x8002b
80008d98:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008d9c:	d41fa0ef          	jal	80003adc <GPIO_set_output>
	GPIO_config( &g_gpio, GPIO_5, GPIO_OUTPUT_MODE); // Chip Select Signal TS
80008da0:	00500613          	li	a2,5
80008da4:	00500593          	li	a1,5
80008da8:	8002b7b7          	lui	a5,0x8002b
80008dac:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008db0:	889fa0ef          	jal	80003638 <GPIO_config>
	GPIO_set_output( &g_gpio, GPIO_5, 1 ); // Chip Select Signal TS
80008db4:	00100613          	li	a2,1
80008db8:	00500593          	li	a1,5
80008dbc:	8002b7b7          	lui	a5,0x8002b
80008dc0:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008dc4:	d19fa0ef          	jal	80003adc <GPIO_set_output>

    /**************************************************************************
      * Initialize CoreSPI0  in master mode.
      *************************************************************************/
	SPI_init(&g_core_spi0, CORE_SPI0_BASE_ADDRESS,8);
80008dc8:	00800613          	li	a2,8
80008dcc:	700065b7          	lui	a1,0x70006
80008dd0:	8002b7b7          	lui	a5,0x8002b
80008dd4:	9d078513          	addi	a0,a5,-1584 # 8002a9d0 <_end+0xffffffac>
80008dd8:	a01f80ef          	jal	800017d8 <SPI_init>
	SPI_configure_master_mode(&g_core_spi0);
80008ddc:	8002b7b7          	lui	a5,0x8002b
80008de0:	9d078513          	addi	a0,a5,-1584 # 8002a9d0 <_end+0xffffffac>
80008de4:	c15f80ef          	jal	800019f8 <SPI_configure_master_mode>

	/**************************************************************************
      * Initialize TFT Screen.
      *************************************************************************/
	TFT_begin( &g_core_spi0, &g_gpio); // initialize the TFT Screen
80008de8:	8002b7b7          	lui	a5,0x8002b
80008dec:	9c878593          	addi	a1,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008df0:	8002b7b7          	lui	a5,0x8002b
80008df4:	9d078513          	addi	a0,a5,-1584 # 8002a9d0 <_end+0xffffffac>
80008df8:	9b9fe0ef          	jal	800077b0 <TFT_begin>
	for(volatile uint16_t delay0 = 0; delay0 < 0xFF; delay0++); // Delay
80008dfc:	fe041723          	sh	zero,-18(s0)
80008e00:	0200006f          	j	80008e20 <main+0x134>
80008e04:	fee45783          	lhu	a5,-18(s0)
80008e08:	01079793          	slli	a5,a5,0x10
80008e0c:	0107d793          	srli	a5,a5,0x10
80008e10:	00178793          	addi	a5,a5,1
80008e14:	01079793          	slli	a5,a5,0x10
80008e18:	0107d793          	srli	a5,a5,0x10
80008e1c:	fef41723          	sh	a5,-18(s0)
80008e20:	fee45783          	lhu	a5,-18(s0)
80008e24:	01079713          	slli	a4,a5,0x10
80008e28:	01075713          	srli	a4,a4,0x10
80008e2c:	0fe00793          	li	a5,254
80008e30:	fce7fae3          	bleu	a4,a5,80008e04 <main+0x118>

	/**************************************************************************
      * Initialize Touch Screen (TS).
      *************************************************************************/
	TS_begin(&g_core_spi0, &g_gpio); // initialize the touch screen
80008e34:	8002b7b7          	lui	a5,0x8002b
80008e38:	9c878593          	addi	a1,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008e3c:	8002b7b7          	lui	a5,0x8002b
80008e40:	9d078513          	addi	a0,a5,-1584 # 8002a9d0 <_end+0xffffffac>
80008e44:	b98fe0ef          	jal	800071dc <TS_begin>
	for(volatile uint16_t delay1 = 0; delay1 < 0xFF; delay1++); // Delay
80008e48:	fe041623          	sh	zero,-20(s0)
80008e4c:	0200006f          	j	80008e6c <main+0x180>
80008e50:	fec45783          	lhu	a5,-20(s0)
80008e54:	01079793          	slli	a5,a5,0x10
80008e58:	0107d793          	srli	a5,a5,0x10
80008e5c:	00178793          	addi	a5,a5,1
80008e60:	01079793          	slli	a5,a5,0x10
80008e64:	0107d793          	srli	a5,a5,0x10
80008e68:	fef41623          	sh	a5,-20(s0)
80008e6c:	fec45783          	lhu	a5,-20(s0)
80008e70:	01079713          	slli	a4,a5,0x10
80008e74:	01075713          	srli	a4,a4,0x10
80008e78:	0fe00793          	li	a5,254
80008e7c:	fce7fae3          	bleu	a4,a5,80008e50 <main+0x164>
      * Player Modes
      * Single Player 	->  	singlePlayerMode(&g_core_spi0, &g_gpio)
      * Two Player 		->		twoPlayerMode(&g_core_spi0, &g_gpio);
      *************************************************************************/
	//twoPlayerMode(&g_core_spi0, &g_gpio); // Two Player Mode
	singlePlayerMode(&g_core_spi0, &g_gpio); // Single Player Mode
80008e80:	8002b7b7          	lui	a5,0x8002b
80008e84:	9c878593          	addi	a1,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008e88:	8002b7b7          	lui	a5,0x8002b
80008e8c:	9d078513          	addi	a0,a5,-1584 # 8002a9d0 <_end+0xffffffac>
80008e90:	ae4fb0ef          	jal	80004174 <singlePlayerMode>

	while(1);
80008e94:	0000006f          	j	80008e94 <main+0x1a8>

80008e98 <SysTick_Handler>:
 * 10mS so the resolution will be 10ms). Rolls over every 49 days or so...
 *
 * Should be safe to read g_10ms_count from elsewhere.
 */
void SysTick_Handler( void )
{
80008e98:	fe010113          	addi	sp,sp,-32
80008e9c:	00112e23          	sw	ra,28(sp)
80008ea0:	00812c23          	sw	s0,24(sp)
80008ea4:	02010413          	addi	s0,sp,32
    static uint8_t count;
    /*
     * Toggle GPIO output pattern by doing an exclusive OR of all
     * pattern bits with ones.
     */
    if(count++>=50)
80008ea8:	8002b7b7          	lui	a5,0x8002b
80008eac:	9087c783          	lbu	a5,-1784(a5) # 8002a908 <_end+0xfffffee4>
80008eb0:	00178713          	addi	a4,a5,1
80008eb4:	0ff77693          	andi	a3,a4,255
80008eb8:	8002b737          	lui	a4,0x8002b
80008ebc:	90d70423          	sb	a3,-1784(a4) # 8002a908 <_end+0xfffffee4>
80008ec0:	03100713          	li	a4,49
80008ec4:	02f77c63          	bleu	a5,a4,80008efc <SysTick_Handler+0x64>
    {
        gpio_pattern = GPIO_get_outputs( &g_gpio );
80008ec8:	8002b7b7          	lui	a5,0x8002b
80008ecc:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008ed0:	a95fa0ef          	jal	80003964 <GPIO_get_outputs>
80008ed4:	fea42623          	sw	a0,-20(s0)
        gpio_pattern ^= 0x00000002;
80008ed8:	fec42783          	lw	a5,-20(s0)
80008edc:	0027c793          	xori	a5,a5,2
80008ee0:	fef42623          	sw	a5,-20(s0)
        GPIO_set_outputs( &g_gpio, gpio_pattern );
80008ee4:	fec42583          	lw	a1,-20(s0)
80008ee8:	8002b7b7          	lui	a5,0x8002b
80008eec:	9c878513          	addi	a0,a5,-1592 # 8002a9c8 <_end+0xffffffa4>
80008ef0:	fb0fa0ef          	jal	800036a0 <GPIO_set_outputs>
        count=0;
80008ef4:	8002b7b7          	lui	a5,0x8002b
80008ef8:	90078423          	sb	zero,-1784(a5) # 8002a908 <_end+0xfffffee4>
    }

    g_10ms_count += 10;
80008efc:	8002b7b7          	lui	a5,0x8002b
80008f00:	a1c7a783          	lw	a5,-1508(a5) # 8002aa1c <_end+0xfffffff8>
80008f04:	00a78713          	addi	a4,a5,10
80008f08:	8002b7b7          	lui	a5,0x8002b
80008f0c:	a0e7ae23          	sw	a4,-1508(a5) # 8002aa1c <_end+0xfffffff8>

     /*
      * For neatness, if we roll over, reset cleanly back to 0 so the count
      * always goes up in proper 10s.
      */
    if(g_10ms_count < 10)
80008f10:	8002b7b7          	lui	a5,0x8002b
80008f14:	a1c7a703          	lw	a4,-1508(a5) # 8002aa1c <_end+0xfffffff8>
80008f18:	00900793          	li	a5,9
80008f1c:	00e7e663          	bltu	a5,a4,80008f28 <SysTick_Handler+0x90>
        g_10ms_count = 0;
80008f20:	8002b7b7          	lui	a5,0x8002b
80008f24:	a007ae23          	sw	zero,-1508(a5) # 8002aa1c <_end+0xfffffff8>
}
80008f28:	00000013          	nop
80008f2c:	01c12083          	lw	ra,28(sp)
80008f30:	01812403          	lw	s0,24(sp)
80008f34:	02010113          	addi	sp,sp,32
80008f38:	00008067          	ret

80008f3c <exit>:
80008f3c:	ff010113          	addi	sp,sp,-16
80008f40:	00000593          	li	a1,0
80008f44:	00812423          	sw	s0,8(sp)
80008f48:	00112623          	sw	ra,12(sp)
80008f4c:	00050413          	mv	s0,a0
80008f50:	194000ef          	jal	800090e4 <__call_exitprocs>
80008f54:	8000b7b7          	lui	a5,0x8000b
80008f58:	8dc7a503          	lw	a0,-1828(a5) # 8000a8dc <_end+0xfffdfeb8>
80008f5c:	03c52783          	lw	a5,60(a0)
80008f60:	00078463          	beqz	a5,80008f68 <exit+0x2c>
80008f64:	000780e7          	jalr	a5
80008f68:	00040513          	mv	a0,s0
80008f6c:	ea4f70ef          	jal	80000610 <_exit>

80008f70 <memset>:
80008f70:	00f00813          	li	a6,15
80008f74:	00050713          	mv	a4,a0
80008f78:	02c87e63          	bleu	a2,a6,80008fb4 <memset+0x44>
80008f7c:	00f77793          	andi	a5,a4,15
80008f80:	0a079063          	bnez	a5,80009020 <memset+0xb0>
80008f84:	08059263          	bnez	a1,80009008 <memset+0x98>
80008f88:	ff067693          	andi	a3,a2,-16
80008f8c:	00f67613          	andi	a2,a2,15
80008f90:	00e686b3          	add	a3,a3,a4
80008f94:	00b72023          	sw	a1,0(a4)
80008f98:	00b72223          	sw	a1,4(a4)
80008f9c:	00b72423          	sw	a1,8(a4)
80008fa0:	00b72623          	sw	a1,12(a4)
80008fa4:	01070713          	addi	a4,a4,16
80008fa8:	fed766e3          	bltu	a4,a3,80008f94 <memset+0x24>
80008fac:	00061463          	bnez	a2,80008fb4 <memset+0x44>
80008fb0:	00008067          	ret
80008fb4:	40c806b3          	sub	a3,a6,a2
80008fb8:	00269693          	slli	a3,a3,0x2
80008fbc:	00000297          	auipc	t0,0x0
80008fc0:	005686b3          	add	a3,a3,t0
80008fc4:	00c68067          	jr	a3,12 # 4400000c <_start-0x3bfffff4>
80008fc8:	00b70723          	sb	a1,14(a4)
80008fcc:	00b706a3          	sb	a1,13(a4)
80008fd0:	00b70623          	sb	a1,12(a4)
80008fd4:	00b705a3          	sb	a1,11(a4)
80008fd8:	00b70523          	sb	a1,10(a4)
80008fdc:	00b704a3          	sb	a1,9(a4)
80008fe0:	00b70423          	sb	a1,8(a4)
80008fe4:	00b703a3          	sb	a1,7(a4)
80008fe8:	00b70323          	sb	a1,6(a4)
80008fec:	00b702a3          	sb	a1,5(a4)
80008ff0:	00b70223          	sb	a1,4(a4)
80008ff4:	00b701a3          	sb	a1,3(a4)
80008ff8:	00b70123          	sb	a1,2(a4)
80008ffc:	00b700a3          	sb	a1,1(a4)
80009000:	00b70023          	sb	a1,0(a4)
80009004:	00008067          	ret
80009008:	0ff5f593          	andi	a1,a1,255
8000900c:	00859693          	slli	a3,a1,0x8
80009010:	00d5e5b3          	or	a1,a1,a3
80009014:	01059693          	slli	a3,a1,0x10
80009018:	00d5e5b3          	or	a1,a1,a3
8000901c:	f6dff06f          	j	80008f88 <memset+0x18>
80009020:	00279693          	slli	a3,a5,0x2
80009024:	00000297          	auipc	t0,0x0
80009028:	005686b3          	add	a3,a3,t0
8000902c:	00008293          	mv	t0,ra
80009030:	fa0680e7          	jalr	a3,-96
80009034:	00028093          	mv	ra,t0
80009038:	ff078793          	addi	a5,a5,-16
8000903c:	40f70733          	sub	a4,a4,a5
80009040:	00f60633          	add	a2,a2,a5
80009044:	f6c878e3          	bleu	a2,a6,80008fb4 <memset+0x44>
80009048:	f3dff06f          	j	80008f84 <memset+0x14>

8000904c <strlen>:
8000904c:	00357713          	andi	a4,a0,3
80009050:	00050793          	mv	a5,a0
80009054:	00050693          	mv	a3,a0
80009058:	04071c63          	bnez	a4,800090b0 <strlen+0x64>
8000905c:	7f7f8637          	lui	a2,0x7f7f8
80009060:	f7f60613          	addi	a2,a2,-129 # 7f7f7f7f <_start-0x808081>
80009064:	fff00593          	li	a1,-1
80009068:	00468693          	addi	a3,a3,4
8000906c:	ffc6a703          	lw	a4,-4(a3)
80009070:	00c777b3          	and	a5,a4,a2
80009074:	00c787b3          	add	a5,a5,a2
80009078:	00c76733          	or	a4,a4,a2
8000907c:	00e7e7b3          	or	a5,a5,a4
80009080:	feb784e3          	beq	a5,a1,80009068 <strlen+0x1c>
80009084:	ffc6c703          	lbu	a4,-4(a3)
80009088:	40a687b3          	sub	a5,a3,a0
8000908c:	ffd6c603          	lbu	a2,-3(a3)
80009090:	ffe6c503          	lbu	a0,-2(a3)
80009094:	04070063          	beqz	a4,800090d4 <strlen+0x88>
80009098:	02060a63          	beqz	a2,800090cc <strlen+0x80>
8000909c:	00a03533          	snez	a0,a0
800090a0:	00f50533          	add	a0,a0,a5
800090a4:	ffe50513          	addi	a0,a0,-2
800090a8:	00008067          	ret
800090ac:	02068863          	beqz	a3,800090dc <strlen+0x90>
800090b0:	0007c703          	lbu	a4,0(a5)
800090b4:	00178793          	addi	a5,a5,1
800090b8:	0037f693          	andi	a3,a5,3
800090bc:	fe0718e3          	bnez	a4,800090ac <strlen+0x60>
800090c0:	40a787b3          	sub	a5,a5,a0
800090c4:	fff78513          	addi	a0,a5,-1
800090c8:	00008067          	ret
800090cc:	ffd78513          	addi	a0,a5,-3
800090d0:	00008067          	ret
800090d4:	ffc78513          	addi	a0,a5,-4
800090d8:	00008067          	ret
800090dc:	00078693          	mv	a3,a5
800090e0:	f7dff06f          	j	8000905c <strlen+0x10>

800090e4 <__call_exitprocs>:
800090e4:	fc010113          	addi	sp,sp,-64
800090e8:	8000b7b7          	lui	a5,0x8000b
800090ec:	01712e23          	sw	s7,28(sp)
800090f0:	8dc7ab83          	lw	s7,-1828(a5) # 8000a8dc <_end+0xfffdfeb8>
800090f4:	03612023          	sw	s6,32(sp)
800090f8:	00000b37          	lui	s6,0x0
800090fc:	03212823          	sw	s2,48(sp)
80009100:	03412423          	sw	s4,40(sp)
80009104:	03512223          	sw	s5,36(sp)
80009108:	01812c23          	sw	s8,24(sp)
8000910c:	01912a23          	sw	s9,20(sp)
80009110:	02112e23          	sw	ra,60(sp)
80009114:	02812c23          	sw	s0,56(sp)
80009118:	02912a23          	sw	s1,52(sp)
8000911c:	03312623          	sw	s3,44(sp)
80009120:	01a12823          	sw	s10,16(sp)
80009124:	01b12623          	sw	s11,12(sp)
80009128:	00050a93          	mv	s5,a0
8000912c:	00058913          	mv	s2,a1
80009130:	148b8c13          	addi	s8,s7,328
80009134:	00100a13          	li	s4,1
80009138:	fff00c93          	li	s9,-1
8000913c:	000b0b13          	mv	s6,s6
80009140:	148ba983          	lw	s3,328(s7)
80009144:	06098063          	beqz	s3,800091a4 <__call_exitprocs+0xc0>
80009148:	000c0d93          	mv	s11,s8
8000914c:	0049a403          	lw	s0,4(s3)
80009150:	00241493          	slli	s1,s0,0x2
80009154:	fff40413          	addi	s0,s0,-1
80009158:	009984b3          	add	s1,s3,s1
8000915c:	00044e63          	bltz	s0,80009178 <__call_exitprocs+0x94>
80009160:	08090063          	beqz	s2,800091e0 <__call_exitprocs+0xfc>
80009164:	1044a783          	lw	a5,260(s1)
80009168:	06f90c63          	beq	s2,a5,800091e0 <__call_exitprocs+0xfc>
8000916c:	fff40413          	addi	s0,s0,-1
80009170:	ffc48493          	addi	s1,s1,-4
80009174:	ff9416e3          	bne	s0,s9,80009160 <__call_exitprocs+0x7c>
80009178:	020b0663          	beqz	s6,800091a4 <__call_exitprocs+0xc0>
8000917c:	0049a783          	lw	a5,4(s3)
80009180:	0c079a63          	bnez	a5,80009254 <__call_exitprocs+0x170>
80009184:	0009a783          	lw	a5,0(s3)
80009188:	00078e63          	beqz	a5,800091a4 <__call_exitprocs+0xc0>
8000918c:	00098513          	mv	a0,s3
80009190:	00fda023          	sw	a5,0(s11)
80009194:	7fff7317          	auipc	t1,0x7fff7
80009198:	e6c300e7          	jalr	t1,-404 # 0 <_end+0x7ffd55dc>
8000919c:	000da983          	lw	s3,0(s11)
800091a0:	fa0996e3          	bnez	s3,8000914c <__call_exitprocs+0x68>
800091a4:	03c12083          	lw	ra,60(sp)
800091a8:	03812403          	lw	s0,56(sp)
800091ac:	03412483          	lw	s1,52(sp)
800091b0:	03012903          	lw	s2,48(sp)
800091b4:	02c12983          	lw	s3,44(sp)
800091b8:	02812a03          	lw	s4,40(sp)
800091bc:	02412a83          	lw	s5,36(sp)
800091c0:	02012b03          	lw	s6,32(sp)
800091c4:	01c12b83          	lw	s7,28(sp)
800091c8:	01812c03          	lw	s8,24(sp)
800091cc:	01412c83          	lw	s9,20(sp)
800091d0:	01012d03          	lw	s10,16(sp)
800091d4:	00c12d83          	lw	s11,12(sp)
800091d8:	04010113          	addi	sp,sp,64
800091dc:	00008067          	ret
800091e0:	0049a783          	lw	a5,4(s3)
800091e4:	0044a703          	lw	a4,4(s1)
800091e8:	fff78793          	addi	a5,a5,-1
800091ec:	04878a63          	beq	a5,s0,80009240 <__call_exitprocs+0x15c>
800091f0:	0004a223          	sw	zero,4(s1)
800091f4:	f6070ce3          	beqz	a4,8000916c <__call_exitprocs+0x88>
800091f8:	1889a783          	lw	a5,392(s3)
800091fc:	008a16b3          	sll	a3,s4,s0
80009200:	0049ad03          	lw	s10,4(s3)
80009204:	00f6f7b3          	and	a5,a3,a5
80009208:	02078863          	beqz	a5,80009238 <__call_exitprocs+0x154>
8000920c:	18c9a783          	lw	a5,396(s3)
80009210:	00f6f6b3          	and	a3,a3,a5
80009214:	02069a63          	bnez	a3,80009248 <__call_exitprocs+0x164>
80009218:	0844a583          	lw	a1,132(s1)
8000921c:	000a8513          	mv	a0,s5
80009220:	000700e7          	jalr	a4
80009224:	0049a783          	lw	a5,4(s3)
80009228:	f1a79ce3          	bne	a5,s10,80009140 <__call_exitprocs+0x5c>
8000922c:	000da783          	lw	a5,0(s11)
80009230:	f3378ee3          	beq	a5,s3,8000916c <__call_exitprocs+0x88>
80009234:	f0dff06f          	j	80009140 <__call_exitprocs+0x5c>
80009238:	000700e7          	jalr	a4
8000923c:	fe9ff06f          	j	80009224 <__call_exitprocs+0x140>
80009240:	0089a223          	sw	s0,4(s3)
80009244:	fb1ff06f          	j	800091f4 <__call_exitprocs+0x110>
80009248:	0844a503          	lw	a0,132(s1)
8000924c:	000700e7          	jalr	a4
80009250:	fd5ff06f          	j	80009224 <__call_exitprocs+0x140>
80009254:	00098d93          	mv	s11,s3
80009258:	0009a983          	lw	s3,0(s3)
8000925c:	ee0998e3          	bnez	s3,8000914c <__call_exitprocs+0x68>
80009260:	f45ff06f          	j	800091a4 <__call_exitprocs+0xc0>
