
TickTackToe.elf:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000434  80000000  80000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text.copy_section 00000060  80000434  80000434  00001434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text.zero_section 00000050  80000494  80000494  00001494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text._init   000000a8  800004e4  800004e4  000014e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text.__disable_irq 00000034  8000058c  8000058c  0000158c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .text.__enable_irq 00000034  800005c0  800005c0  000015c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.SysTick_Config 000000e4  800005f4  800005f4  000015f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.handle_m_timer_interrupt 000000ac  800006d8  800006d8  000016d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.handle_trap 000000a4  80000784  80000784  00001784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.handle_m_ext_interrupt 00000018  80000828  80000828  00001828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text.SysTick_Handler 0000009c  80000840  80000840  00001840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.write_hex 000000d8  800008dc  800008dc  000018dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text._exit   00000050  800009b4  800009b4  000019b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.sbrk    00000084  80000a04  80000a04  00001a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.stub    0000002c  80000a88  80000a88  00001a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.open    0000003c  80000ab4  80000ab4  00001ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.openat  00000040  80000af0  80000af0  00001af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.close   00000034  80000b30  80000b30  00001b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.execve  0000003c  80000b64  80000b64  00001b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.fork    00000030  80000ba0  80000ba0  00001ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.fstat   0000005c  80000bd0  80000bd0  00001bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.getpid  00000020  80000c2c  80000c2c  00001c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.isatty  0000004c  80000c4c  80000c4c  00001c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.kill    00000038  80000c98  80000c98  00001c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.link    00000038  80000cd0  80000cd0  00001cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.lseek   00000054  80000d08  80000d08  00001d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.read    00000064  80000d5c  80000d5c  00001d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.stat    00000038  80000dc0  80000dc0  00001dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.times   00000034  80000df8  80000df8  00001df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.unlink  00000034  80000e2c  80000e2c  00001e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.wait    00000034  80000e60  80000e60  00001e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.write   000000c4  80000e94  80000e94  00001e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.HAL_enable_interrupts 00000028  80000f58  80000f58  00001f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.HAL_disable_interrupts 0000003c  80000f80  80000f80  00001f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.HAL_restore_interrupts 00000028  80000fbc  80000fbc  00001fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.HW_set_32bit_reg 00000038  80000fe4  80000fe4  00001fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.HW_get_32bit_reg 00000030  8000101c  8000101c  0000201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.HW_set_32bit_reg_field 00000078  8000104c  8000104c  0000204c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.HW_get_32bit_reg_field 00000050  800010c4  800010c4  000020c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.HW_set_16bit_reg 00000040  80001114  80001114  00002114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.HW_get_16bit_reg 00000038  80001154  80001154  00002154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.HW_set_16bit_reg_field 000000a8  8000118c  8000118c  0000218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.HW_get_16bit_reg_field 0000005c  80001234  80001234  00002234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.HW_set_8bit_reg 0000003c  80001290  80001290  00002290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.HW_get_8bit_reg 00000034  800012cc  800012cc  000022cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.HW_set_8bit_reg_field 00000090  80001300  80001300  00002300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.HW_get_8bit_reg_field 00000058  80001390  80001390  00002390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.UART_init 0000011c  800013e8  800013e8  000023e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.UART_send 000000b4  80001504  80001504  00002504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.UART_fill_tx_fifo 000000dc  800015b8  800015b8  000025b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.UART_get_rx 00000130  80001694  80001694  00002694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.UART_polled_tx_string 000000b0  800017c4  800017c4  000027c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.UART_get_rx_status 00000054  80001874  80001874  00002874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TMR_init 000000f8  800018c8  800018c8  000028c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TMR_start 00000048  800019c0  800019c0  000029c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.TMR_stop 00000048  80001a08  80001a08  00002a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.TMR_enable_int 00000048  80001a50  80001a50  00002a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.TMR_clear_int 00000040  80001a98  80001a98  00002a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.TMR_current_value 00000048  80001ad8  80001ad8  00002ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.TMR_reload 00000040  80001b20  80001b20  00002b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.SPI_init 00000170  80001b60  80001b60  00002b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.SPI_configure_slave_mode 000000b0  80001cd0  80001cd0  00002cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SPI_configure_master_mode 000000b0  80001d80  80001d80  00002d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SPI_set_slave_select 000000e0  80001e30  80001e30  00002e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.SPI_clear_slave_select 000000e4  80001f10  80001f10  00002f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.SPI_transfer_frame 000000d8  80001ff4  80001ff4  00002ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.SPI_transfer_block 000005c8  800020cc  800020cc  000030cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.SPI_set_frame_rx_handler 000001a0  80002694  80002694  00003694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.SPI_set_slave_tx_frame 000001a8  80002834  80002834  00003834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.SPI_set_slave_block_buffers 00000278  800029dc  800029dc  000039dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.SPI_set_cmd_handler 000000f0  80002c54  80002c54  00003c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.SPI_set_cmd_response 00000070  80002d44  80002d44  00003d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.SPI_enable 0000004c  80002db4  80002db4  00003db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.SPI_disable 0000004c  80002e00  80002e00  00003e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.SPI_isr 000006e8  80002e4c  80002e4c  00003e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.fill_slave_tx_fifo 0000013c  80003534  80003534  00004534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.read_slave_rx_fifo 0000014c  80003670  80003670  00004670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.recover_from_rx_overflow 00000090  800037bc  800037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.GPIO_init 00000174  8000384c  8000384c  0000484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.GPIO_config 00000068  800039c0  800039c0  000049c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.GPIO_set_outputs 0000014c  80003a28  80003a28  00004a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.GPIO_get_inputs 00000178  80003b74  80003b74  00004b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.GPIO_get_outputs 00000178  80003cec  80003cec  00004cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.GPIO_set_output 0000023c  80003e64  80003e64  00004e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.GPIO_drive_inout 00000148  800040a0  800040a0  000050a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.GPIO_enable_irq 00000080  800041e8  800041e8  000051e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.GPIO_disable_irq 00000080  80004268  80004268  00005268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.GPIO_clear_irq 00000134  800042e8  800042e8  000052e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.draw_board 000000e0  8000441c  8000441c  0000541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.singlePlayerMode 000001d0  800044fc  800044fc  000054fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.singlePlayerX 00000860  800046cc  800046cc  000056cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.singlePlayerAI 000008bc  80004f2c  80004f2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.twoPlayerMode 00000ecc  800057e8  800057e8  000067e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.map     00000068  800066b4  800066b4  000076b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.drawGame 00000088  8000671c  8000671c  0000771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.check_winner 00000784  800067a4  800067a4  000077a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.AIcheck_winner 00000454  80006f28  80006f28  00007f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.gameMenu 000001e8  8000737c  8000737c  0000837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.TS_begin 000001ac  80007564  80007564  00008564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.TS_write 0000005c  80007710  80007710  00008710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.TS_readRegister8 000000a8  8000776c  8000776c  0000876c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.TS_writeRegister8 00000084  80007814  80007814  00008814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.TS_getVersion 0000007c  80007898  80007898  00008898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.TS_readData 00000188  80007914  80007914  00008914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.TS_touched 00000044  80007a9c  80007a9c  00008a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.TFT_spiwrite 00000058  80007ae0  80007ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.TFT_begin 0000069c  80007b38  80007b38  00008b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.TFT_fillrect 0000019c  800081d4  800081d4  000091d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.TFT_fillScreen 00000058  80008370  80008370  00009370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.TFT_writecommand 00000064  800083c8  800083c8  000093c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.TFT_writedata 00000054  8000842c  8000842c  0000942c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.TFT_setAddrWindow 0000015c  80008480  80008480  00009480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.TFT_fastVLine 00000130  800085dc  800085dc  000095dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.TFT_fastHLine 00000130  8000870c  8000870c  0000970c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.testRead 000000d4  8000883c  8000883c  0000983c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.TFT_drawPixel 000000f0  80008910  80008910  00009910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.TFT_drawCircle 0000045c  80008a00  80008a00  00009a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.TFT_drawLine 00000218  80008e5c  80008e5c  00009e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.main    00000160  80009074  80009074  0000a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .rodata       00000036  800091d4  800091d4  0000a1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
120 .rodata.str1.4 00000004  8000920c  8000920c  0000a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
121 .sdata        00000014  80009210  80009210  0000a210  2**4
                  CONTENTS, ALLOC, LOAD, DATA
122 .data         00000428  80009230  80009230  0000a230  2**4
                  CONTENTS, ALLOC, LOAD, DATA
123 .sbss         0000000d  80009660  80009660  0000a658  2**4
                  ALLOC
124 .bss          000000e4  80009680  80009680  0000a658  2**6
                  ALLOC
125 .heap         00000800  80009770  80009770  0000a658  2**4
                  ALLOC
126 .stack        00000800  80009f70  80009f70  0000a658  2**4
                  ALLOC
127 .debug_line   000089dc  00000000  00000000  0000a658  2**0
                  CONTENTS, READONLY, DEBUGGING
128 .debug_info   00009555  00000000  00000000  00013034  2**0
                  CONTENTS, READONLY, DEBUGGING
129 .debug_abbrev 00001d10  00000000  00000000  0001c589  2**0
                  CONTENTS, READONLY, DEBUGGING
130 .debug_aranges 000005c0  00000000  00000000  0001e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
131 .debug_frame  00001ca8  00000000  00000000  0001e860  2**2
                  CONTENTS, READONLY, DEBUGGING
132 .debug_loc    00001ca7  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY, DEBUGGING
133 .debug_ranges 00000480  00000000  00000000  000221af  2**0
                  CONTENTS, READONLY, DEBUGGING
134 .debug_macro  000043cd  00000000  00000000  0002262f  2**0
                  CONTENTS, READONLY, DEBUGGING
135 .debug_str    0000d969  00000000  00000000  000269fc  2**0
                  CONTENTS, READONLY, DEBUGGING
136 .comment      00000011  00000000  00000000  00034365  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

80000000 <_start>:
#endif

  .section      .text.entry
  .globl _start
_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:

trap_vector:
  j trap_entry
80000008:	0340006f          	j	8000003c <trap_entry>

8000000c <handle_reset>:

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	03028293          	addi	t0,t0,48 # 8000003c <trap_entry>
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
  csrwi mideleg, 0
8000001c:	30305073          	csrwi	mideleg,0
  csrwi medeleg, 0
80000020:	30205073          	csrwi	medeleg,0
  csrwi mie, 0
80000024:	30405073          	csrwi	mie,0

  # initialize global pointer
  la gp, _gp
80000028:	0000a197          	auipc	gp,0xa
8000002c:	9e818193          	addi	gp,gp,-1560 # 80009a10 <_gp>

  # initialize stack pointer
  la sp, __stack_top
80000030:	0000a117          	auipc	sp,0xa
80000034:	74010113          	addi	sp,sp,1856 # 8000a770 <__stack_top>

  # perform the rest of initialization in C
  j _init
80000038:	4ac0006f          	j	800004e4 <_init>

8000003c <trap_entry>:


trap_entry:
  addi sp, sp, -32*REGBYTES
8000003c:	f8010113          	addi	sp,sp,-128

  SREG x1, 1*REGBYTES(sp)
80000040:	00112223          	sw	ra,4(sp)
  SREG x2, 2*REGBYTES(sp)
80000044:	00212423          	sw	sp,8(sp)
  SREG x3, 3*REGBYTES(sp)
80000048:	00312623          	sw	gp,12(sp)
  SREG x4, 4*REGBYTES(sp)
8000004c:	00412823          	sw	tp,16(sp)
  SREG x5, 5*REGBYTES(sp)
80000050:	00512a23          	sw	t0,20(sp)
  SREG x6, 6*REGBYTES(sp)
80000054:	00612c23          	sw	t1,24(sp)
  SREG x7, 7*REGBYTES(sp)
80000058:	00712e23          	sw	t2,28(sp)
  SREG x8, 8*REGBYTES(sp)
8000005c:	02812023          	sw	s0,32(sp)
  SREG x9, 9*REGBYTES(sp)
80000060:	02912223          	sw	s1,36(sp)
  SREG x10, 10*REGBYTES(sp)
80000064:	02a12423          	sw	a0,40(sp)
  SREG x11, 11*REGBYTES(sp)
80000068:	02b12623          	sw	a1,44(sp)
  SREG x12, 12*REGBYTES(sp)
8000006c:	02c12823          	sw	a2,48(sp)
  SREG x13, 13*REGBYTES(sp)
80000070:	02d12a23          	sw	a3,52(sp)
  SREG x14, 14*REGBYTES(sp)
80000074:	02e12c23          	sw	a4,56(sp)
  SREG x15, 15*REGBYTES(sp)
80000078:	02f12e23          	sw	a5,60(sp)
  SREG x16, 16*REGBYTES(sp)
8000007c:	05012023          	sw	a6,64(sp)
  SREG x17, 17*REGBYTES(sp)
80000080:	05112223          	sw	a7,68(sp)
  SREG x18, 18*REGBYTES(sp)
80000084:	05212423          	sw	s2,72(sp)
  SREG x19, 19*REGBYTES(sp)
80000088:	05312623          	sw	s3,76(sp)
  SREG x20, 20*REGBYTES(sp)
8000008c:	05412823          	sw	s4,80(sp)
  SREG x21, 21*REGBYTES(sp)
80000090:	05512a23          	sw	s5,84(sp)
  SREG x22, 22*REGBYTES(sp)
80000094:	05612c23          	sw	s6,88(sp)
  SREG x23, 23*REGBYTES(sp)
80000098:	05712e23          	sw	s7,92(sp)
  SREG x24, 24*REGBYTES(sp)
8000009c:	07812023          	sw	s8,96(sp)
  SREG x25, 25*REGBYTES(sp)
800000a0:	07912223          	sw	s9,100(sp)
  SREG x26, 26*REGBYTES(sp)
800000a4:	07a12423          	sw	s10,104(sp)
  SREG x27, 27*REGBYTES(sp)
800000a8:	07b12623          	sw	s11,108(sp)
  SREG x28, 28*REGBYTES(sp)
800000ac:	07c12823          	sw	t3,112(sp)
  SREG x29, 29*REGBYTES(sp)
800000b0:	07d12a23          	sw	t4,116(sp)
  SREG x30, 30*REGBYTES(sp)
800000b4:	07e12c23          	sw	t5,120(sp)
  SREG x31, 31*REGBYTES(sp)
800000b8:	07f12e23          	sw	t6,124(sp)

  csrr a0, mcause
800000bc:	34202573          	csrr	a0,mcause
  csrr a1, mepc
800000c0:	341025f3          	csrr	a1,mepc
  mv a2, sp
800000c4:	00010613          	mv	a2,sp
  jal handle_trap
800000c8:	6bc000ef          	jal	ra,80000784 <handle_trap>
  csrw mepc, a0
800000cc:	34151073          	csrw	mepc,a0

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d0:	000022b7          	lui	t0,0x2
800000d4:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE+0x1000>
  csrs mstatus, t0
800000d8:	3002a073          	csrs	mstatus,t0

  LREG x1, 1*REGBYTES(sp)
800000dc:	00412083          	lw	ra,4(sp)
  LREG x2, 2*REGBYTES(sp)
800000e0:	00812103          	lw	sp,8(sp)
  LREG x3, 3*REGBYTES(sp)
800000e4:	00c12183          	lw	gp,12(sp)
  LREG x4, 4*REGBYTES(sp)
800000e8:	01012203          	lw	tp,16(sp)
  LREG x5, 5*REGBYTES(sp)
800000ec:	01412283          	lw	t0,20(sp)
  LREG x6, 6*REGBYTES(sp)
800000f0:	01812303          	lw	t1,24(sp)
  LREG x7, 7*REGBYTES(sp)
800000f4:	01c12383          	lw	t2,28(sp)
  LREG x8, 8*REGBYTES(sp)
800000f8:	02012403          	lw	s0,32(sp)
  LREG x9, 9*REGBYTES(sp)
800000fc:	02412483          	lw	s1,36(sp)
  LREG x10, 10*REGBYTES(sp)
80000100:	02812503          	lw	a0,40(sp)
  LREG x11, 11*REGBYTES(sp)
80000104:	02c12583          	lw	a1,44(sp)
  LREG x12, 12*REGBYTES(sp)
80000108:	03012603          	lw	a2,48(sp)
  LREG x13, 13*REGBYTES(sp)
8000010c:	03412683          	lw	a3,52(sp)
  LREG x14, 14*REGBYTES(sp)
80000110:	03812703          	lw	a4,56(sp)
  LREG x15, 15*REGBYTES(sp)
80000114:	03c12783          	lw	a5,60(sp)
  LREG x16, 16*REGBYTES(sp)
80000118:	04012803          	lw	a6,64(sp)
  LREG x17, 17*REGBYTES(sp)
8000011c:	04412883          	lw	a7,68(sp)
  LREG x18, 18*REGBYTES(sp)
80000120:	04812903          	lw	s2,72(sp)
  LREG x19, 19*REGBYTES(sp)
80000124:	04c12983          	lw	s3,76(sp)
  LREG x20, 20*REGBYTES(sp)
80000128:	05012a03          	lw	s4,80(sp)
  LREG x21, 21*REGBYTES(sp)
8000012c:	05412a83          	lw	s5,84(sp)
  LREG x22, 22*REGBYTES(sp)
80000130:	05812b03          	lw	s6,88(sp)
  LREG x23, 23*REGBYTES(sp)
80000134:	05c12b83          	lw	s7,92(sp)
  LREG x24, 24*REGBYTES(sp)
80000138:	06012c03          	lw	s8,96(sp)
  LREG x25, 25*REGBYTES(sp)
8000013c:	06412c83          	lw	s9,100(sp)
  LREG x26, 26*REGBYTES(sp)
80000140:	06812d03          	lw	s10,104(sp)
  LREG x27, 27*REGBYTES(sp)
80000144:	06c12d83          	lw	s11,108(sp)
  LREG x28, 28*REGBYTES(sp)
80000148:	07012e03          	lw	t3,112(sp)
  LREG x29, 29*REGBYTES(sp)
8000014c:	07412e83          	lw	t4,116(sp)
  LREG x30, 30*REGBYTES(sp)
80000150:	07812f03          	lw	t5,120(sp)
  LREG x31, 31*REGBYTES(sp)
80000154:	07c12f83          	lw	t6,124(sp)

  addi sp, sp, 32*REGBYTES
80000158:	08010113          	addi	sp,sp,128
  mret
8000015c:	30200073          	mret

80000160 <exit>:
80000160:	ff010113          	addi	sp,sp,-16
80000164:	00000593          	li	a1,0
80000168:	00812423          	sw	s0,8(sp)
8000016c:	00112623          	sw	ra,12(sp)
80000170:	00050413          	mv	s0,a0
80000174:	194000ef          	jal	ra,80000308 <__call_exitprocs>
80000178:	800097b7          	lui	a5,0x80009
8000017c:	21c7a503          	lw	a0,540(a5) # 8000921c <__stack_top+0xffffeaac>
80000180:	03c52783          	lw	a5,60(a0)
80000184:	00078463          	beqz	a5,8000018c <exit+0x2c>
80000188:	000780e7          	jalr	a5
8000018c:	00040513          	mv	a0,s0
80000190:	025000ef          	jal	ra,800009b4 <_exit>

80000194 <memset>:
80000194:	00f00813          	li	a6,15
80000198:	00050713          	mv	a4,a0
8000019c:	02c87e63          	bleu	a2,a6,800001d8 <memset+0x44>
800001a0:	00f77793          	andi	a5,a4,15
800001a4:	0a079063          	bnez	a5,80000244 <memset+0xb0>
800001a8:	08059263          	bnez	a1,8000022c <memset+0x98>
800001ac:	ff067693          	andi	a3,a2,-16
800001b0:	00f67613          	andi	a2,a2,15
800001b4:	00e686b3          	add	a3,a3,a4
800001b8:	00b72023          	sw	a1,0(a4)
800001bc:	00b72223          	sw	a1,4(a4)
800001c0:	00b72423          	sw	a1,8(a4)
800001c4:	00b72623          	sw	a1,12(a4)
800001c8:	01070713          	addi	a4,a4,16
800001cc:	fed766e3          	bltu	a4,a3,800001b8 <memset+0x24>
800001d0:	00061463          	bnez	a2,800001d8 <memset+0x44>
800001d4:	00008067          	ret
800001d8:	40c806b3          	sub	a3,a6,a2
800001dc:	00269693          	slli	a3,a3,0x2
800001e0:	00000297          	auipc	t0,0x0
800001e4:	005686b3          	add	a3,a3,t0
800001e8:	00c68067          	jr	12(a3)
800001ec:	00b70723          	sb	a1,14(a4)
800001f0:	00b706a3          	sb	a1,13(a4)
800001f4:	00b70623          	sb	a1,12(a4)
800001f8:	00b705a3          	sb	a1,11(a4)
800001fc:	00b70523          	sb	a1,10(a4)
80000200:	00b704a3          	sb	a1,9(a4)
80000204:	00b70423          	sb	a1,8(a4)
80000208:	00b703a3          	sb	a1,7(a4)
8000020c:	00b70323          	sb	a1,6(a4)
80000210:	00b702a3          	sb	a1,5(a4)
80000214:	00b70223          	sb	a1,4(a4)
80000218:	00b701a3          	sb	a1,3(a4)
8000021c:	00b70123          	sb	a1,2(a4)
80000220:	00b700a3          	sb	a1,1(a4)
80000224:	00b70023          	sb	a1,0(a4)
80000228:	00008067          	ret
8000022c:	0ff5f593          	andi	a1,a1,255
80000230:	00859693          	slli	a3,a1,0x8
80000234:	00d5e5b3          	or	a1,a1,a3
80000238:	01059693          	slli	a3,a1,0x10
8000023c:	00d5e5b3          	or	a1,a1,a3
80000240:	f6dff06f          	j	800001ac <memset+0x18>
80000244:	00279693          	slli	a3,a5,0x2
80000248:	00000297          	auipc	t0,0x0
8000024c:	005686b3          	add	a3,a3,t0
80000250:	00008293          	mv	t0,ra
80000254:	fa0680e7          	jalr	-96(a3)
80000258:	00028093          	mv	ra,t0
8000025c:	ff078793          	addi	a5,a5,-16
80000260:	40f70733          	sub	a4,a4,a5
80000264:	00f60633          	add	a2,a2,a5
80000268:	f6c878e3          	bleu	a2,a6,800001d8 <memset+0x44>
8000026c:	f3dff06f          	j	800001a8 <memset+0x14>

80000270 <strlen>:
80000270:	00357713          	andi	a4,a0,3
80000274:	00050793          	mv	a5,a0
80000278:	00050693          	mv	a3,a0
8000027c:	04071c63          	bnez	a4,800002d4 <strlen+0x64>
80000280:	7f7f8637          	lui	a2,0x7f7f8
80000284:	f7f60613          	addi	a2,a2,-129 # 7f7f7f7f <HEAP_SIZE+0x7f7f777f>
80000288:	fff00593          	li	a1,-1
8000028c:	00468693          	addi	a3,a3,4
80000290:	ffc6a703          	lw	a4,-4(a3)
80000294:	00c777b3          	and	a5,a4,a2
80000298:	00c787b3          	add	a5,a5,a2
8000029c:	00c76733          	or	a4,a4,a2
800002a0:	00e7e7b3          	or	a5,a5,a4
800002a4:	feb784e3          	beq	a5,a1,8000028c <strlen+0x1c>
800002a8:	ffc6c703          	lbu	a4,-4(a3)
800002ac:	40a687b3          	sub	a5,a3,a0
800002b0:	ffd6c603          	lbu	a2,-3(a3)
800002b4:	ffe6c503          	lbu	a0,-2(a3)
800002b8:	04070063          	beqz	a4,800002f8 <strlen+0x88>
800002bc:	02060a63          	beqz	a2,800002f0 <strlen+0x80>
800002c0:	00a03533          	snez	a0,a0
800002c4:	00f50533          	add	a0,a0,a5
800002c8:	ffe50513          	addi	a0,a0,-2
800002cc:	00008067          	ret
800002d0:	02068863          	beqz	a3,80000300 <strlen+0x90>
800002d4:	0007c703          	lbu	a4,0(a5)
800002d8:	00178793          	addi	a5,a5,1
800002dc:	0037f693          	andi	a3,a5,3
800002e0:	fe0718e3          	bnez	a4,800002d0 <strlen+0x60>
800002e4:	40a787b3          	sub	a5,a5,a0
800002e8:	fff78513          	addi	a0,a5,-1
800002ec:	00008067          	ret
800002f0:	ffd78513          	addi	a0,a5,-3
800002f4:	00008067          	ret
800002f8:	ffc78513          	addi	a0,a5,-4
800002fc:	00008067          	ret
80000300:	00078693          	mv	a3,a5
80000304:	f7dff06f          	j	80000280 <strlen+0x10>

80000308 <__call_exitprocs>:
80000308:	fd010113          	addi	sp,sp,-48
8000030c:	800097b7          	lui	a5,0x80009
80000310:	01412c23          	sw	s4,24(sp)
80000314:	21c7aa03          	lw	s4,540(a5) # 8000921c <__stack_top+0xffffeaac>
80000318:	01312e23          	sw	s3,28(sp)
8000031c:	03212023          	sw	s2,32(sp)
80000320:	148a2983          	lw	s3,328(s4)
80000324:	01512a23          	sw	s5,20(sp)
80000328:	01612823          	sw	s6,16(sp)
8000032c:	01712623          	sw	s7,12(sp)
80000330:	02112623          	sw	ra,44(sp)
80000334:	02812423          	sw	s0,40(sp)
80000338:	02912223          	sw	s1,36(sp)
8000033c:	01812423          	sw	s8,8(sp)
80000340:	00050b13          	mv	s6,a0
80000344:	00058913          	mv	s2,a1
80000348:	00100a93          	li	s5,1
8000034c:	fff00b93          	li	s7,-1
80000350:	02098863          	beqz	s3,80000380 <__call_exitprocs+0x78>
80000354:	0049a483          	lw	s1,4(s3)
80000358:	fff48413          	addi	s0,s1,-1
8000035c:	02044263          	bltz	s0,80000380 <__call_exitprocs+0x78>
80000360:	00249493          	slli	s1,s1,0x2
80000364:	009984b3          	add	s1,s3,s1
80000368:	04090463          	beqz	s2,800003b0 <__call_exitprocs+0xa8>
8000036c:	1044a783          	lw	a5,260(s1)
80000370:	04f90063          	beq	s2,a5,800003b0 <__call_exitprocs+0xa8>
80000374:	fff40413          	addi	s0,s0,-1
80000378:	ffc48493          	addi	s1,s1,-4
8000037c:	ff7416e3          	bne	s0,s7,80000368 <__call_exitprocs+0x60>
80000380:	02c12083          	lw	ra,44(sp)
80000384:	02812403          	lw	s0,40(sp)
80000388:	02412483          	lw	s1,36(sp)
8000038c:	02012903          	lw	s2,32(sp)
80000390:	01c12983          	lw	s3,28(sp)
80000394:	01812a03          	lw	s4,24(sp)
80000398:	01412a83          	lw	s5,20(sp)
8000039c:	01012b03          	lw	s6,16(sp)
800003a0:	00c12b83          	lw	s7,12(sp)
800003a4:	00812c03          	lw	s8,8(sp)
800003a8:	03010113          	addi	sp,sp,48
800003ac:	00008067          	ret
800003b0:	0049a783          	lw	a5,4(s3)
800003b4:	0044a703          	lw	a4,4(s1)
800003b8:	fff78793          	addi	a5,a5,-1
800003bc:	06f40263          	beq	s0,a5,80000420 <__call_exitprocs+0x118>
800003c0:	0004a223          	sw	zero,4(s1)
800003c4:	fa0708e3          	beqz	a4,80000374 <__call_exitprocs+0x6c>
800003c8:	1889a783          	lw	a5,392(s3)
800003cc:	008a96b3          	sll	a3,s5,s0
800003d0:	0049ac03          	lw	s8,4(s3)
800003d4:	00f6f7b3          	and	a5,a3,a5
800003d8:	02078a63          	beqz	a5,8000040c <__call_exitprocs+0x104>
800003dc:	18c9a783          	lw	a5,396(s3)
800003e0:	00f6f6b3          	and	a3,a3,a5
800003e4:	04069263          	bnez	a3,80000428 <__call_exitprocs+0x120>
800003e8:	0844a583          	lw	a1,132(s1)
800003ec:	000b0513          	mv	a0,s6
800003f0:	000700e7          	jalr	a4
800003f4:	0049a783          	lw	a5,4(s3)
800003f8:	03879063          	bne	a5,s8,80000418 <__call_exitprocs+0x110>
800003fc:	148a2783          	lw	a5,328(s4)
80000400:	f7378ae3          	beq	a5,s3,80000374 <__call_exitprocs+0x6c>
80000404:	00078993          	mv	s3,a5
80000408:	f49ff06f          	j	80000350 <__call_exitprocs+0x48>
8000040c:	000700e7          	jalr	a4
80000410:	0049a783          	lw	a5,4(s3)
80000414:	ff8784e3          	beq	a5,s8,800003fc <__call_exitprocs+0xf4>
80000418:	148a2983          	lw	s3,328(s4)
8000041c:	f35ff06f          	j	80000350 <__call_exitprocs+0x48>
80000420:	0089a223          	sw	s0,4(s3)
80000424:	fa1ff06f          	j	800003c4 <__call_exitprocs+0xbc>
80000428:	0844a503          	lw	a0,132(s1)
8000042c:	000700e7          	jalr	a4
80000430:	fc5ff06f          	j	800003f4 <__call_exitprocs+0xec>

Disassembly of section .text.copy_section:

80000434 <copy_section>:
extern uint32_t __bss_start;
extern uint32_t __bss_end;


static void copy_section(uint32_t * p_load, uint32_t * p_vma, uint32_t * p_vma_end)
{
80000434:	fe010113          	addi	sp,sp,-32
80000438:	00812e23          	sw	s0,28(sp)
8000043c:	02010413          	addi	s0,sp,32
80000440:	fea42623          	sw	a0,-20(s0)
80000444:	feb42423          	sw	a1,-24(s0)
80000448:	fec42223          	sw	a2,-28(s0)
    while(p_vma <= p_vma_end)
8000044c:	02c0006f          	j	80000478 <copy_section+0x44>
    {
        *p_vma = *p_load;
80000450:	fec42783          	lw	a5,-20(s0)
80000454:	0007a703          	lw	a4,0(a5)
80000458:	fe842783          	lw	a5,-24(s0)
8000045c:	00e7a023          	sw	a4,0(a5)
        ++p_load;
80000460:	fec42783          	lw	a5,-20(s0)
80000464:	00478793          	addi	a5,a5,4
80000468:	fef42623          	sw	a5,-20(s0)
        ++p_vma;
8000046c:	fe842783          	lw	a5,-24(s0)
80000470:	00478793          	addi	a5,a5,4
80000474:	fef42423          	sw	a5,-24(s0)
    while(p_vma <= p_vma_end)
80000478:	fe842703          	lw	a4,-24(s0)
8000047c:	fe442783          	lw	a5,-28(s0)
80000480:	fce7f8e3          	bleu	a4,a5,80000450 <copy_section+0x1c>
    }
}
80000484:	00000013          	nop
80000488:	01c12403          	lw	s0,28(sp)
8000048c:	02010113          	addi	sp,sp,32
80000490:	00008067          	ret

Disassembly of section .text.zero_section:

80000494 <zero_section>:

static void zero_section(uint32_t * start, uint32_t * end)
{
80000494:	fd010113          	addi	sp,sp,-48
80000498:	02812623          	sw	s0,44(sp)
8000049c:	03010413          	addi	s0,sp,48
800004a0:	fca42e23          	sw	a0,-36(s0)
800004a4:	fcb42c23          	sw	a1,-40(s0)
    uint32_t * p_zero = start;
800004a8:	fdc42783          	lw	a5,-36(s0)
800004ac:	fef42623          	sw	a5,-20(s0)
    
    while(p_zero <= end)
800004b0:	0180006f          	j	800004c8 <zero_section+0x34>
    {
        *p_zero = 0;
800004b4:	fec42783          	lw	a5,-20(s0)
800004b8:	0007a023          	sw	zero,0(a5)
        ++p_zero;
800004bc:	fec42783          	lw	a5,-20(s0)
800004c0:	00478793          	addi	a5,a5,4
800004c4:	fef42623          	sw	a5,-20(s0)
    while(p_zero <= end)
800004c8:	fec42703          	lw	a4,-20(s0)
800004cc:	fd842783          	lw	a5,-40(s0)
800004d0:	fee7f2e3          	bleu	a4,a5,800004b4 <zero_section+0x20>
    }
}
800004d4:	00000013          	nop
800004d8:	02c12403          	lw	s0,44(sp)
800004dc:	03010113          	addi	sp,sp,48
800004e0:	00008067          	ret

Disassembly of section .text._init:

800004e4 <_init>:

void _init(void)
{
800004e4:	fe010113          	addi	sp,sp,-32
800004e8:	00112e23          	sw	ra,28(sp)
800004ec:	00812c23          	sw	s0,24(sp)
800004f0:	02010413          	addi	s0,sp,32
    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
800004f4:	800097b7          	lui	a5,0x80009
800004f8:	22478613          	addi	a2,a5,548 # 80009224 <__stack_top+0xffffeab4>
800004fc:	800097b7          	lui	a5,0x80009
80000500:	21078593          	addi	a1,a5,528 # 80009210 <__stack_top+0xffffeaa0>
80000504:	800097b7          	lui	a5,0x80009
80000508:	21078513          	addi	a0,a5,528 # 80009210 <__stack_top+0xffffeaa0>
8000050c:	f29ff0ef          	jal	ra,80000434 <copy_section>
    copy_section(&__data_load, &__data_start, &__data_end);
80000510:	c4818613          	addi	a2,gp,-952 # 80009658 <__data_end>
80000514:	800097b7          	lui	a5,0x80009
80000518:	23078593          	addi	a1,a5,560 # 80009230 <__stack_top+0xffffeac0>
8000051c:	800097b7          	lui	a5,0x80009
80000520:	23078513          	addi	a0,a5,560 # 80009230 <__stack_top+0xffffeac0>
80000524:	f11ff0ef          	jal	ra,80000434 <copy_section>
    zero_section(&__sbss_start, &__sbss_end);
80000528:	c5d18593          	addi	a1,gp,-931 # 8000966d <__sbss_end>
8000052c:	c5018513          	addi	a0,gp,-944 # 80009660 <__sbss_start>
80000530:	f65ff0ef          	jal	ra,80000494 <zero_section>
    zero_section(&__bss_start, &__bss_end);
80000534:	c7018593          	addi	a1,gp,-912 # 80009680 <errno>
80000538:	c7018513          	addi	a0,gp,-912 # 80009680 <errno>
8000053c:	f59ff0ef          	jal	ra,80000494 <zero_section>
    
    UART_init( &g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200, (DATA_8_BITS | NO_PARITY) );
80000540:	00100693          	li	a3,1
80000544:	02c00613          	li	a2,44
80000548:	700015b7          	lui	a1,0x70001
8000054c:	c7418513          	addi	a0,gp,-908 # 80009684 <g_uart>
80000550:	699000ef          	jal	ra,800013e8 <UART_init>

    extern int main(int, char**);
    const char *argv0 = "hello";
80000554:	800097b7          	lui	a5,0x80009
80000558:	1d478793          	addi	a5,a5,468 # 800091d4 <__stack_top+0xffffea64>
8000055c:	fef42623          	sw	a5,-20(s0)
    char *argv[] = {(char *)argv0, NULL, NULL};
80000560:	fec42783          	lw	a5,-20(s0)
80000564:	fef42023          	sw	a5,-32(s0)
80000568:	fe042223          	sw	zero,-28(s0)
8000056c:	fe042423          	sw	zero,-24(s0)

    exit(main(1, argv));
80000570:	fe040793          	addi	a5,s0,-32
80000574:	00078593          	mv	a1,a5
80000578:	00100513          	li	a0,1
8000057c:	2f9080ef          	jal	ra,80009074 <main>
80000580:	00050793          	mv	a5,a0
80000584:	00078513          	mv	a0,a5
80000588:	bd9ff0ef          	jal	ra,80000160 <exit>

Disassembly of section .text.__disable_irq:

8000058c <__disable_irq>:
static uint64_t g_systick_increment = 0;

/*------------------------------------------------------------------------------
 * Disable all interrupts.
 */
void __disable_irq(void) {
8000058c:	fe010113          	addi	sp,sp,-32
80000590:	00812e23          	sw	s0,28(sp)
80000594:	02010413          	addi	s0,sp,32
    clear_csr(mie, MIP_MEIP);
80000598:	000017b7          	lui	a5,0x1
8000059c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE>
800005a0:	3047b7f3          	csrrc	a5,mie,a5
800005a4:	fef42623          	sw	a5,-20(s0)
    clear_csr(mstatus, MSTATUS_MIE);
800005a8:	300477f3          	csrrci	a5,mstatus,8
800005ac:	fef42423          	sw	a5,-24(s0)
}
800005b0:	00000013          	nop
800005b4:	01c12403          	lw	s0,28(sp)
800005b8:	02010113          	addi	sp,sp,32
800005bc:	00008067          	ret

Disassembly of section .text.__enable_irq:

800005c0 <__enable_irq>:

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void) {
800005c0:	fe010113          	addi	sp,sp,-32
800005c4:	00812e23          	sw	s0,28(sp)
800005c8:	02010413          	addi	s0,sp,32
    set_csr(mie, MIP_MEIP);
800005cc:	000017b7          	lui	a5,0x1
800005d0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE>
800005d4:	3047a7f3          	csrrs	a5,mie,a5
800005d8:	fef42623          	sw	a5,-20(s0)
    set_csr(mstatus, MSTATUS_MIE);
800005dc:	300467f3          	csrrsi	a5,mstatus,8
800005e0:	fef42423          	sw	a5,-24(s0)
}
800005e4:	00000013          	nop
800005e8:	01c12403          	lw	s0,28(sp)
800005ec:	02010113          	addi	sp,sp,32
800005f0:	00008067          	ret

Disassembly of section .text.SysTick_Config:

800005f4 <SysTick_Config>:

/*------------------------------------------------------------------------------
 * Configure the machine timer to generate an interrupt.
 */
uint32_t SysTick_Config(uint32_t ticks) {
800005f4:	fd010113          	addi	sp,sp,-48
800005f8:	02112623          	sw	ra,44(sp)
800005fc:	02812423          	sw	s0,40(sp)
80000600:	03010413          	addi	s0,sp,48
80000604:	fca42e23          	sw	a0,-36(s0)
    
    uint32_t ret_val = ERROR;
80000608:	00100793          	li	a5,1
8000060c:	fef42623          	sw	a5,-20(s0)
    
    g_systick_increment = ticks / RTC_PRESCALER;
80000610:	fdc42703          	lw	a4,-36(s0)
80000614:	06400793          	li	a5,100
80000618:	02f757b3          	divu	a5,a4,a5
8000061c:	00078613          	mv	a2,a5
80000620:	00000693          	li	a3,0
80000624:	c4c1a823          	sw	a2,-944(gp) # 80009660 <__sbss_start>
80000628:	c4d1aa23          	sw	a3,-940(gp) # 80009664 <__sbss_start+0x4>

    if (g_systick_increment > 0) {
8000062c:	c501a603          	lw	a2,-944(gp) # 80009660 <__sbss_start>
80000630:	c541a683          	lw	a3,-940(gp) # 80009664 <__sbss_start+0x4>
80000634:	00060793          	mv	a5,a2
80000638:	00d7e7b3          	or	a5,a5,a3
8000063c:	08078263          	beqz	a5,800006c0 <SysTick_Config+0xcc>
        uint32_t mhartid = read_csr(mhartid);
80000640:	f14027f3          	csrr	a5,mhartid
80000644:	fef42423          	sw	a5,-24(s0)
80000648:	fe842783          	lw	a5,-24(s0)
8000064c:	fef42223          	sw	a5,-28(s0)
        PRCI->MTIMECMP[mhartid] = PRCI->MTIME + g_systick_increment;
80000650:	44000737          	lui	a4,0x44000
80000654:	440006b7          	lui	a3,0x44000
80000658:	0000c7b7          	lui	a5,0xc
8000065c:	00f687b3          	add	a5,a3,a5
80000660:	ff87a803          	lw	a6,-8(a5) # bff8 <HEAP_SIZE+0xb7f8>
80000664:	ffc7a883          	lw	a7,-4(a5)
80000668:	c501a503          	lw	a0,-944(gp) # 80009660 <__sbss_start>
8000066c:	c541a583          	lw	a1,-940(gp) # 80009664 <__sbss_start+0x4>
80000670:	00a80633          	add	a2,a6,a0
80000674:	010637b3          	sltu	a5,a2,a6
80000678:	00b886b3          	add	a3,a7,a1
8000067c:	00d787b3          	add	a5,a5,a3
80000680:	00078693          	mv	a3,a5
80000684:	00060513          	mv	a0,a2
80000688:	00068593          	mv	a1,a3
8000068c:	fe442683          	lw	a3,-28(s0)
80000690:	000017b7          	lui	a5,0x1
80000694:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE>
80000698:	00f687b3          	add	a5,a3,a5
8000069c:	00379793          	slli	a5,a5,0x3
800006a0:	00f707b3          	add	a5,a4,a5
800006a4:	00a7a023          	sw	a0,0(a5)
800006a8:	00b7a223          	sw	a1,4(a5)
        set_csr(mie, MIP_MTIP);
800006ac:	08000793          	li	a5,128
800006b0:	3047a7f3          	csrrs	a5,mie,a5
800006b4:	fef42023          	sw	a5,-32(s0)
        __enable_irq();
800006b8:	f09ff0ef          	jal	ra,800005c0 <__enable_irq>
        ret_val = SUCCESS;
800006bc:	fe042623          	sw	zero,-20(s0)
    }
    
    return ret_val;
800006c0:	fec42783          	lw	a5,-20(s0)
}
800006c4:	00078513          	mv	a0,a5
800006c8:	02c12083          	lw	ra,44(sp)
800006cc:	02812403          	lw	s0,40(sp)
800006d0:	03010113          	addi	sp,sp,48
800006d4:	00008067          	ret

Disassembly of section .text.handle_m_timer_interrupt:

800006d8 <handle_m_timer_interrupt>:

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt(){
800006d8:	fe010113          	addi	sp,sp,-32
800006dc:	00112e23          	sw	ra,28(sp)
800006e0:	00812c23          	sw	s0,24(sp)
800006e4:	02010413          	addi	s0,sp,32
    uint32_t mhartid = read_csr(mhartid);
800006e8:	f14027f3          	csrr	a5,mhartid
800006ec:	fef42623          	sw	a5,-20(s0)
800006f0:	fec42783          	lw	a5,-20(s0)
800006f4:	fef42423          	sw	a5,-24(s0)
    clear_csr(mie, MIP_MTIP);
800006f8:	08000793          	li	a5,128
800006fc:	3047b7f3          	csrrc	a5,mie,a5
80000700:	fef42223          	sw	a5,-28(s0)
    PRCI->MTIMECMP[mhartid] = PRCI->MTIME + g_systick_increment;
80000704:	44000737          	lui	a4,0x44000
80000708:	440006b7          	lui	a3,0x44000
8000070c:	0000c7b7          	lui	a5,0xc
80000710:	00f687b3          	add	a5,a3,a5
80000714:	ff87a803          	lw	a6,-8(a5) # bff8 <HEAP_SIZE+0xb7f8>
80000718:	ffc7a883          	lw	a7,-4(a5)
8000071c:	c501a503          	lw	a0,-944(gp) # 80009660 <__sbss_start>
80000720:	c541a583          	lw	a1,-940(gp) # 80009664 <__sbss_start+0x4>
80000724:	00a80633          	add	a2,a6,a0
80000728:	010637b3          	sltu	a5,a2,a6
8000072c:	00b886b3          	add	a3,a7,a1
80000730:	00d787b3          	add	a5,a5,a3
80000734:	00078693          	mv	a3,a5
80000738:	00060513          	mv	a0,a2
8000073c:	00068593          	mv	a1,a3
80000740:	fe842683          	lw	a3,-24(s0)
80000744:	000017b7          	lui	a5,0x1
80000748:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE>
8000074c:	00f687b3          	add	a5,a3,a5
80000750:	00379793          	slli	a5,a5,0x3
80000754:	00f707b3          	add	a5,a4,a5
80000758:	00a7a023          	sw	a0,0(a5)
8000075c:	00b7a223          	sw	a1,4(a5)
    SysTick_Handler();
80000760:	0fc000ef          	jal	ra,8000085c <SysTick_Handler>
    set_csr(mie, MIP_MTIP);
80000764:	08000793          	li	a5,128
80000768:	3047a7f3          	csrrs	a5,mie,a5
8000076c:	fef42023          	sw	a5,-32(s0)
}
80000770:	00000013          	nop
80000774:	01c12083          	lw	ra,28(sp)
80000778:	01812403          	lw	s0,24(sp)
8000077c:	02010113          	addi	sp,sp,32
80000780:	00008067          	ret

Disassembly of section .text.handle_trap:

80000784 <handle_trap>:

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
80000784:	fe010113          	addi	sp,sp,-32
80000788:	00112e23          	sw	ra,28(sp)
8000078c:	00812c23          	sw	s0,24(sp)
80000790:	02010413          	addi	s0,sp,32
80000794:	fea42623          	sw	a0,-20(s0)
80000798:	feb42423          	sw	a1,-24(s0)
    if (0) {
    // External Machine-Level Interrupt from PLIC
    } else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)) {
8000079c:	fec42783          	lw	a5,-20(s0)
800007a0:	0207d263          	bgez	a5,800007c4 <handle_trap+0x40>
800007a4:	fec42703          	lw	a4,-20(s0)
800007a8:	800007b7          	lui	a5,0x80000
800007ac:	fff7c793          	not	a5,a5
800007b0:	00f77733          	and	a4,a4,a5
800007b4:	00b00793          	li	a5,11
800007b8:	00f71663          	bne	a4,a5,800007c4 <handle_trap+0x40>
        handle_m_ext_interrupt();
800007bc:	06c000ef          	jal	ra,80000828 <handle_m_ext_interrupt>
800007c0:	0500006f          	j	80000810 <handle_trap+0x8c>
    } else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)) {
800007c4:	fec42783          	lw	a5,-20(s0)
800007c8:	0207d263          	bgez	a5,800007ec <handle_trap+0x68>
800007cc:	fec42703          	lw	a4,-20(s0)
800007d0:	800007b7          	lui	a5,0x80000
800007d4:	fff7c793          	not	a5,a5
800007d8:	00f77733          	and	a4,a4,a5
800007dc:	00700793          	li	a5,7
800007e0:	00f71663          	bne	a4,a5,800007ec <handle_trap+0x68>
        handle_m_timer_interrupt();
800007e4:	ef5ff0ef          	jal	ra,800006d8 <handle_m_timer_interrupt>
800007e8:	0280006f          	j	80000810 <handle_trap+0x8c>
    }    
    else {
        write(1, "trap\n", 5);
800007ec:	00500613          	li	a2,5
800007f0:	800097b7          	lui	a5,0x80009
800007f4:	1dc78593          	addi	a1,a5,476 # 800091dc <__stack_top+0xffffea6c>
800007f8:	00100513          	li	a0,1
800007fc:	698000ef          	jal	ra,80000e94 <write>
        _exit(1 + mcause);
80000800:	fec42783          	lw	a5,-20(s0)
80000804:	00178793          	addi	a5,a5,1
80000808:	00078513          	mv	a0,a5
8000080c:	1a8000ef          	jal	ra,800009b4 <_exit>
    }
    return epc;
80000810:	fe842783          	lw	a5,-24(s0)
}
80000814:	00078513          	mv	a0,a5
80000818:	01c12083          	lw	ra,28(sp)
8000081c:	01812403          	lw	s0,24(sp)
80000820:	02010113          	addi	sp,sp,32
80000824:	00008067          	ret

Disassembly of section .text.handle_m_ext_interrupt:

80000828 <handle_m_ext_interrupt>:
 * defined with weak linking so that they can be overridden by a function with
 * same prototype in the user's application code.
 */
#include <unistd.h>

__attribute__((weak)) void handle_m_ext_interrupt() {
80000828:	ff010113          	addi	sp,sp,-16
8000082c:	00112623          	sw	ra,12(sp)
80000830:	00812423          	sw	s0,8(sp)
80000834:	01010413          	addi	s0,sp,16
    
    _exit(10);
80000838:	00a00513          	li	a0,10
8000083c:	178000ef          	jal	ra,800009b4 <_exit>

Disassembly of section .text.SysTick_Handler:

80000840 <SysTick_Handler-0x1c>:
}

__attribute__((weak)) void SysTick_Handler(void) {
80000840:	ff010113          	addi	sp,sp,-16
80000844:	00812623          	sw	s0,12(sp)
80000848:	01010413          	addi	s0,sp,16
    ;
}
8000084c:	00000013          	nop
80000850:	00c12403          	lw	s0,12(sp)
80000854:	01010113          	addi	sp,sp,16
80000858:	00008067          	ret

8000085c <SysTick_Handler>:
 * 10mS so the resolution will be 10ms). Rolls over every 49 days or so...
 *
 * Should be safe to read g_10ms_count from elsewhere.
 */
void SysTick_Handler( void )
{
8000085c:	fe010113          	addi	sp,sp,-32
80000860:	00112e23          	sw	ra,28(sp)
80000864:	00812c23          	sw	s0,24(sp)
80000868:	02010413          	addi	s0,sp,32
    static uint8_t count;
    /*
     * Toggle GPIO output pattern by doing an exclusive OR of all
     * pattern bits with ones.
     */
    if(count++>=50)
8000086c:	c5c1c783          	lbu	a5,-932(gp) # 8000966c <count.1912>
80000870:	00178713          	addi	a4,a5,1
80000874:	0ff77693          	andi	a3,a4,255
80000878:	c4d18e23          	sb	a3,-932(gp) # 8000966c <count.1912>
8000087c:	03100713          	li	a4,49
80000880:	02f77663          	bleu	a5,a4,800008ac <SysTick_Handler+0x50>
    {
        gpio_pattern = GPIO_get_outputs( &g_gpio );
80000884:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
80000888:	464030ef          	jal	ra,80003cec <GPIO_get_outputs>
8000088c:	fea42623          	sw	a0,-20(s0)
        gpio_pattern ^= 0x00000002;
80000890:	fec42783          	lw	a5,-20(s0)
80000894:	0027c793          	xori	a5,a5,2
80000898:	fef42623          	sw	a5,-20(s0)
        GPIO_set_outputs( &g_gpio, gpio_pattern );
8000089c:	fec42583          	lw	a1,-20(s0)
800008a0:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
800008a4:	184030ef          	jal	ra,80003a28 <GPIO_set_outputs>
        count=0;
800008a8:	c4018e23          	sb	zero,-932(gp) # 8000966c <count.1912>
    }

    g_10ms_count += 10;
800008ac:	d4c1a783          	lw	a5,-692(gp) # 8000975c <g_10ms_count>
800008b0:	00a78713          	addi	a4,a5,10
800008b4:	d4e1a623          	sw	a4,-692(gp) # 8000975c <g_10ms_count>

     /*
      * For neatness, if we roll over, reset cleanly back to 0 so the count
      * always goes up in proper 10s.
      */
    if(g_10ms_count < 10)
800008b8:	d4c1a703          	lw	a4,-692(gp) # 8000975c <g_10ms_count>
800008bc:	00900793          	li	a5,9
800008c0:	00e7e463          	bltu	a5,a4,800008c8 <SysTick_Handler+0x6c>
        g_10ms_count = 0;
800008c4:	d401a623          	sw	zero,-692(gp) # 8000975c <g_10ms_count>
}
800008c8:	00000013          	nop
800008cc:	01c12083          	lw	ra,28(sp)
800008d0:	01812403          	lw	s0,24(sp)
800008d4:	02010113          	addi	sp,sp,32
800008d8:	00008067          	ret

Disassembly of section .text.write_hex:

800008dc <write_hex>:
volatile uint64_t tohost __attribute__((aligned(64)));
volatile uint64_t fromhost __attribute__((aligned(64)));

extern UART_instance_t g_uart;

void write_hex(int fd, uint32_t hex){
800008dc:	fd010113          	addi	sp,sp,-48
800008e0:	02112623          	sw	ra,44(sp)
800008e4:	02812423          	sw	s0,40(sp)
800008e8:	03010413          	addi	s0,sp,48
800008ec:	fca42e23          	sw	a0,-36(s0)
800008f0:	fcb42c23          	sw	a1,-40(s0)
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write( fd , "0x", 2 );
800008f4:	00200613          	li	a2,2
800008f8:	800097b7          	lui	a5,0x80009
800008fc:	1e478593          	addi	a1,a5,484 # 800091e4 <__stack_top+0xffffea74>
80000900:	fdc42503          	lw	a0,-36(s0)
80000904:	590000ef          	jal	ra,80000e94 <write>
  for (ii = 8 ; ii > 0; ii--){
80000908:	00800793          	li	a5,8
8000090c:	fef407a3          	sb	a5,-17(s0)
80000910:	0880006f          	j	80000998 <write_hex+0xbc>
    jj = ii-1;
80000914:	fef44783          	lbu	a5,-17(s0)
80000918:	fff78793          	addi	a5,a5,-1
8000091c:	fef40723          	sb	a5,-18(s0)
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000920:	fee44783          	lbu	a5,-18(s0)
80000924:	00279793          	slli	a5,a5,0x2
80000928:	00f00713          	li	a4,15
8000092c:	00f717b3          	sll	a5,a4,a5
80000930:	00078713          	mv	a4,a5
80000934:	fd842783          	lw	a5,-40(s0)
80000938:	00f77733          	and	a4,a4,a5
8000093c:	fee44783          	lbu	a5,-18(s0)
80000940:	00279793          	slli	a5,a5,0x2
80000944:	00f757b3          	srl	a5,a4,a5
80000948:	fef406a3          	sb	a5,-19(s0)
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
8000094c:	fed44703          	lbu	a4,-19(s0)
80000950:	00900793          	li	a5,9
80000954:	00e7ea63          	bltu	a5,a4,80000968 <write_hex+0x8c>
80000958:	fed44783          	lbu	a5,-19(s0)
8000095c:	03078793          	addi	a5,a5,48
80000960:	0ff7f793          	andi	a5,a5,255
80000964:	0100006f          	j	80000974 <write_hex+0x98>
80000968:	fed44783          	lbu	a5,-19(s0)
8000096c:	03778793          	addi	a5,a5,55
80000970:	0ff7f793          	andi	a5,a5,255
80000974:	fef40623          	sb	a5,-20(s0)
    write( fd, &towrite, 1);
80000978:	fec40793          	addi	a5,s0,-20
8000097c:	00100613          	li	a2,1
80000980:	00078593          	mv	a1,a5
80000984:	fdc42503          	lw	a0,-36(s0)
80000988:	50c000ef          	jal	ra,80000e94 <write>
  for (ii = 8 ; ii > 0; ii--){
8000098c:	fef44783          	lbu	a5,-17(s0)
80000990:	fff78793          	addi	a5,a5,-1
80000994:	fef407a3          	sb	a5,-17(s0)
80000998:	fef44783          	lbu	a5,-17(s0)
8000099c:	f6079ce3          	bnez	a5,80000914 <write_hex+0x38>
  }

}
800009a0:	00000013          	nop
800009a4:	02c12083          	lw	ra,44(sp)
800009a8:	02812403          	lw	s0,40(sp)
800009ac:	03010113          	addi	sp,sp,48
800009b0:	00008067          	ret

Disassembly of section .text._exit:

800009b4 <_exit>:

               
void _exit(int code)
{
800009b4:	fd010113          	addi	sp,sp,-48
800009b8:	02112623          	sw	ra,44(sp)
800009bc:	02812423          	sw	s0,40(sp)
800009c0:	03010413          	addi	s0,sp,48
800009c4:	fca42e23          	sw	a0,-36(s0)
  const char * message = "\nProgam has exited with code:";
800009c8:	800097b7          	lui	a5,0x80009
800009cc:	1e878793          	addi	a5,a5,488 # 800091e8 <__stack_top+0xffffea78>
800009d0:	fef42623          	sw	a5,-20(s0)
  
  write(STDERR_FILENO, message, strlen(message));
800009d4:	fec42503          	lw	a0,-20(s0)
800009d8:	899ff0ef          	jal	ra,80000270 <strlen>
800009dc:	00050793          	mv	a5,a0
800009e0:	00078613          	mv	a2,a5
800009e4:	fec42583          	lw	a1,-20(s0)
800009e8:	00200513          	li	a0,2
800009ec:	4a8000ef          	jal	ra,80000e94 <write>
  write_hex(STDERR_FILENO, code);
800009f0:	fdc42783          	lw	a5,-36(s0)
800009f4:	00078593          	mv	a1,a5
800009f8:	00200513          	li	a0,2
800009fc:	ee1ff0ef          	jal	ra,800008dc <write_hex>

  while (1);
80000a00:	0000006f          	j	80000a00 <_exit+0x4c>

Disassembly of section .text.sbrk:

80000a04 <sbrk>:
    
}

void *sbrk(ptrdiff_t incr)
{
80000a04:	fe010113          	addi	sp,sp,-32
80000a08:	00812e23          	sw	s0,28(sp)
80000a0c:	02010413          	addi	s0,sp,32
80000a10:	fea42623          	sw	a0,-20(s0)
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
80000a14:	800097b7          	lui	a5,0x80009
80000a18:	2187a703          	lw	a4,536(a5) # 80009218 <__stack_top+0xffffeaa8>
80000a1c:	fec42783          	lw	a5,-20(s0)
80000a20:	00f70733          	add	a4,a4,a5
80000a24:	d5418793          	addi	a5,gp,-684 # 80009764 <_end>
80000a28:	00f76e63          	bltu	a4,a5,80000a44 <sbrk+0x40>
80000a2c:	800097b7          	lui	a5,0x80009
80000a30:	2187a703          	lw	a4,536(a5) # 80009218 <__stack_top+0xffffeaa8>
80000a34:	fec42783          	lw	a5,-20(s0)
80000a38:	00f70733          	add	a4,a4,a5
80000a3c:	56018793          	addi	a5,gp,1376 # 80009f70 <__heap_end>
80000a40:	00e7f663          	bleu	a4,a5,80000a4c <sbrk+0x48>
    return NULL - 1;
80000a44:	fff00793          	li	a5,-1
80000a48:	0300006f          	j	80000a78 <sbrk+0x74>

  curbrk += incr;
80000a4c:	800097b7          	lui	a5,0x80009
80000a50:	2187a703          	lw	a4,536(a5) # 80009218 <__stack_top+0xffffeaa8>
80000a54:	fec42783          	lw	a5,-20(s0)
80000a58:	00f70733          	add	a4,a4,a5
80000a5c:	800097b7          	lui	a5,0x80009
80000a60:	20e7ac23          	sw	a4,536(a5) # 80009218 <__stack_top+0xffffeaa8>
  return curbrk - incr;
80000a64:	800097b7          	lui	a5,0x80009
80000a68:	2187a703          	lw	a4,536(a5) # 80009218 <__stack_top+0xffffeaa8>
80000a6c:	fec42783          	lw	a5,-20(s0)
80000a70:	40f007b3          	neg	a5,a5
80000a74:	00f707b3          	add	a5,a4,a5
}
80000a78:	00078513          	mv	a0,a5
80000a7c:	01c12403          	lw	s0,28(sp)
80000a80:	02010113          	addi	sp,sp,32
80000a84:	00008067          	ret

Disassembly of section .text.stub:

80000a88 <stub>:

static int stub(int err)
{
80000a88:	fe010113          	addi	sp,sp,-32
80000a8c:	00812e23          	sw	s0,28(sp)
80000a90:	02010413          	addi	s0,sp,32
80000a94:	fea42623          	sw	a0,-20(s0)
  errno = err;
80000a98:	fec42703          	lw	a4,-20(s0)
80000a9c:	c6e1a823          	sw	a4,-912(gp) # 80009680 <errno>
  return -1;
80000aa0:	fff00793          	li	a5,-1
}
80000aa4:	00078513          	mv	a0,a5
80000aa8:	01c12403          	lw	s0,28(sp)
80000aac:	02010113          	addi	sp,sp,32
80000ab0:	00008067          	ret

Disassembly of section .text.open:

80000ab4 <open>:

int open(const char* name, int flags, int mode)
{
80000ab4:	fe010113          	addi	sp,sp,-32
80000ab8:	00112e23          	sw	ra,28(sp)
80000abc:	00812c23          	sw	s0,24(sp)
80000ac0:	02010413          	addi	s0,sp,32
80000ac4:	fea42623          	sw	a0,-20(s0)
80000ac8:	feb42423          	sw	a1,-24(s0)
80000acc:	fec42223          	sw	a2,-28(s0)
  return stub(ENOENT);
80000ad0:	00200513          	li	a0,2
80000ad4:	fb5ff0ef          	jal	ra,80000a88 <stub>
80000ad8:	00050793          	mv	a5,a0
}
80000adc:	00078513          	mv	a0,a5
80000ae0:	01c12083          	lw	ra,28(sp)
80000ae4:	01812403          	lw	s0,24(sp)
80000ae8:	02010113          	addi	sp,sp,32
80000aec:	00008067          	ret

Disassembly of section .text.openat:

80000af0 <openat>:

int openat(int dirfd, const char* name, int flags, int mode)
{
80000af0:	fe010113          	addi	sp,sp,-32
80000af4:	00112e23          	sw	ra,28(sp)
80000af8:	00812c23          	sw	s0,24(sp)
80000afc:	02010413          	addi	s0,sp,32
80000b00:	fea42623          	sw	a0,-20(s0)
80000b04:	feb42423          	sw	a1,-24(s0)
80000b08:	fec42223          	sw	a2,-28(s0)
80000b0c:	fed42023          	sw	a3,-32(s0)
  return stub(ENOENT);
80000b10:	00200513          	li	a0,2
80000b14:	f75ff0ef          	jal	ra,80000a88 <stub>
80000b18:	00050793          	mv	a5,a0
}
80000b1c:	00078513          	mv	a0,a5
80000b20:	01c12083          	lw	ra,28(sp)
80000b24:	01812403          	lw	s0,24(sp)
80000b28:	02010113          	addi	sp,sp,32
80000b2c:	00008067          	ret

Disassembly of section .text.close:

80000b30 <close>:

int close(int fd)
{
80000b30:	fe010113          	addi	sp,sp,-32
80000b34:	00112e23          	sw	ra,28(sp)
80000b38:	00812c23          	sw	s0,24(sp)
80000b3c:	02010413          	addi	s0,sp,32
80000b40:	fea42623          	sw	a0,-20(s0)
  return stub(EBADF);
80000b44:	00900513          	li	a0,9
80000b48:	f41ff0ef          	jal	ra,80000a88 <stub>
80000b4c:	00050793          	mv	a5,a0
}
80000b50:	00078513          	mv	a0,a5
80000b54:	01c12083          	lw	ra,28(sp)
80000b58:	01812403          	lw	s0,24(sp)
80000b5c:	02010113          	addi	sp,sp,32
80000b60:	00008067          	ret

Disassembly of section .text.execve:

80000b64 <execve>:

int execve(const char* name, char* const argv[], char* const env[])
{
80000b64:	fe010113          	addi	sp,sp,-32
80000b68:	00112e23          	sw	ra,28(sp)
80000b6c:	00812c23          	sw	s0,24(sp)
80000b70:	02010413          	addi	s0,sp,32
80000b74:	fea42623          	sw	a0,-20(s0)
80000b78:	feb42423          	sw	a1,-24(s0)
80000b7c:	fec42223          	sw	a2,-28(s0)
  return stub(ENOMEM);
80000b80:	00c00513          	li	a0,12
80000b84:	f05ff0ef          	jal	ra,80000a88 <stub>
80000b88:	00050793          	mv	a5,a0
}
80000b8c:	00078513          	mv	a0,a5
80000b90:	01c12083          	lw	ra,28(sp)
80000b94:	01812403          	lw	s0,24(sp)
80000b98:	02010113          	addi	sp,sp,32
80000b9c:	00008067          	ret

Disassembly of section .text.fork:

80000ba0 <fork>:

int fork()
{
80000ba0:	ff010113          	addi	sp,sp,-16
80000ba4:	00112623          	sw	ra,12(sp)
80000ba8:	00812423          	sw	s0,8(sp)
80000bac:	01010413          	addi	s0,sp,16
  return stub(EAGAIN);
80000bb0:	00b00513          	li	a0,11
80000bb4:	ed5ff0ef          	jal	ra,80000a88 <stub>
80000bb8:	00050793          	mv	a5,a0
}
80000bbc:	00078513          	mv	a0,a5
80000bc0:	00c12083          	lw	ra,12(sp)
80000bc4:	00812403          	lw	s0,8(sp)
80000bc8:	01010113          	addi	sp,sp,16
80000bcc:	00008067          	ret

Disassembly of section .text.fstat:

80000bd0 <fstat>:

int fstat(int fd, struct stat *st)
{
80000bd0:	fe010113          	addi	sp,sp,-32
80000bd4:	00112e23          	sw	ra,28(sp)
80000bd8:	00812c23          	sw	s0,24(sp)
80000bdc:	02010413          	addi	s0,sp,32
80000be0:	fea42623          	sw	a0,-20(s0)
80000be4:	feb42423          	sw	a1,-24(s0)
  if (isatty(fd)) {
80000be8:	fec42503          	lw	a0,-20(s0)
80000bec:	060000ef          	jal	ra,80000c4c <isatty>
80000bf0:	00050793          	mv	a5,a0
80000bf4:	00078c63          	beqz	a5,80000c0c <fstat+0x3c>
    st->st_mode = S_IFCHR;
80000bf8:	fe842783          	lw	a5,-24(s0)
80000bfc:	00002737          	lui	a4,0x2
80000c00:	00e7a823          	sw	a4,16(a5)
    return 0;
80000c04:	00000793          	li	a5,0
80000c08:	0100006f          	j	80000c18 <fstat+0x48>
  }

  return stub(EBADF);
80000c0c:	00900513          	li	a0,9
80000c10:	e79ff0ef          	jal	ra,80000a88 <stub>
80000c14:	00050793          	mv	a5,a0
}
80000c18:	00078513          	mv	a0,a5
80000c1c:	01c12083          	lw	ra,28(sp)
80000c20:	01812403          	lw	s0,24(sp)
80000c24:	02010113          	addi	sp,sp,32
80000c28:	00008067          	ret

Disassembly of section .text.getpid:

80000c2c <getpid>:

int getpid()
{
80000c2c:	ff010113          	addi	sp,sp,-16
80000c30:	00812623          	sw	s0,12(sp)
80000c34:	01010413          	addi	s0,sp,16
  return 1;
80000c38:	00100793          	li	a5,1
}
80000c3c:	00078513          	mv	a0,a5
80000c40:	00c12403          	lw	s0,12(sp)
80000c44:	01010113          	addi	sp,sp,16
80000c48:	00008067          	ret

Disassembly of section .text.isatty:

80000c4c <isatty>:

int isatty(int fd)
{
80000c4c:	fe010113          	addi	sp,sp,-32
80000c50:	00812e23          	sw	s0,28(sp)
80000c54:	02010413          	addi	s0,sp,32
80000c58:	fea42623          	sw	a0,-20(s0)
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000c5c:	fec42703          	lw	a4,-20(s0)
80000c60:	00100793          	li	a5,1
80000c64:	00f70863          	beq	a4,a5,80000c74 <isatty+0x28>
80000c68:	fec42703          	lw	a4,-20(s0)
80000c6c:	00200793          	li	a5,2
80000c70:	00f71663          	bne	a4,a5,80000c7c <isatty+0x30>
    return 1;
80000c74:	00100793          	li	a5,1
80000c78:	0100006f          	j	80000c88 <isatty+0x3c>

  errno = EBADF;
80000c7c:	00900713          	li	a4,9
80000c80:	c6e1a823          	sw	a4,-912(gp) # 80009680 <errno>
  return 0;
80000c84:	00000793          	li	a5,0
}
80000c88:	00078513          	mv	a0,a5
80000c8c:	01c12403          	lw	s0,28(sp)
80000c90:	02010113          	addi	sp,sp,32
80000c94:	00008067          	ret

Disassembly of section .text.kill:

80000c98 <kill>:

int kill(int pid, int sig)
{
80000c98:	fe010113          	addi	sp,sp,-32
80000c9c:	00112e23          	sw	ra,28(sp)
80000ca0:	00812c23          	sw	s0,24(sp)
80000ca4:	02010413          	addi	s0,sp,32
80000ca8:	fea42623          	sw	a0,-20(s0)
80000cac:	feb42423          	sw	a1,-24(s0)
  return stub(EINVAL);
80000cb0:	01600513          	li	a0,22
80000cb4:	dd5ff0ef          	jal	ra,80000a88 <stub>
80000cb8:	00050793          	mv	a5,a0
}
80000cbc:	00078513          	mv	a0,a5
80000cc0:	01c12083          	lw	ra,28(sp)
80000cc4:	01812403          	lw	s0,24(sp)
80000cc8:	02010113          	addi	sp,sp,32
80000ccc:	00008067          	ret

Disassembly of section .text.link:

80000cd0 <link>:

int link(const char *old_name, const char *new_name)
{
80000cd0:	fe010113          	addi	sp,sp,-32
80000cd4:	00112e23          	sw	ra,28(sp)
80000cd8:	00812c23          	sw	s0,24(sp)
80000cdc:	02010413          	addi	s0,sp,32
80000ce0:	fea42623          	sw	a0,-20(s0)
80000ce4:	feb42423          	sw	a1,-24(s0)
  return stub(EMLINK);
80000ce8:	01f00513          	li	a0,31
80000cec:	d9dff0ef          	jal	ra,80000a88 <stub>
80000cf0:	00050793          	mv	a5,a0
}
80000cf4:	00078513          	mv	a0,a5
80000cf8:	01c12083          	lw	ra,28(sp)
80000cfc:	01812403          	lw	s0,24(sp)
80000d00:	02010113          	addi	sp,sp,32
80000d04:	00008067          	ret

Disassembly of section .text.lseek:

80000d08 <lseek>:

off_t lseek(int fd, off_t ptr, int dir)
{
80000d08:	fe010113          	addi	sp,sp,-32
80000d0c:	00112e23          	sw	ra,28(sp)
80000d10:	00812c23          	sw	s0,24(sp)
80000d14:	02010413          	addi	s0,sp,32
80000d18:	fea42623          	sw	a0,-20(s0)
80000d1c:	feb42423          	sw	a1,-24(s0)
80000d20:	fec42223          	sw	a2,-28(s0)
  if (isatty(fd))
80000d24:	fec42503          	lw	a0,-20(s0)
80000d28:	f25ff0ef          	jal	ra,80000c4c <isatty>
80000d2c:	00050793          	mv	a5,a0
80000d30:	00078663          	beqz	a5,80000d3c <lseek+0x34>
    return 0;
80000d34:	00000793          	li	a5,0
80000d38:	0100006f          	j	80000d48 <lseek+0x40>

  return stub(EBADF);
80000d3c:	00900513          	li	a0,9
80000d40:	d49ff0ef          	jal	ra,80000a88 <stub>
80000d44:	00050793          	mv	a5,a0
}
80000d48:	00078513          	mv	a0,a5
80000d4c:	01c12083          	lw	ra,28(sp)
80000d50:	01812403          	lw	s0,24(sp)
80000d54:	02010113          	addi	sp,sp,32
80000d58:	00008067          	ret

Disassembly of section .text.read:

80000d5c <read>:

ssize_t read(int fd, void* ptr, size_t len)
{
80000d5c:	fe010113          	addi	sp,sp,-32
80000d60:	00112e23          	sw	ra,28(sp)
80000d64:	00812c23          	sw	s0,24(sp)
80000d68:	02010413          	addi	s0,sp,32
80000d6c:	fea42623          	sw	a0,-20(s0)
80000d70:	feb42423          	sw	a1,-24(s0)
80000d74:	fec42223          	sw	a2,-28(s0)
  if (isatty(fd))
80000d78:	fec42503          	lw	a0,-20(s0)
80000d7c:	ed1ff0ef          	jal	ra,80000c4c <isatty>
80000d80:	00050793          	mv	a5,a0
80000d84:	00078e63          	beqz	a5,80000da0 <read+0x44>
    return UART_get_rx(&g_uart,
80000d88:	fe442603          	lw	a2,-28(s0)
80000d8c:	fe842583          	lw	a1,-24(s0)
80000d90:	c7418513          	addi	a0,gp,-908 # 80009684 <g_uart>
80000d94:	101000ef          	jal	ra,80001694 <UART_get_rx>
80000d98:	00050793          	mv	a5,a0
80000d9c:	0100006f          	j	80000dac <read+0x50>
                       (uint8_t*) ptr,
                       len);

  return stub(EBADF);
80000da0:	00900513          	li	a0,9
80000da4:	ce5ff0ef          	jal	ra,80000a88 <stub>
80000da8:	00050793          	mv	a5,a0
}
80000dac:	00078513          	mv	a0,a5
80000db0:	01c12083          	lw	ra,28(sp)
80000db4:	01812403          	lw	s0,24(sp)
80000db8:	02010113          	addi	sp,sp,32
80000dbc:	00008067          	ret

Disassembly of section .text.stat:

80000dc0 <stat>:

int stat(const char* file, struct stat* st)
{
80000dc0:	fe010113          	addi	sp,sp,-32
80000dc4:	00112e23          	sw	ra,28(sp)
80000dc8:	00812c23          	sw	s0,24(sp)
80000dcc:	02010413          	addi	s0,sp,32
80000dd0:	fea42623          	sw	a0,-20(s0)
80000dd4:	feb42423          	sw	a1,-24(s0)
  return stub(EACCES);
80000dd8:	00d00513          	li	a0,13
80000ddc:	cadff0ef          	jal	ra,80000a88 <stub>
80000de0:	00050793          	mv	a5,a0
}
80000de4:	00078513          	mv	a0,a5
80000de8:	01c12083          	lw	ra,28(sp)
80000dec:	01812403          	lw	s0,24(sp)
80000df0:	02010113          	addi	sp,sp,32
80000df4:	00008067          	ret

Disassembly of section .text.times:

80000df8 <times>:

clock_t times(struct tms* buf)
{
80000df8:	fe010113          	addi	sp,sp,-32
80000dfc:	00112e23          	sw	ra,28(sp)
80000e00:	00812c23          	sw	s0,24(sp)
80000e04:	02010413          	addi	s0,sp,32
80000e08:	fea42623          	sw	a0,-20(s0)
  return stub(EACCES);
80000e0c:	00d00513          	li	a0,13
80000e10:	c79ff0ef          	jal	ra,80000a88 <stub>
80000e14:	00050793          	mv	a5,a0
}
80000e18:	00078513          	mv	a0,a5
80000e1c:	01c12083          	lw	ra,28(sp)
80000e20:	01812403          	lw	s0,24(sp)
80000e24:	02010113          	addi	sp,sp,32
80000e28:	00008067          	ret

Disassembly of section .text.unlink:

80000e2c <unlink>:

int unlink(const char* name)
{
80000e2c:	fe010113          	addi	sp,sp,-32
80000e30:	00112e23          	sw	ra,28(sp)
80000e34:	00812c23          	sw	s0,24(sp)
80000e38:	02010413          	addi	s0,sp,32
80000e3c:	fea42623          	sw	a0,-20(s0)
  return stub(ENOENT);
80000e40:	00200513          	li	a0,2
80000e44:	c45ff0ef          	jal	ra,80000a88 <stub>
80000e48:	00050793          	mv	a5,a0
}
80000e4c:	00078513          	mv	a0,a5
80000e50:	01c12083          	lw	ra,28(sp)
80000e54:	01812403          	lw	s0,24(sp)
80000e58:	02010113          	addi	sp,sp,32
80000e5c:	00008067          	ret

Disassembly of section .text.wait:

80000e60 <wait>:

int wait(int* status)
{
80000e60:	fe010113          	addi	sp,sp,-32
80000e64:	00112e23          	sw	ra,28(sp)
80000e68:	00812c23          	sw	s0,24(sp)
80000e6c:	02010413          	addi	s0,sp,32
80000e70:	fea42623          	sw	a0,-20(s0)
  return stub(ECHILD);
80000e74:	00a00513          	li	a0,10
80000e78:	c11ff0ef          	jal	ra,80000a88 <stub>
80000e7c:	00050793          	mv	a5,a0
}
80000e80:	00078513          	mv	a0,a5
80000e84:	01c12083          	lw	ra,28(sp)
80000e88:	01812403          	lw	s0,24(sp)
80000e8c:	02010113          	addi	sp,sp,32
80000e90:	00008067          	ret

Disassembly of section .text.write:

80000e94 <write>:

ssize_t write(int fd, const void* ptr, size_t len)
{
80000e94:	fd010113          	addi	sp,sp,-48
80000e98:	02112623          	sw	ra,44(sp)
80000e9c:	02812423          	sw	s0,40(sp)
80000ea0:	03010413          	addi	s0,sp,48
80000ea4:	fca42e23          	sw	a0,-36(s0)
80000ea8:	fcb42c23          	sw	a1,-40(s0)
80000eac:	fcc42a23          	sw	a2,-44(s0)

  const uint8_t * current = (const char*) ptr;
80000eb0:	fd842783          	lw	a5,-40(s0)
80000eb4:	fef42423          	sw	a5,-24(s0)
  size_t jj;
  if (isatty(fd)) {
80000eb8:	fdc42503          	lw	a0,-36(s0)
80000ebc:	d91ff0ef          	jal	ra,80000c4c <isatty>
80000ec0:	00050793          	mv	a5,a0
80000ec4:	06078a63          	beqz	a5,80000f38 <write+0xa4>
    
    for (jj = 0; jj < len; jj++){
80000ec8:	fe042623          	sw	zero,-20(s0)
80000ecc:	0580006f          	j	80000f24 <write+0x90>
      
      UART_send(&g_uart, current + jj, 1);
80000ed0:	fe842703          	lw	a4,-24(s0)
80000ed4:	fec42783          	lw	a5,-20(s0)
80000ed8:	00f707b3          	add	a5,a4,a5
80000edc:	00100613          	li	a2,1
80000ee0:	00078593          	mv	a1,a5
80000ee4:	c7418513          	addi	a0,gp,-908 # 80009684 <g_uart>
80000ee8:	61c000ef          	jal	ra,80001504 <UART_send>
      if (current[jj] == '\n'){
80000eec:	fe842703          	lw	a4,-24(s0)
80000ef0:	fec42783          	lw	a5,-20(s0)
80000ef4:	00f707b3          	add	a5,a4,a5
80000ef8:	0007c703          	lbu	a4,0(a5)
80000efc:	00a00793          	li	a5,10
80000f00:	00f71c63          	bne	a4,a5,80000f18 <write+0x84>
        UART_send(&g_uart, "\r", 1);
80000f04:	00100613          	li	a2,1
80000f08:	800097b7          	lui	a5,0x80009
80000f0c:	20878593          	addi	a1,a5,520 # 80009208 <__stack_top+0xffffea98>
80000f10:	c7418513          	addi	a0,gp,-908 # 80009684 <g_uart>
80000f14:	5f0000ef          	jal	ra,80001504 <UART_send>
    for (jj = 0; jj < len; jj++){
80000f18:	fec42783          	lw	a5,-20(s0)
80000f1c:	00178793          	addi	a5,a5,1
80000f20:	fef42623          	sw	a5,-20(s0)
80000f24:	fec42703          	lw	a4,-20(s0)
80000f28:	fd442783          	lw	a5,-44(s0)
80000f2c:	faf762e3          	bltu	a4,a5,80000ed0 <write+0x3c>
      }
    }
    return len;
80000f30:	fd442783          	lw	a5,-44(s0)
80000f34:	0100006f          	j	80000f44 <write+0xb0>
  } 
  
  return stub(EBADF);
80000f38:	00900513          	li	a0,9
80000f3c:	b4dff0ef          	jal	ra,80000a88 <stub>
80000f40:	00050793          	mv	a5,a0
}
80000f44:	00078513          	mv	a0,a5
80000f48:	02c12083          	lw	ra,44(sp)
80000f4c:	02812403          	lw	s0,40(sp)
80000f50:	03010113          	addi	sp,sp,48
80000f54:	00008067          	ret

Disassembly of section .text.HAL_enable_interrupts:

80000f58 <HAL_enable_interrupts>:
#include "riscv_hal.h"

/*------------------------------------------------------------------------------
 * 
 */
void HAL_enable_interrupts(void) {
80000f58:	ff010113          	addi	sp,sp,-16
80000f5c:	00112623          	sw	ra,12(sp)
80000f60:	00812423          	sw	s0,8(sp)
80000f64:	01010413          	addi	s0,sp,16
    __enable_irq();
80000f68:	e58ff0ef          	jal	ra,800005c0 <__enable_irq>
}
80000f6c:	00000013          	nop
80000f70:	00c12083          	lw	ra,12(sp)
80000f74:	00812403          	lw	s0,8(sp)
80000f78:	01010113          	addi	sp,sp,16
80000f7c:	00008067          	ret

Disassembly of section .text.HAL_disable_interrupts:

80000f80 <HAL_disable_interrupts>:

/*------------------------------------------------------------------------------
 * 
 */
psr_t HAL_disable_interrupts(void) {
80000f80:	fe010113          	addi	sp,sp,-32
80000f84:	00112e23          	sw	ra,28(sp)
80000f88:	00812c23          	sw	s0,24(sp)
80000f8c:	02010413          	addi	s0,sp,32
    psr_t psr;
    psr = read_csr(mstatus);
80000f90:	300027f3          	csrr	a5,mstatus
80000f94:	fef42623          	sw	a5,-20(s0)
80000f98:	fec42783          	lw	a5,-20(s0)
80000f9c:	fef42423          	sw	a5,-24(s0)
    __disable_irq();
80000fa0:	decff0ef          	jal	ra,8000058c <__disable_irq>
    return(psr);
80000fa4:	fe842783          	lw	a5,-24(s0)
}
80000fa8:	00078513          	mv	a0,a5
80000fac:	01c12083          	lw	ra,28(sp)
80000fb0:	01812403          	lw	s0,24(sp)
80000fb4:	02010113          	addi	sp,sp,32
80000fb8:	00008067          	ret

Disassembly of section .text.HAL_restore_interrupts:

80000fbc <HAL_restore_interrupts>:

/*------------------------------------------------------------------------------
 * 
 */
void HAL_restore_interrupts(psr_t saved_psr) {
80000fbc:	fe010113          	addi	sp,sp,-32
80000fc0:	00812e23          	sw	s0,28(sp)
80000fc4:	02010413          	addi	s0,sp,32
80000fc8:	fea42623          	sw	a0,-20(s0)
    write_csr(mstatus, saved_psr);
80000fcc:	fec42783          	lw	a5,-20(s0)
80000fd0:	30079073          	csrw	mstatus,a5
}
80000fd4:	00000013          	nop
80000fd8:	01c12403          	lw	s0,28(sp)
80000fdc:	02010113          	addi	sp,sp,32
80000fe0:	00008067          	ret

Disassembly of section .text.HW_set_32bit_reg:

80000fe4 <HW_set_32bit_reg>:
void
HW_set_32bit_reg
(
	addr_t reg_addr,
	uint32_t value
 ) {
80000fe4:	fd010113          	addi	sp,sp,-48
80000fe8:	02812623          	sw	s0,44(sp)
80000fec:	03010413          	addi	s0,sp,48
80000ff0:	fca42e23          	sw	a0,-36(s0)
80000ff4:	fcb42c23          	sw	a1,-40(s0)

  volatile uint32_t * foo = (uint32_t * ) reg_addr;
80000ff8:	fdc42783          	lw	a5,-36(s0)
80000ffc:	fef42623          	sw	a5,-20(s0)
  *foo = value;
80001000:	fec42783          	lw	a5,-20(s0)
80001004:	fd842703          	lw	a4,-40(s0)
80001008:	00e7a023          	sw	a4,0(a5)

}
8000100c:	00000013          	nop
80001010:	02c12403          	lw	s0,44(sp)
80001014:	03010113          	addi	sp,sp,48
80001018:	00008067          	ret

Disassembly of section .text.HW_get_32bit_reg:

8000101c <HW_get_32bit_reg>:
 */
uint32_t
HW_get_32bit_reg
(
	addr_t reg_addr
 ) {
8000101c:	fd010113          	addi	sp,sp,-48
80001020:	02812623          	sw	s0,44(sp)
80001024:	03010413          	addi	s0,sp,48
80001028:	fca42e23          	sw	a0,-36(s0)

  volatile uint32_t * foo = (uint32_t *) reg_addr;
8000102c:	fdc42783          	lw	a5,-36(s0)
80001030:	fef42623          	sw	a5,-20(s0)
  return *foo;
80001034:	fec42783          	lw	a5,-20(s0)
80001038:	0007a783          	lw	a5,0(a5)

}
8000103c:	00078513          	mv	a0,a5
80001040:	02c12403          	lw	s0,44(sp)
80001044:	03010113          	addi	sp,sp,48
80001048:	00008067          	ret

Disassembly of section .text.HW_set_32bit_reg_field:

8000104c <HW_set_32bit_reg_field>:
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint32_t mask,
    uint32_t value
 ) {
8000104c:	fd010113          	addi	sp,sp,-48
80001050:	02812623          	sw	s0,44(sp)
80001054:	03010413          	addi	s0,sp,48
80001058:	fca42e23          	sw	a0,-36(s0)
8000105c:	fcb42c23          	sw	a1,-40(s0)
80001060:	fcc42a23          	sw	a2,-44(s0)
80001064:	fcd42823          	sw	a3,-48(s0)

  volatile uint32_t * foo = (uint32_t *) reg_addr;
80001068:	fdc42783          	lw	a5,-36(s0)
8000106c:	fef42623          	sw	a5,-20(s0)
  uint32_t old_value = *foo;
80001070:	fec42783          	lw	a5,-20(s0)
80001074:	0007a783          	lw	a5,0(a5)
80001078:	fef42423          	sw	a5,-24(s0)
  uint32_t new_value = (value << shift);
8000107c:	fd042703          	lw	a4,-48(s0)
80001080:	fd842783          	lw	a5,-40(s0)
80001084:	00f717b3          	sll	a5,a4,a5
80001088:	fef42223          	sw	a5,-28(s0)
  *foo = (new_value & mask) | (old_value & ~mask);
8000108c:	fe442703          	lw	a4,-28(s0)
80001090:	fd442783          	lw	a5,-44(s0)
80001094:	00f77733          	and	a4,a4,a5
80001098:	fd442783          	lw	a5,-44(s0)
8000109c:	fff7c693          	not	a3,a5
800010a0:	fe842783          	lw	a5,-24(s0)
800010a4:	00f6f7b3          	and	a5,a3,a5
800010a8:	00f76733          	or	a4,a4,a5
800010ac:	fec42783          	lw	a5,-20(s0)
800010b0:	00e7a023          	sw	a4,0(a5)
  
}
800010b4:	00000013          	nop
800010b8:	02c12403          	lw	s0,44(sp)
800010bc:	03010113          	addi	sp,sp,48
800010c0:	00008067          	ret

Disassembly of section .text.HW_get_32bit_reg_field:

800010c4 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint32_t mask
 ){
800010c4:	fd010113          	addi	sp,sp,-48
800010c8:	02812623          	sw	s0,44(sp)
800010cc:	03010413          	addi	s0,sp,48
800010d0:	fca42e23          	sw	a0,-36(s0)
800010d4:	fcb42c23          	sw	a1,-40(s0)
800010d8:	fcc42a23          	sw	a2,-44(s0)
  volatile uint32_t * foo = (uint32_t * ) reg_addr;
800010dc:	fdc42783          	lw	a5,-36(s0)
800010e0:	fef42623          	sw	a5,-20(s0)
  uint32_t value = ((*foo) & mask) >> shift;
800010e4:	fec42783          	lw	a5,-20(s0)
800010e8:	0007a703          	lw	a4,0(a5)
800010ec:	fd442783          	lw	a5,-44(s0)
800010f0:	00f77733          	and	a4,a4,a5
800010f4:	fd842783          	lw	a5,-40(s0)
800010f8:	00f757b3          	srl	a5,a4,a5
800010fc:	fef42423          	sw	a5,-24(s0)
  return (value);
80001100:	fe842783          	lw	a5,-24(s0)
}
80001104:	00078513          	mv	a0,a5
80001108:	02c12403          	lw	s0,44(sp)
8000110c:	03010113          	addi	sp,sp,48
80001110:	00008067          	ret

Disassembly of section .text.HW_set_16bit_reg:

80001114 <HW_set_16bit_reg>:
void
HW_set_16bit_reg
(
	addr_t reg_addr,
	uint_fast16_t value
 ) {
80001114:	fd010113          	addi	sp,sp,-48
80001118:	02812623          	sw	s0,44(sp)
8000111c:	03010413          	addi	s0,sp,48
80001120:	fca42e23          	sw	a0,-36(s0)
80001124:	fcb42c23          	sw	a1,-40(s0)
  volatile uint16_t * foo = (uint16_t * ) reg_addr;
80001128:	fdc42783          	lw	a5,-36(s0)
8000112c:	fef42623          	sw	a5,-20(s0)
  *foo = value;
80001130:	fd842783          	lw	a5,-40(s0)
80001134:	01079713          	slli	a4,a5,0x10
80001138:	01075713          	srli	a4,a4,0x10
8000113c:	fec42783          	lw	a5,-20(s0)
80001140:	00e79023          	sh	a4,0(a5)
}
80001144:	00000013          	nop
80001148:	02c12403          	lw	s0,44(sp)
8000114c:	03010113          	addi	sp,sp,48
80001150:	00008067          	ret

Disassembly of section .text.HW_get_16bit_reg:

80001154 <HW_get_16bit_reg>:
 */
uint16_t
HW_get_16bit_reg
(
	addr_t reg_addr
 ) {
80001154:	fd010113          	addi	sp,sp,-48
80001158:	02812623          	sw	s0,44(sp)
8000115c:	03010413          	addi	s0,sp,48
80001160:	fca42e23          	sw	a0,-36(s0)
  volatile uint16_t * foo = (uint16_t*) reg_addr;
80001164:	fdc42783          	lw	a5,-36(s0)
80001168:	fef42623          	sw	a5,-20(s0)
  return *foo;
8000116c:	fec42783          	lw	a5,-20(s0)
80001170:	0007d783          	lhu	a5,0(a5)
80001174:	01079793          	slli	a5,a5,0x10
80001178:	0107d793          	srli	a5,a5,0x10
}
8000117c:	00078513          	mv	a0,a5
80001180:	02c12403          	lw	s0,44(sp)
80001184:	03010113          	addi	sp,sp,48
80001188:	00008067          	ret

Disassembly of section .text.HW_set_16bit_reg_field:

8000118c <HW_set_16bit_reg_field>:
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint_fast16_t mask,
    uint_fast16_t value
 ) {
8000118c:	fd010113          	addi	sp,sp,-48
80001190:	02812623          	sw	s0,44(sp)
80001194:	03010413          	addi	s0,sp,48
80001198:	fca42e23          	sw	a0,-36(s0)
8000119c:	fcb42c23          	sw	a1,-40(s0)
800011a0:	fcc42a23          	sw	a2,-44(s0)
800011a4:	fcd42823          	sw	a3,-48(s0)

  volatile uint16_t * foo = (uint16_t *) reg_addr;
800011a8:	fdc42783          	lw	a5,-36(s0)
800011ac:	fef42623          	sw	a5,-20(s0)
  uint16_t old_value = *foo;
800011b0:	fec42783          	lw	a5,-20(s0)
800011b4:	0007d783          	lhu	a5,0(a5)
800011b8:	fef41523          	sh	a5,-22(s0)
  uint16_t new_value = (value << shift);
800011bc:	fd042703          	lw	a4,-48(s0)
800011c0:	fd842783          	lw	a5,-40(s0)
800011c4:	00f717b3          	sll	a5,a4,a5
800011c8:	fef41423          	sh	a5,-24(s0)
  *foo = (new_value & mask) | (old_value & ~mask);
800011cc:	fd442783          	lw	a5,-44(s0)
800011d0:	01079713          	slli	a4,a5,0x10
800011d4:	01075713          	srli	a4,a4,0x10
800011d8:	fe845783          	lhu	a5,-24(s0)
800011dc:	00f777b3          	and	a5,a4,a5
800011e0:	01079713          	slli	a4,a5,0x10
800011e4:	01075713          	srli	a4,a4,0x10
800011e8:	fd442783          	lw	a5,-44(s0)
800011ec:	01079793          	slli	a5,a5,0x10
800011f0:	0107d793          	srli	a5,a5,0x10
800011f4:	fff7c793          	not	a5,a5
800011f8:	01079693          	slli	a3,a5,0x10
800011fc:	0106d693          	srli	a3,a3,0x10
80001200:	fea45783          	lhu	a5,-22(s0)
80001204:	00f6f7b3          	and	a5,a3,a5
80001208:	01079793          	slli	a5,a5,0x10
8000120c:	0107d793          	srli	a5,a5,0x10
80001210:	00f767b3          	or	a5,a4,a5
80001214:	01079713          	slli	a4,a5,0x10
80001218:	01075713          	srli	a4,a4,0x10
8000121c:	fec42783          	lw	a5,-20(s0)
80001220:	00e79023          	sh	a4,0(a5)
}
80001224:	00000013          	nop
80001228:	02c12403          	lw	s0,44(sp)
8000122c:	03010113          	addi	sp,sp,48
80001230:	00008067          	ret

Disassembly of section .text.HW_get_16bit_reg_field:

80001234 <HW_get_16bit_reg_field>:
uint16_t HW_get_16bit_reg_field
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint_fast16_t mask
 ) {
80001234:	fd010113          	addi	sp,sp,-48
80001238:	02812623          	sw	s0,44(sp)
8000123c:	03010413          	addi	s0,sp,48
80001240:	fca42e23          	sw	a0,-36(s0)
80001244:	fcb42c23          	sw	a1,-40(s0)
80001248:	fcc42a23          	sw	a2,-44(s0)
  volatile uint16_t * foo = (uint16_t * ) reg_addr;
8000124c:	fdc42783          	lw	a5,-36(s0)
80001250:	fef42623          	sw	a5,-20(s0)
  uint16_t value = ((*foo) & mask) >> shift;
80001254:	fec42783          	lw	a5,-20(s0)
80001258:	0007d783          	lhu	a5,0(a5)
8000125c:	01079793          	slli	a5,a5,0x10
80001260:	0107d793          	srli	a5,a5,0x10
80001264:	00078713          	mv	a4,a5
80001268:	fd442783          	lw	a5,-44(s0)
8000126c:	00f77733          	and	a4,a4,a5
80001270:	fd842783          	lw	a5,-40(s0)
80001274:	00f757b3          	srl	a5,a4,a5
80001278:	fef41523          	sh	a5,-22(s0)
  return (value);
8000127c:	fea45783          	lhu	a5,-22(s0)
}
80001280:	00078513          	mv	a0,a5
80001284:	02c12403          	lw	s0,44(sp)
80001288:	03010113          	addi	sp,sp,48
8000128c:	00008067          	ret

Disassembly of section .text.HW_set_8bit_reg:

80001290 <HW_set_8bit_reg>:
void
HW_set_8bit_reg
(
	addr_t reg_addr,
	uint_fast8_t value
 ) {
80001290:	fd010113          	addi	sp,sp,-48
80001294:	02812623          	sw	s0,44(sp)
80001298:	03010413          	addi	s0,sp,48
8000129c:	fca42e23          	sw	a0,-36(s0)
800012a0:	fcb42c23          	sw	a1,-40(s0)

  volatile uint8_t * foo = (uint8_t*) reg_addr;
800012a4:	fdc42783          	lw	a5,-36(s0)
800012a8:	fef42623          	sw	a5,-20(s0)
  *foo = value;
800012ac:	fd842783          	lw	a5,-40(s0)
800012b0:	0ff7f713          	andi	a4,a5,255
800012b4:	fec42783          	lw	a5,-20(s0)
800012b8:	00e78023          	sb	a4,0(a5)
  
}
800012bc:	00000013          	nop
800012c0:	02c12403          	lw	s0,44(sp)
800012c4:	03010113          	addi	sp,sp,48
800012c8:	00008067          	ret

Disassembly of section .text.HW_get_8bit_reg:

800012cc <HW_get_8bit_reg>:
 */
uint8_t
HW_get_8bit_reg
(
    addr_t reg_addr
 ) {
800012cc:	fd010113          	addi	sp,sp,-48
800012d0:	02812623          	sw	s0,44(sp)
800012d4:	03010413          	addi	s0,sp,48
800012d8:	fca42e23          	sw	a0,-36(s0)
  volatile uint8_t * foo = (uint8_t*) reg_addr;
800012dc:	fdc42783          	lw	a5,-36(s0)
800012e0:	fef42623          	sw	a5,-20(s0)
  return *foo;
800012e4:	fec42783          	lw	a5,-20(s0)
800012e8:	0007c783          	lbu	a5,0(a5)
800012ec:	0ff7f793          	andi	a5,a5,255
}
800012f0:	00078513          	mv	a0,a5
800012f4:	02c12403          	lw	s0,44(sp)
800012f8:	03010113          	addi	sp,sp,48
800012fc:	00008067          	ret

Disassembly of section .text.HW_set_8bit_reg_field:

80001300 <HW_set_8bit_reg_field>:
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint_fast8_t mask,
    uint_fast8_t value
 ) {
80001300:	fd010113          	addi	sp,sp,-48
80001304:	02812623          	sw	s0,44(sp)
80001308:	03010413          	addi	s0,sp,48
8000130c:	fca42e23          	sw	a0,-36(s0)
80001310:	fcb42c23          	sw	a1,-40(s0)
80001314:	fcc42a23          	sw	a2,-44(s0)
80001318:	fcd42823          	sw	a3,-48(s0)

  
  volatile uint8_t * foo = (uint8_t *) reg_addr;
8000131c:	fdc42783          	lw	a5,-36(s0)
80001320:	fef42623          	sw	a5,-20(s0)
  uint8_t old_value = *foo;
80001324:	fec42783          	lw	a5,-20(s0)
80001328:	0007c783          	lbu	a5,0(a5)
8000132c:	fef405a3          	sb	a5,-21(s0)
  uint8_t new_value = (value << shift);
80001330:	fd042703          	lw	a4,-48(s0)
80001334:	fd842783          	lw	a5,-40(s0)
80001338:	00f717b3          	sll	a5,a4,a5
8000133c:	fef40523          	sb	a5,-22(s0)
  *foo = (new_value & mask) | (old_value & ~mask);
80001340:	fd442783          	lw	a5,-44(s0)
80001344:	0ff7f713          	andi	a4,a5,255
80001348:	fea44783          	lbu	a5,-22(s0)
8000134c:	00f777b3          	and	a5,a4,a5
80001350:	0ff7f713          	andi	a4,a5,255
80001354:	fd442783          	lw	a5,-44(s0)
80001358:	0ff7f793          	andi	a5,a5,255
8000135c:	fff7c793          	not	a5,a5
80001360:	0ff7f693          	andi	a3,a5,255
80001364:	feb44783          	lbu	a5,-21(s0)
80001368:	00f6f7b3          	and	a5,a3,a5
8000136c:	0ff7f793          	andi	a5,a5,255
80001370:	00f767b3          	or	a5,a4,a5
80001374:	0ff7f713          	andi	a4,a5,255
80001378:	fec42783          	lw	a5,-20(s0)
8000137c:	00e78023          	sb	a4,0(a5)

  
}
80001380:	00000013          	nop
80001384:	02c12403          	lw	s0,44(sp)
80001388:	03010113          	addi	sp,sp,48
8000138c:	00008067          	ret

Disassembly of section .text.HW_get_8bit_reg_field:

80001390 <HW_get_8bit_reg_field>:
uint8_t HW_get_8bit_reg_field
(
    addr_t reg_addr,
    int_fast8_t shift,
    uint_fast8_t mask
 ) {
80001390:	fd010113          	addi	sp,sp,-48
80001394:	02812623          	sw	s0,44(sp)
80001398:	03010413          	addi	s0,sp,48
8000139c:	fca42e23          	sw	a0,-36(s0)
800013a0:	fcb42c23          	sw	a1,-40(s0)
800013a4:	fcc42a23          	sw	a2,-44(s0)

  volatile uint8_t * foo = (uint8_t * ) reg_addr;
800013a8:	fdc42783          	lw	a5,-36(s0)
800013ac:	fef42623          	sw	a5,-20(s0)
  uint8_t value = ((*foo) & mask) >> shift;
800013b0:	fec42783          	lw	a5,-20(s0)
800013b4:	0007c783          	lbu	a5,0(a5)
800013b8:	0ff7f793          	andi	a5,a5,255
800013bc:	00078713          	mv	a4,a5
800013c0:	fd442783          	lw	a5,-44(s0)
800013c4:	00f77733          	and	a4,a4,a5
800013c8:	fd842783          	lw	a5,-40(s0)
800013cc:	00f757b3          	srl	a5,a4,a5
800013d0:	fef405a3          	sb	a5,-21(s0)
  return (value);
800013d4:	feb44783          	lbu	a5,-21(s0)

}
800013d8:	00078513          	mv	a0,a5
800013dc:	02c12403          	lw	s0,44(sp)
800013e0:	03010113          	addi	sp,sp,48
800013e4:	00008067          	ret

Disassembly of section .text.UART_init:

800013e8 <UART_init>:
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
800013e8:	fd010113          	addi	sp,sp,-48
800013ec:	02112623          	sw	ra,44(sp)
800013f0:	02812423          	sw	s0,40(sp)
800013f4:	03010413          	addi	s0,sp,48
800013f8:	fca42e23          	sw	a0,-36(s0)
800013fc:	fcb42c23          	sw	a1,-40(s0)
80001400:	00060713          	mv	a4,a2
80001404:	00068793          	mv	a5,a3
80001408:	fce41b23          	sh	a4,-42(s0)
8000140c:	fcf40aa3          	sb	a5,-43(s0)
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001410:	fdc42783          	lw	a5,-36(s0)
80001414:	0c078e63          	beqz	a5,800014f0 <UART_init+0x108>
80001418:	fd544703          	lbu	a4,-43(s0)
8000141c:	00700793          	li	a5,7
80001420:	0ce7e863          	bltu	a5,a4,800014f0 <UART_init+0x108>
        ( line_config <= MAX_LINE_CONFIG ) &&
80001424:	fd645703          	lhu	a4,-42(s0)
80001428:	000027b7          	lui	a5,0x2
8000142c:	0cf77263          	bleu	a5,a4,800014f0 <UART_init+0x108>
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80001430:	fd842783          	lw	a5,-40(s0)
80001434:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE+0x1808>
80001438:	fd645783          	lhu	a5,-42(s0)
8000143c:	0ff7f793          	andi	a5,a5,255
80001440:	00078593          	mv	a1,a5
80001444:	00070513          	mv	a0,a4
80001448:	e49ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
8000144c:	fd842783          	lw	a5,-40(s0)
80001450:	00c78693          	addi	a3,a5,12
80001454:	fd544703          	lbu	a4,-43(s0)
80001458:	fd645783          	lhu	a5,-42(s0)
8000145c:	4057d793          	srai	a5,a5,0x5
80001460:	7f87f793          	andi	a5,a5,2040
80001464:	00f767b3          	or	a5,a4,a5
80001468:	00078593          	mv	a1,a5
8000146c:	00068513          	mv	a0,a3
80001470:	e21ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
80001474:	fdc42783          	lw	a5,-36(s0)
80001478:	fd842703          	lw	a4,-40(s0)
8000147c:	00e7a023          	sw	a4,0(a5)
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001480:	fdc42783          	lw	a5,-36(s0)
80001484:	0007a783          	lw	a5,0(a5)
80001488:	01078793          	addi	a5,a5,16
8000148c:	00078513          	mv	a0,a5
80001490:	e3dff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80001494:	00050793          	mv	a5,a0
80001498:	0027f793          	andi	a5,a5,2
8000149c:	fef407a3          	sb	a5,-17(s0)
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
800014a0:	0400006f          	j	800014e0 <UART_init+0xf8>
        {
            volatile uint8_t rx_byte;
            rx_byte = HAL_get_8bit_reg( this_uart->base_address, RXDATA );
800014a4:	fdc42783          	lw	a5,-36(s0)
800014a8:	0007a783          	lw	a5,0(a5)
800014ac:	00478793          	addi	a5,a5,4
800014b0:	00078513          	mv	a0,a5
800014b4:	e19ff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
800014b8:	00050793          	mv	a5,a0
800014bc:	fef40723          	sb	a5,-18(s0)
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800014c0:	fdc42783          	lw	a5,-36(s0)
800014c4:	0007a783          	lw	a5,0(a5)
800014c8:	01078793          	addi	a5,a5,16
800014cc:	00078513          	mv	a0,a5
800014d0:	dfdff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
800014d4:	00050793          	mv	a5,a0
800014d8:	0027f793          	andi	a5,a5,2
800014dc:	fef407a3          	sb	a5,-17(s0)
        while ( rx_full )
800014e0:	fef44783          	lbu	a5,-17(s0)
800014e4:	fc0790e3          	bnez	a5,800014a4 <UART_init+0xbc>
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
800014e8:	fdc42783          	lw	a5,-36(s0)
800014ec:	00078223          	sb	zero,4(a5)
    }
}
800014f0:	00000013          	nop
800014f4:	02c12083          	lw	ra,44(sp)
800014f8:	02812403          	lw	s0,40(sp)
800014fc:	03010113          	addi	sp,sp,48
80001500:	00008067          	ret

Disassembly of section .text.UART_send:

80001504 <UART_send>:
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001504:	fd010113          	addi	sp,sp,-48
80001508:	02112623          	sw	ra,44(sp)
8000150c:	02812423          	sw	s0,40(sp)
80001510:	03010413          	addi	s0,sp,48
80001514:	fca42e23          	sw	a0,-36(s0)
80001518:	fcb42c23          	sw	a1,-40(s0)
8000151c:	fcc42a23          	sw	a2,-44(s0)

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80001520:	fdc42783          	lw	a5,-36(s0)
80001524:	08078063          	beqz	a5,800015a4 <UART_send+0xa0>
80001528:	fd842783          	lw	a5,-40(s0)
8000152c:	06078c63          	beqz	a5,800015a4 <UART_send+0xa0>
        (tx_buffer != NULL_BUFFER)   &&
80001530:	fd442783          	lw	a5,-44(s0)
80001534:	06078863          	beqz	a5,800015a4 <UART_send+0xa0>
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001538:	fe042623          	sw	zero,-20(s0)
8000153c:	05c0006f          	j	80001598 <UART_send+0x94>
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001540:	fdc42783          	lw	a5,-36(s0)
80001544:	0007a783          	lw	a5,0(a5)
80001548:	01078793          	addi	a5,a5,16
8000154c:	00078513          	mv	a0,a5
80001550:	d7dff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80001554:	00050793          	mv	a5,a0
80001558:	0017f793          	andi	a5,a5,1
8000155c:	fef405a3          	sb	a5,-21(s0)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001560:	feb44783          	lbu	a5,-21(s0)
80001564:	fc078ee3          	beqz	a5,80001540 <UART_send+0x3c>
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001568:	fdc42783          	lw	a5,-36(s0)
8000156c:	0007a683          	lw	a3,0(a5)
80001570:	fd842703          	lw	a4,-40(s0)
80001574:	fec42783          	lw	a5,-20(s0)
80001578:	00f707b3          	add	a5,a4,a5
8000157c:	0007c783          	lbu	a5,0(a5)
80001580:	00078593          	mv	a1,a5
80001584:	00068513          	mv	a0,a3
80001588:	d09ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
8000158c:	fec42783          	lw	a5,-20(s0)
80001590:	00178793          	addi	a5,a5,1
80001594:	fef42623          	sw	a5,-20(s0)
80001598:	fec42703          	lw	a4,-20(s0)
8000159c:	fd442783          	lw	a5,-44(s0)
800015a0:	faf760e3          	bltu	a4,a5,80001540 <UART_send+0x3c>
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
800015a4:	00000013          	nop
800015a8:	02c12083          	lw	ra,44(sp)
800015ac:	02812403          	lw	s0,40(sp)
800015b0:	03010113          	addi	sp,sp,48
800015b4:	00008067          	ret

Disassembly of section .text.UART_fill_tx_fifo:

800015b8 <UART_fill_tx_fifo>:
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
800015b8:	fd010113          	addi	sp,sp,-48
800015bc:	02112623          	sw	ra,44(sp)
800015c0:	02812423          	sw	s0,40(sp)
800015c4:	03010413          	addi	s0,sp,48
800015c8:	fca42e23          	sw	a0,-36(s0)
800015cc:	fcb42c23          	sw	a1,-40(s0)
800015d0:	fcc42a23          	sw	a2,-44(s0)
    uint8_t tx_ready;
    size_t size_sent = 0u;
800015d4:	fe042623          	sw	zero,-20(s0)
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    /* Fill the UART's Tx FIFO until the FIFO is full or the complete input 
     * buffer has been written. */
    if( (this_uart != NULL_INSTANCE) &&
800015d8:	fdc42783          	lw	a5,-36(s0)
800015dc:	0a078063          	beqz	a5,8000167c <UART_fill_tx_fifo+0xc4>
800015e0:	fd842783          	lw	a5,-40(s0)
800015e4:	08078c63          	beqz	a5,8000167c <UART_fill_tx_fifo+0xc4>
        (tx_buffer != NULL_BUFFER)   &&
800015e8:	fd442783          	lw	a5,-44(s0)
800015ec:	08078863          	beqz	a5,8000167c <UART_fill_tx_fifo+0xc4>
        (tx_size > 0u) )
    {
        tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800015f0:	fdc42783          	lw	a5,-36(s0)
800015f4:	0007a783          	lw	a5,0(a5)
800015f8:	01078793          	addi	a5,a5,16
800015fc:	00078513          	mv	a0,a5
80001600:	ccdff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80001604:	00050793          	mv	a5,a0
80001608:	0017f793          	andi	a5,a5,1
8000160c:	fef405a3          	sb	a5,-21(s0)
                                                      STATUS_TXRDY_MASK;
        if ( tx_ready )
80001610:	feb44783          	lbu	a5,-21(s0)
80001614:	06078463          	beqz	a5,8000167c <UART_fill_tx_fifo+0xc4>
        {
            do {
                HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001618:	fdc42783          	lw	a5,-36(s0)
8000161c:	0007a683          	lw	a3,0(a5)
80001620:	fd842703          	lw	a4,-40(s0)
80001624:	fec42783          	lw	a5,-20(s0)
80001628:	00f707b3          	add	a5,a4,a5
8000162c:	0007c783          	lbu	a5,0(a5)
80001630:	00078593          	mv	a1,a5
80001634:	00068513          	mv	a0,a3
80001638:	c59ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
                                  (uint_fast8_t)tx_buffer[size_sent] );
                size_sent++;
8000163c:	fec42783          	lw	a5,-20(s0)
80001640:	00178793          	addi	a5,a5,1
80001644:	fef42623          	sw	a5,-20(s0)
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001648:	fdc42783          	lw	a5,-36(s0)
8000164c:	0007a783          	lw	a5,0(a5)
80001650:	01078793          	addi	a5,a5,16
80001654:	00078513          	mv	a0,a5
80001658:	c75ff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
8000165c:	00050793          	mv	a5,a0
80001660:	0017f793          	andi	a5,a5,1
80001664:	fef405a3          	sb	a5,-21(s0)
                                                              STATUS_TXRDY_MASK;
            } while ( (tx_ready) && ( size_sent < tx_size ) );
80001668:	feb44783          	lbu	a5,-21(s0)
8000166c:	00078863          	beqz	a5,8000167c <UART_fill_tx_fifo+0xc4>
80001670:	fec42703          	lw	a4,-20(s0)
80001674:	fd442783          	lw	a5,-44(s0)
80001678:	faf760e3          	bltu	a4,a5,80001618 <UART_fill_tx_fifo+0x60>
        }
    }    
    return size_sent;
8000167c:	fec42783          	lw	a5,-20(s0)
}
80001680:	00078513          	mv	a0,a5
80001684:	02c12083          	lw	ra,44(sp)
80001688:	02812403          	lw	s0,40(sp)
8000168c:	03010113          	addi	sp,sp,48
80001690:	00008067          	ret

Disassembly of section .text.UART_get_rx:

80001694 <UART_get_rx>:
(
    UART_instance_t * this_uart,
    uint8_t * rx_buffer,
    size_t buff_size
)
{
80001694:	fd010113          	addi	sp,sp,-48
80001698:	02112623          	sw	ra,44(sp)
8000169c:	02812423          	sw	s0,40(sp)
800016a0:	02912223          	sw	s1,36(sp)
800016a4:	03010413          	addi	s0,sp,48
800016a8:	fca42e23          	sw	a0,-36(s0)
800016ac:	fcb42c23          	sw	a1,-40(s0)
800016b0:	fcc42a23          	sw	a2,-44(s0)
    uint8_t new_status;
    uint8_t rx_full;
    size_t rx_idx = 0u;
800016b4:	fe042423          	sw	zero,-24(s0)
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( rx_buffer != NULL_BUFFER )
    HAL_ASSERT( buff_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
800016b8:	fdc42783          	lw	a5,-36(s0)
800016bc:	0e078663          	beqz	a5,800017a8 <UART_get_rx+0x114>
800016c0:	fd842783          	lw	a5,-40(s0)
800016c4:	0e078263          	beqz	a5,800017a8 <UART_get_rx+0x114>
        (rx_buffer != NULL_BUFFER)   &&
800016c8:	fd442783          	lw	a5,-44(s0)
800016cc:	0c078e63          	beqz	a5,800017a8 <UART_get_rx+0x114>
        (buff_size > 0u) )
    {
        rx_idx = 0u;
800016d0:	fe042423          	sw	zero,-24(s0)
        new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
800016d4:	fdc42783          	lw	a5,-36(s0)
800016d8:	0007a783          	lw	a5,0(a5)
800016dc:	01078793          	addi	a5,a5,16
800016e0:	00078513          	mv	a0,a5
800016e4:	be9ff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
800016e8:	00050793          	mv	a5,a0
800016ec:	fef403a3          	sb	a5,-25(s0)
        this_uart->status |= new_status;
800016f0:	fdc42783          	lw	a5,-36(s0)
800016f4:	0047c703          	lbu	a4,4(a5)
800016f8:	fe744783          	lbu	a5,-25(s0)
800016fc:	00f767b3          	or	a5,a4,a5
80001700:	0ff7f713          	andi	a4,a5,255
80001704:	fdc42783          	lw	a5,-36(s0)
80001708:	00e78223          	sb	a4,4(a5)
        rx_full = new_status & STATUS_RXFULL_MASK;
8000170c:	fe744783          	lbu	a5,-25(s0)
80001710:	0027f793          	andi	a5,a5,2
80001714:	fef407a3          	sb	a5,-17(s0)
        while ( ( rx_full ) && ( rx_idx < buff_size ) )
80001718:	07c0006f          	j	80001794 <UART_get_rx+0x100>
        {
            rx_buffer[rx_idx] = HAL_get_8bit_reg( this_uart->base_address,
8000171c:	fd842703          	lw	a4,-40(s0)
80001720:	fe842783          	lw	a5,-24(s0)
80001724:	00f704b3          	add	s1,a4,a5
80001728:	fdc42783          	lw	a5,-36(s0)
8000172c:	0007a783          	lw	a5,0(a5)
80001730:	00478793          	addi	a5,a5,4
80001734:	00078513          	mv	a0,a5
80001738:	b95ff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
8000173c:	00050793          	mv	a5,a0
80001740:	00f48023          	sb	a5,0(s1)
                                                  RXDATA );
            rx_idx++;
80001744:	fe842783          	lw	a5,-24(s0)
80001748:	00178793          	addi	a5,a5,1
8000174c:	fef42423          	sw	a5,-24(s0)
            new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
80001750:	fdc42783          	lw	a5,-36(s0)
80001754:	0007a783          	lw	a5,0(a5)
80001758:	01078793          	addi	a5,a5,16
8000175c:	00078513          	mv	a0,a5
80001760:	b6dff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80001764:	00050793          	mv	a5,a0
80001768:	fef403a3          	sb	a5,-25(s0)
            this_uart->status |= new_status;
8000176c:	fdc42783          	lw	a5,-36(s0)
80001770:	0047c703          	lbu	a4,4(a5)
80001774:	fe744783          	lbu	a5,-25(s0)
80001778:	00f767b3          	or	a5,a4,a5
8000177c:	0ff7f713          	andi	a4,a5,255
80001780:	fdc42783          	lw	a5,-36(s0)
80001784:	00e78223          	sb	a4,4(a5)
            rx_full = new_status & STATUS_RXFULL_MASK;
80001788:	fe744783          	lbu	a5,-25(s0)
8000178c:	0027f793          	andi	a5,a5,2
80001790:	fef407a3          	sb	a5,-17(s0)
        while ( ( rx_full ) && ( rx_idx < buff_size ) )
80001794:	fef44783          	lbu	a5,-17(s0)
80001798:	00078863          	beqz	a5,800017a8 <UART_get_rx+0x114>
8000179c:	fe842703          	lw	a4,-24(s0)
800017a0:	fd442783          	lw	a5,-44(s0)
800017a4:	f6f76ce3          	bltu	a4,a5,8000171c <UART_get_rx+0x88>
        }
    }
    return rx_idx;
800017a8:	fe842783          	lw	a5,-24(s0)
}
800017ac:	00078513          	mv	a0,a5
800017b0:	02c12083          	lw	ra,44(sp)
800017b4:	02812403          	lw	s0,40(sp)
800017b8:	02412483          	lw	s1,36(sp)
800017bc:	03010113          	addi	sp,sp,48
800017c0:	00008067          	ret

Disassembly of section .text.UART_polled_tx_string:

800017c4 <UART_polled_tx_string>:
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
800017c4:	fd010113          	addi	sp,sp,-48
800017c8:	02112623          	sw	ra,44(sp)
800017cc:	02812423          	sw	s0,40(sp)
800017d0:	03010413          	addi	s0,sp,48
800017d4:	fca42e23          	sw	a0,-36(s0)
800017d8:	fcb42c23          	sw	a1,-40(s0)
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
800017dc:	fdc42783          	lw	a5,-36(s0)
800017e0:	08078063          	beqz	a5,80001860 <UART_polled_tx_string+0x9c>
800017e4:	fd842783          	lw	a5,-40(s0)
800017e8:	06078c63          	beqz	a5,80001860 <UART_polled_tx_string+0x9c>
    {
        char_idx = 0U;
800017ec:	fe042623          	sw	zero,-20(s0)
        while( 0U != p_sz_string[char_idx] )
800017f0:	05c0006f          	j	8000184c <UART_polled_tx_string+0x88>
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800017f4:	fdc42783          	lw	a5,-36(s0)
800017f8:	0007a783          	lw	a5,0(a5)
800017fc:	01078793          	addi	a5,a5,16
80001800:	00078513          	mv	a0,a5
80001804:	ac9ff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80001808:	00050793          	mv	a5,a0
8000180c:	0017f793          	andi	a5,a5,1
80001810:	fef405a3          	sb	a5,-21(s0)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001814:	feb44783          	lbu	a5,-21(s0)
80001818:	fc078ee3          	beqz	a5,800017f4 <UART_polled_tx_string+0x30>
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
8000181c:	fdc42783          	lw	a5,-36(s0)
80001820:	0007a683          	lw	a3,0(a5)
80001824:	fd842703          	lw	a4,-40(s0)
80001828:	fec42783          	lw	a5,-20(s0)
8000182c:	00f707b3          	add	a5,a4,a5
80001830:	0007c783          	lbu	a5,0(a5)
80001834:	00078593          	mv	a1,a5
80001838:	00068513          	mv	a0,a3
8000183c:	a55ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80001840:	fec42783          	lw	a5,-20(s0)
80001844:	00178793          	addi	a5,a5,1
80001848:	fef42623          	sw	a5,-20(s0)
        while( 0U != p_sz_string[char_idx] )
8000184c:	fd842703          	lw	a4,-40(s0)
80001850:	fec42783          	lw	a5,-20(s0)
80001854:	00f707b3          	add	a5,a4,a5
80001858:	0007c783          	lbu	a5,0(a5)
8000185c:	f8079ce3          	bnez	a5,800017f4 <UART_polled_tx_string+0x30>
        }
    }
}
80001860:	00000013          	nop
80001864:	02c12083          	lw	ra,44(sp)
80001868:	02812403          	lw	s0,40(sp)
8000186c:	03010113          	addi	sp,sp,48
80001870:	00008067          	ret

Disassembly of section .text.UART_get_rx_status:

80001874 <UART_get_rx_status>:
uint8_t
UART_get_rx_status
(
    UART_instance_t * this_uart
)
{
80001874:	fd010113          	addi	sp,sp,-48
80001878:	02812623          	sw	s0,44(sp)
8000187c:	03010413          	addi	s0,sp,48
80001880:	fca42e23          	sw	a0,-36(s0)
    uint8_t status = UART_APB_INVALID_PARAM;
80001884:	fff00793          	li	a5,-1
80001888:	fef407a3          	sb	a5,-17(s0)
     * Extract UART error status and place in lower bits of "status".
     * Bit 0 - Parity error status
     * Bit 1 - Overflow error status
     * Bit 2 - Frame error status
     */
    if( this_uart != NULL_INSTANCE )
8000188c:	fdc42783          	lw	a5,-36(s0)
80001890:	02078263          	beqz	a5,800018b4 <UART_get_rx_status+0x40>
    {
        status = ( ( this_uart->status & STATUS_ERROR_MASK ) >> 
80001894:	fdc42783          	lw	a5,-36(s0)
80001898:	0047c783          	lbu	a5,4(a5)
8000189c:	4027d793          	srai	a5,a5,0x2
800018a0:	0ff7f793          	andi	a5,a5,255
800018a4:	0077f793          	andi	a5,a5,7
800018a8:	fef407a3          	sb	a5,-17(s0)
                                          STATUS_ERROR_OFFSET );
        /*
         * Clear the sticky status for this instance.
         */
        this_uart->status = (uint8_t)0;
800018ac:	fdc42783          	lw	a5,-36(s0)
800018b0:	00078223          	sb	zero,4(a5)
    }
    return status;
800018b4:	fef44783          	lbu	a5,-17(s0)
}
800018b8:	00078513          	mv	a0,a5
800018bc:	02c12403          	lw	s0,44(sp)
800018c0:	03010113          	addi	sp,sp,48
800018c4:	00008067          	ret

Disassembly of section .text.TMR_init:

800018c8 <TMR_init>:
	addr_t address,
	uint8_t mode,
	uint32_t prescale,
	uint32_t load_value
)
{
800018c8:	fd010113          	addi	sp,sp,-48
800018cc:	02112623          	sw	ra,44(sp)
800018d0:	02812423          	sw	s0,40(sp)
800018d4:	03010413          	addi	s0,sp,48
800018d8:	fea42623          	sw	a0,-20(s0)
800018dc:	feb42423          	sw	a1,-24(s0)
800018e0:	00060793          	mv	a5,a2
800018e4:	fed42023          	sw	a3,-32(s0)
800018e8:	fce42e23          	sw	a4,-36(s0)
800018ec:	fef403a3          	sb	a5,-25(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
	HAL_ASSERT( prescale <= PRESCALER_DIV_1024 )
	HAL_ASSERT( load_value != 0 )
    
    this_timer->base_address = address;
800018f0:	fec42783          	lw	a5,-20(s0)
800018f4:	fe842703          	lw	a4,-24(s0)
800018f8:	00e7a023          	sw	a4,0(a5)

    /* Disable interrupts. */
    HAL_set_32bit_reg_field( address, InterruptEnable,0 );
800018fc:	fe842783          	lw	a5,-24(s0)
80001900:	00878793          	addi	a5,a5,8
80001904:	00000693          	li	a3,0
80001908:	00200613          	li	a2,2
8000190c:	00100593          	li	a1,1
80001910:	00078513          	mv	a0,a5
80001914:	f38ff0ef          	jal	ra,8000104c <HW_set_32bit_reg_field>

    /* Disable timer. */
    HAL_set_32bit_reg_field( address, TimerEnable, 0 );
80001918:	fe842783          	lw	a5,-24(s0)
8000191c:	00878793          	addi	a5,a5,8
80001920:	00000693          	li	a3,0
80001924:	00100613          	li	a2,1
80001928:	00000593          	li	a1,0
8000192c:	00078513          	mv	a0,a5
80001930:	f1cff0ef          	jal	ra,8000104c <HW_set_32bit_reg_field>

    /* Clear pending interrupt. */
    HAL_set_32bit_reg( address, TimerIntClr, 1 );
80001934:	fe842783          	lw	a5,-24(s0)
80001938:	01078793          	addi	a5,a5,16
8000193c:	00100593          	li	a1,1
80001940:	00078513          	mv	a0,a5
80001944:	ea0ff0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>

    /* Configure prescaler and load value. */	
    HAL_set_32bit_reg( address, TimerPrescale, prescale );
80001948:	fe842783          	lw	a5,-24(s0)
8000194c:	00c78793          	addi	a5,a5,12
80001950:	fe042583          	lw	a1,-32(s0)
80001954:	00078513          	mv	a0,a5
80001958:	e8cff0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
    HAL_set_32bit_reg( address, TimerLoad, load_value );
8000195c:	fdc42583          	lw	a1,-36(s0)
80001960:	fe842503          	lw	a0,-24(s0)
80001964:	e80ff0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>

    /* Set the interrupt mode. */
    if ( mode == TMR_CONTINUOUS_MODE )
80001968:	fe744783          	lbu	a5,-25(s0)
8000196c:	02079263          	bnez	a5,80001990 <TMR_init+0xc8>
    {
        HAL_set_32bit_reg_field( address, TimerMode, 0 );
80001970:	fe842783          	lw	a5,-24(s0)
80001974:	00878793          	addi	a5,a5,8
80001978:	00000693          	li	a3,0
8000197c:	00400613          	li	a2,4
80001980:	00200593          	li	a1,2
80001984:	00078513          	mv	a0,a5
80001988:	ec4ff0ef          	jal	ra,8000104c <HW_set_32bit_reg_field>
    else
    {
        /* TMR_ONE_SHOT_MODE */
        HAL_set_32bit_reg_field( address, TimerMode, 1 );
    }
}
8000198c:	0200006f          	j	800019ac <TMR_init+0xe4>
        HAL_set_32bit_reg_field( address, TimerMode, 1 );
80001990:	fe842783          	lw	a5,-24(s0)
80001994:	00878793          	addi	a5,a5,8
80001998:	00100693          	li	a3,1
8000199c:	00400613          	li	a2,4
800019a0:	00200593          	li	a1,2
800019a4:	00078513          	mv	a0,a5
800019a8:	ea4ff0ef          	jal	ra,8000104c <HW_set_32bit_reg_field>
}
800019ac:	00000013          	nop
800019b0:	02c12083          	lw	ra,44(sp)
800019b4:	02812403          	lw	s0,40(sp)
800019b8:	03010113          	addi	sp,sp,48
800019bc:	00008067          	ret

Disassembly of section .text.TMR_start:

800019c0 <TMR_start>:
void
TMR_start
(
    timer_instance_t * this_timer
)
{
800019c0:	fe010113          	addi	sp,sp,-32
800019c4:	00112e23          	sw	ra,28(sp)
800019c8:	00812c23          	sw	s0,24(sp)
800019cc:	02010413          	addi	s0,sp,32
800019d0:	fea42623          	sw	a0,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    HAL_set_32bit_reg_field( this_timer->base_address, TimerEnable, 1 );
800019d4:	fec42783          	lw	a5,-20(s0)
800019d8:	0007a783          	lw	a5,0(a5)
800019dc:	00878793          	addi	a5,a5,8
800019e0:	00100693          	li	a3,1
800019e4:	00100613          	li	a2,1
800019e8:	00000593          	li	a1,0
800019ec:	00078513          	mv	a0,a5
800019f0:	e5cff0ef          	jal	ra,8000104c <HW_set_32bit_reg_field>
}
800019f4:	00000013          	nop
800019f8:	01c12083          	lw	ra,28(sp)
800019fc:	01812403          	lw	s0,24(sp)
80001a00:	02010113          	addi	sp,sp,32
80001a04:	00008067          	ret

Disassembly of section .text.TMR_stop:

80001a08 <TMR_stop>:
void
TMR_stop
(
    timer_instance_t * this_timer
)
{
80001a08:	fe010113          	addi	sp,sp,-32
80001a0c:	00112e23          	sw	ra,28(sp)
80001a10:	00812c23          	sw	s0,24(sp)
80001a14:	02010413          	addi	s0,sp,32
80001a18:	fea42623          	sw	a0,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    HAL_set_32bit_reg_field( this_timer->base_address, TimerEnable, 0 );
80001a1c:	fec42783          	lw	a5,-20(s0)
80001a20:	0007a783          	lw	a5,0(a5)
80001a24:	00878793          	addi	a5,a5,8
80001a28:	00000693          	li	a3,0
80001a2c:	00100613          	li	a2,1
80001a30:	00000593          	li	a1,0
80001a34:	00078513          	mv	a0,a5
80001a38:	e14ff0ef          	jal	ra,8000104c <HW_set_32bit_reg_field>
}
80001a3c:	00000013          	nop
80001a40:	01c12083          	lw	ra,28(sp)
80001a44:	01812403          	lw	s0,24(sp)
80001a48:	02010113          	addi	sp,sp,32
80001a4c:	00008067          	ret

Disassembly of section .text.TMR_enable_int:

80001a50 <TMR_enable_int>:
void
TMR_enable_int
(
    timer_instance_t * this_timer
)
{
80001a50:	fe010113          	addi	sp,sp,-32
80001a54:	00112e23          	sw	ra,28(sp)
80001a58:	00812c23          	sw	s0,24(sp)
80001a5c:	02010413          	addi	s0,sp,32
80001a60:	fea42623          	sw	a0,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    HAL_set_32bit_reg_field( this_timer->base_address, InterruptEnable, 1 );
80001a64:	fec42783          	lw	a5,-20(s0)
80001a68:	0007a783          	lw	a5,0(a5)
80001a6c:	00878793          	addi	a5,a5,8
80001a70:	00100693          	li	a3,1
80001a74:	00200613          	li	a2,2
80001a78:	00100593          	li	a1,1
80001a7c:	00078513          	mv	a0,a5
80001a80:	dccff0ef          	jal	ra,8000104c <HW_set_32bit_reg_field>
}
80001a84:	00000013          	nop
80001a88:	01c12083          	lw	ra,28(sp)
80001a8c:	01812403          	lw	s0,24(sp)
80001a90:	02010113          	addi	sp,sp,32
80001a94:	00008067          	ret

Disassembly of section .text.TMR_clear_int:

80001a98 <TMR_clear_int>:
void
TMR_clear_int
(
    timer_instance_t * this_timer
)
{
80001a98:	fe010113          	addi	sp,sp,-32
80001a9c:	00112e23          	sw	ra,28(sp)
80001aa0:	00812c23          	sw	s0,24(sp)
80001aa4:	02010413          	addi	s0,sp,32
80001aa8:	fea42623          	sw	a0,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    HAL_set_32bit_reg( this_timer->base_address, TimerIntClr, 0x01 );
80001aac:	fec42783          	lw	a5,-20(s0)
80001ab0:	0007a783          	lw	a5,0(a5)
80001ab4:	01078793          	addi	a5,a5,16
80001ab8:	00100593          	li	a1,1
80001abc:	00078513          	mv	a0,a5
80001ac0:	d24ff0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
}
80001ac4:	00000013          	nop
80001ac8:	01c12083          	lw	ra,28(sp)
80001acc:	01812403          	lw	s0,24(sp)
80001ad0:	02010113          	addi	sp,sp,32
80001ad4:	00008067          	ret

Disassembly of section .text.TMR_current_value:

80001ad8 <TMR_current_value>:
uint32_t
TMR_current_value
(
    timer_instance_t * this_timer
)
{
80001ad8:	fd010113          	addi	sp,sp,-48
80001adc:	02112623          	sw	ra,44(sp)
80001ae0:	02812423          	sw	s0,40(sp)
80001ae4:	03010413          	addi	s0,sp,48
80001ae8:	fca42e23          	sw	a0,-36(s0)
	uint32_t value = 0;
80001aec:	fe042623          	sw	zero,-20(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
    
    value = HAL_get_32bit_reg( this_timer->base_address, TimerValue );
80001af0:	fdc42783          	lw	a5,-36(s0)
80001af4:	0007a783          	lw	a5,0(a5)
80001af8:	00478793          	addi	a5,a5,4
80001afc:	00078513          	mv	a0,a5
80001b00:	d1cff0ef          	jal	ra,8000101c <HW_get_32bit_reg>
80001b04:	fea42623          	sw	a0,-20(s0)
    
	return value;
80001b08:	fec42783          	lw	a5,-20(s0)
}
80001b0c:	00078513          	mv	a0,a5
80001b10:	02c12083          	lw	ra,44(sp)
80001b14:	02812403          	lw	s0,40(sp)
80001b18:	03010113          	addi	sp,sp,48
80001b1c:	00008067          	ret

Disassembly of section .text.TMR_reload:

80001b20 <TMR_reload>:
void TMR_reload
(
	timer_instance_t * this_timer,
	uint32_t load_value
)
{
80001b20:	fe010113          	addi	sp,sp,-32
80001b24:	00112e23          	sw	ra,28(sp)
80001b28:	00812c23          	sw	s0,24(sp)
80001b2c:	02010413          	addi	s0,sp,32
80001b30:	fea42623          	sw	a0,-20(s0)
80001b34:	feb42423          	sw	a1,-24(s0)
	HAL_ASSERT( this_timer != NULL_timer_instance )
	HAL_ASSERT( load_value != 0 )
	
	HAL_set_32bit_reg(this_timer->base_address, TimerLoad, load_value );
80001b38:	fec42783          	lw	a5,-20(s0)
80001b3c:	0007a783          	lw	a5,0(a5)
80001b40:	fe842583          	lw	a1,-24(s0)
80001b44:	00078513          	mv	a0,a5
80001b48:	c9cff0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
}
80001b4c:	00000013          	nop
80001b50:	01c12083          	lw	ra,28(sp)
80001b54:	01812403          	lw	s0,24(sp)
80001b58:	02010113          	addi	sp,sp,32
80001b5c:	00008067          	ret

Disassembly of section .text.SPI_init:

80001b60 <SPI_init>:
(
	spi_instance_t * this_spi,
	addr_t base_addr,
	uint16_t fifo_depth
)
{
80001b60:	fd010113          	addi	sp,sp,-48
80001b64:	02112623          	sw	ra,44(sp)
80001b68:	02812423          	sw	s0,40(sp)
80001b6c:	03010413          	addi	s0,sp,48
80001b70:	fca42e23          	sw	a0,-36(s0)
80001b74:	fcb42c23          	sw	a1,-40(s0)
80001b78:	00060793          	mv	a5,a2
80001b7c:	fcf41b23          	sh	a5,-42(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( NULL_ADDR != base_addr );
    HAL_ASSERT( SPI_MAX_FIFO_DEPTH  >= fifo_depth );
    HAL_ASSERT( SPI_MIN_FIFO_DEPTH  <= fifo_depth );

	if( ( NULL_INSTANCE != this_spi ) && ( base_addr != NULL_ADDR ) )
80001b80:	fdc42783          	lw	a5,-36(s0)
80001b84:	0e078463          	beqz	a5,80001c6c <SPI_init+0x10c>
80001b88:	fd842783          	lw	a5,-40(s0)
80001b8c:	0e078063          	beqz	a5,80001c6c <SPI_init+0x10c>
         * to 0 for any non byte sized items too.
         */

        /* First fill struct with 0s */
//#if 0
        memset( this_spi, 0, sizeof(spi_instance_t) );
80001b90:	04c00613          	li	a2,76
80001b94:	00000593          	li	a1,0
80001b98:	fdc42503          	lw	a0,-36(s0)
80001b9c:	df8fe0ef          	jal	ra,80000194 <memset>
        {
        	*(p+i)=0;
        }
#endif*/
        /* Configure CoreSPI instance attributes */
        this_spi->base_addr = (addr_t)base_addr;
80001ba0:	fdc42783          	lw	a5,-36(s0)
80001ba4:	fd842703          	lw	a4,-40(s0)
80001ba8:	00e7a023          	sw	a4,0(a5)

        /* Store FIFO depth or fall back to minimum if out of range */
        if( ( SPI_MAX_FIFO_DEPTH  >= fifo_depth ) && ( SPI_MIN_FIFO_DEPTH  <= fifo_depth ) )
80001bac:	fd645703          	lhu	a4,-42(s0)
80001bb0:	02000793          	li	a5,32
80001bb4:	00e7ee63          	bltu	a5,a4,80001bd0 <SPI_init+0x70>
80001bb8:	fd645783          	lhu	a5,-42(s0)
80001bbc:	00078a63          	beqz	a5,80001bd0 <SPI_init+0x70>
        {
        	this_spi->fifo_depth = fifo_depth;
80001bc0:	fdc42783          	lw	a5,-36(s0)
80001bc4:	fd645703          	lhu	a4,-42(s0)
80001bc8:	04e79223          	sh	a4,68(a5)
80001bcc:	0100006f          	j	80001bdc <SPI_init+0x7c>
        }
        else
        {
        	this_spi->fifo_depth = SPI_MIN_FIFO_DEPTH;
80001bd0:	fdc42783          	lw	a5,-36(s0)
80001bd4:	00100713          	li	a4,1
80001bd8:	04e79223          	sh	a4,68(a5)
        }
		/* Make sure the CoreSPI is disabled while we configure it */
        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80001bdc:	fdc42783          	lw	a5,-36(s0)
80001be0:	0007a783          	lw	a5,0(a5)
80001be4:	00000693          	li	a3,0
80001be8:	00100613          	li	a2,1
80001bec:	00000593          	li	a1,0
80001bf0:	00078513          	mv	a0,a5
80001bf4:	f0cff0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

        /* Ensure all slaves are deselected */
        HAL_set_8bit_reg( this_spi->base_addr, SSEL, 0u );
80001bf8:	fdc42783          	lw	a5,-36(s0)
80001bfc:	0007a783          	lw	a5,0(a5)
80001c00:	02478793          	addi	a5,a5,36
80001c04:	00000593          	li	a1,0
80001c08:	00078513          	mv	a0,a5
80001c0c:	e84ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

        /* Flush the receive and transmit FIFOs*/
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80001c10:	fdc42783          	lw	a5,-36(s0)
80001c14:	0007a783          	lw	a5,0(a5)
80001c18:	01c78793          	addi	a5,a5,28
80001c1c:	00300593          	li	a1,3
80001c20:	00078513          	mv	a0,a5
80001c24:	e6cff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

        /* Clear all interrupts */
        HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
80001c28:	fdc42783          	lw	a5,-36(s0)
80001c2c:	0007a783          	lw	a5,0(a5)
80001c30:	00478793          	addi	a5,a5,4
80001c34:	0ff00593          	li	a1,255
80001c38:	00078513          	mv	a0,a5
80001c3c:	e54ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

        /* Ensure RXAVAIL, TXRFM, SSEND and CMDINT are disabled */
        HAL_set_8bit_reg( this_spi->base_addr, CTRL2, 0u );
80001c40:	fdc42783          	lw	a5,-36(s0)
80001c44:	0007a783          	lw	a5,0(a5)
80001c48:	01878793          	addi	a5,a5,24
80001c4c:	00000593          	li	a1,0
80001c50:	00078513          	mv	a0,a5
80001c54:	e3cff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
        /*
         * Enable the CoreSPI in the reset default of master mode
         * with TXUNDERRUN, RXOVFLOW and TXDONE interrupts disabled.
         * The driver does not currently use interrupts in master mode.
         */
		HAL_set_8bit_reg( this_spi->base_addr, CTRL1,  ENABLE | CTRL1_MASTER_MASK );
80001c58:	fdc42783          	lw	a5,-36(s0)
80001c5c:	0007a783          	lw	a5,0(a5)
80001c60:	00300593          	li	a1,3
80001c64:	00078513          	mv	a0,a5
80001c68:	e28ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
	}
	HAL_set_8bit_reg( this_spi->base_addr, SSEL, 0x01 );  // ml fixme debug
80001c6c:	fdc42783          	lw	a5,-36(s0)
80001c70:	0007a783          	lw	a5,0(a5)
80001c74:	02478793          	addi	a5,a5,36
80001c78:	00100593          	li	a1,1
80001c7c:	00078513          	mv	a0,a5
80001c80:	e10ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
	test = HAL_get_8bit_reg( this_spi->base_addr, SSEL ); // ml fixme debug
80001c84:	fdc42783          	lw	a5,-36(s0)
80001c88:	0007a783          	lw	a5,0(a5)
80001c8c:	02478793          	addi	a5,a5,36
80001c90:	00078513          	mv	a0,a5
80001c94:	e38ff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80001c98:	00050793          	mv	a5,a0
80001c9c:	fef407a3          	sb	a5,-17(s0)
	test = HAL_get_8bit_reg( this_spi->base_addr, STATUS ); // ml fixme debug
80001ca0:	fdc42783          	lw	a5,-36(s0)
80001ca4:	0007a783          	lw	a5,0(a5)
80001ca8:	02078793          	addi	a5,a5,32
80001cac:	00078513          	mv	a0,a5
80001cb0:	e1cff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80001cb4:	00050793          	mv	a5,a0
80001cb8:	fef407a3          	sb	a5,-17(s0)
}
80001cbc:	00000013          	nop
80001cc0:	02c12083          	lw	ra,44(sp)
80001cc4:	02812403          	lw	s0,40(sp)
80001cc8:	03010113          	addi	sp,sp,48
80001ccc:	00008067          	ret

Disassembly of section .text.SPI_configure_slave_mode:

80001cd0 <SPI_configure_slave_mode>:
 */
void SPI_configure_slave_mode
(
	spi_instance_t * this_spi
)
{
80001cd0:	fe010113          	addi	sp,sp,-32
80001cd4:	00112e23          	sw	ra,28(sp)
80001cd8:	00812c23          	sw	s0,24(sp)
80001cdc:	02010413          	addi	s0,sp,32
80001ce0:	fea42623          	sw	a0,-20(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

	if( NULL_INSTANCE != this_spi )
80001ce4:	fec42783          	lw	a5,-20(s0)
80001ce8:	08078263          	beqz	a5,80001d6c <SPI_configure_slave_mode+0x9c>
        {
        /* Don't yet know what slave transfer mode will be used */
        this_spi->slave_xfer_mode = SPI_SLAVE_XFER_NONE;
80001cec:	fec42783          	lw	a5,-20(s0)
80001cf0:	0407a423          	sw	zero,72(a5)

		/* Make sure the CoreSPI is disabled while we configure it */
        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80001cf4:	fec42783          	lw	a5,-20(s0)
80001cf8:	0007a783          	lw	a5,0(a5)
80001cfc:	00000693          	li	a3,0
80001d00:	00100613          	li	a2,1
80001d04:	00000593          	li	a1,0
80001d08:	00078513          	mv	a0,a5
80001d0c:	df4ff0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

        /* Flush the receive and transmit FIFOs*/
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80001d10:	fec42783          	lw	a5,-20(s0)
80001d14:	0007a783          	lw	a5,0(a5)
80001d18:	01c78793          	addi	a5,a5,28
80001d1c:	00300593          	li	a1,3
80001d20:	00078513          	mv	a0,a5
80001d24:	d6cff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

        /* Clear all interrupts */
        HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
80001d28:	fec42783          	lw	a5,-20(s0)
80001d2c:	0007a783          	lw	a5,0(a5)
80001d30:	00478793          	addi	a5,a5,4
80001d34:	0ff00593          	li	a1,255
80001d38:	00078513          	mv	a0,a5
80001d3c:	d54ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

        /* Ensure RXAVAIL, TXRFM, SSEND and CMDINT are disabled */
        HAL_set_8bit_reg( this_spi->base_addr, CTRL2, 0u );
80001d40:	fec42783          	lw	a5,-20(s0)
80001d44:	0007a783          	lw	a5,0(a5)
80001d48:	01878793          	addi	a5,a5,24
80001d4c:	00000593          	li	a1,0
80001d50:	00078513          	mv	a0,a5
80001d54:	d3cff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
        /*
         * Enable the CoreSPI in slave mode with TXUNDERRUN, RXOVFLOW and TXDONE
         * interrupts disabled. The appropriate interrupts will be enabled later
         * on when the transfer mode is configured.
         */
		HAL_set_8bit_reg( this_spi->base_addr, CTRL1, ENABLE );
80001d58:	fec42783          	lw	a5,-20(s0)
80001d5c:	0007a783          	lw	a5,0(a5)
80001d60:	00100593          	li	a1,1
80001d64:	00078513          	mv	a0,a5
80001d68:	d28ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
    }
}
80001d6c:	00000013          	nop
80001d70:	01c12083          	lw	ra,28(sp)
80001d74:	01812403          	lw	s0,24(sp)
80001d78:	02010113          	addi	sp,sp,32
80001d7c:	00008067          	ret

Disassembly of section .text.SPI_configure_master_mode:

80001d80 <SPI_configure_master_mode>:
 */
void SPI_configure_master_mode
(
	spi_instance_t * this_spi
)
{
80001d80:	fe010113          	addi	sp,sp,-32
80001d84:	00112e23          	sw	ra,28(sp)
80001d88:	00812c23          	sw	s0,24(sp)
80001d8c:	02010413          	addi	s0,sp,32
80001d90:	fea42623          	sw	a0,-20(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );
    
    if( NULL_INSTANCE != this_spi )
80001d94:	fec42783          	lw	a5,-20(s0)
80001d98:	08078263          	beqz	a5,80001e1c <SPI_configure_master_mode+0x9c>
    {
		/* Disable the CoreSPI for a little while, while we configure the CoreSPI */
        HAL_set_8bit_reg_field(this_spi->base_addr, CTRL1_ENABLE, DISABLE);
80001d9c:	fec42783          	lw	a5,-20(s0)
80001da0:	0007a783          	lw	a5,0(a5)
80001da4:	00000693          	li	a3,0
80001da8:	00100613          	li	a2,1
80001dac:	00000593          	li	a1,0
80001db0:	00078513          	mv	a0,a5
80001db4:	d4cff0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

        /* Reset slave transfer mode to unknown in case it has been set previously */
        this_spi->slave_xfer_mode = SPI_SLAVE_XFER_NONE;
80001db8:	fec42783          	lw	a5,-20(s0)
80001dbc:	0407a423          	sw	zero,72(a5)

		/* Flush the receive and transmit FIFOs*/
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80001dc0:	fec42783          	lw	a5,-20(s0)
80001dc4:	0007a783          	lw	a5,0(a5)
80001dc8:	01c78793          	addi	a5,a5,28
80001dcc:	00300593          	li	a1,3
80001dd0:	00078513          	mv	a0,a5
80001dd4:	cbcff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

        /* Clear all interrupts */
        HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
80001dd8:	fec42783          	lw	a5,-20(s0)
80001ddc:	0007a783          	lw	a5,0(a5)
80001de0:	00478793          	addi	a5,a5,4
80001de4:	0ff00593          	li	a1,255
80001de8:	00078513          	mv	a0,a5
80001dec:	ca4ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

        /* Ensure RXAVAIL, TXRFM, SSEND and CMDINT are disabled */
        HAL_set_8bit_reg( this_spi->base_addr, CTRL2, 0u );
80001df0:	fec42783          	lw	a5,-20(s0)
80001df4:	0007a783          	lw	a5,0(a5)
80001df8:	01878793          	addi	a5,a5,24
80001dfc:	00000593          	li	a1,0
80001e00:	00078513          	mv	a0,a5
80001e04:	c8cff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

        /* Enable the CoreSPI in master mode with TXUNDERRUN, RXOVFLOW and TXDONE interrupts disabled */
		HAL_set_8bit_reg( this_spi->base_addr, CTRL1, ENABLE | CTRL1_MASTER_MASK );
80001e08:	fec42783          	lw	a5,-20(s0)
80001e0c:	0007a783          	lw	a5,0(a5)
80001e10:	00300593          	li	a1,3
80001e14:	00078513          	mv	a0,a5
80001e18:	c78ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
    }
}
80001e1c:	00000013          	nop
80001e20:	01c12083          	lw	ra,28(sp)
80001e24:	01812403          	lw	s0,24(sp)
80001e28:	02010113          	addi	sp,sp,32
80001e2c:	00008067          	ret

Disassembly of section .text.SPI_set_slave_select:

80001e30 <SPI_set_slave_select>:
void SPI_set_slave_select
(
	spi_instance_t * this_spi,
	spi_slave_t slave
)
{
80001e30:	fd010113          	addi	sp,sp,-48
80001e34:	02112623          	sw	ra,44(sp)
80001e38:	02812423          	sw	s0,40(sp)
80001e3c:	03010413          	addi	s0,sp,48
80001e40:	fca42e23          	sw	a0,-36(s0)
80001e44:	fcb42c23          	sw	a1,-40(s0)
    spi_slave_t temp = (spi_slave_t)(0x00u) ;
80001e48:	fe042623          	sw	zero,-20(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( SPI_MAX_NB_OF_SLAVES > slave );
    
    if( ( NULL_INSTANCE != this_spi ) && ( SPI_MAX_NB_OF_SLAVES > slave ) )
80001e4c:	fdc42783          	lw	a5,-36(s0)
80001e50:	0a078663          	beqz	a5,80001efc <SPI_set_slave_select+0xcc>
80001e54:	fd842703          	lw	a4,-40(s0)
80001e58:	00700793          	li	a5,7
80001e5c:	0ae7e063          	bltu	a5,a4,80001efc <SPI_set_slave_select+0xcc>
    {
        /* This function is only intended to be used with an SPI master */
        if( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
80001e60:	fdc42783          	lw	a5,-36(s0)
80001e64:	0007a783          	lw	a5,0(a5)
80001e68:	00200613          	li	a2,2
80001e6c:	00100593          	li	a1,1
80001e70:	00078513          	mv	a0,a5
80001e74:	d1cff0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80001e78:	00050793          	mv	a5,a0
80001e7c:	08078063          	beqz	a5,80001efc <SPI_set_slave_select+0xcc>
        {
            /* Recover from receiver overflow because of previous slave */
            if( ENABLE == HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXOVFLOW ) )
80001e80:	fdc42783          	lw	a5,-36(s0)
80001e84:	0007a783          	lw	a5,0(a5)
80001e88:	02078793          	addi	a5,a5,32
80001e8c:	01000613          	li	a2,16
80001e90:	00400593          	li	a1,4
80001e94:	00078513          	mv	a0,a5
80001e98:	cf8ff0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80001e9c:	00050793          	mv	a5,a0
80001ea0:	00078713          	mv	a4,a5
80001ea4:	00100793          	li	a5,1
80001ea8:	00f71663          	bne	a4,a5,80001eb4 <SPI_set_slave_select+0x84>
            {
                 recover_from_rx_overflow( this_spi );
80001eac:	fdc42503          	lw	a0,-36(s0)
80001eb0:	10d010ef          	jal	ra,800037bc <recover_from_rx_overflow>
            }
            /* Set the correct slave select bit */
            temp = (spi_slave_t)( HAL_get_8bit_reg( this_spi->base_addr, SSEL ) | ((uint32_t)1u << (uint32_t)slave) );
80001eb4:	fdc42783          	lw	a5,-36(s0)
80001eb8:	0007a783          	lw	a5,0(a5)
80001ebc:	02478793          	addi	a5,a5,36
80001ec0:	00078513          	mv	a0,a5
80001ec4:	c08ff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80001ec8:	00050793          	mv	a5,a0
80001ecc:	00078693          	mv	a3,a5
80001ed0:	00100713          	li	a4,1
80001ed4:	fd842783          	lw	a5,-40(s0)
80001ed8:	00f717b3          	sll	a5,a4,a5
80001edc:	00f6e7b3          	or	a5,a3,a5
80001ee0:	fef42623          	sw	a5,-20(s0)
            HAL_set_8bit_reg( this_spi->base_addr, SSEL, (uint_fast8_t)temp );
80001ee4:	fdc42783          	lw	a5,-36(s0)
80001ee8:	0007a783          	lw	a5,0(a5)
80001eec:	02478793          	addi	a5,a5,36
80001ef0:	fec42583          	lw	a1,-20(s0)
80001ef4:	00078513          	mv	a0,a5
80001ef8:	b98ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
        }
    }
}
80001efc:	00000013          	nop
80001f00:	02c12083          	lw	ra,44(sp)
80001f04:	02812403          	lw	s0,40(sp)
80001f08:	03010113          	addi	sp,sp,48
80001f0c:	00008067          	ret

Disassembly of section .text.SPI_clear_slave_select:

80001f10 <SPI_clear_slave_select>:
void SPI_clear_slave_select
(
	spi_instance_t * this_spi,
	spi_slave_t slave
)
{
80001f10:	fd010113          	addi	sp,sp,-48
80001f14:	02112623          	sw	ra,44(sp)
80001f18:	02812423          	sw	s0,40(sp)
80001f1c:	03010413          	addi	s0,sp,48
80001f20:	fca42e23          	sw	a0,-36(s0)
80001f24:	fcb42c23          	sw	a1,-40(s0)
    spi_slave_t temp = (spi_slave_t) (0x00u) ;
80001f28:	fe042623          	sw	zero,-20(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( SPI_MAX_NB_OF_SLAVES > slave );
    
    if( ( NULL_INSTANCE != this_spi ) && ( SPI_MAX_NB_OF_SLAVES > slave ) )
80001f2c:	fdc42783          	lw	a5,-36(s0)
80001f30:	0a078863          	beqz	a5,80001fe0 <SPI_clear_slave_select+0xd0>
80001f34:	fd842703          	lw	a4,-40(s0)
80001f38:	00700793          	li	a5,7
80001f3c:	0ae7e263          	bltu	a5,a4,80001fe0 <SPI_clear_slave_select+0xd0>
    {
        /* This function is only intended to be used with an SPI master. */
        if( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
80001f40:	fdc42783          	lw	a5,-36(s0)
80001f44:	0007a783          	lw	a5,0(a5)
80001f48:	00200613          	li	a2,2
80001f4c:	00100593          	li	a1,1
80001f50:	00078513          	mv	a0,a5
80001f54:	c3cff0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80001f58:	00050793          	mv	a5,a0
80001f5c:	08078263          	beqz	a5,80001fe0 <SPI_clear_slave_select+0xd0>
        {
            /* Recover from receiver overflow because of previous slave */
            if( ENABLE == HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXOVFLOW) )
80001f60:	fdc42783          	lw	a5,-36(s0)
80001f64:	0007a783          	lw	a5,0(a5)
80001f68:	02078793          	addi	a5,a5,32
80001f6c:	01000613          	li	a2,16
80001f70:	00400593          	li	a1,4
80001f74:	00078513          	mv	a0,a5
80001f78:	c18ff0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80001f7c:	00050793          	mv	a5,a0
80001f80:	00078713          	mv	a4,a5
80001f84:	00100793          	li	a5,1
80001f88:	00f71663          	bne	a4,a5,80001f94 <SPI_clear_slave_select+0x84>
            {
                 recover_from_rx_overflow( this_spi );
80001f8c:	fdc42503          	lw	a0,-36(s0)
80001f90:	02d010ef          	jal	ra,800037bc <recover_from_rx_overflow>
            }
            /* Clear the correct slave select bit */
            temp = (spi_slave_t)( HAL_get_8bit_reg( this_spi->base_addr, SSEL ) & ~((uint32_t)1u << (uint32_t)slave) );
80001f94:	fdc42783          	lw	a5,-36(s0)
80001f98:	0007a783          	lw	a5,0(a5)
80001f9c:	02478793          	addi	a5,a5,36
80001fa0:	00078513          	mv	a0,a5
80001fa4:	b28ff0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80001fa8:	00050793          	mv	a5,a0
80001fac:	00078693          	mv	a3,a5
80001fb0:	00100713          	li	a4,1
80001fb4:	fd842783          	lw	a5,-40(s0)
80001fb8:	00f717b3          	sll	a5,a4,a5
80001fbc:	fff7c793          	not	a5,a5
80001fc0:	00f6f7b3          	and	a5,a3,a5
80001fc4:	fef42623          	sw	a5,-20(s0)
            HAL_set_8bit_reg( this_spi->base_addr, SSEL, (uint_fast8_t)temp ) ;
80001fc8:	fdc42783          	lw	a5,-36(s0)
80001fcc:	0007a783          	lw	a5,0(a5)
80001fd0:	02478793          	addi	a5,a5,36
80001fd4:	fec42583          	lw	a1,-20(s0)
80001fd8:	00078513          	mv	a0,a5
80001fdc:	ab4ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>
        }
    }
}
80001fe0:	00000013          	nop
80001fe4:	02c12083          	lw	ra,44(sp)
80001fe8:	02812403          	lw	s0,40(sp)
80001fec:	03010113          	addi	sp,sp,48
80001ff0:	00008067          	ret

Disassembly of section .text.SPI_transfer_frame:

80001ff4 <SPI_transfer_frame>:
uint32_t SPI_transfer_frame
(
    spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
80001ff4:	fd010113          	addi	sp,sp,-48
80001ff8:	02112623          	sw	ra,44(sp)
80001ffc:	02812423          	sw	s0,40(sp)
80002000:	03010413          	addi	s0,sp,48
80002004:	fca42e23          	sw	a0,-36(s0)
80002008:	fcb42c23          	sw	a1,-40(s0)
    volatile uint32_t rx_data = 0u; /* Ensure consistent return value if in slave mode */
8000200c:	fe042623          	sw	zero,-20(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
80002010:	fdc42783          	lw	a5,-36(s0)
80002014:	0a078063          	beqz	a5,800020b4 <SPI_transfer_frame+0xc0>
    {
		/* This function is only intended to be used with an SPI master. */
		if( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
80002018:	fdc42783          	lw	a5,-36(s0)
8000201c:	0007a783          	lw	a5,0(a5)
80002020:	00200613          	li	a2,2
80002024:	00100593          	li	a1,1
80002028:	00078513          	mv	a0,a5
8000202c:	b64ff0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002030:	00050793          	mv	a5,a0
80002034:	08078063          	beqz	a5,800020b4 <SPI_transfer_frame+0xc0>
		{
			/* Flush the receive and transmit FIFOs by resetting both */
			HAL_set_8bit_reg(this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK);
80002038:	fdc42783          	lw	a5,-36(s0)
8000203c:	0007a783          	lw	a5,0(a5)
80002040:	01c78793          	addi	a5,a5,28
80002044:	00300593          	li	a1,3
80002048:	00078513          	mv	a0,a5
8000204c:	a44ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

			/* Send frame. */
			HAL_set_32bit_reg( this_spi->base_addr, TXLAST, tx_bits );
80002050:	fdc42783          	lw	a5,-36(s0)
80002054:	0007a783          	lw	a5,0(a5)
80002058:	02878793          	addi	a5,a5,40
8000205c:	fd842583          	lw	a1,-40(s0)
80002060:	00078513          	mv	a0,a5
80002064:	f81fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>

			/* Wait for frame Tx to complete. */
			while ( ENABLE != HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_DONE ) )
80002068:	00000013          	nop
8000206c:	fdc42783          	lw	a5,-36(s0)
80002070:	0007a783          	lw	a5,0(a5)
80002074:	02078793          	addi	a5,a5,32
80002078:	00200613          	li	a2,2
8000207c:	00100593          	li	a1,1
80002080:	00078513          	mv	a0,a5
80002084:	b0cff0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002088:	00050793          	mv	a5,a0
8000208c:	00078713          	mv	a4,a5
80002090:	00100793          	li	a5,1
80002094:	fcf71ce3          	bne	a4,a5,8000206c <SPI_transfer_frame+0x78>
			{
				;
			}

			/* Read received frame. */
			rx_data = HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80002098:	fdc42783          	lw	a5,-36(s0)
8000209c:	0007a783          	lw	a5,0(a5)
800020a0:	00878793          	addi	a5,a5,8
800020a4:	00078513          	mv	a0,a5
800020a8:	f75fe0ef          	jal	ra,8000101c <HW_get_32bit_reg>
800020ac:	00050793          	mv	a5,a0
800020b0:	fef42623          	sw	a5,-20(s0)
		}
    }

    /* Finally, return the frame we received from the slave or 0 */
    return( rx_data );
800020b4:	fec42783          	lw	a5,-20(s0)
}
800020b8:	00078513          	mv	a0,a5
800020bc:	02c12083          	lw	ra,44(sp)
800020c0:	02812403          	lw	s0,40(sp)
800020c4:	03010113          	addi	sp,sp,48
800020c8:	00008067          	ret

Disassembly of section .text.SPI_transfer_block:

800020cc <SPI_transfer_block>:
    const uint8_t * cmd_buffer,
    uint16_t cmd_byte_size,
    uint8_t * rx_buffer,
    uint16_t rx_byte_size
)
{
800020cc:	fd010113          	addi	sp,sp,-48
800020d0:	02112623          	sw	ra,44(sp)
800020d4:	02812423          	sw	s0,40(sp)
800020d8:	02912223          	sw	s1,36(sp)
800020dc:	03010413          	addi	s0,sp,48
800020e0:	fca42e23          	sw	a0,-36(s0)
800020e4:	fcb42c23          	sw	a1,-40(s0)
800020e8:	fcd42823          	sw	a3,-48(s0)
800020ec:	00070793          	mv	a5,a4
800020f0:	fcc41b23          	sh	a2,-42(s0)
800020f4:	fcf41a23          	sh	a5,-44(s0)
    uint32_t transfer_size = 0U;   /* Total number of bytes to  transfer. */
800020f8:	fe042223          	sw	zero,-28(s0)
    uint16_t transfer_idx = 0U;    /* Number of bytes transferred so far */
800020fc:	fe041723          	sh	zero,-18(s0)
    uint16_t tx_idx = 0u;          /* Number of valid data bytes sent */
80002100:	fe041623          	sh	zero,-20(s0)
    uint16_t rx_idx = 0u;          /* Number of valid response bytes received */
80002104:	fe041523          	sh	zero,-22(s0)
    uint16_t transit = 0U;         /* Number of bytes "in flight" to avoid FIFO errors */
80002108:	fe041423          	sh	zero,-24(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
8000210c:	fdc42783          	lw	a5,-36(s0)
80002110:	56078663          	beqz	a5,8000267c <SPI_transfer_block+0x5b0>
    {
        /* This function is only intended to be used with an SPI master. */
        if( ( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) ) &&
80002114:	fdc42783          	lw	a5,-36(s0)
80002118:	0007a783          	lw	a5,0(a5)
8000211c:	00200613          	li	a2,2
80002120:	00100593          	li	a1,1
80002124:	00078513          	mv	a0,a5
80002128:	a68ff0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
8000212c:	00050793          	mv	a5,a0
80002130:	54078663          	beqz	a5,8000267c <SPI_transfer_block+0x5b0>
        	/* Check for empty transfer as well */
            ( 0u != ( (uint32_t)cmd_byte_size + (uint32_t)rx_byte_size ) ) )
80002134:	fd645703          	lhu	a4,-42(s0)
80002138:	fd445783          	lhu	a5,-44(s0)
8000213c:	00f707b3          	add	a5,a4,a5
        if( ( DISABLE != HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) ) &&
80002140:	52078e63          	beqz	a5,8000267c <SPI_transfer_block+0x5b0>
            /*
             * tansfer_size is one less than the real amount as we have to write
             * the last frame separately to trigger the slave deselect in case
             * the SPS option is in place.
             */
            transfer_size = ( (uint32_t)cmd_byte_size + (uint32_t)rx_byte_size ) - 1u;
80002144:	fd645703          	lhu	a4,-42(s0)
80002148:	fd445783          	lhu	a5,-44(s0)
8000214c:	00f707b3          	add	a5,a4,a5
80002150:	fff78793          	addi	a5,a5,-1
80002154:	fef42223          	sw	a5,-28(s0)
            /* Flush the receive and transmit FIFOs */
            HAL_set_8bit_reg(this_spi->base_addr, CMD, (uint32_t)(CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK ));
80002158:	fdc42783          	lw	a5,-36(s0)
8000215c:	0007a783          	lw	a5,0(a5)
80002160:	01c78793          	addi	a5,a5,28
80002164:	00300593          	li	a1,3
80002168:	00078513          	mv	a0,a5
8000216c:	924ff0ef          	jal	ra,80001290 <HW_set_8bit_reg>

            /* Recover from receiver overflow because of previous slave */
			if( ENABLE == HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXOVFLOW) )
80002170:	fdc42783          	lw	a5,-36(s0)
80002174:	0007a783          	lw	a5,0(a5)
80002178:	02078793          	addi	a5,a5,32
8000217c:	01000613          	li	a2,16
80002180:	00400593          	li	a1,4
80002184:	00078513          	mv	a0,a5
80002188:	a08ff0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
8000218c:	00050793          	mv	a5,a0
80002190:	00078713          	mv	a4,a5
80002194:	00100793          	li	a5,1
80002198:	00f71663          	bne	a4,a5,800021a4 <SPI_transfer_block+0xd8>
			{
				 recover_from_rx_overflow( this_spi );
8000219c:	fdc42503          	lw	a0,-36(s0)
800021a0:	61c010ef          	jal	ra,800037bc <recover_from_rx_overflow>
			}

			/* Disable the Core SPI for a little bit, while we load the TX FIFO */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
800021a4:	fdc42783          	lw	a5,-36(s0)
800021a8:	0007a783          	lw	a5,0(a5)
800021ac:	00000693          	li	a3,0
800021b0:	00100613          	li	a2,1
800021b4:	00000593          	li	a1,0
800021b8:	00078513          	mv	a0,a5
800021bc:	944ff0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

	        while( ( tx_idx < transfer_size ) && ( tx_idx < this_spi->fifo_depth ) )
800021c0:	06c0006f          	j	8000222c <SPI_transfer_block+0x160>
	        {
	            if( tx_idx < cmd_byte_size )
800021c4:	fec45703          	lhu	a4,-20(s0)
800021c8:	fd645783          	lhu	a5,-42(s0)
800021cc:	02f77863          	bleu	a5,a4,800021fc <SPI_transfer_block+0x130>
	            {
	            	/* Push out valid data */
					HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)cmd_buffer[tx_idx] );
800021d0:	fdc42783          	lw	a5,-36(s0)
800021d4:	0007a783          	lw	a5,0(a5)
800021d8:	00c78693          	addi	a3,a5,12
800021dc:	fec45783          	lhu	a5,-20(s0)
800021e0:	fd842703          	lw	a4,-40(s0)
800021e4:	00f707b3          	add	a5,a4,a5
800021e8:	0007c783          	lbu	a5,0(a5)
800021ec:	00078593          	mv	a1,a5
800021f0:	00068513          	mv	a0,a3
800021f4:	df1fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
800021f8:	01c0006f          	j	80002214 <SPI_transfer_block+0x148>
	            }
	            else
	            {
					/* Push out 0s to get data back from slave */
	            	HAL_set_32bit_reg( this_spi->base_addr, TXDATA, 0U );
800021fc:	fdc42783          	lw	a5,-36(s0)
80002200:	0007a783          	lw	a5,0(a5)
80002204:	00c78793          	addi	a5,a5,12
80002208:	00000593          	li	a1,0
8000220c:	00078513          	mv	a0,a5
80002210:	dd5fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
	            }
	            ++transit;
80002214:	fe845783          	lhu	a5,-24(s0)
80002218:	00178793          	addi	a5,a5,1
8000221c:	fef41423          	sh	a5,-24(s0)
	            ++tx_idx;
80002220:	fec45783          	lhu	a5,-20(s0)
80002224:	00178793          	addi	a5,a5,1
80002228:	fef41623          	sh	a5,-20(s0)
	        while( ( tx_idx < transfer_size ) && ( tx_idx < this_spi->fifo_depth ) )
8000222c:	fec45703          	lhu	a4,-20(s0)
80002230:	fe442783          	lw	a5,-28(s0)
80002234:	00f77a63          	bleu	a5,a4,80002248 <SPI_transfer_block+0x17c>
80002238:	fdc42783          	lw	a5,-36(s0)
8000223c:	0447d783          	lhu	a5,68(a5)
80002240:	fec45703          	lhu	a4,-20(s0)
80002244:	f8f760e3          	bltu	a4,a5,800021c4 <SPI_transfer_block+0xf8>
	        }

	        /* If room left to put last frame in before the off, then do it */
	        if( ( tx_idx == transfer_size ) && ( tx_idx < this_spi->fifo_depth ) )
80002248:	fec45703          	lhu	a4,-20(s0)
8000224c:	fe442783          	lw	a5,-28(s0)
80002250:	06f71e63          	bne	a4,a5,800022cc <SPI_transfer_block+0x200>
80002254:	fdc42783          	lw	a5,-36(s0)
80002258:	0447d783          	lhu	a5,68(a5)
8000225c:	fec45703          	lhu	a4,-20(s0)
80002260:	06f77663          	bleu	a5,a4,800022cc <SPI_transfer_block+0x200>
	        {
	            if( tx_idx < cmd_byte_size )
80002264:	fec45703          	lhu	a4,-20(s0)
80002268:	fd645783          	lhu	a5,-42(s0)
8000226c:	02f77863          	bleu	a5,a4,8000229c <SPI_transfer_block+0x1d0>
	            {
	            	/* Push out valid data, not expecting any reply this time */
					HAL_set_32bit_reg( this_spi->base_addr, TXLAST, (uint32_t)cmd_buffer[tx_idx] );
80002270:	fdc42783          	lw	a5,-36(s0)
80002274:	0007a783          	lw	a5,0(a5)
80002278:	02878693          	addi	a3,a5,40
8000227c:	fec45783          	lhu	a5,-20(s0)
80002280:	fd842703          	lw	a4,-40(s0)
80002284:	00f707b3          	add	a5,a4,a5
80002288:	0007c783          	lbu	a5,0(a5)
8000228c:	00078593          	mv	a1,a5
80002290:	00068513          	mv	a0,a3
80002294:	d51fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
80002298:	01c0006f          	j	800022b4 <SPI_transfer_block+0x1e8>
	            }
	            else
	            {
					/* Push out last 0 to get data back from slave */
					HAL_set_32bit_reg( this_spi->base_addr, TXLAST, 0U );
8000229c:	fdc42783          	lw	a5,-36(s0)
800022a0:	0007a783          	lw	a5,0(a5)
800022a4:	02878793          	addi	a5,a5,40
800022a8:	00000593          	li	a1,0
800022ac:	00078513          	mv	a0,a5
800022b0:	d35fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
	            }

		        ++transit;
800022b4:	fe845783          	lhu	a5,-24(s0)
800022b8:	00178793          	addi	a5,a5,1
800022bc:	fef41423          	sh	a5,-24(s0)
		        ++tx_idx;
800022c0:	fec45783          	lhu	a5,-20(s0)
800022c4:	00178793          	addi	a5,a5,1
800022c8:	fef41623          	sh	a5,-20(s0)
	        }

			/* FIFO is all loaded up so enable Core SPI to start transfer */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
800022cc:	fdc42783          	lw	a5,-36(s0)
800022d0:	0007a783          	lw	a5,0(a5)
800022d4:	00100693          	li	a3,1
800022d8:	00100613          	li	a2,1
800022dc:	00000593          	li	a1,0
800022e0:	00078513          	mv	a0,a5
800022e4:	81cff0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
		     *
		     * First stage transfers remaining command bytes (if any).
		     * At this stage anything in the RX FIFO can be discarded as it is
		     * not part of a valid response.
		     */
		    while( tx_idx < cmd_byte_size )
800022e8:	0dc0006f          	j	800023c4 <SPI_transfer_block+0x2f8>
		    {
		        if( transit < this_spi->fifo_depth )
800022ec:	fdc42783          	lw	a5,-36(s0)
800022f0:	0447d783          	lhu	a5,68(a5)
800022f4:	fe845703          	lhu	a4,-24(s0)
800022f8:	06f77e63          	bleu	a5,a4,80002374 <SPI_transfer_block+0x2a8>
		        {
		            /* Send another byte. */
		        	if( tx_idx == transfer_size ) /* Last frame is special... */
800022fc:	fec45703          	lhu	a4,-20(s0)
80002300:	fe442783          	lw	a5,-28(s0)
80002304:	02f71863          	bne	a4,a5,80002334 <SPI_transfer_block+0x268>
		        	{
			        	HAL_set_32bit_reg( this_spi->base_addr, TXLAST, (uint32_t)cmd_buffer[tx_idx] );
80002308:	fdc42783          	lw	a5,-36(s0)
8000230c:	0007a783          	lw	a5,0(a5)
80002310:	02878693          	addi	a3,a5,40
80002314:	fec45783          	lhu	a5,-20(s0)
80002318:	fd842703          	lw	a4,-40(s0)
8000231c:	00f707b3          	add	a5,a4,a5
80002320:	0007c783          	lbu	a5,0(a5)
80002324:	00078593          	mv	a1,a5
80002328:	00068513          	mv	a0,a3
8000232c:	cb9fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
80002330:	02c0006f          	j	8000235c <SPI_transfer_block+0x290>
		        	}
		        	else
		        	{
		        		HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)cmd_buffer[tx_idx] );
80002334:	fdc42783          	lw	a5,-36(s0)
80002338:	0007a783          	lw	a5,0(a5)
8000233c:	00c78693          	addi	a3,a5,12
80002340:	fec45783          	lhu	a5,-20(s0)
80002344:	fd842703          	lw	a4,-40(s0)
80002348:	00f707b3          	add	a5,a4,a5
8000234c:	0007c783          	lbu	a5,0(a5)
80002350:	00078593          	mv	a1,a5
80002354:	00068513          	mv	a0,a3
80002358:	c8dfe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
		        	}
		        	++tx_idx;
8000235c:	fec45783          	lhu	a5,-20(s0)
80002360:	00178793          	addi	a5,a5,1
80002364:	fef41623          	sh	a5,-20(s0)
		            ++transit;
80002368:	fe845783          	lhu	a5,-24(s0)
8000236c:	00178793          	addi	a5,a5,1
80002370:	fef41423          	sh	a5,-24(s0)
		        }
				if( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80002374:	fdc42783          	lw	a5,-36(s0)
80002378:	0007a783          	lw	a5,0(a5)
8000237c:	02078793          	addi	a5,a5,32
80002380:	00400613          	li	a2,4
80002384:	00200593          	li	a1,2
80002388:	00078513          	mv	a0,a5
8000238c:	804ff0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002390:	00050793          	mv	a5,a0
80002394:	02079863          	bnez	a5,800023c4 <SPI_transfer_block+0x2f8>
		        {
		            /* Read and discard. */
		        	HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80002398:	fdc42783          	lw	a5,-36(s0)
8000239c:	0007a783          	lw	a5,0(a5)
800023a0:	00878793          	addi	a5,a5,8
800023a4:	00078513          	mv	a0,a5
800023a8:	c75fe0ef          	jal	ra,8000101c <HW_get_32bit_reg>
		        	++transfer_idx;
800023ac:	fee45783          	lhu	a5,-18(s0)
800023b0:	00178793          	addi	a5,a5,1
800023b4:	fef41723          	sh	a5,-18(s0)
		            --transit;
800023b8:	fe845783          	lhu	a5,-24(s0)
800023bc:	fff78793          	addi	a5,a5,-1
800023c0:	fef41423          	sh	a5,-24(s0)
		    while( tx_idx < cmd_byte_size )
800023c4:	fec45703          	lhu	a4,-20(s0)
800023c8:	fd645783          	lhu	a5,-42(s0)
800023cc:	f2f760e3          	bltu	a4,a5,800022ec <SPI_transfer_block+0x220>
		    /*
		     * Now, we are writing dummy bytes to push through the response from
		     * the slave but we still have to keep discarding any read data that
		     * corresponds with one of our command bytes.
		     */
		    while( transfer_idx < cmd_byte_size )
800023d0:	0a00006f          	j	80002470 <SPI_transfer_block+0x3a4>
		    {
		        if( transit < this_spi->fifo_depth )
800023d4:	fdc42783          	lw	a5,-36(s0)
800023d8:	0447d783          	lhu	a5,68(a5)
800023dc:	fe845703          	lhu	a4,-24(s0)
800023e0:	04f77063          	bleu	a5,a4,80002420 <SPI_transfer_block+0x354>
		        {
		            if( tx_idx < transfer_size )
800023e4:	fec45703          	lhu	a4,-20(s0)
800023e8:	fe442783          	lw	a5,-28(s0)
800023ec:	02f77a63          	bleu	a5,a4,80002420 <SPI_transfer_block+0x354>
		            {
						HAL_set_32bit_reg( this_spi->base_addr, TXDATA, 0U );
800023f0:	fdc42783          	lw	a5,-36(s0)
800023f4:	0007a783          	lw	a5,0(a5)
800023f8:	00c78793          	addi	a5,a5,12
800023fc:	00000593          	li	a1,0
80002400:	00078513          	mv	a0,a5
80002404:	be1fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
						++tx_idx;
80002408:	fec45783          	lhu	a5,-20(s0)
8000240c:	00178793          	addi	a5,a5,1
80002410:	fef41623          	sh	a5,-20(s0)
						++transit;
80002414:	fe845783          	lhu	a5,-24(s0)
80002418:	00178793          	addi	a5,a5,1
8000241c:	fef41423          	sh	a5,-24(s0)
		            }
		        }
				if( !HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXEMPTY ) )
80002420:	fdc42783          	lw	a5,-36(s0)
80002424:	0007a783          	lw	a5,0(a5)
80002428:	02078793          	addi	a5,a5,32
8000242c:	00400613          	li	a2,4
80002430:	00200593          	li	a1,2
80002434:	00078513          	mv	a0,a5
80002438:	f59fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
8000243c:	00050793          	mv	a5,a0
80002440:	02079863          	bnez	a5,80002470 <SPI_transfer_block+0x3a4>
		        {
		            /* Read and discard. */
		        	HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80002444:	fdc42783          	lw	a5,-36(s0)
80002448:	0007a783          	lw	a5,0(a5)
8000244c:	00878793          	addi	a5,a5,8
80002450:	00078513          	mv	a0,a5
80002454:	bc9fe0ef          	jal	ra,8000101c <HW_get_32bit_reg>
		        	++transfer_idx;
80002458:	fee45783          	lhu	a5,-18(s0)
8000245c:	00178793          	addi	a5,a5,1
80002460:	fef41723          	sh	a5,-18(s0)
		            --transit;
80002464:	fe845783          	lhu	a5,-24(s0)
80002468:	fff78793          	addi	a5,a5,-1
8000246c:	fef41423          	sh	a5,-24(s0)
		    while( transfer_idx < cmd_byte_size )
80002470:	fee45703          	lhu	a4,-18(s0)
80002474:	fd645783          	lhu	a5,-42(s0)
80002478:	f4f76ee3          	bltu	a4,a5,800023d4 <SPI_transfer_block+0x308>
		    }
		    /*
		     * Now we are now only sending dummy data to push through the
		     * valid response data which we store in the response buffer.
		     */
		    while( tx_idx < transfer_size )
8000247c:	0b80006f          	j	80002534 <SPI_transfer_block+0x468>
		    {
		        if( transit < this_spi->fifo_depth )
80002480:	fdc42783          	lw	a5,-36(s0)
80002484:	0447d783          	lhu	a5,68(a5)
80002488:	fe845703          	lhu	a4,-24(s0)
8000248c:	02f77a63          	bleu	a5,a4,800024c0 <SPI_transfer_block+0x3f4>
		        {
					HAL_set_32bit_reg( this_spi->base_addr, TXDATA, 0U );
80002490:	fdc42783          	lw	a5,-36(s0)
80002494:	0007a783          	lw	a5,0(a5)
80002498:	00c78793          	addi	a5,a5,12
8000249c:	00000593          	li	a1,0
800024a0:	00078513          	mv	a0,a5
800024a4:	b41fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
					++tx_idx;
800024a8:	fec45783          	lhu	a5,-20(s0)
800024ac:	00178793          	addi	a5,a5,1
800024b0:	fef41623          	sh	a5,-20(s0)
					++transit;
800024b4:	fe845783          	lhu	a5,-24(s0)
800024b8:	00178793          	addi	a5,a5,1
800024bc:	fef41423          	sh	a5,-24(s0)
		        }
				if( !HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXEMPTY ) )
800024c0:	fdc42783          	lw	a5,-36(s0)
800024c4:	0007a783          	lw	a5,0(a5)
800024c8:	02078793          	addi	a5,a5,32
800024cc:	00400613          	li	a2,4
800024d0:	00200593          	li	a1,2
800024d4:	00078513          	mv	a0,a5
800024d8:	eb9fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
800024dc:	00050793          	mv	a5,a0
800024e0:	04079a63          	bnez	a5,80002534 <SPI_transfer_block+0x468>
		        {
		            /* Process received byte. */
					rx_buffer[rx_idx] = (uint8_t)HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
800024e4:	fea45783          	lhu	a5,-22(s0)
800024e8:	fd042703          	lw	a4,-48(s0)
800024ec:	00f704b3          	add	s1,a4,a5
800024f0:	fdc42783          	lw	a5,-36(s0)
800024f4:	0007a783          	lw	a5,0(a5)
800024f8:	00878793          	addi	a5,a5,8
800024fc:	00078513          	mv	a0,a5
80002500:	b1dfe0ef          	jal	ra,8000101c <HW_get_32bit_reg>
80002504:	00050793          	mv	a5,a0
80002508:	0ff7f793          	andi	a5,a5,255
8000250c:	00f48023          	sb	a5,0(s1)
					++rx_idx;
80002510:	fea45783          	lhu	a5,-22(s0)
80002514:	00178793          	addi	a5,a5,1
80002518:	fef41523          	sh	a5,-22(s0)
		            ++transfer_idx;
8000251c:	fee45783          	lhu	a5,-18(s0)
80002520:	00178793          	addi	a5,a5,1
80002524:	fef41723          	sh	a5,-18(s0)
		            --transit;
80002528:	fe845783          	lhu	a5,-24(s0)
8000252c:	fff78793          	addi	a5,a5,-1
80002530:	fef41423          	sh	a5,-24(s0)
		    while( tx_idx < transfer_size )
80002534:	fec45703          	lhu	a4,-20(s0)
80002538:	fe442783          	lw	a5,-28(s0)
8000253c:	f4f762e3          	bltu	a4,a5,80002480 <SPI_transfer_block+0x3b4>
		        }
		    }
		    /* If we still need to send the last frame */
	        while( tx_idx == transfer_size )
80002540:	0b80006f          	j	800025f8 <SPI_transfer_block+0x52c>
	        {
		        if( transit < this_spi->fifo_depth )
80002544:	fdc42783          	lw	a5,-36(s0)
80002548:	0447d783          	lhu	a5,68(a5)
8000254c:	fe845703          	lhu	a4,-24(s0)
80002550:	02f77a63          	bleu	a5,a4,80002584 <SPI_transfer_block+0x4b8>
		        {
					HAL_set_32bit_reg( this_spi->base_addr, TXLAST, 0U );
80002554:	fdc42783          	lw	a5,-36(s0)
80002558:	0007a783          	lw	a5,0(a5)
8000255c:	02878793          	addi	a5,a5,40
80002560:	00000593          	li	a1,0
80002564:	00078513          	mv	a0,a5
80002568:	a7dfe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
					++tx_idx;
8000256c:	fec45783          	lhu	a5,-20(s0)
80002570:	00178793          	addi	a5,a5,1
80002574:	fef41623          	sh	a5,-20(s0)
					++transit;
80002578:	fe845783          	lhu	a5,-24(s0)
8000257c:	00178793          	addi	a5,a5,1
80002580:	fef41423          	sh	a5,-24(s0)
		        }
				if( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80002584:	fdc42783          	lw	a5,-36(s0)
80002588:	0007a783          	lw	a5,0(a5)
8000258c:	02078793          	addi	a5,a5,32
80002590:	00400613          	li	a2,4
80002594:	00200593          	li	a1,2
80002598:	00078513          	mv	a0,a5
8000259c:	df5fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
800025a0:	00050793          	mv	a5,a0
800025a4:	04079a63          	bnez	a5,800025f8 <SPI_transfer_block+0x52c>
		        {
		            /* Process received byte. */
					rx_buffer[rx_idx] = (uint8_t)HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
800025a8:	fea45783          	lhu	a5,-22(s0)
800025ac:	fd042703          	lw	a4,-48(s0)
800025b0:	00f704b3          	add	s1,a4,a5
800025b4:	fdc42783          	lw	a5,-36(s0)
800025b8:	0007a783          	lw	a5,0(a5)
800025bc:	00878793          	addi	a5,a5,8
800025c0:	00078513          	mv	a0,a5
800025c4:	a59fe0ef          	jal	ra,8000101c <HW_get_32bit_reg>
800025c8:	00050793          	mv	a5,a0
800025cc:	0ff7f793          	andi	a5,a5,255
800025d0:	00f48023          	sb	a5,0(s1)
					++rx_idx;
800025d4:	fea45783          	lhu	a5,-22(s0)
800025d8:	00178793          	addi	a5,a5,1
800025dc:	fef41523          	sh	a5,-22(s0)
		            ++transfer_idx;
800025e0:	fee45783          	lhu	a5,-18(s0)
800025e4:	00178793          	addi	a5,a5,1
800025e8:	fef41723          	sh	a5,-18(s0)
		            --transit;
800025ec:	fe845783          	lhu	a5,-24(s0)
800025f0:	fff78793          	addi	a5,a5,-1
800025f4:	fef41423          	sh	a5,-24(s0)
	        while( tx_idx == transfer_size )
800025f8:	fec45703          	lhu	a4,-20(s0)
800025fc:	fe442783          	lw	a5,-28(s0)
80002600:	f4f702e3          	beq	a4,a5,80002544 <SPI_transfer_block+0x478>
	        }
		    /*
		     * Finally, we are now finished sending data and are only reading
		     * valid response data which we store in the response buffer.
		     */
		    while( transfer_idx <= transfer_size )
80002604:	06c0006f          	j	80002670 <SPI_transfer_block+0x5a4>
		    {
				if( !HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_RXEMPTY ) )
80002608:	fdc42783          	lw	a5,-36(s0)
8000260c:	0007a783          	lw	a5,0(a5)
80002610:	02078793          	addi	a5,a5,32
80002614:	00400613          	li	a2,4
80002618:	00200593          	li	a1,2
8000261c:	00078513          	mv	a0,a5
80002620:	d71fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002624:	00050793          	mv	a5,a0
80002628:	04079463          	bnez	a5,80002670 <SPI_transfer_block+0x5a4>
		        {
		            /* Process received byte. */
					rx_buffer[rx_idx] = (uint8_t)HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
8000262c:	fea45783          	lhu	a5,-22(s0)
80002630:	fd042703          	lw	a4,-48(s0)
80002634:	00f704b3          	add	s1,a4,a5
80002638:	fdc42783          	lw	a5,-36(s0)
8000263c:	0007a783          	lw	a5,0(a5)
80002640:	00878793          	addi	a5,a5,8
80002644:	00078513          	mv	a0,a5
80002648:	9d5fe0ef          	jal	ra,8000101c <HW_get_32bit_reg>
8000264c:	00050793          	mv	a5,a0
80002650:	0ff7f793          	andi	a5,a5,255
80002654:	00f48023          	sb	a5,0(s1)
					++rx_idx;
80002658:	fea45783          	lhu	a5,-22(s0)
8000265c:	00178793          	addi	a5,a5,1
80002660:	fef41523          	sh	a5,-22(s0)
		            ++transfer_idx;
80002664:	fee45783          	lhu	a5,-18(s0)
80002668:	00178793          	addi	a5,a5,1
8000266c:	fef41723          	sh	a5,-18(s0)
		    while( transfer_idx <= transfer_size )
80002670:	fee45703          	lhu	a4,-18(s0)
80002674:	fe442783          	lw	a5,-28(s0)
80002678:	f8e7f8e3          	bleu	a4,a5,80002608 <SPI_transfer_block+0x53c>
		        }
		    }
        }
    }
}
8000267c:	00000013          	nop
80002680:	02c12083          	lw	ra,44(sp)
80002684:	02812403          	lw	s0,40(sp)
80002688:	02412483          	lw	s1,36(sp)
8000268c:	03010113          	addi	sp,sp,48
80002690:	00008067          	ret

Disassembly of section .text.SPI_set_frame_rx_handler:

80002694 <SPI_set_frame_rx_handler>:
void SPI_set_frame_rx_handler
(
    spi_instance_t * this_spi,
    spi_frame_rx_handler_t rx_handler
)
{
80002694:	fe010113          	addi	sp,sp,-32
80002698:	00112e23          	sw	ra,28(sp)
8000269c:	00812c23          	sw	s0,24(sp)
800026a0:	02010413          	addi	s0,sp,32
800026a4:	fea42623          	sw	a0,-20(s0)
800026a8:	feb42423          	sw	a1,-24(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if(NULL_INSTANCE != this_spi)
800026ac:	fec42783          	lw	a5,-20(s0)
800026b0:	16078863          	beqz	a5,80002820 <SPI_set_frame_rx_handler+0x18c>
    {
        /* This function is only intended to be used with an SPI slave. */
        if(DISABLE == HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER))
800026b4:	fec42783          	lw	a5,-20(s0)
800026b8:	0007a783          	lw	a5,0(a5)
800026bc:	00200613          	li	a2,2
800026c0:	00100593          	li	a1,1
800026c4:	00078513          	mv	a0,a5
800026c8:	cc9fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
800026cc:	00050793          	mv	a5,a0
800026d0:	14079863          	bnez	a5,80002820 <SPI_set_frame_rx_handler+0x18c>
        {
			/* Disable the Core SPI while we configure */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
800026d4:	fec42783          	lw	a5,-20(s0)
800026d8:	0007a783          	lw	a5,0(a5)
800026dc:	00000693          	li	a3,0
800026e0:	00100613          	li	a2,1
800026e4:	00000593          	li	a1,0
800026e8:	00078513          	mv	a0,a5
800026ec:	c15fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

	        /* Clear all interrupts */
            HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
800026f0:	fec42783          	lw	a5,-20(s0)
800026f4:	0007a783          	lw	a5,0(a5)
800026f8:	00478793          	addi	a5,a5,4
800026fc:	0ff00593          	li	a1,255
80002700:	00078513          	mv	a0,a5
80002704:	b8dfe0ef          	jal	ra,80001290 <HW_set_8bit_reg>

            /* Disable SSEND and CMD interrupts as we are not doing block transfers */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTSSEND, DISABLE );
80002708:	fec42783          	lw	a5,-20(s0)
8000270c:	0007a783          	lw	a5,0(a5)
80002710:	01878793          	addi	a5,a5,24
80002714:	00000693          	li	a3,0
80002718:	02000613          	li	a2,32
8000271c:	00500593          	li	a1,5
80002720:	00078513          	mv	a0,a5
80002724:	bddfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD,   DISABLE );
80002728:	fec42783          	lw	a5,-20(s0)
8000272c:	0007a783          	lw	a5,0(a5)
80002730:	01878793          	addi	a5,a5,24
80002734:	00000693          	li	a3,0
80002738:	01000613          	li	a2,16
8000273c:	00400593          	li	a1,4
80002740:	00078513          	mv	a0,a5
80002744:	bbdfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

        	/* Disable block Rx handler as they are mutually exclusive. */
            this_spi->block_rx_handler = 0U;
80002748:	fec42783          	lw	a5,-20(s0)
8000274c:	0407a023          	sw	zero,64(a5)

            /* Keep a copy of the pointer to the Rx handler function. */
            this_spi->frame_rx_handler = rx_handler;
80002750:	fec42783          	lw	a5,-20(s0)
80002754:	fe842703          	lw	a4,-24(s0)
80002758:	02e7aa23          	sw	a4,52(a5)

            if( SPI_SLAVE_XFER_FRAME != this_spi->slave_xfer_mode )
8000275c:	fec42783          	lw	a5,-20(s0)
80002760:	0487a703          	lw	a4,72(a5)
80002764:	00200793          	li	a5,2
80002768:	02f70063          	beq	a4,a5,80002788 <SPI_set_frame_rx_handler+0xf4>
            	 * Either just coming from init or were previously in block mode
            	 * so no tx frame handler is set at this point in time...
            	 *
            	 * Don't allow TXDONE interrupts.
            	 */
                HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTTXDONE, DISABLE );
8000276c:	fec42783          	lw	a5,-20(s0)
80002770:	0007a783          	lw	a5,0(a5)
80002774:	00000693          	li	a3,0
80002778:	00800613          	li	a2,8
8000277c:	00300593          	li	a1,3
80002780:	00078513          	mv	a0,a5
80002784:	b7dfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            }

    		/* Flush the receive and transmit FIFOs*/
            HAL_set_8bit_reg(this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK);
80002788:	fec42783          	lw	a5,-20(s0)
8000278c:	0007a783          	lw	a5,0(a5)
80002790:	01c78793          	addi	a5,a5,28
80002794:	00300593          	li	a1,3
80002798:	00078513          	mv	a0,a5
8000279c:	af5fe0ef          	jal	ra,80001290 <HW_set_8bit_reg>

            /* Enable Rx and FIFO error interrupts */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTRXOVFLOW, ENABLE );
800027a0:	fec42783          	lw	a5,-20(s0)
800027a4:	0007a783          	lw	a5,0(a5)
800027a8:	00100693          	li	a3,1
800027ac:	01000613          	li	a2,16
800027b0:	00400593          	li	a1,4
800027b4:	00078513          	mv	a0,a5
800027b8:	b49fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTTXURUN,   ENABLE );
800027bc:	fec42783          	lw	a5,-20(s0)
800027c0:	0007a783          	lw	a5,0(a5)
800027c4:	00100693          	li	a3,1
800027c8:	02000613          	li	a2,32
800027cc:	00500593          	li	a1,5
800027d0:	00078513          	mv	a0,a5
800027d4:	b2dfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTRXDATA,   ENABLE );
800027d8:	fec42783          	lw	a5,-20(s0)
800027dc:	0007a783          	lw	a5,0(a5)
800027e0:	01878793          	addi	a5,a5,24
800027e4:	00100693          	li	a3,1
800027e8:	04000613          	li	a2,64
800027ec:	00600593          	li	a1,6
800027f0:	00078513          	mv	a0,a5
800027f4:	b0dfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

            /* Make sure correct mode is selected */
            this_spi->slave_xfer_mode = SPI_SLAVE_XFER_FRAME;
800027f8:	fec42783          	lw	a5,-20(s0)
800027fc:	00200713          	li	a4,2
80002800:	04e7a423          	sw	a4,72(a5)

			/* Finally re-enable the CoreSPI */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
80002804:	fec42783          	lw	a5,-20(s0)
80002808:	0007a783          	lw	a5,0(a5)
8000280c:	00100693          	li	a3,1
80002810:	00100613          	li	a2,1
80002814:	00000593          	li	a1,0
80002818:	00078513          	mv	a0,a5
8000281c:	ae5fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        }
    }
}
80002820:	00000013          	nop
80002824:	01c12083          	lw	ra,28(sp)
80002828:	01812403          	lw	s0,24(sp)
8000282c:	02010113          	addi	sp,sp,32
80002830:	00008067          	ret

Disassembly of section .text.SPI_set_slave_tx_frame:

80002834 <SPI_set_slave_tx_frame>:
(
    spi_instance_t * this_spi,
    uint32_t frame_value,
    spi_slave_frame_tx_handler_t slave_tx_frame_handler
)
{
80002834:	fe010113          	addi	sp,sp,-32
80002838:	00112e23          	sw	ra,28(sp)
8000283c:	00812c23          	sw	s0,24(sp)
80002840:	02010413          	addi	s0,sp,32
80002844:	fea42623          	sw	a0,-20(s0)
80002848:	feb42423          	sw	a1,-24(s0)
8000284c:	fec42223          	sw	a2,-28(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
80002850:	fec42783          	lw	a5,-20(s0)
80002854:	16078a63          	beqz	a5,800029c8 <SPI_set_slave_tx_frame+0x194>
    {
        /* This function is only intended to be used with an SPI slave. */
        if( DISABLE == HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
80002858:	fec42783          	lw	a5,-20(s0)
8000285c:	0007a783          	lw	a5,0(a5)
80002860:	00200613          	li	a2,2
80002864:	00100593          	li	a1,1
80002868:	00078513          	mv	a0,a5
8000286c:	b25fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002870:	00050793          	mv	a5,a0
80002874:	14079a63          	bnez	a5,800029c8 <SPI_set_slave_tx_frame+0x194>
        {
			/* Disable the Core SPI while we configure */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80002878:	fec42783          	lw	a5,-20(s0)
8000287c:	0007a783          	lw	a5,0(a5)
80002880:	00000693          	li	a3,0
80002884:	00100613          	li	a2,1
80002888:	00000593          	li	a1,0
8000288c:	00078513          	mv	a0,a5
80002890:	a71fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

            /* Clear all interrupts */
            HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
80002894:	fec42783          	lw	a5,-20(s0)
80002898:	0007a783          	lw	a5,0(a5)
8000289c:	00478793          	addi	a5,a5,4
800028a0:	0ff00593          	li	a1,255
800028a4:	00078513          	mv	a0,a5
800028a8:	9e9fe0ef          	jal	ra,80001290 <HW_set_8bit_reg>

            /* Disable SSEND and CMD interrupts as we are not doing block transfers */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTSSEND, DISABLE );
800028ac:	fec42783          	lw	a5,-20(s0)
800028b0:	0007a783          	lw	a5,0(a5)
800028b4:	01878793          	addi	a5,a5,24
800028b8:	00000693          	li	a3,0
800028bc:	02000613          	li	a2,32
800028c0:	00500593          	li	a1,5
800028c4:	00078513          	mv	a0,a5
800028c8:	a39fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD,   DISABLE );
800028cc:	fec42783          	lw	a5,-20(s0)
800028d0:	0007a783          	lw	a5,0(a5)
800028d4:	01878793          	addi	a5,a5,24
800028d8:	00000693          	li	a3,0
800028dc:	01000613          	li	a2,16
800028e0:	00400593          	li	a1,4
800028e4:	00078513          	mv	a0,a5
800028e8:	a19fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

            if( SPI_SLAVE_XFER_FRAME != this_spi->slave_xfer_mode )
800028ec:	fec42783          	lw	a5,-20(s0)
800028f0:	0487a703          	lw	a4,72(a5)
800028f4:	00200793          	li	a5,2
800028f8:	02f70263          	beq	a4,a5,8000291c <SPI_set_slave_tx_frame+0xe8>
            	 * Either just coming from init or were previously in block mode
            	 * so no rx frame handler is set at this point in time...
            	 *
            	 * Don't allow RXDATA interrupts.
            	 */
                HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTRXDATA, DISABLE );
800028fc:	fec42783          	lw	a5,-20(s0)
80002900:	0007a783          	lw	a5,0(a5)
80002904:	01878793          	addi	a5,a5,24
80002908:	00000693          	li	a3,0
8000290c:	04000613          	li	a2,64
80002910:	00600593          	li	a1,6
80002914:	00078513          	mv	a0,a5
80002918:	9e9fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            }

            /* Disable slave block tx buffer as it is mutually exclusive with frame
             * level handling. */
            this_spi->slave_tx_buffer = NULL_BUFF;
8000291c:	fec42783          	lw	a5,-20(s0)
80002920:	0007a423          	sw	zero,8(a5)
            this_spi->slave_tx_size = 0U;
80002924:	fec42783          	lw	a5,-20(s0)
80002928:	0007a623          	sw	zero,12(a5)
            this_spi->slave_tx_idx = 0U;
8000292c:	fec42783          	lw	a5,-20(s0)
80002930:	0007a823          	sw	zero,16(a5)

    		/* Flush the receive and transmit FIFOs*/
            HAL_set_8bit_reg(this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK);
80002934:	fec42783          	lw	a5,-20(s0)
80002938:	0007a783          	lw	a5,0(a5)
8000293c:	01c78793          	addi	a5,a5,28
80002940:	00300593          	li	a1,3
80002944:	00078513          	mv	a0,a5
80002948:	949fe0ef          	jal	ra,80001290 <HW_set_8bit_reg>

            /* Assign the slave frame update handler - NULL_SLAVE_TX_UPDATE_HANDLER for none */
            this_spi->slave_tx_frame_handler = slave_tx_frame_handler;
8000294c:	fec42783          	lw	a5,-20(s0)
80002950:	fe442703          	lw	a4,-28(s0)
80002954:	02e7ae23          	sw	a4,60(a5)

            /* Keep a copy of the slave Tx frame value. */
            this_spi->slave_tx_frame = frame_value;
80002958:	fec42783          	lw	a5,-20(s0)
8000295c:	fe842703          	lw	a4,-24(s0)
80002960:	02e7ac23          	sw	a4,56(a5)

            /* Load one frame into Tx data register. */
            HAL_set_32bit_reg( this_spi->base_addr, TXLAST, this_spi->slave_tx_frame );
80002964:	fec42783          	lw	a5,-20(s0)
80002968:	0007a783          	lw	a5,0(a5)
8000296c:	02878713          	addi	a4,a5,40
80002970:	fec42783          	lw	a5,-20(s0)
80002974:	0387a783          	lw	a5,56(a5)
80002978:	00078593          	mv	a1,a5
8000297c:	00070513          	mv	a0,a4
80002980:	e64fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>

            /* Enable Tx Done interrupt in order to reload the slave Tx frame after each
             * time it has been sent. */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTTXDONE, ENABLE );
80002984:	fec42783          	lw	a5,-20(s0)
80002988:	0007a783          	lw	a5,0(a5)
8000298c:	00100693          	li	a3,1
80002990:	00800613          	li	a2,8
80002994:	00300593          	li	a1,3
80002998:	00078513          	mv	a0,a5
8000299c:	965fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

            /* Make sure correct mode is selected */
            this_spi->slave_xfer_mode = SPI_SLAVE_XFER_FRAME;
800029a0:	fec42783          	lw	a5,-20(s0)
800029a4:	00200713          	li	a4,2
800029a8:	04e7a423          	sw	a4,72(a5)

            /* Ready to go so enable CoreSPI */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
800029ac:	fec42783          	lw	a5,-20(s0)
800029b0:	0007a783          	lw	a5,0(a5)
800029b4:	00100693          	li	a3,1
800029b8:	00100613          	li	a2,1
800029bc:	00000593          	li	a1,0
800029c0:	00078513          	mv	a0,a5
800029c4:	93dfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        }
    }
}
800029c8:	00000013          	nop
800029cc:	01c12083          	lw	ra,28(sp)
800029d0:	01812403          	lw	s0,24(sp)
800029d4:	02010113          	addi	sp,sp,32
800029d8:	00008067          	ret

Disassembly of section .text.SPI_set_slave_block_buffers:

800029dc <SPI_set_slave_block_buffers>:
    uint32_t tx_buff_size,
    uint8_t * rx_buffer,
    uint32_t rx_buff_size,
    spi_block_rx_handler_t block_rx_handler
)
{
800029dc:	fd010113          	addi	sp,sp,-48
800029e0:	02112623          	sw	ra,44(sp)
800029e4:	02812423          	sw	s0,40(sp)
800029e8:	03010413          	addi	s0,sp,48
800029ec:	fea42623          	sw	a0,-20(s0)
800029f0:	feb42423          	sw	a1,-24(s0)
800029f4:	fec42223          	sw	a2,-28(s0)
800029f8:	fed42023          	sw	a3,-32(s0)
800029fc:	fce42e23          	sw	a4,-36(s0)
80002a00:	fcf42c23          	sw	a5,-40(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
80002a04:	fec42783          	lw	a5,-20(s0)
80002a08:	22078c63          	beqz	a5,80002c40 <SPI_set_slave_block_buffers+0x264>
    {
        /* This function is only intended to be used with an SPI slave. */
        if( DISABLE == HAL_get_8bit_reg_field(this_spi->base_addr, CTRL1_MASTER ) )
80002a0c:	fec42783          	lw	a5,-20(s0)
80002a10:	0007a783          	lw	a5,0(a5)
80002a14:	00200613          	li	a2,2
80002a18:	00100593          	li	a1,1
80002a1c:	00078513          	mv	a0,a5
80002a20:	971fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002a24:	00050793          	mv	a5,a0
80002a28:	20079c63          	bnez	a5,80002c40 <SPI_set_slave_block_buffers+0x264>
        {
			/* Disable the Core SPI while we configure */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80002a2c:	fec42783          	lw	a5,-20(s0)
80002a30:	0007a783          	lw	a5,0(a5)
80002a34:	00000693          	li	a3,0
80002a38:	00100613          	li	a2,1
80002a3c:	00000593          	li	a1,0
80002a40:	00078513          	mv	a0,a5
80002a44:	8bdfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

	        /* Make sure correct mode is selected */
            this_spi->slave_xfer_mode = SPI_SLAVE_XFER_BLOCK;
80002a48:	fec42783          	lw	a5,-20(s0)
80002a4c:	00100713          	li	a4,1
80002a50:	04e7a423          	sw	a4,72(a5)
            /*
             * No command handler should be setup at this stage so fake this
             * to ensure 0 padding works.
             */
            this_spi->cmd_done = 1u;
80002a54:	fec42783          	lw	a5,-20(s0)
80002a58:	00100713          	li	a4,1
80002a5c:	02e7a223          	sw	a4,36(a5)

            /* Disable frame handlers as they are mutually exclusive with block Rx handler. */
            this_spi->frame_rx_handler = NULL_FRAME_HANDLER;
80002a60:	fec42783          	lw	a5,-20(s0)
80002a64:	0207aa23          	sw	zero,52(a5)
            this_spi->slave_tx_frame_handler = NULL_SLAVE_TX_UPDATE_HANDLER;
80002a68:	fec42783          	lw	a5,-20(s0)
80002a6c:	0207ae23          	sw	zero,60(a5)

            /* Keep a copy of the pointer to the block Rx handler function. */
            this_spi->block_rx_handler = block_rx_handler;
80002a70:	fec42783          	lw	a5,-20(s0)
80002a74:	fd842703          	lw	a4,-40(s0)
80002a78:	04e7a023          	sw	a4,64(a5)

            /* Assign slave receive buffer */
            this_spi->slave_rx_buffer = rx_buffer;
80002a7c:	fec42783          	lw	a5,-20(s0)
80002a80:	fe042703          	lw	a4,-32(s0)
80002a84:	02e7a423          	sw	a4,40(a5)
            this_spi->slave_rx_size = rx_buff_size;
80002a88:	fec42783          	lw	a5,-20(s0)
80002a8c:	fdc42703          	lw	a4,-36(s0)
80002a90:	02e7a623          	sw	a4,44(a5)
            this_spi->slave_rx_idx = 0U;
80002a94:	fec42783          	lw	a5,-20(s0)
80002a98:	0207a823          	sw	zero,48(a5)

            /* Assign slave transmit buffer*/
            this_spi->slave_tx_buffer = tx_buffer;
80002a9c:	fec42783          	lw	a5,-20(s0)
80002aa0:	fe842703          	lw	a4,-24(s0)
80002aa4:	00e7a423          	sw	a4,8(a5)
            this_spi->slave_tx_size = tx_buff_size;
80002aa8:	fec42783          	lw	a5,-20(s0)
80002aac:	fe442703          	lw	a4,-28(s0)
80002ab0:	00e7a623          	sw	a4,12(a5)
            this_spi->slave_tx_idx = 0U;
80002ab4:	fec42783          	lw	a5,-20(s0)
80002ab8:	0007a823          	sw	zero,16(a5)

    		/* Flush the receive and transmit FIFOs */
            HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80002abc:	fec42783          	lw	a5,-20(s0)
80002ac0:	0007a783          	lw	a5,0(a5)
80002ac4:	01c78793          	addi	a5,a5,28
80002ac8:	00300593          	li	a1,3
80002acc:	00078513          	mv	a0,a5
80002ad0:	fc0fe0ef          	jal	ra,80001290 <HW_set_8bit_reg>

            /* Clear all interrupts */
            HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
80002ad4:	fec42783          	lw	a5,-20(s0)
80002ad8:	0007a783          	lw	a5,0(a5)
80002adc:	00478793          	addi	a5,a5,4
80002ae0:	0ff00593          	li	a1,255
80002ae4:	00078513          	mv	a0,a5
80002ae8:	fa8fe0ef          	jal	ra,80001290 <HW_set_8bit_reg>

            /* Preload the transmit FIFO. */
            while( !(HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_TXFULL)) &&
80002aec:	0480006f          	j	80002b34 <SPI_set_slave_block_buffers+0x158>
                     ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) )
            {
                HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->slave_tx_buffer[this_spi->slave_tx_idx] );
80002af0:	fec42783          	lw	a5,-20(s0)
80002af4:	0007a783          	lw	a5,0(a5)
80002af8:	00c78693          	addi	a3,a5,12
80002afc:	fec42783          	lw	a5,-20(s0)
80002b00:	0087a703          	lw	a4,8(a5)
80002b04:	fec42783          	lw	a5,-20(s0)
80002b08:	0107a783          	lw	a5,16(a5)
80002b0c:	00f707b3          	add	a5,a4,a5
80002b10:	0007c783          	lbu	a5,0(a5)
80002b14:	00078593          	mv	a1,a5
80002b18:	00068513          	mv	a0,a3
80002b1c:	cc8fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
                ++this_spi->slave_tx_idx;
80002b20:	fec42783          	lw	a5,-20(s0)
80002b24:	0107a783          	lw	a5,16(a5)
80002b28:	00178713          	addi	a4,a5,1
80002b2c:	fec42783          	lw	a5,-20(s0)
80002b30:	00e7a823          	sw	a4,16(a5)
            while( !(HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_TXFULL)) &&
80002b34:	fec42783          	lw	a5,-20(s0)
80002b38:	0007a783          	lw	a5,0(a5)
80002b3c:	02078793          	addi	a5,a5,32
80002b40:	00800613          	li	a2,8
80002b44:	00300593          	li	a1,3
80002b48:	00078513          	mv	a0,a5
80002b4c:	845fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002b50:	00050793          	mv	a5,a0
80002b54:	00079c63          	bnez	a5,80002b6c <SPI_set_slave_block_buffers+0x190>
                     ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) )
80002b58:	fec42783          	lw	a5,-20(s0)
80002b5c:	0107a703          	lw	a4,16(a5)
80002b60:	fec42783          	lw	a5,-20(s0)
80002b64:	00c7a783          	lw	a5,12(a5)
            while( !(HAL_get_8bit_reg_field(this_spi->base_addr, STATUS_TXFULL)) &&
80002b68:	f8f764e3          	bltu	a4,a5,80002af0 <SPI_set_slave_block_buffers+0x114>
            }
            /*
             * Disable TXDATA interrupt as we will look after transmission in rx handling
             * because we know that once we have read a frame it is safe to send another one.
             */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTTXDATA,  DISABLE );
80002b6c:	fec42783          	lw	a5,-20(s0)
80002b70:	0007a783          	lw	a5,0(a5)
80002b74:	01878793          	addi	a5,a5,24
80002b78:	00000693          	li	a3,0
80002b7c:	08000613          	li	a2,128
80002b80:	00700593          	li	a1,7
80002b84:	00078513          	mv	a0,a5
80002b88:	f78fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

            /* Enable Rx, FIFO error  and SSEND interrupts */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTRXOVFLOW, ENABLE );
80002b8c:	fec42783          	lw	a5,-20(s0)
80002b90:	0007a783          	lw	a5,0(a5)
80002b94:	00100693          	li	a3,1
80002b98:	01000613          	li	a2,16
80002b9c:	00400593          	li	a1,4
80002ba0:	00078513          	mv	a0,a5
80002ba4:	f5cfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_INTTXURUN,   ENABLE );
80002ba8:	fec42783          	lw	a5,-20(s0)
80002bac:	0007a783          	lw	a5,0(a5)
80002bb0:	00100693          	li	a3,1
80002bb4:	02000613          	li	a2,32
80002bb8:	00500593          	li	a1,5
80002bbc:	00078513          	mv	a0,a5
80002bc0:	f40fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTRXDATA,   ENABLE );
80002bc4:	fec42783          	lw	a5,-20(s0)
80002bc8:	0007a783          	lw	a5,0(a5)
80002bcc:	01878793          	addi	a5,a5,24
80002bd0:	00100693          	li	a3,1
80002bd4:	04000613          	li	a2,64
80002bd8:	00600593          	li	a1,6
80002bdc:	00078513          	mv	a0,a5
80002be0:	f20fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTSSEND,    ENABLE );
80002be4:	fec42783          	lw	a5,-20(s0)
80002be8:	0007a783          	lw	a5,0(a5)
80002bec:	01878793          	addi	a5,a5,24
80002bf0:	00100693          	li	a3,1
80002bf4:	02000613          	li	a2,32
80002bf8:	00500593          	li	a1,5
80002bfc:	00078513          	mv	a0,a5
80002c00:	f00fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

            /* Disable command handler until it is set explicitly */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD,      DISABLE );
80002c04:	fec42783          	lw	a5,-20(s0)
80002c08:	0007a783          	lw	a5,0(a5)
80002c0c:	01878793          	addi	a5,a5,24
80002c10:	00000693          	li	a3,0
80002c14:	01000613          	li	a2,16
80002c18:	00400593          	li	a1,4
80002c1c:	00078513          	mv	a0,a5
80002c20:	ee0fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

            /* Now enable the CoreSPI */
	        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
80002c24:	fec42783          	lw	a5,-20(s0)
80002c28:	0007a783          	lw	a5,0(a5)
80002c2c:	00100693          	li	a3,1
80002c30:	00100613          	li	a2,1
80002c34:	00000593          	li	a1,0
80002c38:	00078513          	mv	a0,a5
80002c3c:	ec4fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        }
    }
}
80002c40:	00000013          	nop
80002c44:	02c12083          	lw	ra,44(sp)
80002c48:	02812403          	lw	s0,40(sp)
80002c4c:	03010113          	addi	sp,sp,48
80002c50:	00008067          	ret

Disassembly of section .text.SPI_set_cmd_handler:

80002c54 <SPI_set_cmd_handler>:
(
    spi_instance_t * this_spi,
    spi_block_rx_handler_t cmd_handler,
    uint32_t cmd_size
)
{
80002c54:	fd010113          	addi	sp,sp,-48
80002c58:	02112623          	sw	ra,44(sp)
80002c5c:	02812423          	sw	s0,40(sp)
80002c60:	03010413          	addi	s0,sp,48
80002c64:	fca42e23          	sw	a0,-36(s0)
80002c68:	fcb42c23          	sw	a1,-40(s0)
80002c6c:	fcc42a23          	sw	a2,-44(s0)
    uint32_t ctrl2 = 0u;
80002c70:	fe042623          	sw	zero,-20(s0)

    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( NULL_SLAVE_CMD_HANDLER != cmd_handler );
    HAL_ASSERT( 0u < cmd_size );

    if( ( NULL_INSTANCE != this_spi ) && ( 0u < cmd_size ) &&
80002c74:	fdc42783          	lw	a5,-36(s0)
80002c78:	0a078c63          	beqz	a5,80002d30 <SPI_set_cmd_handler+0xdc>
80002c7c:	fd442783          	lw	a5,-44(s0)
80002c80:	0a078863          	beqz	a5,80002d30 <SPI_set_cmd_handler+0xdc>
80002c84:	fd842783          	lw	a5,-40(s0)
80002c88:	0a078463          	beqz	a5,80002d30 <SPI_set_cmd_handler+0xdc>
        ( NULL_SLAVE_CMD_HANDLER != cmd_handler ) )
    {
		/* Disable the Core SPI while we configure */
        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80002c8c:	fdc42783          	lw	a5,-36(s0)
80002c90:	0007a783          	lw	a5,0(a5)
80002c94:	00000693          	li	a3,0
80002c98:	00100613          	li	a2,1
80002c9c:	00000593          	li	a1,0
80002ca0:	00078513          	mv	a0,a5
80002ca4:	e5cfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
         * block mode was configured.
         *
         * Clear this flag so zero padding is disabled until command response
         * has been taken care of.
         */
        this_spi->cmd_done = 0u;
80002ca8:	fdc42783          	lw	a5,-36(s0)
80002cac:	0207a223          	sw	zero,36(a5)

        /* Assign user handler for Command received interrupt */
        this_spi->cmd_handler = cmd_handler;
80002cb0:	fdc42783          	lw	a5,-36(s0)
80002cb4:	fd842703          	lw	a4,-40(s0)
80002cb8:	02e7a023          	sw	a4,32(a5)

        /* Configure the command size and Enable Command received interrupt */
        ctrl2  = HAL_get_8bit_reg( this_spi->base_addr, CTRL2 );
80002cbc:	fdc42783          	lw	a5,-36(s0)
80002cc0:	0007a783          	lw	a5,0(a5)
80002cc4:	01878793          	addi	a5,a5,24
80002cc8:	00078513          	mv	a0,a5
80002ccc:	e00fe0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80002cd0:	00050793          	mv	a5,a0
80002cd4:	fef42623          	sw	a5,-20(s0)

        /* First clear the count field then insert count and int enables */
        ctrl2 &= ~(uint32_t)CTRL2_CMDSIZE_MASK;
80002cd8:	fec42783          	lw	a5,-20(s0)
80002cdc:	ff87f793          	andi	a5,a5,-8
80002ce0:	fef42623          	sw	a5,-20(s0)
        ctrl2 |= (uint32_t)((cmd_size & CTRL2_CMDSIZE_MASK) | CTRL2_INTCMD_MASK | CTRL2_INTRXDATA_MASK);
80002ce4:	fd442783          	lw	a5,-44(s0)
80002ce8:	0077f713          	andi	a4,a5,7
80002cec:	fec42783          	lw	a5,-20(s0)
80002cf0:	00f767b3          	or	a5,a4,a5
80002cf4:	0507e793          	ori	a5,a5,80
80002cf8:	fef42623          	sw	a5,-20(s0)
        HAL_set_8bit_reg( this_spi->base_addr, CTRL2, ctrl2 );
80002cfc:	fdc42783          	lw	a5,-36(s0)
80002d00:	0007a783          	lw	a5,0(a5)
80002d04:	01878793          	addi	a5,a5,24
80002d08:	fec42583          	lw	a1,-20(s0)
80002d0c:	00078513          	mv	a0,a5
80002d10:	d80fe0ef          	jal	ra,80001290 <HW_set_8bit_reg>

        /* Now enable the CoreSPI */
        HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
80002d14:	fdc42783          	lw	a5,-36(s0)
80002d18:	0007a783          	lw	a5,0(a5)
80002d1c:	00100693          	li	a3,1
80002d20:	00100613          	li	a2,1
80002d24:	00000593          	li	a1,0
80002d28:	00078513          	mv	a0,a5
80002d2c:	dd4fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
    }
}
80002d30:	00000013          	nop
80002d34:	02c12083          	lw	ra,44(sp)
80002d38:	02812403          	lw	s0,40(sp)
80002d3c:	03010113          	addi	sp,sp,48
80002d40:	00008067          	ret

Disassembly of section .text.SPI_set_cmd_response:

80002d44 <SPI_set_cmd_response>:
(
    spi_instance_t * this_spi,
    const uint8_t * resp_tx_buffer,
    uint32_t resp_buff_size
)
{
80002d44:	fe010113          	addi	sp,sp,-32
80002d48:	00112e23          	sw	ra,28(sp)
80002d4c:	00812c23          	sw	s0,24(sp)
80002d50:	02010413          	addi	s0,sp,32
80002d54:	fea42623          	sw	a0,-20(s0)
80002d58:	feb42423          	sw	a1,-24(s0)
80002d5c:	fec42223          	sw	a2,-28(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );
    HAL_ASSERT( NULL_BUFF != resp_tx_buffer );
    HAL_ASSERT( 0u < resp_buff_size );

    if( ( NULL_INSTANCE != this_spi ) && ( 0u < resp_buff_size ) &&
80002d60:	fec42783          	lw	a5,-20(s0)
80002d64:	02078e63          	beqz	a5,80002da0 <SPI_set_cmd_response+0x5c>
80002d68:	fe442783          	lw	a5,-28(s0)
80002d6c:	02078a63          	beqz	a5,80002da0 <SPI_set_cmd_response+0x5c>
80002d70:	fe842783          	lw	a5,-24(s0)
80002d74:	02078663          	beqz	a5,80002da0 <SPI_set_cmd_response+0x5c>
        ( NULL_BUFF != resp_tx_buffer ) )
    {
        this_spi->resp_tx_buffer = resp_tx_buffer;
80002d78:	fec42783          	lw	a5,-20(s0)
80002d7c:	fe842703          	lw	a4,-24(s0)
80002d80:	00e7aa23          	sw	a4,20(a5)
        this_spi->resp_buff_size = resp_buff_size;
80002d84:	fec42783          	lw	a5,-20(s0)
80002d88:	fe442703          	lw	a4,-28(s0)
80002d8c:	00e7ac23          	sw	a4,24(a5)
        this_spi->resp_buff_tx_idx = 0u;
80002d90:	fec42783          	lw	a5,-20(s0)
80002d94:	0007ae23          	sw	zero,28(a5)

        fill_slave_tx_fifo(this_spi);
80002d98:	fec42503          	lw	a0,-20(s0)
80002d9c:	798000ef          	jal	ra,80003534 <fill_slave_tx_fifo>
    }
}
80002da0:	00000013          	nop
80002da4:	01c12083          	lw	ra,28(sp)
80002da8:	01812403          	lw	s0,24(sp)
80002dac:	02010113          	addi	sp,sp,32
80002db0:	00008067          	ret

Disassembly of section .text.SPI_enable:

80002db4 <SPI_enable>:
 */
void SPI_enable
(
    spi_instance_t * this_spi
)
{
80002db4:	fe010113          	addi	sp,sp,-32
80002db8:	00112e23          	sw	ra,28(sp)
80002dbc:	00812c23          	sw	s0,24(sp)
80002dc0:	02010413          	addi	s0,sp,32
80002dc4:	fea42623          	sw	a0,-20(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
80002dc8:	fec42783          	lw	a5,-20(s0)
80002dcc:	02078063          	beqz	a5,80002dec <SPI_enable+0x38>
    {
		/* Disable the Core SPI while we configure */
		HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
80002dd0:	fec42783          	lw	a5,-20(s0)
80002dd4:	0007a783          	lw	a5,0(a5)
80002dd8:	00100693          	li	a3,1
80002ddc:	00100613          	li	a2,1
80002de0:	00000593          	li	a1,0
80002de4:	00078513          	mv	a0,a5
80002de8:	d18fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
    }
}
80002dec:	00000013          	nop
80002df0:	01c12083          	lw	ra,28(sp)
80002df4:	01812403          	lw	s0,24(sp)
80002df8:	02010113          	addi	sp,sp,32
80002dfc:	00008067          	ret

Disassembly of section .text.SPI_disable:

80002e00 <SPI_disable>:
 */
void SPI_disable
(
    spi_instance_t * this_spi
)
{
80002e00:	fe010113          	addi	sp,sp,-32
80002e04:	00112e23          	sw	ra,28(sp)
80002e08:	00812c23          	sw	s0,24(sp)
80002e0c:	02010413          	addi	s0,sp,32
80002e10:	fea42623          	sw	a0,-20(s0)
    HAL_ASSERT( NULL_INSTANCE != this_spi );

    if( NULL_INSTANCE != this_spi )
80002e14:	fec42783          	lw	a5,-20(s0)
80002e18:	02078063          	beqz	a5,80002e38 <SPI_disable+0x38>
    {
		/* Disable the Core SPI while we configure */
		HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
80002e1c:	fec42783          	lw	a5,-20(s0)
80002e20:	0007a783          	lw	a5,0(a5)
80002e24:	00000693          	li	a3,0
80002e28:	00100613          	li	a2,1
80002e2c:	00000593          	li	a1,0
80002e30:	00078513          	mv	a0,a5
80002e34:	cccfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
    }
}
80002e38:	00000013          	nop
80002e3c:	01c12083          	lw	ra,28(sp)
80002e40:	01812403          	lw	s0,24(sp)
80002e44:	02010113          	addi	sp,sp,32
80002e48:	00008067          	ret

Disassembly of section .text.SPI_isr:

80002e4c <SPI_isr>:
 */
void SPI_isr
(
    spi_instance_t * this_spi
)
{
80002e4c:	fd010113          	addi	sp,sp,-48
80002e50:	02112623          	sw	ra,44(sp)
80002e54:	02812423          	sw	s0,40(sp)
80002e58:	03010413          	addi	s0,sp,48
80002e5c:	fca42e23          	sw	a0,-36(s0)
/*
 * The assert and the NULL check here can be commented out to reduce the interrupt
 * latency once you are sure the interrupt vector code is correct.
 */
    HAL_ASSERT( NULL_INSTANCE != this_spi );
    if( NULL_INSTANCE != this_spi )
80002e60:	fdc42783          	lw	a5,-36(s0)
80002e64:	6a078e63          	beqz	a5,80003520 <SPI_isr+0x6d4>
    {
        /* Handle receive. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_RXDATA ) )
80002e68:	fdc42783          	lw	a5,-36(s0)
80002e6c:	0007a783          	lw	a5,0(a5)
80002e70:	01078793          	addi	a5,a5,16
80002e74:	04000613          	li	a2,64
80002e78:	00600593          	li	a1,6
80002e7c:	00078513          	mv	a0,a5
80002e80:	d10fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002e84:	00050793          	mv	a5,a0
80002e88:	00078713          	mv	a4,a5
80002e8c:	00100793          	li	a5,1
80002e90:	30f71063          	bne	a4,a5,80003190 <SPI_isr+0x344>
             *
             * Note the order of the checks here will effect interrupt latency and
             * for critical timing the mode you are using most often should probably be
             * be the first checked.
             */
            if( SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode ) /* Block handling mode. */
80002e94:	fdc42783          	lw	a5,-36(s0)
80002e98:	0487a703          	lw	a4,72(a5)
80002e9c:	00100793          	li	a5,1
80002ea0:	24f71463          	bne	a4,a5,800030e8 <SPI_isr+0x29c>
            {
                while( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80002ea4:	0640006f          	j	80002f08 <SPI_isr+0xbc>
                {
                	/* Read irrespective to clear the RX IRQ */
                	rx_frame = HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80002ea8:	fdc42783          	lw	a5,-36(s0)
80002eac:	0007a783          	lw	a5,0(a5)
80002eb0:	00878793          	addi	a5,a5,8
80002eb4:	00078513          	mv	a0,a5
80002eb8:	964fe0ef          	jal	ra,8000101c <HW_get_32bit_reg>
80002ebc:	fea42423          	sw	a0,-24(s0)
                	if( this_spi->slave_rx_idx < this_spi->slave_rx_size )
80002ec0:	fdc42783          	lw	a5,-36(s0)
80002ec4:	0307a703          	lw	a4,48(a5)
80002ec8:	fdc42783          	lw	a5,-36(s0)
80002ecc:	02c7a783          	lw	a5,44(a5)
80002ed0:	02f77263          	bleu	a5,a4,80002ef4 <SPI_isr+0xa8>
        			{
        				this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
80002ed4:	fdc42783          	lw	a5,-36(s0)
80002ed8:	0287a703          	lw	a4,40(a5)
80002edc:	fdc42783          	lw	a5,-36(s0)
80002ee0:	0307a783          	lw	a5,48(a5)
80002ee4:	00f707b3          	add	a5,a4,a5
80002ee8:	fe842703          	lw	a4,-24(s0)
80002eec:	0ff77713          	andi	a4,a4,255
80002ef0:	00e78023          	sb	a4,0(a5)
        			}
        			++this_spi->slave_rx_idx;
80002ef4:	fdc42783          	lw	a5,-36(s0)
80002ef8:	0307a783          	lw	a5,48(a5)
80002efc:	00178713          	addi	a4,a5,1
80002f00:	fdc42783          	lw	a5,-36(s0)
80002f04:	02e7a823          	sw	a4,48(a5)
                while( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80002f08:	fdc42783          	lw	a5,-36(s0)
80002f0c:	0007a783          	lw	a5,0(a5)
80002f10:	02078793          	addi	a5,a5,32
80002f14:	00400613          	li	a2,4
80002f18:	00200593          	li	a1,2
80002f1c:	00078513          	mv	a0,a5
80002f20:	c70fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002f24:	00050793          	mv	a5,a0
80002f28:	f80780e3          	beqz	a5,80002ea8 <SPI_isr+0x5c>
                }
                /*
                 * Now handle updating of tx FIFO to keep the data flowing.
                 * First see if there is anything in slave_tx_buffer to send.
                 */
            	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size )
80002f2c:	0480006f          	j	80002f74 <SPI_isr+0x128>
            	    && ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) ) )
            	{
           			HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->slave_tx_buffer[this_spi->slave_tx_idx] );
80002f30:	fdc42783          	lw	a5,-36(s0)
80002f34:	0007a783          	lw	a5,0(a5)
80002f38:	00c78693          	addi	a3,a5,12
80002f3c:	fdc42783          	lw	a5,-36(s0)
80002f40:	0087a703          	lw	a4,8(a5)
80002f44:	fdc42783          	lw	a5,-36(s0)
80002f48:	0107a783          	lw	a5,16(a5)
80002f4c:	00f707b3          	add	a5,a4,a5
80002f50:	0007c783          	lbu	a5,0(a5)
80002f54:	00078593          	mv	a1,a5
80002f58:	00068513          	mv	a0,a3
80002f5c:	888fe0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
           			++this_spi->slave_tx_idx;
80002f60:	fdc42783          	lw	a5,-36(s0)
80002f64:	0107a783          	lw	a5,16(a5)
80002f68:	00178713          	addi	a4,a5,1
80002f6c:	fdc42783          	lw	a5,-36(s0)
80002f70:	00e7a823          	sw	a4,16(a5)
            	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size )
80002f74:	fdc42783          	lw	a5,-36(s0)
80002f78:	0107a703          	lw	a4,16(a5)
80002f7c:	fdc42783          	lw	a5,-36(s0)
80002f80:	00c7a783          	lw	a5,12(a5)
80002f84:	02f77463          	bleu	a5,a4,80002fac <SPI_isr+0x160>
            	    && ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) ) )
80002f88:	fdc42783          	lw	a5,-36(s0)
80002f8c:	0007a783          	lw	a5,0(a5)
80002f90:	02078793          	addi	a5,a5,32
80002f94:	00800613          	li	a2,8
80002f98:	00300593          	li	a1,3
80002f9c:	00078513          	mv	a0,a5
80002fa0:	bf0fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80002fa4:	00050793          	mv	a5,a0
80002fa8:	f80784e3          	beqz	a5,80002f30 <SPI_isr+0xe4>
           		}
            	/*
            	 * Next see if there is anything in resp_tx_buffer to send.
            	 */
            	if( this_spi->slave_tx_idx >= this_spi->slave_tx_size )
80002fac:	fdc42783          	lw	a5,-36(s0)
80002fb0:	0107a703          	lw	a4,16(a5)
80002fb4:	fdc42783          	lw	a5,-36(s0)
80002fb8:	00c7a783          	lw	a5,12(a5)
80002fbc:	08f76263          	bltu	a4,a5,80003040 <SPI_isr+0x1f4>
            	{
                	while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size )
80002fc0:	0480006f          	j	80003008 <SPI_isr+0x1bc>
                	    && ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) ) )
                	{
               			HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx] );
80002fc4:	fdc42783          	lw	a5,-36(s0)
80002fc8:	0007a783          	lw	a5,0(a5)
80002fcc:	00c78693          	addi	a3,a5,12
80002fd0:	fdc42783          	lw	a5,-36(s0)
80002fd4:	0147a703          	lw	a4,20(a5)
80002fd8:	fdc42783          	lw	a5,-36(s0)
80002fdc:	01c7a783          	lw	a5,28(a5)
80002fe0:	00f707b3          	add	a5,a4,a5
80002fe4:	0007c783          	lbu	a5,0(a5)
80002fe8:	00078593          	mv	a1,a5
80002fec:	00068513          	mv	a0,a3
80002ff0:	ff5fd0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
               			++this_spi->resp_buff_tx_idx;
80002ff4:	fdc42783          	lw	a5,-36(s0)
80002ff8:	01c7a783          	lw	a5,28(a5)
80002ffc:	00178713          	addi	a4,a5,1
80003000:	fdc42783          	lw	a5,-36(s0)
80003004:	00e7ae23          	sw	a4,28(a5)
                	while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size )
80003008:	fdc42783          	lw	a5,-36(s0)
8000300c:	01c7a703          	lw	a4,28(a5)
80003010:	fdc42783          	lw	a5,-36(s0)
80003014:	0187a783          	lw	a5,24(a5)
80003018:	02f77463          	bleu	a5,a4,80003040 <SPI_isr+0x1f4>
                	    && ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) ) )
8000301c:	fdc42783          	lw	a5,-36(s0)
80003020:	0007a783          	lw	a5,0(a5)
80003024:	02078793          	addi	a5,a5,32
80003028:	00800613          	li	a2,8
8000302c:	00300593          	li	a1,3
80003030:	00078513          	mv	a0,a5
80003034:	b5cfe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80003038:	00050793          	mv	a5,a0
8000303c:	f80784e3          	beqz	a5,80002fc4 <SPI_isr+0x178>
                	}
				}
				/*
				 * Lastly, see if we are ready to pad with 0s .
				 */
				if( this_spi->cmd_done && ( this_spi->slave_tx_idx >= this_spi->slave_tx_size ) &&
80003040:	fdc42783          	lw	a5,-36(s0)
80003044:	0247a783          	lw	a5,36(a5)
80003048:	12078463          	beqz	a5,80003170 <SPI_isr+0x324>
8000304c:	fdc42783          	lw	a5,-36(s0)
80003050:	0107a703          	lw	a4,16(a5)
80003054:	fdc42783          	lw	a5,-36(s0)
80003058:	00c7a783          	lw	a5,12(a5)
8000305c:	10f76a63          	bltu	a4,a5,80003170 <SPI_isr+0x324>
				  ( this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size ) )
80003060:	fdc42783          	lw	a5,-36(s0)
80003064:	01c7a703          	lw	a4,28(a5)
80003068:	fdc42783          	lw	a5,-36(s0)
8000306c:	0187a783          	lw	a5,24(a5)
				if( this_spi->cmd_done && ( this_spi->slave_tx_idx >= this_spi->slave_tx_size ) &&
80003070:	10f76063          	bltu	a4,a5,80003170 <SPI_isr+0x324>
				{
	                guard = 1 + ((int32_t)this_spi->fifo_depth / 4);
80003074:	fdc42783          	lw	a5,-36(s0)
80003078:	0447d783          	lhu	a5,68(a5)
8000307c:	0027d793          	srli	a5,a5,0x2
80003080:	01079793          	slli	a5,a5,0x10
80003084:	0107d793          	srli	a5,a5,0x10
80003088:	00178793          	addi	a5,a5,1
8000308c:	fef42623          	sw	a5,-20(s0)
	            	while( ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
80003090:	0280006f          	j	800030b8 <SPI_isr+0x26c>
	            	{
						/*
						 * Pad TX FIFO with 0s for consistent behaviour if the master
						 * tries to transfer more than we expected.
						 */
						HAL_set_32bit_reg(this_spi->base_addr, TXDATA, 0x00u);
80003094:	fdc42783          	lw	a5,-36(s0)
80003098:	0007a783          	lw	a5,0(a5)
8000309c:	00c78793          	addi	a5,a5,12
800030a0:	00000593          	li	a1,0
800030a4:	00078513          	mv	a0,a5
800030a8:	f3dfd0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
						 * We use the guard count to cover the event that we are never
						 * seeing the TX FIFO full because the data is being pulled
						 * out as fast as we can stuff it in. In this case we never spend
						 * more than our allocated time spinning here.
						 */
						guard--;
800030ac:	fec42783          	lw	a5,-20(s0)
800030b0:	fff78793          	addi	a5,a5,-1
800030b4:	fef42623          	sw	a5,-20(s0)
	            	while( ( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
800030b8:	fdc42783          	lw	a5,-36(s0)
800030bc:	0007a783          	lw	a5,0(a5)
800030c0:	02078793          	addi	a5,a5,32
800030c4:	00800613          	li	a2,8
800030c8:	00300593          	li	a1,3
800030cc:	00078513          	mv	a0,a5
800030d0:	ac0fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
800030d4:	00050793          	mv	a5,a0
800030d8:	08079c63          	bnez	a5,80003170 <SPI_isr+0x324>
	            	    && ( 0 != guard ) )
800030dc:	fec42783          	lw	a5,-20(s0)
800030e0:	fa079ae3          	bnez	a5,80003094 <SPI_isr+0x248>
800030e4:	08c0006f          	j	80003170 <SPI_isr+0x324>
            		}
				}
			}
            else if( SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode ) /* Single frame handling mode. */
800030e8:	fdc42783          	lw	a5,-36(s0)
800030ec:	0487a703          	lw	a4,72(a5)
800030f0:	00200793          	li	a5,2
800030f4:	06f71263          	bne	a4,a5,80003158 <SPI_isr+0x30c>
            {
                while( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
800030f8:	0380006f          	j	80003130 <SPI_isr+0x2e4>
                {
                	rx_frame = HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
800030fc:	fdc42783          	lw	a5,-36(s0)
80003100:	0007a783          	lw	a5,0(a5)
80003104:	00878793          	addi	a5,a5,8
80003108:	00078513          	mv	a0,a5
8000310c:	f11fd0ef          	jal	ra,8000101c <HW_get_32bit_reg>
80003110:	fea42423          	sw	a0,-24(s0)
                    if( NULL_FRAME_HANDLER != this_spi->frame_rx_handler )
80003114:	fdc42783          	lw	a5,-36(s0)
80003118:	0347a783          	lw	a5,52(a5)
8000311c:	00078a63          	beqz	a5,80003130 <SPI_isr+0x2e4>
                    {
                    	this_spi->frame_rx_handler( rx_frame );
80003120:	fdc42783          	lw	a5,-36(s0)
80003124:	0347a783          	lw	a5,52(a5)
80003128:	fe842503          	lw	a0,-24(s0)
8000312c:	000780e7          	jalr	a5
                while( 0u == HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80003130:	fdc42783          	lw	a5,-36(s0)
80003134:	0007a783          	lw	a5,0(a5)
80003138:	02078793          	addi	a5,a5,32
8000313c:	00400613          	li	a2,4
80003140:	00200593          	li	a1,2
80003144:	00078513          	mv	a0,a5
80003148:	a48fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
8000314c:	00050793          	mv	a5,a0
80003150:	fa0786e3          	beqz	a5,800030fc <SPI_isr+0x2b0>
80003154:	01c0006f          	j	80003170 <SPI_isr+0x324>
                    }
                }
            }
            else /* Slave transfer mode not set up so discard anything in RX FIFO */
            {
                HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_RXFIFORST_MASK );
80003158:	fdc42783          	lw	a5,-36(s0)
8000315c:	0007a783          	lw	a5,0(a5)
80003160:	01c78793          	addi	a5,a5,28
80003164:	00100593          	li	a1,1
80003168:	00078513          	mv	a0,a5
8000316c:	924fe0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            }

            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_RXDATA, ENABLE );
80003170:	fdc42783          	lw	a5,-36(s0)
80003174:	0007a783          	lw	a5,0(a5)
80003178:	00478793          	addi	a5,a5,4
8000317c:	00100693          	li	a3,1
80003180:	04000613          	li	a2,64
80003184:	00600593          	li	a1,6
80003188:	00078513          	mv	a0,a5
8000318c:	974fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        }

        /* Handle transmit. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_TXDONE ) )
80003190:	fdc42783          	lw	a5,-36(s0)
80003194:	0007a783          	lw	a5,0(a5)
80003198:	01078793          	addi	a5,a5,16
8000319c:	00100613          	li	a2,1
800031a0:	00000593          	li	a1,0
800031a4:	00078513          	mv	a0,a5
800031a8:	9e8fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
800031ac:	00050793          	mv	a5,a0
800031b0:	00078713          	mv	a4,a5
800031b4:	00100793          	li	a5,1
800031b8:	08f71e63          	bne	a4,a5,80003254 <SPI_isr+0x408>
        	 * Note, the driver only currently uses the txdone interrupt when
        	 * in frame transmit mode. In block mode all TX handling is done by the
        	 * receive interrupt handling code as we know that for every frame received
        	 * a frame must be placed in the TX FIFO.
        	 */
            if( SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
800031bc:	fdc42783          	lw	a5,-36(s0)
800031c0:	0487a703          	lw	a4,72(a5)
800031c4:	00200793          	li	a5,2
800031c8:	04f71263          	bne	a4,a5,8000320c <SPI_isr+0x3c0>
            {
                /* Execute the user callback to update the slave_tx_frame */
        	    if( NULL_SLAVE_TX_UPDATE_HANDLER != this_spi->slave_tx_frame_handler )
800031cc:	fdc42783          	lw	a5,-36(s0)
800031d0:	03c7a783          	lw	a5,60(a5)
800031d4:	00078a63          	beqz	a5,800031e8 <SPI_isr+0x39c>
                {
        		    this_spi->slave_tx_frame_handler ( this_spi );
800031d8:	fdc42783          	lw	a5,-36(s0)
800031dc:	03c7a783          	lw	a5,60(a5)
800031e0:	fdc42503          	lw	a0,-36(s0)
800031e4:	000780e7          	jalr	a5
                }

                /* Reload slave tx frame into Tx data register. */
                HAL_set_32bit_reg( this_spi->base_addr, TXLAST, this_spi->slave_tx_frame );
800031e8:	fdc42783          	lw	a5,-36(s0)
800031ec:	0007a783          	lw	a5,0(a5)
800031f0:	02878713          	addi	a4,a5,40
800031f4:	fdc42783          	lw	a5,-36(s0)
800031f8:	0387a783          	lw	a5,56(a5)
800031fc:	00078593          	mv	a1,a5
80003200:	00070513          	mv	a0,a4
80003204:	de1fd0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
80003208:	02c0006f          	j	80003234 <SPI_isr+0x3e8>
            }
            else if( SPI_SLAVE_XFER_BLOCK != this_spi->slave_xfer_mode )
8000320c:	fdc42783          	lw	a5,-36(s0)
80003210:	0487a703          	lw	a4,72(a5)
80003214:	00100793          	li	a5,1
80003218:	00f70e63          	beq	a4,a5,80003234 <SPI_isr+0x3e8>
            {
            	/* Slave transfer mode not set up so discard anything in TX FIFO */
                HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK );
8000321c:	fdc42783          	lw	a5,-36(s0)
80003220:	0007a783          	lw	a5,0(a5)
80003224:	01c78793          	addi	a5,a5,28
80003228:	00200593          	li	a1,2
8000322c:	00078513          	mv	a0,a5
80003230:	860fe0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            else
            {
                /* Nothing to do, no slave mode configured */
            }

            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_TXDONE, ENABLE );
80003234:	fdc42783          	lw	a5,-36(s0)
80003238:	0007a783          	lw	a5,0(a5)
8000323c:	00478793          	addi	a5,a5,4
80003240:	00100693          	li	a3,1
80003244:	00100613          	li	a2,1
80003248:	00000593          	li	a1,0
8000324c:	00078513          	mv	a0,a5
80003250:	8b0fe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        }


        /* Handle receive overflow. */
        if( ENABLE == HAL_get_8bit_reg_field(this_spi->base_addr, INTMASK_RXOVERFLOW))
80003254:	fdc42783          	lw	a5,-36(s0)
80003258:	0007a783          	lw	a5,0(a5)
8000325c:	01078793          	addi	a5,a5,16
80003260:	00400613          	li	a2,4
80003264:	00200593          	li	a1,2
80003268:	00078513          	mv	a0,a5
8000326c:	924fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80003270:	00050793          	mv	a5,a0
80003274:	00078713          	mv	a4,a5
80003278:	00100793          	li	a5,1
8000327c:	02f71e63          	bne	a4,a5,800032b8 <SPI_isr+0x46c>
        {
            HAL_set_8bit_reg(this_spi->base_addr, CMD, CMD_RXFIFORST_MASK);
80003280:	fdc42783          	lw	a5,-36(s0)
80003284:	0007a783          	lw	a5,0(a5)
80003288:	01c78793          	addi	a5,a5,28
8000328c:	00100593          	li	a1,1
80003290:	00078513          	mv	a0,a5
80003294:	ffdfd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg_field(this_spi->base_addr, INTCLR_RXOVERFLOW, ENABLE);
80003298:	fdc42783          	lw	a5,-36(s0)
8000329c:	0007a783          	lw	a5,0(a5)
800032a0:	00478793          	addi	a5,a5,4
800032a4:	00100693          	li	a3,1
800032a8:	00400613          	li	a2,4
800032ac:	00200593          	li	a1,2
800032b0:	00078513          	mv	a0,a5
800032b4:	84cfe0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        }

        /* Handle transmit under run. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_TXUNDERRUN ) )
800032b8:	fdc42783          	lw	a5,-36(s0)
800032bc:	0007a783          	lw	a5,0(a5)
800032c0:	01078793          	addi	a5,a5,16
800032c4:	00800613          	li	a2,8
800032c8:	00300593          	li	a1,3
800032cc:	00078513          	mv	a0,a5
800032d0:	8c0fe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
800032d4:	00050793          	mv	a5,a0
800032d8:	00078713          	mv	a4,a5
800032dc:	00100793          	li	a5,1
800032e0:	02f71e63          	bne	a4,a5,8000331c <SPI_isr+0x4d0>
        {
            HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK );
800032e4:	fdc42783          	lw	a5,-36(s0)
800032e8:	0007a783          	lw	a5,0(a5)
800032ec:	01c78793          	addi	a5,a5,28
800032f0:	00200593          	li	a1,2
800032f4:	00078513          	mv	a0,a5
800032f8:	f99fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_TXUNDERRUN, ENABLE );
800032fc:	fdc42783          	lw	a5,-36(s0)
80003300:	0007a783          	lw	a5,0(a5)
80003304:	00478793          	addi	a5,a5,4
80003308:	00100693          	li	a3,1
8000330c:	00800613          	li	a2,8
80003310:	00300593          	li	a1,3
80003314:	00078513          	mv	a0,a5
80003318:	fe9fd0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        }

        /* Handle command interrupt. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_CMDINT ) )
8000331c:	fdc42783          	lw	a5,-36(s0)
80003320:	0007a783          	lw	a5,0(a5)
80003324:	01078793          	addi	a5,a5,16
80003328:	01000613          	li	a2,16
8000332c:	00400593          	li	a1,4
80003330:	00078513          	mv	a0,a5
80003334:	85cfe0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80003338:	00050793          	mv	a5,a0
8000333c:	00078713          	mv	a4,a5
80003340:	00100793          	li	a5,1
80003344:	08f71463          	bne	a4,a5,800033cc <SPI_isr+0x580>
        {
            read_slave_rx_fifo( this_spi );
80003348:	fdc42503          	lw	a0,-36(s0)
8000334c:	324000ef          	jal	ra,80003670 <read_slave_rx_fifo>

            /*
             * Call the command handler if one exists.
             */
			if( NULL_SLAVE_CMD_HANDLER != this_spi->cmd_handler )
80003350:	fdc42783          	lw	a5,-36(s0)
80003354:	0207a783          	lw	a5,32(a5)
80003358:	02078463          	beqz	a5,80003380 <SPI_isr+0x534>
            {
                this_spi->cmd_handler( this_spi->slave_rx_buffer, this_spi->slave_rx_idx );
8000335c:	fdc42783          	lw	a5,-36(s0)
80003360:	0207a683          	lw	a3,32(a5)
80003364:	fdc42783          	lw	a5,-36(s0)
80003368:	0287a703          	lw	a4,40(a5)
8000336c:	fdc42783          	lw	a5,-36(s0)
80003370:	0307a783          	lw	a5,48(a5)
80003374:	00078593          	mv	a1,a5
80003378:	00070513          	mv	a0,a4
8000337c:	000680e7          	jalr	a3
            }
            this_spi->cmd_done = 1u;
80003380:	fdc42783          	lw	a5,-36(s0)
80003384:	00100713          	li	a4,1
80003388:	02e7a223          	sw	a4,36(a5)
            /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
            HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD, DISABLE );
8000338c:	fdc42783          	lw	a5,-36(s0)
80003390:	0007a783          	lw	a5,0(a5)
80003394:	01878793          	addi	a5,a5,24
80003398:	00000693          	li	a3,0
8000339c:	01000613          	li	a2,16
800033a0:	00400593          	li	a1,4
800033a4:	00078513          	mv	a0,a5
800033a8:	f59fd0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_CMDINT, ENABLE );
800033ac:	fdc42783          	lw	a5,-36(s0)
800033b0:	0007a783          	lw	a5,0(a5)
800033b4:	00478793          	addi	a5,a5,4
800033b8:	00100693          	li	a3,1
800033bc:	01000613          	li	a2,16
800033c0:	00400593          	li	a1,4
800033c4:	00078513          	mv	a0,a5
800033c8:	f39fd0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        }

        /* Handle slave select becoming de-asserted. */
        if( ENABLE == HAL_get_8bit_reg_field( this_spi->base_addr, INTMASK_SSEND) )
800033cc:	fdc42783          	lw	a5,-36(s0)
800033d0:	0007a783          	lw	a5,0(a5)
800033d4:	01078793          	addi	a5,a5,16
800033d8:	02000613          	li	a2,32
800033dc:	00500593          	li	a1,5
800033e0:	00078513          	mv	a0,a5
800033e4:	fadfd0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
800033e8:	00050793          	mv	a5,a0
800033ec:	00078713          	mv	a4,a5
800033f0:	00100793          	li	a5,1
800033f4:	12f71663          	bne	a4,a5,80003520 <SPI_isr+0x6d4>
        {
        	/* Only supposed to do all this if transferring blocks... */
        	if(SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
800033f8:	fdc42783          	lw	a5,-36(s0)
800033fc:	0487a703          	lw	a4,72(a5)
80003400:	00100793          	li	a5,1
80003404:	0ef71e63          	bne	a4,a5,80003500 <SPI_isr+0x6b4>
        	{
				uint32_t rx_size;

				/* Empty any remaining bytes in RX FIFO */
				read_slave_rx_fifo( this_spi );
80003408:	fdc42503          	lw	a0,-36(s0)
8000340c:	264000ef          	jal	ra,80003670 <read_slave_rx_fifo>
				rx_size = this_spi->slave_rx_idx;
80003410:	fdc42783          	lw	a5,-36(s0)
80003414:	0307a783          	lw	a5,48(a5)
80003418:	fef42223          	sw	a5,-28(s0)
				/*
				 * Re-enable command interrupt if required. 
				 * Must be done before re loading FIFO to ensure stale response
				 * data is not pushed into the FIFO.
				 */
				if(NULL_SLAVE_CMD_HANDLER != this_spi->cmd_handler)
8000341c:	fdc42783          	lw	a5,-36(s0)
80003420:	0207a783          	lw	a5,32(a5)
80003424:	06078263          	beqz	a5,80003488 <SPI_isr+0x63c>
				{
					this_spi->cmd_done = 0u;
80003428:	fdc42783          	lw	a5,-36(s0)
8000342c:	0207a223          	sw	zero,36(a5)
					this_spi->resp_tx_buffer = 0u;
80003430:	fdc42783          	lw	a5,-36(s0)
80003434:	0007aa23          	sw	zero,20(a5)
					this_spi->resp_buff_size = 0u;
80003438:	fdc42783          	lw	a5,-36(s0)
8000343c:	0007ac23          	sw	zero,24(a5)
					this_spi->resp_buff_tx_idx = 0u;
80003440:	fdc42783          	lw	a5,-36(s0)
80003444:	0007ae23          	sw	zero,28(a5)
					HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_CMDINT, ENABLE );
80003448:	fdc42783          	lw	a5,-36(s0)
8000344c:	0007a783          	lw	a5,0(a5)
80003450:	00478793          	addi	a5,a5,4
80003454:	00100693          	li	a3,1
80003458:	01000613          	li	a2,16
8000345c:	00400593          	li	a1,4
80003460:	00078513          	mv	a0,a5
80003464:	e9dfd0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
					HAL_set_8bit_reg_field( this_spi->base_addr, CTRL2_INTCMD, ENABLE );
80003468:	fdc42783          	lw	a5,-36(s0)
8000346c:	0007a783          	lw	a5,0(a5)
80003470:	01878793          	addi	a5,a5,24
80003474:	00100693          	li	a3,1
80003478:	01000613          	li	a2,16
8000347c:	00400593          	li	a1,4
80003480:	00078513          	mv	a0,a5
80003484:	e7dfd0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
				/*
				 * Reset the transmit index to 0 to restart transmit at the start of the
				 * transmit buffer in the next transaction. This also requires flushing
				 * the Tx FIFO and refilling it with the start of Tx data buffer.
				 */
				this_spi->slave_tx_idx = 0u;
80003488:	fdc42783          	lw	a5,-36(s0)
8000348c:	0007a823          	sw	zero,16(a5)
				HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
80003490:	fdc42783          	lw	a5,-36(s0)
80003494:	0007a783          	lw	a5,0(a5)
80003498:	01c78793          	addi	a5,a5,28
8000349c:	00300593          	li	a1,3
800034a0:	00078513          	mv	a0,a5
800034a4:	dedfd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
				fill_slave_tx_fifo( this_spi );
800034a8:	fdc42503          	lw	a0,-36(s0)
800034ac:	088000ef          	jal	ra,80003534 <fill_slave_tx_fifo>

				/* Prepare to receive next packet. */
				this_spi->slave_rx_idx = 0u;
800034b0:	fdc42783          	lw	a5,-36(s0)
800034b4:	0207a823          	sw	zero,48(a5)
				/*
				 * Call the receive handler if one exists.
				 */
				if( NULL_BLOCK_HANDLER != this_spi->block_rx_handler )
800034b8:	fdc42783          	lw	a5,-36(s0)
800034bc:	0407a783          	lw	a5,64(a5)
800034c0:	02078063          	beqz	a5,800034e0 <SPI_isr+0x694>
				{
					this_spi->block_rx_handler( this_spi->slave_rx_buffer, rx_size );
800034c4:	fdc42783          	lw	a5,-36(s0)
800034c8:	0407a703          	lw	a4,64(a5)
800034cc:	fdc42783          	lw	a5,-36(s0)
800034d0:	0287a783          	lw	a5,40(a5)
800034d4:	fe442583          	lw	a1,-28(s0)
800034d8:	00078513          	mv	a0,a5
800034dc:	000700e7          	jalr	a4
				}

				HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_RXDATA, ENABLE );
800034e0:	fdc42783          	lw	a5,-36(s0)
800034e4:	0007a783          	lw	a5,0(a5)
800034e8:	00478793          	addi	a5,a5,4
800034ec:	00100693          	li	a3,1
800034f0:	04000613          	li	a2,64
800034f4:	00600593          	li	a1,6
800034f8:	00078513          	mv	a0,a5
800034fc:	e05fd0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        	}

            HAL_set_8bit_reg_field( this_spi->base_addr, INTCLR_SSEND, ENABLE );
80003500:	fdc42783          	lw	a5,-36(s0)
80003504:	0007a783          	lw	a5,0(a5)
80003508:	00478793          	addi	a5,a5,4
8000350c:	00100693          	li	a3,1
80003510:	02000613          	li	a2,32
80003514:	00500593          	li	a1,5
80003518:	00078513          	mv	a0,a5
8000351c:	de5fd0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
        }
    }
}
80003520:	00000013          	nop
80003524:	02c12083          	lw	ra,44(sp)
80003528:	02812403          	lw	s0,40(sp)
8000352c:	03010113          	addi	sp,sp,48
80003530:	00008067          	ret

Disassembly of section .text.fill_slave_tx_fifo:

80003534 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    spi_instance_t * this_spi
)
{
80003534:	fe010113          	addi	sp,sp,-32
80003538:	00112e23          	sw	ra,28(sp)
8000353c:	00812c23          	sw	s0,24(sp)
80003540:	02010413          	addi	s0,sp,32
80003544:	fea42623          	sw	a0,-20(s0)
	/* First see if slave_tx_buffer needs transmitting */
	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) &&
80003548:	0480006f          	j	80003590 <fill_slave_tx_fifo+0x5c>
			!HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
	{
		HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->slave_tx_buffer[this_spi->slave_tx_idx] );
8000354c:	fec42783          	lw	a5,-20(s0)
80003550:	0007a783          	lw	a5,0(a5)
80003554:	00c78693          	addi	a3,a5,12
80003558:	fec42783          	lw	a5,-20(s0)
8000355c:	0087a703          	lw	a4,8(a5)
80003560:	fec42783          	lw	a5,-20(s0)
80003564:	0107a783          	lw	a5,16(a5)
80003568:	00f707b3          	add	a5,a4,a5
8000356c:	0007c783          	lbu	a5,0(a5)
80003570:	00078593          	mv	a1,a5
80003574:	00068513          	mv	a0,a3
80003578:	a6dfd0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
		++this_spi->slave_tx_idx;
8000357c:	fec42783          	lw	a5,-20(s0)
80003580:	0107a783          	lw	a5,16(a5)
80003584:	00178713          	addi	a4,a5,1
80003588:	fec42783          	lw	a5,-20(s0)
8000358c:	00e7a823          	sw	a4,16(a5)
	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) &&
80003590:	fec42783          	lw	a5,-20(s0)
80003594:	0107a703          	lw	a4,16(a5)
80003598:	fec42783          	lw	a5,-20(s0)
8000359c:	00c7a783          	lw	a5,12(a5)
800035a0:	02f77463          	bleu	a5,a4,800035c8 <fill_slave_tx_fifo+0x94>
			!HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
800035a4:	fec42783          	lw	a5,-20(s0)
800035a8:	0007a783          	lw	a5,0(a5)
800035ac:	02078793          	addi	a5,a5,32
800035b0:	00800613          	li	a2,8
800035b4:	00300593          	li	a1,3
800035b8:	00078513          	mv	a0,a5
800035bc:	dd5fd0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
800035c0:	00050793          	mv	a5,a0
	while( ( this_spi->slave_tx_idx < this_spi->slave_tx_size ) &&
800035c4:	f80784e3          	beqz	a5,8000354c <fill_slave_tx_fifo+0x18>
	}

    /* Then see if it is safe to look at putting resp_tx_buffer in FIFO? */
    if( this_spi->slave_tx_idx >= this_spi->slave_tx_size )
800035c8:	fec42783          	lw	a5,-20(s0)
800035cc:	0107a703          	lw	a4,16(a5)
800035d0:	fec42783          	lw	a5,-20(s0)
800035d4:	00c7a783          	lw	a5,12(a5)
800035d8:	08f76263          	bltu	a4,a5,8000365c <fill_slave_tx_fifo+0x128>
    {
        while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size ) &&
800035dc:	0480006f          	j	80003624 <fill_slave_tx_fifo+0xf0>
        		!HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
        {
			HAL_set_32bit_reg( this_spi->base_addr, TXDATA, (uint32_t)this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx] );
800035e0:	fec42783          	lw	a5,-20(s0)
800035e4:	0007a783          	lw	a5,0(a5)
800035e8:	00c78693          	addi	a3,a5,12
800035ec:	fec42783          	lw	a5,-20(s0)
800035f0:	0147a703          	lw	a4,20(a5)
800035f4:	fec42783          	lw	a5,-20(s0)
800035f8:	01c7a783          	lw	a5,28(a5)
800035fc:	00f707b3          	add	a5,a4,a5
80003600:	0007c783          	lbu	a5,0(a5)
80003604:	00078593          	mv	a1,a5
80003608:	00068513          	mv	a0,a3
8000360c:	9d9fd0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
			++this_spi->resp_buff_tx_idx;
80003610:	fec42783          	lw	a5,-20(s0)
80003614:	01c7a783          	lw	a5,28(a5)
80003618:	00178713          	addi	a4,a5,1
8000361c:	fec42783          	lw	a5,-20(s0)
80003620:	00e7ae23          	sw	a4,28(a5)
        while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size ) &&
80003624:	fec42783          	lw	a5,-20(s0)
80003628:	01c7a703          	lw	a4,28(a5)
8000362c:	fec42783          	lw	a5,-20(s0)
80003630:	0187a783          	lw	a5,24(a5)
80003634:	02f77463          	bleu	a5,a4,8000365c <fill_slave_tx_fifo+0x128>
        		!HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_TXFULL ) )
80003638:	fec42783          	lw	a5,-20(s0)
8000363c:	0007a783          	lw	a5,0(a5)
80003640:	02078793          	addi	a5,a5,32
80003644:	00800613          	li	a2,8
80003648:	00300593          	li	a1,3
8000364c:	00078513          	mv	a0,a5
80003650:	d41fd0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80003654:	00050793          	mv	a5,a0
        while( ( this_spi->resp_buff_tx_idx < this_spi->resp_buff_size ) &&
80003658:	f80784e3          	beqz	a5,800035e0 <fill_slave_tx_fifo+0xac>
        }
    }
}
8000365c:	00000013          	nop
80003660:	01c12083          	lw	ra,28(sp)
80003664:	01812403          	lw	s0,24(sp)
80003668:	02010113          	addi	sp,sp,32
8000366c:	00008067          	ret

Disassembly of section .text.read_slave_rx_fifo:

80003670 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    spi_instance_t * this_spi
)
{
80003670:	fd010113          	addi	sp,sp,-48
80003674:	02112623          	sw	ra,44(sp)
80003678:	02812423          	sw	s0,40(sp)
8000367c:	03010413          	addi	s0,sp,48
80003680:	fca42e23          	sw	a0,-36(s0)
    uint32_t rx_frame;
    
    if( SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode ) /* Block handling mode. */
80003684:	fdc42783          	lw	a5,-36(s0)
80003688:	0487a703          	lw	a4,72(a5)
8000368c:	00100793          	li	a5,1
80003690:	08f71863          	bne	a4,a5,80003720 <read_slave_rx_fifo+0xb0>
    {
        while( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80003694:	0640006f          	j	800036f8 <read_slave_rx_fifo+0x88>
        {
            rx_frame = HAL_get_32bit_reg( this_spi->base_addr, RXDATA ); /* Read irresepective to clear the RX IRQ */
80003698:	fdc42783          	lw	a5,-36(s0)
8000369c:	0007a783          	lw	a5,0(a5)
800036a0:	00878793          	addi	a5,a5,8
800036a4:	00078513          	mv	a0,a5
800036a8:	975fd0ef          	jal	ra,8000101c <HW_get_32bit_reg>
800036ac:	fea42623          	sw	a0,-20(s0)
        	if( this_spi->slave_rx_idx < this_spi->slave_rx_size )
800036b0:	fdc42783          	lw	a5,-36(s0)
800036b4:	0307a703          	lw	a4,48(a5)
800036b8:	fdc42783          	lw	a5,-36(s0)
800036bc:	02c7a783          	lw	a5,44(a5)
800036c0:	02f77263          	bleu	a5,a4,800036e4 <read_slave_rx_fifo+0x74>
			{
				this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
800036c4:	fdc42783          	lw	a5,-36(s0)
800036c8:	0287a703          	lw	a4,40(a5)
800036cc:	fdc42783          	lw	a5,-36(s0)
800036d0:	0307a783          	lw	a5,48(a5)
800036d4:	00f707b3          	add	a5,a4,a5
800036d8:	fec42703          	lw	a4,-20(s0)
800036dc:	0ff77713          	andi	a4,a4,255
800036e0:	00e78023          	sb	a4,0(a5)
			}
			++this_spi->slave_rx_idx;
800036e4:	fdc42783          	lw	a5,-36(s0)
800036e8:	0307a783          	lw	a5,48(a5)
800036ec:	00178713          	addi	a4,a5,1
800036f0:	fdc42783          	lw	a5,-36(s0)
800036f4:	02e7a823          	sw	a4,48(a5)
        while( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
800036f8:	fdc42783          	lw	a5,-36(s0)
800036fc:	0007a783          	lw	a5,0(a5)
80003700:	02078793          	addi	a5,a5,32
80003704:	00400613          	li	a2,4
80003708:	00200593          	li	a1,2
8000370c:	00078513          	mv	a0,a5
80003710:	c81fd0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80003714:	00050793          	mv	a5,a0
80003718:	f80780e3          	beqz	a5,80003698 <read_slave_rx_fifo+0x28>
    }
    else /* Slave transfer mode not set up so discard anything in RX FIFO */
    {
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_RXFIFORST_MASK );
    }
}
8000371c:	08c0006f          	j	800037a8 <read_slave_rx_fifo+0x138>
    else if( SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode ) /* Frame handling mode */
80003720:	fdc42783          	lw	a5,-36(s0)
80003724:	0487a703          	lw	a4,72(a5)
80003728:	00200793          	li	a5,2
8000372c:	06f71263          	bne	a4,a5,80003790 <read_slave_rx_fifo+0x120>
        while( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80003730:	0380006f          	j	80003768 <read_slave_rx_fifo+0xf8>
            rx_frame = HAL_get_32bit_reg( this_spi->base_addr, RXDATA );
80003734:	fdc42783          	lw	a5,-36(s0)
80003738:	0007a783          	lw	a5,0(a5)
8000373c:	00878793          	addi	a5,a5,8
80003740:	00078513          	mv	a0,a5
80003744:	8d9fd0ef          	jal	ra,8000101c <HW_get_32bit_reg>
80003748:	fea42623          	sw	a0,-20(s0)
            if( NULL_FRAME_HANDLER != this_spi->frame_rx_handler )
8000374c:	fdc42783          	lw	a5,-36(s0)
80003750:	0347a783          	lw	a5,52(a5)
80003754:	00078a63          	beqz	a5,80003768 <read_slave_rx_fifo+0xf8>
            	this_spi->frame_rx_handler( rx_frame );
80003758:	fdc42783          	lw	a5,-36(s0)
8000375c:	0347a783          	lw	a5,52(a5)
80003760:	fec42503          	lw	a0,-20(s0)
80003764:	000780e7          	jalr	a5
        while( !HAL_get_8bit_reg_field( this_spi->base_addr, STATUS_RXEMPTY ) )
80003768:	fdc42783          	lw	a5,-36(s0)
8000376c:	0007a783          	lw	a5,0(a5)
80003770:	02078793          	addi	a5,a5,32
80003774:	00400613          	li	a2,4
80003778:	00200593          	li	a1,2
8000377c:	00078513          	mv	a0,a5
80003780:	c11fd0ef          	jal	ra,80001390 <HW_get_8bit_reg_field>
80003784:	00050793          	mv	a5,a0
80003788:	fa0786e3          	beqz	a5,80003734 <read_slave_rx_fifo+0xc4>
}
8000378c:	01c0006f          	j	800037a8 <read_slave_rx_fifo+0x138>
        HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_RXFIFORST_MASK );
80003790:	fdc42783          	lw	a5,-36(s0)
80003794:	0007a783          	lw	a5,0(a5)
80003798:	01c78793          	addi	a5,a5,28
8000379c:	00100593          	li	a1,1
800037a0:	00078513          	mv	a0,a5
800037a4:	aedfd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
}
800037a8:	00000013          	nop
800037ac:	02c12083          	lw	ra,44(sp)
800037b0:	02812403          	lw	s0,40(sp)
800037b4:	03010113          	addi	sp,sp,48
800037b8:	00008067          	ret

Disassembly of section .text.recover_from_rx_overflow:

800037bc <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    const spi_instance_t * this_spi
)
{
800037bc:	fe010113          	addi	sp,sp,-32
800037c0:	00112e23          	sw	ra,28(sp)
800037c4:	00812c23          	sw	s0,24(sp)
800037c8:	02010413          	addi	s0,sp,32
800037cc:	fea42623          	sw	a0,-20(s0)
    /* Disable CoreSPI */
    HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, DISABLE );
800037d0:	fec42783          	lw	a5,-20(s0)
800037d4:	0007a783          	lw	a5,0(a5)
800037d8:	00000693          	li	a3,0
800037dc:	00100613          	li	a2,1
800037e0:	00000593          	li	a1,0
800037e4:	00078513          	mv	a0,a5
800037e8:	b19fd0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>

    /* Reset TX and RX FIFOs */
    HAL_set_8bit_reg( this_spi->base_addr, CMD, CMD_TXFIFORST_MASK | CMD_RXFIFORST_MASK );
800037ec:	fec42783          	lw	a5,-20(s0)
800037f0:	0007a783          	lw	a5,0(a5)
800037f4:	01c78793          	addi	a5,a5,28
800037f8:	00300593          	li	a1,3
800037fc:	00078513          	mv	a0,a5
80003800:	a91fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>

    /* Clear all interrupts */
    HAL_set_8bit_reg( this_spi->base_addr, INTCLR, SPI_ALL_INTS );
80003804:	fec42783          	lw	a5,-20(s0)
80003808:	0007a783          	lw	a5,0(a5)
8000380c:	00478793          	addi	a5,a5,4
80003810:	0ff00593          	li	a1,255
80003814:	00078513          	mv	a0,a5
80003818:	a79fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>

    /* Enable CoreSPI */
    HAL_set_8bit_reg_field( this_spi->base_addr, CTRL1_ENABLE, ENABLE );
8000381c:	fec42783          	lw	a5,-20(s0)
80003820:	0007a783          	lw	a5,0(a5)
80003824:	00100693          	li	a3,1
80003828:	00100613          	li	a2,1
8000382c:	00000593          	li	a1,0
80003830:	00078513          	mv	a0,a5
80003834:	acdfd0ef          	jal	ra,80001300 <HW_set_8bit_reg_field>
}
80003838:	00000013          	nop
8000383c:	01c12083          	lw	ra,28(sp)
80003840:	01812403          	lw	s0,24(sp)
80003844:	02010113          	addi	sp,sp,32
80003848:	00008067          	ret

Disassembly of section .text.GPIO_init:

8000384c <GPIO_init>:
(
    gpio_instance_t *   this_gpio,
    addr_t              base_addr,
    gpio_apb_width_t    bus_width
)
{
8000384c:	fd010113          	addi	sp,sp,-48
80003850:	02112623          	sw	ra,44(sp)
80003854:	02812423          	sw	s0,40(sp)
80003858:	03010413          	addi	s0,sp,48
8000385c:	fca42e23          	sw	a0,-36(s0)
80003860:	fcb42c23          	sw	a1,-40(s0)
80003864:	fcc42a23          	sw	a2,-44(s0)
    uint8_t i = 0;
80003868:	fe0407a3          	sb	zero,-17(s0)
    addr_t cfg_reg_addr = base_addr;
8000386c:	fd842783          	lw	a5,-40(s0)
80003870:	fef42423          	sw	a5,-24(s0)
    
    this_gpio->base_addr = base_addr;
80003874:	fdc42783          	lw	a5,-36(s0)
80003878:	fd842703          	lw	a4,-40(s0)
8000387c:	00e7a023          	sw	a4,0(a5)
    this_gpio->apb_bus_width = bus_width;
80003880:	fdc42783          	lw	a5,-36(s0)
80003884:	fd442703          	lw	a4,-44(s0)
80003888:	00e7a223          	sw	a4,4(a5)
    
    /* Clear configuration. */
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
8000388c:	fe0407a3          	sb	zero,-17(s0)
80003890:	fd842783          	lw	a5,-40(s0)
80003894:	fef42423          	sw	a5,-24(s0)
80003898:	0280006f          	j	800038c0 <GPIO_init+0x74>
    {
        HW_set_8bit_reg( cfg_reg_addr, 0 );
8000389c:	00000593          	li	a1,0
800038a0:	fe842503          	lw	a0,-24(s0)
800038a4:	9edfd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
        cfg_reg_addr += 4;
800038a8:	fe842783          	lw	a5,-24(s0)
800038ac:	00478793          	addi	a5,a5,4
800038b0:	fef42423          	sw	a5,-24(s0)
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
800038b4:	fef44783          	lbu	a5,-17(s0)
800038b8:	00178793          	addi	a5,a5,1
800038bc:	fef407a3          	sb	a5,-17(s0)
800038c0:	fef44703          	lbu	a4,-17(s0)
800038c4:	01f00793          	li	a5,31
800038c8:	fce7fae3          	bleu	a4,a5,8000389c <GPIO_init+0x50>
    }
    /* Clear any pending interrupts */
    switch( this_gpio->apb_bus_width )
800038cc:	fdc42783          	lw	a5,-36(s0)
800038d0:	0047a783          	lw	a5,4(a5)
800038d4:	00100713          	li	a4,1
800038d8:	02e78a63          	beq	a5,a4,8000390c <GPIO_init+0xc0>
800038dc:	00100713          	li	a4,1
800038e0:	06e7e463          	bltu	a5,a4,80003948 <GPIO_init+0xfc>
800038e4:	00200713          	li	a4,2
800038e8:	00e78463          	beq	a5,a4,800038f0 <GPIO_init+0xa4>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
            break;
            
        default:
            HAL_ASSERT(0);
            break;
800038ec:	0c00006f          	j	800039ac <GPIO_init+0x160>
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
800038f0:	fdc42783          	lw	a5,-36(s0)
800038f4:	0007a783          	lw	a5,0(a5)
800038f8:	08078793          	addi	a5,a5,128
800038fc:	fff00593          	li	a1,-1
80003900:	00078513          	mv	a0,a5
80003904:	ee0fd0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
            break;
80003908:	0a40006f          	j	800039ac <GPIO_init+0x160>
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ0, (uint16_t)CLEAR_ALL_IRQ16 );
8000390c:	fdc42783          	lw	a5,-36(s0)
80003910:	0007a783          	lw	a5,0(a5)
80003914:	08078713          	addi	a4,a5,128
80003918:	000107b7          	lui	a5,0x10
8000391c:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xf7ff>
80003920:	00070513          	mv	a0,a4
80003924:	ff0fd0ef          	jal	ra,80001114 <HW_set_16bit_reg>
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
80003928:	fdc42783          	lw	a5,-36(s0)
8000392c:	0007a783          	lw	a5,0(a5)
80003930:	08478713          	addi	a4,a5,132
80003934:	000107b7          	lui	a5,0x10
80003938:	fff78593          	addi	a1,a5,-1 # ffff <HEAP_SIZE+0xf7ff>
8000393c:	00070513          	mv	a0,a4
80003940:	fd4fd0ef          	jal	ra,80001114 <HW_set_16bit_reg>
            break;
80003944:	0680006f          	j	800039ac <GPIO_init+0x160>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ0, (uint8_t)CLEAR_ALL_IRQ8 );
80003948:	fdc42783          	lw	a5,-36(s0)
8000394c:	0007a783          	lw	a5,0(a5)
80003950:	08078793          	addi	a5,a5,128
80003954:	0ff00593          	li	a1,255
80003958:	00078513          	mv	a0,a5
8000395c:	935fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ1, (uint8_t)CLEAR_ALL_IRQ8 );
80003960:	fdc42783          	lw	a5,-36(s0)
80003964:	0007a783          	lw	a5,0(a5)
80003968:	08478793          	addi	a5,a5,132
8000396c:	0ff00593          	li	a1,255
80003970:	00078513          	mv	a0,a5
80003974:	91dfd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ2, (uint8_t)CLEAR_ALL_IRQ8 );
80003978:	fdc42783          	lw	a5,-36(s0)
8000397c:	0007a783          	lw	a5,0(a5)
80003980:	08878793          	addi	a5,a5,136
80003984:	0ff00593          	li	a1,255
80003988:	00078513          	mv	a0,a5
8000398c:	905fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
80003990:	fdc42783          	lw	a5,-36(s0)
80003994:	0007a783          	lw	a5,0(a5)
80003998:	08c78793          	addi	a5,a5,140
8000399c:	0ff00593          	li	a1,255
800039a0:	00078513          	mv	a0,a5
800039a4:	8edfd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            break;
800039a8:	00000013          	nop
    }
}
800039ac:	00000013          	nop
800039b0:	02c12083          	lw	ra,44(sp)
800039b4:	02812403          	lw	s0,40(sp)
800039b8:	03010113          	addi	sp,sp,48
800039bc:	00008067          	ret

Disassembly of section .text.GPIO_config:

800039c0 <GPIO_config>:
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    uint32_t            config
)
{
800039c0:	fd010113          	addi	sp,sp,-48
800039c4:	02112623          	sw	ra,44(sp)
800039c8:	02812423          	sw	s0,40(sp)
800039cc:	03010413          	addi	s0,sp,48
800039d0:	fca42e23          	sw	a0,-36(s0)
800039d4:	fcb42c23          	sw	a1,-40(s0)
800039d8:	fcc42a23          	sw	a2,-44(s0)
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
800039dc:	fd842703          	lw	a4,-40(s0)
800039e0:	01f00793          	li	a5,31
800039e4:	02e7e863          	bltu	a5,a4,80003a14 <GPIO_config+0x54>
    {
        uint32_t cfg_reg_addr = this_gpio->base_addr;
800039e8:	fdc42783          	lw	a5,-36(s0)
800039ec:	0007a783          	lw	a5,0(a5)
800039f0:	fef42623          	sw	a5,-20(s0)
        cfg_reg_addr += (port_id * 4);
800039f4:	fd842783          	lw	a5,-40(s0)
800039f8:	00279793          	slli	a5,a5,0x2
800039fc:	fec42703          	lw	a4,-20(s0)
80003a00:	00f707b3          	add	a5,a4,a5
80003a04:	fef42623          	sw	a5,-20(s0)
        HW_set_32bit_reg( cfg_reg_addr, config );
80003a08:	fd442583          	lw	a1,-44(s0)
80003a0c:	fec42503          	lw	a0,-20(s0)
80003a10:	dd4fd0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
         * It may also indicate that the base address passed as parameter to
         * GPIO_init() was incorrect.
         */
        HAL_ASSERT( HW_get_32bit_reg( cfg_reg_addr ) == config );
    }
}
80003a14:	00000013          	nop
80003a18:	02c12083          	lw	ra,44(sp)
80003a1c:	02812403          	lw	s0,40(sp)
80003a20:	03010113          	addi	sp,sp,48
80003a24:	00008067          	ret

Disassembly of section .text.GPIO_set_outputs:

80003a28 <GPIO_set_outputs>:
void GPIO_set_outputs
(
    gpio_instance_t *   this_gpio,
    uint32_t            value
)
{
80003a28:	fe010113          	addi	sp,sp,-32
80003a2c:	00112e23          	sw	ra,28(sp)
80003a30:	00812c23          	sw	s0,24(sp)
80003a34:	02010413          	addi	s0,sp,32
80003a38:	fea42623          	sw	a0,-20(s0)
80003a3c:	feb42423          	sw	a1,-24(s0)
    switch( this_gpio->apb_bus_width )
80003a40:	fec42783          	lw	a5,-20(s0)
80003a44:	0047a783          	lw	a5,4(a5)
80003a48:	00100713          	li	a4,1
80003a4c:	02e78a63          	beq	a5,a4,80003a80 <GPIO_set_outputs+0x58>
80003a50:	00100713          	li	a4,1
80003a54:	06e7ee63          	bltu	a5,a4,80003ad0 <GPIO_set_outputs+0xa8>
80003a58:	00200713          	li	a4,2
80003a5c:	00e78463          	beq	a5,a4,80003a64 <GPIO_set_outputs+0x3c>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80003a60:	1000006f          	j	80003b60 <GPIO_set_outputs+0x138>
            HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, value );
80003a64:	fec42783          	lw	a5,-20(s0)
80003a68:	0007a783          	lw	a5,0(a5)
80003a6c:	0a078793          	addi	a5,a5,160
80003a70:	fe842583          	lw	a1,-24(s0)
80003a74:	00078513          	mv	a0,a5
80003a78:	d6cfd0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
            break;
80003a7c:	0e40006f          	j	80003b60 <GPIO_set_outputs+0x138>
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT0, (uint16_t)value );
80003a80:	fec42783          	lw	a5,-20(s0)
80003a84:	0007a783          	lw	a5,0(a5)
80003a88:	0a078793          	addi	a5,a5,160
80003a8c:	fe842703          	lw	a4,-24(s0)
80003a90:	01071713          	slli	a4,a4,0x10
80003a94:	01075713          	srli	a4,a4,0x10
80003a98:	00070593          	mv	a1,a4
80003a9c:	00078513          	mv	a0,a5
80003aa0:	e74fd0ef          	jal	ra,80001114 <HW_set_16bit_reg>
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
80003aa4:	fec42783          	lw	a5,-20(s0)
80003aa8:	0007a783          	lw	a5,0(a5)
80003aac:	0a478713          	addi	a4,a5,164
80003ab0:	fe842783          	lw	a5,-24(s0)
80003ab4:	0107d793          	srli	a5,a5,0x10
80003ab8:	01079793          	slli	a5,a5,0x10
80003abc:	0107d793          	srli	a5,a5,0x10
80003ac0:	00078593          	mv	a1,a5
80003ac4:	00070513          	mv	a0,a4
80003ac8:	e4cfd0ef          	jal	ra,80001114 <HW_set_16bit_reg>
            break;
80003acc:	0940006f          	j	80003b60 <GPIO_set_outputs+0x138>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT0, (uint8_t)value );
80003ad0:	fec42783          	lw	a5,-20(s0)
80003ad4:	0007a783          	lw	a5,0(a5)
80003ad8:	0a078793          	addi	a5,a5,160
80003adc:	fe842703          	lw	a4,-24(s0)
80003ae0:	0ff77713          	andi	a4,a4,255
80003ae4:	00070593          	mv	a1,a4
80003ae8:	00078513          	mv	a0,a5
80003aec:	fa4fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint8_t)(value >> 8) );
80003af0:	fec42783          	lw	a5,-20(s0)
80003af4:	0007a783          	lw	a5,0(a5)
80003af8:	0a478713          	addi	a4,a5,164
80003afc:	fe842783          	lw	a5,-24(s0)
80003b00:	0087d793          	srli	a5,a5,0x8
80003b04:	0ff7f793          	andi	a5,a5,255
80003b08:	00078593          	mv	a1,a5
80003b0c:	00070513          	mv	a0,a4
80003b10:	f80fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT2, (uint8_t)(value >> 16) );
80003b14:	fec42783          	lw	a5,-20(s0)
80003b18:	0007a783          	lw	a5,0(a5)
80003b1c:	0a878713          	addi	a4,a5,168
80003b20:	fe842783          	lw	a5,-24(s0)
80003b24:	0107d793          	srli	a5,a5,0x10
80003b28:	0ff7f793          	andi	a5,a5,255
80003b2c:	00078593          	mv	a1,a5
80003b30:	00070513          	mv	a0,a4
80003b34:	f5cfd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
80003b38:	fec42783          	lw	a5,-20(s0)
80003b3c:	0007a783          	lw	a5,0(a5)
80003b40:	0ac78713          	addi	a4,a5,172
80003b44:	fe842783          	lw	a5,-24(s0)
80003b48:	0187d793          	srli	a5,a5,0x18
80003b4c:	0ff7f793          	andi	a5,a5,255
80003b50:	00078593          	mv	a1,a5
80003b54:	00070513          	mv	a0,a4
80003b58:	f38fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            break;
80003b5c:	00000013          	nop
     * the number of GPIOs selected in the CoreGPIO hardware flow configuration.
     * It may also indicate that the base address or APB bus width passed as
     * parameter to the GPIO_init() function do not match the hardware design.
     */
    HAL_ASSERT( GPIO_get_outputs( this_gpio ) == value );
}
80003b60:	00000013          	nop
80003b64:	01c12083          	lw	ra,28(sp)
80003b68:	01812403          	lw	s0,24(sp)
80003b6c:	02010113          	addi	sp,sp,32
80003b70:	00008067          	ret

Disassembly of section .text.GPIO_get_inputs:

80003b74 <GPIO_get_inputs>:
 */
uint32_t GPIO_get_inputs
(
    gpio_instance_t *   this_gpio
)
{
80003b74:	fd010113          	addi	sp,sp,-48
80003b78:	02112623          	sw	ra,44(sp)
80003b7c:	02812423          	sw	s0,40(sp)
80003b80:	03010413          	addi	s0,sp,48
80003b84:	fca42e23          	sw	a0,-36(s0)
    uint32_t gpio_in = 0;
80003b88:	fe042623          	sw	zero,-20(s0)
    
    switch( this_gpio->apb_bus_width )
80003b8c:	fdc42783          	lw	a5,-36(s0)
80003b90:	0047a783          	lw	a5,4(a5)
80003b94:	00100713          	li	a4,1
80003b98:	02e78a63          	beq	a5,a4,80003bcc <GPIO_get_inputs+0x58>
80003b9c:	00100713          	li	a4,1
80003ba0:	08e7e263          	bltu	a5,a4,80003c24 <GPIO_get_inputs+0xb0>
80003ba4:	00200713          	li	a4,2
80003ba8:	00e78463          	beq	a5,a4,80003bb0 <GPIO_get_inputs+0x3c>
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN3 ) << 24);
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80003bac:	1280006f          	j	80003cd4 <GPIO_get_inputs+0x160>
            gpio_in = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_IN );
80003bb0:	fdc42783          	lw	a5,-36(s0)
80003bb4:	0007a783          	lw	a5,0(a5)
80003bb8:	09078793          	addi	a5,a5,144
80003bbc:	00078513          	mv	a0,a5
80003bc0:	c5cfd0ef          	jal	ra,8000101c <HW_get_32bit_reg>
80003bc4:	fea42623          	sw	a0,-20(s0)
            break;
80003bc8:	10c0006f          	j	80003cd4 <GPIO_get_inputs+0x160>
            gpio_in |= HAL_get_16bit_reg( this_gpio->base_addr, GPIO_IN0 );
80003bcc:	fdc42783          	lw	a5,-36(s0)
80003bd0:	0007a783          	lw	a5,0(a5)
80003bd4:	09078793          	addi	a5,a5,144
80003bd8:	00078513          	mv	a0,a5
80003bdc:	d78fd0ef          	jal	ra,80001154 <HW_get_16bit_reg>
80003be0:	00050793          	mv	a5,a0
80003be4:	00078713          	mv	a4,a5
80003be8:	fec42783          	lw	a5,-20(s0)
80003bec:	00e7e7b3          	or	a5,a5,a4
80003bf0:	fef42623          	sw	a5,-20(s0)
            gpio_in |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_IN1 ) << 16);
80003bf4:	fdc42783          	lw	a5,-36(s0)
80003bf8:	0007a783          	lw	a5,0(a5)
80003bfc:	09478793          	addi	a5,a5,148
80003c00:	00078513          	mv	a0,a5
80003c04:	d50fd0ef          	jal	ra,80001154 <HW_get_16bit_reg>
80003c08:	00050793          	mv	a5,a0
80003c0c:	01079793          	slli	a5,a5,0x10
80003c10:	00078713          	mv	a4,a5
80003c14:	fec42783          	lw	a5,-20(s0)
80003c18:	00e7e7b3          	or	a5,a5,a4
80003c1c:	fef42623          	sw	a5,-20(s0)
            break;
80003c20:	0b40006f          	j	80003cd4 <GPIO_get_inputs+0x160>
            gpio_in |= HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN0 );
80003c24:	fdc42783          	lw	a5,-36(s0)
80003c28:	0007a783          	lw	a5,0(a5)
80003c2c:	09078793          	addi	a5,a5,144
80003c30:	00078513          	mv	a0,a5
80003c34:	e98fd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80003c38:	00050793          	mv	a5,a0
80003c3c:	00078713          	mv	a4,a5
80003c40:	fec42783          	lw	a5,-20(s0)
80003c44:	00e7e7b3          	or	a5,a5,a4
80003c48:	fef42623          	sw	a5,-20(s0)
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN1 ) << 8);
80003c4c:	fdc42783          	lw	a5,-36(s0)
80003c50:	0007a783          	lw	a5,0(a5)
80003c54:	09478793          	addi	a5,a5,148
80003c58:	00078513          	mv	a0,a5
80003c5c:	e70fd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80003c60:	00050793          	mv	a5,a0
80003c64:	00879793          	slli	a5,a5,0x8
80003c68:	00078713          	mv	a4,a5
80003c6c:	fec42783          	lw	a5,-20(s0)
80003c70:	00e7e7b3          	or	a5,a5,a4
80003c74:	fef42623          	sw	a5,-20(s0)
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN2 ) << 16);
80003c78:	fdc42783          	lw	a5,-36(s0)
80003c7c:	0007a783          	lw	a5,0(a5)
80003c80:	09878793          	addi	a5,a5,152
80003c84:	00078513          	mv	a0,a5
80003c88:	e44fd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80003c8c:	00050793          	mv	a5,a0
80003c90:	01079793          	slli	a5,a5,0x10
80003c94:	00078713          	mv	a4,a5
80003c98:	fec42783          	lw	a5,-20(s0)
80003c9c:	00e7e7b3          	or	a5,a5,a4
80003ca0:	fef42623          	sw	a5,-20(s0)
            gpio_in |= (HAL_get_8bit_reg( this_gpio->base_addr, GPIO_IN3 ) << 24);
80003ca4:	fdc42783          	lw	a5,-36(s0)
80003ca8:	0007a783          	lw	a5,0(a5)
80003cac:	09c78793          	addi	a5,a5,156
80003cb0:	00078513          	mv	a0,a5
80003cb4:	e18fd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80003cb8:	00050793          	mv	a5,a0
80003cbc:	01879793          	slli	a5,a5,0x18
80003cc0:	00078713          	mv	a4,a5
80003cc4:	fec42783          	lw	a5,-20(s0)
80003cc8:	00e7e7b3          	or	a5,a5,a4
80003ccc:	fef42623          	sw	a5,-20(s0)
            break;
80003cd0:	00000013          	nop
    }
    
    return gpio_in;
80003cd4:	fec42783          	lw	a5,-20(s0)
}
80003cd8:	00078513          	mv	a0,a5
80003cdc:	02c12083          	lw	ra,44(sp)
80003ce0:	02812403          	lw	s0,40(sp)
80003ce4:	03010113          	addi	sp,sp,48
80003ce8:	00008067          	ret

Disassembly of section .text.GPIO_get_outputs:

80003cec <GPIO_get_outputs>:
 */
uint32_t GPIO_get_outputs
(
    gpio_instance_t *   this_gpio
)
{
80003cec:	fd010113          	addi	sp,sp,-48
80003cf0:	02112623          	sw	ra,44(sp)
80003cf4:	02812423          	sw	s0,40(sp)
80003cf8:	03010413          	addi	s0,sp,48
80003cfc:	fca42e23          	sw	a0,-36(s0)
    uint32_t gpio_out = 0;
80003d00:	fe042623          	sw	zero,-20(s0)
    
    switch( this_gpio->apb_bus_width )
80003d04:	fdc42783          	lw	a5,-36(s0)
80003d08:	0047a783          	lw	a5,4(a5)
80003d0c:	00100713          	li	a4,1
80003d10:	02e78a63          	beq	a5,a4,80003d44 <GPIO_get_outputs+0x58>
80003d14:	00100713          	li	a4,1
80003d18:	08e7e263          	bltu	a5,a4,80003d9c <GPIO_get_outputs+0xb0>
80003d1c:	00200713          	li	a4,2
80003d20:	00e78463          	beq	a5,a4,80003d28 <GPIO_get_outputs+0x3c>
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT3 ) << 24);
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80003d24:	1280006f          	j	80003e4c <GPIO_get_outputs+0x160>
            gpio_out = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT );
80003d28:	fdc42783          	lw	a5,-36(s0)
80003d2c:	0007a783          	lw	a5,0(a5)
80003d30:	0a078793          	addi	a5,a5,160
80003d34:	00078513          	mv	a0,a5
80003d38:	ae4fd0ef          	jal	ra,8000101c <HW_get_32bit_reg>
80003d3c:	fea42623          	sw	a0,-20(s0)
            break;
80003d40:	10c0006f          	j	80003e4c <GPIO_get_outputs+0x160>
            gpio_out |= HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT0 );
80003d44:	fdc42783          	lw	a5,-36(s0)
80003d48:	0007a783          	lw	a5,0(a5)
80003d4c:	0a078793          	addi	a5,a5,160
80003d50:	00078513          	mv	a0,a5
80003d54:	c00fd0ef          	jal	ra,80001154 <HW_get_16bit_reg>
80003d58:	00050793          	mv	a5,a0
80003d5c:	00078713          	mv	a4,a5
80003d60:	fec42783          	lw	a5,-20(s0)
80003d64:	00e7e7b3          	or	a5,a5,a4
80003d68:	fef42623          	sw	a5,-20(s0)
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT1 ) << 16);
80003d6c:	fdc42783          	lw	a5,-36(s0)
80003d70:	0007a783          	lw	a5,0(a5)
80003d74:	0a478793          	addi	a5,a5,164
80003d78:	00078513          	mv	a0,a5
80003d7c:	bd8fd0ef          	jal	ra,80001154 <HW_get_16bit_reg>
80003d80:	00050793          	mv	a5,a0
80003d84:	01079793          	slli	a5,a5,0x10
80003d88:	00078713          	mv	a4,a5
80003d8c:	fec42783          	lw	a5,-20(s0)
80003d90:	00e7e7b3          	or	a5,a5,a4
80003d94:	fef42623          	sw	a5,-20(s0)
            break;
80003d98:	0b40006f          	j	80003e4c <GPIO_get_outputs+0x160>
            gpio_out |= HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT0 );
80003d9c:	fdc42783          	lw	a5,-36(s0)
80003da0:	0007a783          	lw	a5,0(a5)
80003da4:	0a078793          	addi	a5,a5,160
80003da8:	00078513          	mv	a0,a5
80003dac:	ba8fd0ef          	jal	ra,80001154 <HW_get_16bit_reg>
80003db0:	00050793          	mv	a5,a0
80003db4:	00078713          	mv	a4,a5
80003db8:	fec42783          	lw	a5,-20(s0)
80003dbc:	00e7e7b3          	or	a5,a5,a4
80003dc0:	fef42623          	sw	a5,-20(s0)
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT1 ) << 8);
80003dc4:	fdc42783          	lw	a5,-36(s0)
80003dc8:	0007a783          	lw	a5,0(a5)
80003dcc:	0a478793          	addi	a5,a5,164
80003dd0:	00078513          	mv	a0,a5
80003dd4:	b80fd0ef          	jal	ra,80001154 <HW_get_16bit_reg>
80003dd8:	00050793          	mv	a5,a0
80003ddc:	00879793          	slli	a5,a5,0x8
80003de0:	00078713          	mv	a4,a5
80003de4:	fec42783          	lw	a5,-20(s0)
80003de8:	00e7e7b3          	or	a5,a5,a4
80003dec:	fef42623          	sw	a5,-20(s0)
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT2 ) << 16);
80003df0:	fdc42783          	lw	a5,-36(s0)
80003df4:	0007a783          	lw	a5,0(a5)
80003df8:	0a878793          	addi	a5,a5,168
80003dfc:	00078513          	mv	a0,a5
80003e00:	b54fd0ef          	jal	ra,80001154 <HW_get_16bit_reg>
80003e04:	00050793          	mv	a5,a0
80003e08:	01079793          	slli	a5,a5,0x10
80003e0c:	00078713          	mv	a4,a5
80003e10:	fec42783          	lw	a5,-20(s0)
80003e14:	00e7e7b3          	or	a5,a5,a4
80003e18:	fef42623          	sw	a5,-20(s0)
            gpio_out |= (HAL_get_16bit_reg( this_gpio->base_addr, GPIO_OUT3 ) << 24);
80003e1c:	fdc42783          	lw	a5,-36(s0)
80003e20:	0007a783          	lw	a5,0(a5)
80003e24:	0ac78793          	addi	a5,a5,172
80003e28:	00078513          	mv	a0,a5
80003e2c:	b28fd0ef          	jal	ra,80001154 <HW_get_16bit_reg>
80003e30:	00050793          	mv	a5,a0
80003e34:	01879793          	slli	a5,a5,0x18
80003e38:	00078713          	mv	a4,a5
80003e3c:	fec42783          	lw	a5,-20(s0)
80003e40:	00e7e7b3          	or	a5,a5,a4
80003e44:	fef42623          	sw	a5,-20(s0)
            break;
80003e48:	00000013          	nop
    }
    
    return gpio_out;
80003e4c:	fec42783          	lw	a5,-20(s0)
}
80003e50:	00078513          	mv	a0,a5
80003e54:	02c12083          	lw	ra,44(sp)
80003e58:	02812403          	lw	s0,40(sp)
80003e5c:	03010113          	addi	sp,sp,48
80003e60:	00008067          	ret

Disassembly of section .text.GPIO_set_output:

80003e64 <GPIO_set_output>:
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    uint8_t             value
)
{
80003e64:	fd010113          	addi	sp,sp,-48
80003e68:	02112623          	sw	ra,44(sp)
80003e6c:	02812423          	sw	s0,40(sp)
80003e70:	03010413          	addi	s0,sp,48
80003e74:	fca42e23          	sw	a0,-36(s0)
80003e78:	fcb42c23          	sw	a1,-40(s0)
80003e7c:	00060793          	mv	a5,a2
80003e80:	fcf40ba3          	sb	a5,-41(s0)
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
            
    switch( this_gpio->apb_bus_width )
80003e84:	fdc42783          	lw	a5,-36(s0)
80003e88:	0047a783          	lw	a5,4(a5)
80003e8c:	00100713          	li	a4,1
80003e90:	08e78a63          	beq	a5,a4,80003f24 <GPIO_set_output+0xc0>
80003e94:	00100713          	li	a4,1
80003e98:	14e7e063          	bltu	a5,a4,80003fd8 <GPIO_set_output+0x174>
80003e9c:	00200713          	li	a4,2
80003ea0:	00e78463          	beq	a5,a4,80003ea8 <GPIO_set_output+0x44>
            }
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80003ea4:	1e80006f          	j	8000408c <GPIO_set_output+0x228>
                outputs_state = HAL_get_32bit_reg( this_gpio->base_addr, GPIO_OUT );
80003ea8:	fdc42783          	lw	a5,-36(s0)
80003eac:	0007a783          	lw	a5,0(a5)
80003eb0:	0a078793          	addi	a5,a5,160
80003eb4:	00078513          	mv	a0,a5
80003eb8:	964fd0ef          	jal	ra,8000101c <HW_get_32bit_reg>
80003ebc:	fea42623          	sw	a0,-20(s0)
                if ( 0 == value )
80003ec0:	fd744783          	lbu	a5,-41(s0)
80003ec4:	02079463          	bnez	a5,80003eec <GPIO_set_output+0x88>
                    outputs_state &= ~(1 << port_id);
80003ec8:	00100713          	li	a4,1
80003ecc:	fd842783          	lw	a5,-40(s0)
80003ed0:	00f717b3          	sll	a5,a4,a5
80003ed4:	fff7c793          	not	a5,a5
80003ed8:	00078713          	mv	a4,a5
80003edc:	fec42783          	lw	a5,-20(s0)
80003ee0:	00e7f7b3          	and	a5,a5,a4
80003ee4:	fef42623          	sw	a5,-20(s0)
80003ee8:	0200006f          	j	80003f08 <GPIO_set_output+0xa4>
                    outputs_state |= 1 << port_id;
80003eec:	00100713          	li	a4,1
80003ef0:	fd842783          	lw	a5,-40(s0)
80003ef4:	00f717b3          	sll	a5,a4,a5
80003ef8:	00078713          	mv	a4,a5
80003efc:	fec42783          	lw	a5,-20(s0)
80003f00:	00e7e7b3          	or	a5,a5,a4
80003f04:	fef42623          	sw	a5,-20(s0)
                HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, outputs_state );
80003f08:	fdc42783          	lw	a5,-36(s0)
80003f0c:	0007a783          	lw	a5,0(a5)
80003f10:	0a078793          	addi	a5,a5,160
80003f14:	fec42583          	lw	a1,-20(s0)
80003f18:	00078513          	mv	a0,a5
80003f1c:	8c8fd0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
            break;
80003f20:	16c0006f          	j	8000408c <GPIO_set_output+0x228>
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 4) * 4);
80003f24:	fdc42783          	lw	a5,-36(s0)
80003f28:	0007a703          	lw	a4,0(a5)
80003f2c:	fd842783          	lw	a5,-40(s0)
80003f30:	0047d793          	srli	a5,a5,0x4
80003f34:	00279793          	slli	a5,a5,0x2
80003f38:	00f707b3          	add	a5,a4,a5
80003f3c:	0a078793          	addi	a5,a5,160
80003f40:	fef42223          	sw	a5,-28(s0)
                outputs_state = HW_get_16bit_reg( gpio_out_reg_addr );
80003f44:	fe442503          	lw	a0,-28(s0)
80003f48:	a0cfd0ef          	jal	ra,80001154 <HW_get_16bit_reg>
80003f4c:	00050793          	mv	a5,a0
80003f50:	fef41523          	sh	a5,-22(s0)
                if ( 0 == value )
80003f54:	fd744783          	lbu	a5,-41(s0)
80003f58:	04079063          	bnez	a5,80003f98 <GPIO_set_output+0x134>
                    outputs_state &= ~(1 << (port_id & 0x0F));
80003f5c:	fd842783          	lw	a5,-40(s0)
80003f60:	00f7f793          	andi	a5,a5,15
80003f64:	00100713          	li	a4,1
80003f68:	00f717b3          	sll	a5,a4,a5
80003f6c:	01079793          	slli	a5,a5,0x10
80003f70:	4107d793          	srai	a5,a5,0x10
80003f74:	fff7c793          	not	a5,a5
80003f78:	01079713          	slli	a4,a5,0x10
80003f7c:	41075713          	srai	a4,a4,0x10
80003f80:	fea41783          	lh	a5,-22(s0)
80003f84:	00f777b3          	and	a5,a4,a5
80003f88:	01079793          	slli	a5,a5,0x10
80003f8c:	4107d793          	srai	a5,a5,0x10
80003f90:	fef41523          	sh	a5,-22(s0)
80003f94:	0300006f          	j	80003fc4 <GPIO_set_output+0x160>
                    outputs_state |= 1 << (port_id & 0x0F);
80003f98:	fd842783          	lw	a5,-40(s0)
80003f9c:	00f7f793          	andi	a5,a5,15
80003fa0:	00100713          	li	a4,1
80003fa4:	00f717b3          	sll	a5,a4,a5
80003fa8:	01079713          	slli	a4,a5,0x10
80003fac:	41075713          	srai	a4,a4,0x10
80003fb0:	fea41783          	lh	a5,-22(s0)
80003fb4:	00f767b3          	or	a5,a4,a5
80003fb8:	01079793          	slli	a5,a5,0x10
80003fbc:	4107d793          	srai	a5,a5,0x10
80003fc0:	fef41523          	sh	a5,-22(s0)
                HW_set_16bit_reg( gpio_out_reg_addr, outputs_state );
80003fc4:	fea45783          	lhu	a5,-22(s0)
80003fc8:	00078593          	mv	a1,a5
80003fcc:	fe442503          	lw	a0,-28(s0)
80003fd0:	944fd0ef          	jal	ra,80001114 <HW_set_16bit_reg>
            break;
80003fd4:	0b80006f          	j	8000408c <GPIO_set_output+0x228>
                uint32_t gpio_out_reg_addr = this_gpio->base_addr + GPIO_OUT_REG_OFFSET + ((port_id >> 3) * 4);
80003fd8:	fdc42783          	lw	a5,-36(s0)
80003fdc:	0007a703          	lw	a4,0(a5)
80003fe0:	fd842783          	lw	a5,-40(s0)
80003fe4:	0037d793          	srli	a5,a5,0x3
80003fe8:	00279793          	slli	a5,a5,0x2
80003fec:	00f707b3          	add	a5,a4,a5
80003ff0:	0a078793          	addi	a5,a5,160
80003ff4:	fef42023          	sw	a5,-32(s0)
                outputs_state = HW_get_8bit_reg( gpio_out_reg_addr );
80003ff8:	fe042503          	lw	a0,-32(s0)
80003ffc:	ad0fd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80004000:	00050793          	mv	a5,a0
80004004:	fef404a3          	sb	a5,-23(s0)
                if ( 0 == value )
80004008:	fd744783          	lbu	a5,-41(s0)
8000400c:	04079063          	bnez	a5,8000404c <GPIO_set_output+0x1e8>
                    outputs_state &= ~(1 << (port_id & 0x07));
80004010:	fd842783          	lw	a5,-40(s0)
80004014:	0077f793          	andi	a5,a5,7
80004018:	00100713          	li	a4,1
8000401c:	00f717b3          	sll	a5,a4,a5
80004020:	01879793          	slli	a5,a5,0x18
80004024:	4187d793          	srai	a5,a5,0x18
80004028:	fff7c793          	not	a5,a5
8000402c:	01879713          	slli	a4,a5,0x18
80004030:	41875713          	srai	a4,a4,0x18
80004034:	fe940783          	lb	a5,-23(s0)
80004038:	00f777b3          	and	a5,a4,a5
8000403c:	01879793          	slli	a5,a5,0x18
80004040:	4187d793          	srai	a5,a5,0x18
80004044:	fef404a3          	sb	a5,-23(s0)
80004048:	0300006f          	j	80004078 <GPIO_set_output+0x214>
                    outputs_state |= 1 << (port_id & 0x07);
8000404c:	fd842783          	lw	a5,-40(s0)
80004050:	0077f793          	andi	a5,a5,7
80004054:	00100713          	li	a4,1
80004058:	00f717b3          	sll	a5,a4,a5
8000405c:	01879713          	slli	a4,a5,0x18
80004060:	41875713          	srai	a4,a4,0x18
80004064:	fe940783          	lb	a5,-23(s0)
80004068:	00f767b3          	or	a5,a4,a5
8000406c:	01879793          	slli	a5,a5,0x18
80004070:	4187d793          	srai	a5,a5,0x18
80004074:	fef404a3          	sb	a5,-23(s0)
                HW_set_8bit_reg( gpio_out_reg_addr, outputs_state );
80004078:	fe944783          	lbu	a5,-23(s0)
8000407c:	00078593          	mv	a1,a5
80004080:	fe042503          	lw	a0,-32(s0)
80004084:	a0cfd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            break;
80004088:	00000013          	nop
    }
}
8000408c:	00000013          	nop
80004090:	02c12083          	lw	ra,44(sp)
80004094:	02812403          	lw	s0,40(sp)
80004098:	03010113          	addi	sp,sp,48
8000409c:	00008067          	ret

Disassembly of section .text.GPIO_drive_inout:

800040a0 <GPIO_drive_inout>:
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id,
    gpio_inout_state_t  inout_state
)
{
800040a0:	fd010113          	addi	sp,sp,-48
800040a4:	02112623          	sw	ra,44(sp)
800040a8:	02812423          	sw	s0,40(sp)
800040ac:	03010413          	addi	s0,sp,48
800040b0:	fca42e23          	sw	a0,-36(s0)
800040b4:	fcb42c23          	sw	a1,-40(s0)
800040b8:	fcc42a23          	sw	a2,-44(s0)
    uint32_t config;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
800040bc:	fdc42783          	lw	a5,-36(s0)
800040c0:	0007a783          	lw	a5,0(a5)
800040c4:	fef42623          	sw	a5,-20(s0)
    
    HAL_ASSERT( port_id < NB_OF_GPIO );

    switch( inout_state )
800040c8:	fd442783          	lw	a5,-44(s0)
800040cc:	00100713          	li	a4,1
800040d0:	00e78c63          	beq	a5,a4,800040e8 <GPIO_drive_inout+0x48>
800040d4:	00100713          	li	a4,1
800040d8:	06e7e263          	bltu	a5,a4,8000413c <GPIO_drive_inout+0x9c>
800040dc:	00200713          	li	a4,2
800040e0:	0ae78863          	beq	a5,a4,80004190 <GPIO_drive_inout+0xf0>
            HW_set_8bit_reg( cfg_reg_addr, config );
            break;
            
        default:
            HAL_ASSERT(0);
            break;
800040e4:	0f00006f          	j	800041d4 <GPIO_drive_inout+0x134>
            GPIO_set_output( this_gpio, port_id, 1 );
800040e8:	00100613          	li	a2,1
800040ec:	fd842583          	lw	a1,-40(s0)
800040f0:	fdc42503          	lw	a0,-36(s0)
800040f4:	d71ff0ef          	jal	ra,80003e64 <GPIO_set_output>
            cfg_reg_addr = this_gpio->base_addr + (port_id * 4);
800040f8:	fdc42783          	lw	a5,-36(s0)
800040fc:	0007a703          	lw	a4,0(a5)
80004100:	fd842783          	lw	a5,-40(s0)
80004104:	00279793          	slli	a5,a5,0x2
80004108:	00f707b3          	add	a5,a4,a5
8000410c:	fef42623          	sw	a5,-20(s0)
            config = HW_get_8bit_reg( cfg_reg_addr );
80004110:	fec42503          	lw	a0,-20(s0)
80004114:	9b8fd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80004118:	00050793          	mv	a5,a0
8000411c:	fef42423          	sw	a5,-24(s0)
            config |= OUTPUT_BUFFER_ENABLE_MASK;
80004120:	fe842783          	lw	a5,-24(s0)
80004124:	0047e793          	ori	a5,a5,4
80004128:	fef42423          	sw	a5,-24(s0)
            HW_set_8bit_reg( cfg_reg_addr, config );
8000412c:	fe842583          	lw	a1,-24(s0)
80004130:	fec42503          	lw	a0,-20(s0)
80004134:	95cfd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            break;
80004138:	09c0006f          	j	800041d4 <GPIO_drive_inout+0x134>
            GPIO_set_output( this_gpio, port_id, 0 );
8000413c:	00000613          	li	a2,0
80004140:	fd842583          	lw	a1,-40(s0)
80004144:	fdc42503          	lw	a0,-36(s0)
80004148:	d1dff0ef          	jal	ra,80003e64 <GPIO_set_output>
            cfg_reg_addr = this_gpio->base_addr + (port_id * 4);
8000414c:	fdc42783          	lw	a5,-36(s0)
80004150:	0007a703          	lw	a4,0(a5)
80004154:	fd842783          	lw	a5,-40(s0)
80004158:	00279793          	slli	a5,a5,0x2
8000415c:	00f707b3          	add	a5,a4,a5
80004160:	fef42623          	sw	a5,-20(s0)
            config = HW_get_8bit_reg( cfg_reg_addr );
80004164:	fec42503          	lw	a0,-20(s0)
80004168:	964fd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
8000416c:	00050793          	mv	a5,a0
80004170:	fef42423          	sw	a5,-24(s0)
            config |= OUTPUT_BUFFER_ENABLE_MASK;
80004174:	fe842783          	lw	a5,-24(s0)
80004178:	0047e793          	ori	a5,a5,4
8000417c:	fef42423          	sw	a5,-24(s0)
            HW_set_8bit_reg( cfg_reg_addr, config );
80004180:	fe842583          	lw	a1,-24(s0)
80004184:	fec42503          	lw	a0,-20(s0)
80004188:	908fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            break;
8000418c:	0480006f          	j	800041d4 <GPIO_drive_inout+0x134>
            cfg_reg_addr = this_gpio->base_addr + (port_id * 4);
80004190:	fdc42783          	lw	a5,-36(s0)
80004194:	0007a703          	lw	a4,0(a5)
80004198:	fd842783          	lw	a5,-40(s0)
8000419c:	00279793          	slli	a5,a5,0x2
800041a0:	00f707b3          	add	a5,a4,a5
800041a4:	fef42623          	sw	a5,-20(s0)
            config = HW_get_8bit_reg( cfg_reg_addr );
800041a8:	fec42503          	lw	a0,-20(s0)
800041ac:	920fd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
800041b0:	00050793          	mv	a5,a0
800041b4:	fef42423          	sw	a5,-24(s0)
            config &= ~OUTPUT_BUFFER_ENABLE_MASK;
800041b8:	fe842783          	lw	a5,-24(s0)
800041bc:	ffb7f793          	andi	a5,a5,-5
800041c0:	fef42423          	sw	a5,-24(s0)
            HW_set_8bit_reg( cfg_reg_addr, config );
800041c4:	fe842583          	lw	a1,-24(s0)
800041c8:	fec42503          	lw	a0,-20(s0)
800041cc:	8c4fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            break;
800041d0:	00000013          	nop
    }
}
800041d4:	00000013          	nop
800041d8:	02c12083          	lw	ra,44(sp)
800041dc:	02812403          	lw	s0,40(sp)
800041e0:	03010113          	addi	sp,sp,48
800041e4:	00008067          	ret

Disassembly of section .text.GPIO_enable_irq:

800041e8 <GPIO_enable_irq>:
void GPIO_enable_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
800041e8:	fd010113          	addi	sp,sp,-48
800041ec:	02112623          	sw	ra,44(sp)
800041f0:	02812423          	sw	s0,40(sp)
800041f4:	03010413          	addi	s0,sp,48
800041f8:	fca42e23          	sw	a0,-36(s0)
800041fc:	fcb42c23          	sw	a1,-40(s0)
    uint32_t cfg_value;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
80004200:	fdc42783          	lw	a5,-36(s0)
80004204:	0007a783          	lw	a5,0(a5)
80004208:	fef42623          	sw	a5,-20(s0)
   
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
8000420c:	fd842703          	lw	a4,-40(s0)
80004210:	01f00793          	li	a5,31
80004214:	04e7e063          	bltu	a5,a4,80004254 <GPIO_enable_irq+0x6c>
    {
        cfg_reg_addr += (port_id * 4);
80004218:	fd842783          	lw	a5,-40(s0)
8000421c:	00279793          	slli	a5,a5,0x2
80004220:	fec42703          	lw	a4,-20(s0)
80004224:	00f707b3          	add	a5,a4,a5
80004228:	fef42623          	sw	a5,-20(s0)
        cfg_value = HW_get_8bit_reg( cfg_reg_addr );
8000422c:	fec42503          	lw	a0,-20(s0)
80004230:	89cfd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
80004234:	00050793          	mv	a5,a0
80004238:	fef42423          	sw	a5,-24(s0)
        cfg_value |= GPIO_INT_ENABLE_MASK;
8000423c:	fe842783          	lw	a5,-24(s0)
80004240:	0087e793          	ori	a5,a5,8
80004244:	fef42423          	sw	a5,-24(s0)
        HW_set_8bit_reg( cfg_reg_addr, cfg_value );
80004248:	fe842583          	lw	a1,-24(s0)
8000424c:	fec42503          	lw	a0,-20(s0)
80004250:	840fd0ef          	jal	ra,80001290 <HW_set_8bit_reg>
    }
}
80004254:	00000013          	nop
80004258:	02c12083          	lw	ra,44(sp)
8000425c:	02812403          	lw	s0,40(sp)
80004260:	03010113          	addi	sp,sp,48
80004264:	00008067          	ret

Disassembly of section .text.GPIO_disable_irq:

80004268 <GPIO_disable_irq>:
void GPIO_disable_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
80004268:	fd010113          	addi	sp,sp,-48
8000426c:	02112623          	sw	ra,44(sp)
80004270:	02812423          	sw	s0,40(sp)
80004274:	03010413          	addi	s0,sp,48
80004278:	fca42e23          	sw	a0,-36(s0)
8000427c:	fcb42c23          	sw	a1,-40(s0)
    uint32_t cfg_value;
    uint32_t cfg_reg_addr = this_gpio->base_addr;
80004280:	fdc42783          	lw	a5,-36(s0)
80004284:	0007a783          	lw	a5,0(a5)
80004288:	fef42623          	sw	a5,-20(s0)
   
    HAL_ASSERT( port_id < NB_OF_GPIO );
    
    if ( port_id < NB_OF_GPIO )
8000428c:	fd842703          	lw	a4,-40(s0)
80004290:	01f00793          	li	a5,31
80004294:	04e7e063          	bltu	a5,a4,800042d4 <GPIO_disable_irq+0x6c>
    {
        cfg_reg_addr += (port_id * 4);
80004298:	fd842783          	lw	a5,-40(s0)
8000429c:	00279793          	slli	a5,a5,0x2
800042a0:	fec42703          	lw	a4,-20(s0)
800042a4:	00f707b3          	add	a5,a4,a5
800042a8:	fef42623          	sw	a5,-20(s0)
        cfg_value = HW_get_8bit_reg( cfg_reg_addr );
800042ac:	fec42503          	lw	a0,-20(s0)
800042b0:	81cfd0ef          	jal	ra,800012cc <HW_get_8bit_reg>
800042b4:	00050793          	mv	a5,a0
800042b8:	fef42423          	sw	a5,-24(s0)
        cfg_value &= ~GPIO_INT_ENABLE_MASK;
800042bc:	fe842783          	lw	a5,-24(s0)
800042c0:	ff77f793          	andi	a5,a5,-9
800042c4:	fef42423          	sw	a5,-24(s0)
        HW_set_8bit_reg( cfg_reg_addr, cfg_value );
800042c8:	fe842583          	lw	a1,-24(s0)
800042cc:	fec42503          	lw	a0,-20(s0)
800042d0:	fc1fc0ef          	jal	ra,80001290 <HW_set_8bit_reg>
    }
}
800042d4:	00000013          	nop
800042d8:	02c12083          	lw	ra,44(sp)
800042dc:	02812403          	lw	s0,40(sp)
800042e0:	03010113          	addi	sp,sp,48
800042e4:	00008067          	ret

Disassembly of section .text.GPIO_clear_irq:

800042e8 <GPIO_clear_irq>:
void GPIO_clear_irq
(
    gpio_instance_t *   this_gpio,
    gpio_id_t           port_id
)
{
800042e8:	fd010113          	addi	sp,sp,-48
800042ec:	02112623          	sw	ra,44(sp)
800042f0:	02812423          	sw	s0,40(sp)
800042f4:	03010413          	addi	s0,sp,48
800042f8:	fca42e23          	sw	a0,-36(s0)
800042fc:	fcb42c23          	sw	a1,-40(s0)
    uint32_t irq_clr_value = ((uint32_t)1) << ((uint32_t)port_id);
80004300:	00100713          	li	a4,1
80004304:	fd842783          	lw	a5,-40(s0)
80004308:	00f717b3          	sll	a5,a4,a5
8000430c:	fef42623          	sw	a5,-20(s0)
    
    switch( this_gpio->apb_bus_width )
80004310:	fdc42783          	lw	a5,-36(s0)
80004314:	0047a783          	lw	a5,4(a5)
80004318:	00100713          	li	a4,1
8000431c:	02e78a63          	beq	a5,a4,80004350 <GPIO_clear_irq+0x68>
80004320:	00100713          	li	a4,1
80004324:	06e7e463          	bltu	a5,a4,8000438c <GPIO_clear_irq+0xa4>
80004328:	00200713          	li	a4,2
8000432c:	00e78463          	beq	a5,a4,80004334 <GPIO_clear_irq+0x4c>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, irq_clr_value >> 24 );
            break;
            
        default:
            HAL_ASSERT(0);
            break;
80004330:	0d80006f          	j	80004408 <GPIO_clear_irq+0x120>
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, irq_clr_value );
80004334:	fdc42783          	lw	a5,-36(s0)
80004338:	0007a783          	lw	a5,0(a5)
8000433c:	08078793          	addi	a5,a5,128
80004340:	fec42583          	lw	a1,-20(s0)
80004344:	00078513          	mv	a0,a5
80004348:	c9dfc0ef          	jal	ra,80000fe4 <HW_set_32bit_reg>
            break;
8000434c:	0bc0006f          	j	80004408 <GPIO_clear_irq+0x120>
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ0, irq_clr_value );
80004350:	fdc42783          	lw	a5,-36(s0)
80004354:	0007a783          	lw	a5,0(a5)
80004358:	08078793          	addi	a5,a5,128
8000435c:	fec42583          	lw	a1,-20(s0)
80004360:	00078513          	mv	a0,a5
80004364:	db1fc0ef          	jal	ra,80001114 <HW_set_16bit_reg>
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, irq_clr_value >> 16 );
80004368:	fdc42783          	lw	a5,-36(s0)
8000436c:	0007a783          	lw	a5,0(a5)
80004370:	08478713          	addi	a4,a5,132
80004374:	fec42783          	lw	a5,-20(s0)
80004378:	0107d793          	srli	a5,a5,0x10
8000437c:	00078593          	mv	a1,a5
80004380:	00070513          	mv	a0,a4
80004384:	d91fc0ef          	jal	ra,80001114 <HW_set_16bit_reg>
            break;
80004388:	0800006f          	j	80004408 <GPIO_clear_irq+0x120>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ0, irq_clr_value );
8000438c:	fdc42783          	lw	a5,-36(s0)
80004390:	0007a783          	lw	a5,0(a5)
80004394:	08078793          	addi	a5,a5,128
80004398:	fec42583          	lw	a1,-20(s0)
8000439c:	00078513          	mv	a0,a5
800043a0:	ef1fc0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ1, irq_clr_value >> 8 );
800043a4:	fdc42783          	lw	a5,-36(s0)
800043a8:	0007a783          	lw	a5,0(a5)
800043ac:	08478713          	addi	a4,a5,132
800043b0:	fec42783          	lw	a5,-20(s0)
800043b4:	0087d793          	srli	a5,a5,0x8
800043b8:	00078593          	mv	a1,a5
800043bc:	00070513          	mv	a0,a4
800043c0:	ed1fc0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ2, irq_clr_value >> 16 );
800043c4:	fdc42783          	lw	a5,-36(s0)
800043c8:	0007a783          	lw	a5,0(a5)
800043cc:	08878713          	addi	a4,a5,136
800043d0:	fec42783          	lw	a5,-20(s0)
800043d4:	0107d793          	srli	a5,a5,0x10
800043d8:	00078593          	mv	a1,a5
800043dc:	00070513          	mv	a0,a4
800043e0:	eb1fc0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, irq_clr_value >> 24 );
800043e4:	fdc42783          	lw	a5,-36(s0)
800043e8:	0007a783          	lw	a5,0(a5)
800043ec:	08c78713          	addi	a4,a5,140
800043f0:	fec42783          	lw	a5,-20(s0)
800043f4:	0187d793          	srli	a5,a5,0x18
800043f8:	00078593          	mv	a1,a5
800043fc:	00070513          	mv	a0,a4
80004400:	e91fc0ef          	jal	ra,80001290 <HW_set_8bit_reg>
            break;
80004404:	00000013          	nop
    }
}
80004408:	00000013          	nop
8000440c:	02c12083          	lw	ra,44(sp)
80004410:	02812403          	lw	s0,40(sp)
80004414:	03010113          	addi	sp,sp,48
80004418:	00008067          	ret

Disassembly of section .text.draw_board:

8000441c <draw_board>:
draw_board
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
8000441c:	fd010113          	addi	sp,sp,-48
80004420:	02112623          	sw	ra,44(sp)
80004424:	02812423          	sw	s0,40(sp)
80004428:	03010413          	addi	s0,sp,48
8000442c:	fca42e23          	sw	a0,-36(s0)
80004430:	fcb42c23          	sw	a1,-40(s0)
	 // fill screen white
	for(uint8_t x=0; x< TFT_WIDTH; x++)
80004434:	fe0407a3          	sb	zero,-17(s0)
80004438:	0340006f          	j	8000446c <draw_board+0x50>
	{
		TFT_fastVLine(this_spi, x, 0, 320, ILI9341_WHITE, this_gpio);
8000443c:	fef44783          	lbu	a5,-17(s0)
80004440:	01079593          	slli	a1,a5,0x10
80004444:	4105d593          	srai	a1,a1,0x10
80004448:	fd842783          	lw	a5,-40(s0)
8000444c:	fff00713          	li	a4,-1
80004450:	14000693          	li	a3,320
80004454:	00000613          	li	a2,0
80004458:	fdc42503          	lw	a0,-36(s0)
8000445c:	180040ef          	jal	ra,800085dc <TFT_fastVLine>
	for(uint8_t x=0; x< TFT_WIDTH; x++)
80004460:	fef44783          	lbu	a5,-17(s0)
80004464:	00178793          	addi	a5,a5,1
80004468:	fef407a3          	sb	a5,-17(s0)
8000446c:	fef44703          	lbu	a4,-17(s0)
80004470:	0ef00793          	li	a5,239
80004474:	fce7f4e3          	bleu	a4,a5,8000443c <draw_board+0x20>
	}
	// draw board fast (?)
	TFT_fastVLine(this_spi, 80, 0, 240, ILI9341_BLACK, this_gpio);
80004478:	fd842783          	lw	a5,-40(s0)
8000447c:	00000713          	li	a4,0
80004480:	0f000693          	li	a3,240
80004484:	00000613          	li	a2,0
80004488:	05000593          	li	a1,80
8000448c:	fdc42503          	lw	a0,-36(s0)
80004490:	14c040ef          	jal	ra,800085dc <TFT_fastVLine>
	TFT_fastVLine(this_spi, 160, 0, 240, ILI9341_BLACK, this_gpio);
80004494:	fd842783          	lw	a5,-40(s0)
80004498:	00000713          	li	a4,0
8000449c:	0f000693          	li	a3,240
800044a0:	00000613          	li	a2,0
800044a4:	0a000593          	li	a1,160
800044a8:	fdc42503          	lw	a0,-36(s0)
800044ac:	130040ef          	jal	ra,800085dc <TFT_fastVLine>
	TFT_fastHLine(this_spi,0, 80, 240, ILI9341_BLACK, this_gpio);
800044b0:	fd842783          	lw	a5,-40(s0)
800044b4:	00000713          	li	a4,0
800044b8:	0f000693          	li	a3,240
800044bc:	05000613          	li	a2,80
800044c0:	00000593          	li	a1,0
800044c4:	fdc42503          	lw	a0,-36(s0)
800044c8:	244040ef          	jal	ra,8000870c <TFT_fastHLine>
	TFT_fastHLine(this_spi,0, 160, 240, ILI9341_BLACK, this_gpio);
800044cc:	fd842783          	lw	a5,-40(s0)
800044d0:	00000713          	li	a4,0
800044d4:	0f000693          	li	a3,240
800044d8:	0a000613          	li	a2,160
800044dc:	00000593          	li	a1,0
800044e0:	fdc42503          	lw	a0,-36(s0)
800044e4:	228040ef          	jal	ra,8000870c <TFT_fastHLine>
}
800044e8:	00000013          	nop
800044ec:	02c12083          	lw	ra,44(sp)
800044f0:	02812403          	lw	s0,40(sp)
800044f4:	03010113          	addi	sp,sp,48
800044f8:	00008067          	ret

Disassembly of section .text.singlePlayerMode:

800044fc <singlePlayerMode>:
singlePlayerMode
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
800044fc:	fc010113          	addi	sp,sp,-64
80004500:	02112e23          	sw	ra,60(sp)
80004504:	02812c23          	sw	s0,56(sp)
80004508:	04010413          	addi	s0,sp,64
8000450c:	fca42623          	sw	a0,-52(s0)
80004510:	fcb42423          	sw	a1,-56(s0)
	draw_board(this_spi,this_gpio);
80004514:	fc842583          	lw	a1,-56(s0)
80004518:	fcc42503          	lw	a0,-52(s0)
8000451c:	f01ff0ef          	jal	ra,8000441c <draw_board>
	uint8_t player = 1;
80004520:	00100793          	li	a5,1
80004524:	fef403a3          	sb	a5,-25(s0)
	uint8_t winner = 0;
80004528:	fe0407a3          	sb	zero,-17(s0)
	uint32_t counter = 0;
8000452c:	fe042423          	sw	zero,-24(s0)
	char board[9] = {' ',' ',' ',' ',' ',' ',' ',' ',' ' };
80004530:	02000793          	li	a5,32
80004534:	fcf40e23          	sb	a5,-36(s0)
80004538:	02000793          	li	a5,32
8000453c:	fcf40ea3          	sb	a5,-35(s0)
80004540:	02000793          	li	a5,32
80004544:	fcf40f23          	sb	a5,-34(s0)
80004548:	02000793          	li	a5,32
8000454c:	fcf40fa3          	sb	a5,-33(s0)
80004550:	02000793          	li	a5,32
80004554:	fef40023          	sb	a5,-32(s0)
80004558:	02000793          	li	a5,32
8000455c:	fef400a3          	sb	a5,-31(s0)
80004560:	02000793          	li	a5,32
80004564:	fef40123          	sb	a5,-30(s0)
80004568:	02000793          	li	a5,32
8000456c:	fef401a3          	sb	a5,-29(s0)
80004570:	02000793          	li	a5,32
80004574:	fef40223          	sb	a5,-28(s0)

	while( counter < 9 && winner == 0)
80004578:	12c0006f          	j	800046a4 <singlePlayerMode+0x1a8>
	{
		player = counter%2+1;
8000457c:	fe842783          	lw	a5,-24(s0)
80004580:	0ff7f793          	andi	a5,a5,255
80004584:	0017f793          	andi	a5,a5,1
80004588:	0ff7f793          	andi	a5,a5,255
8000458c:	00178793          	addi	a5,a5,1
80004590:	fef403a3          	sb	a5,-25(s0)
		if (player == 1)
80004594:	fe744703          	lbu	a4,-25(s0)
80004598:	00100793          	li	a5,1
8000459c:	06f71463          	bne	a4,a5,80004604 <singlePlayerMode+0x108>
		{
			board[singlePlayerX(this_spi,this_gpio, board, player)] = 'X';
800045a0:	fe744703          	lbu	a4,-25(s0)
800045a4:	fdc40793          	addi	a5,s0,-36
800045a8:	00070693          	mv	a3,a4
800045ac:	00078613          	mv	a2,a5
800045b0:	fc842583          	lw	a1,-56(s0)
800045b4:	fcc42503          	lw	a0,-52(s0)
800045b8:	114000ef          	jal	ra,800046cc <singlePlayerX>
800045bc:	00050793          	mv	a5,a0
800045c0:	ff040713          	addi	a4,s0,-16
800045c4:	00f707b3          	add	a5,a4,a5
800045c8:	05800713          	li	a4,88
800045cc:	fee78623          	sb	a4,-20(a5)
			winner = check_winner(this_spi,board,player, this_gpio);
800045d0:	fe744703          	lbu	a4,-25(s0)
800045d4:	fdc40793          	addi	a5,s0,-36
800045d8:	fc842683          	lw	a3,-56(s0)
800045dc:	00070613          	mv	a2,a4
800045e0:	00078593          	mv	a1,a5
800045e4:	fcc42503          	lw	a0,-52(s0)
800045e8:	1bc020ef          	jal	ra,800067a4 <check_winner>
800045ec:	00050793          	mv	a5,a0
800045f0:	fef407a3          	sb	a5,-17(s0)
			counter ++;
800045f4:	fe842783          	lw	a5,-24(s0)
800045f8:	00178793          	addi	a5,a5,1
800045fc:	fef42423          	sw	a5,-24(s0)
80004600:	0840006f          	j	80004684 <singlePlayerMode+0x188>
		}
		else
		{
			for(volatile uint32_t x=0; x < 0xF; x++);
80004604:	fc042c23          	sw	zero,-40(s0)
80004608:	0100006f          	j	80004618 <singlePlayerMode+0x11c>
8000460c:	fd842783          	lw	a5,-40(s0)
80004610:	00178793          	addi	a5,a5,1
80004614:	fcf42c23          	sw	a5,-40(s0)
80004618:	fd842703          	lw	a4,-40(s0)
8000461c:	00e00793          	li	a5,14
80004620:	fee7f6e3          	bleu	a4,a5,8000460c <singlePlayerMode+0x110>
			board[singlePlayerAI(this_spi, this_gpio, board, player)] = 'O';
80004624:	fe744703          	lbu	a4,-25(s0)
80004628:	fdc40793          	addi	a5,s0,-36
8000462c:	00070693          	mv	a3,a4
80004630:	00078613          	mv	a2,a5
80004634:	fc842583          	lw	a1,-56(s0)
80004638:	fcc42503          	lw	a0,-52(s0)
8000463c:	0f1000ef          	jal	ra,80004f2c <singlePlayerAI>
80004640:	00050793          	mv	a5,a0
80004644:	ff040713          	addi	a4,s0,-16
80004648:	00f707b3          	add	a5,a4,a5
8000464c:	04f00713          	li	a4,79
80004650:	fee78623          	sb	a4,-20(a5)
			winner = check_winner(this_spi,board,player, this_gpio);
80004654:	fe744703          	lbu	a4,-25(s0)
80004658:	fdc40793          	addi	a5,s0,-36
8000465c:	fc842683          	lw	a3,-56(s0)
80004660:	00070613          	mv	a2,a4
80004664:	00078593          	mv	a1,a5
80004668:	fcc42503          	lw	a0,-52(s0)
8000466c:	138020ef          	jal	ra,800067a4 <check_winner>
80004670:	00050793          	mv	a5,a0
80004674:	fef407a3          	sb	a5,-17(s0)
			counter ++;
80004678:	fe842783          	lw	a5,-24(s0)
8000467c:	00178793          	addi	a5,a5,1
80004680:	fef42423          	sw	a5,-24(s0)
		}

		if (winner == 0 && counter >=9)
80004684:	fef44783          	lbu	a5,-17(s0)
80004688:	00079e63          	bnez	a5,800046a4 <singlePlayerMode+0x1a8>
8000468c:	fe842703          	lw	a4,-24(s0)
80004690:	00800793          	li	a5,8
80004694:	00e7f863          	bleu	a4,a5,800046a4 <singlePlayerMode+0x1a8>
		{
			drawGame(this_spi, this_gpio);
80004698:	fc842583          	lw	a1,-56(s0)
8000469c:	fcc42503          	lw	a0,-52(s0)
800046a0:	07c020ef          	jal	ra,8000671c <drawGame>
	while( counter < 9 && winner == 0)
800046a4:	fe842703          	lw	a4,-24(s0)
800046a8:	00800793          	li	a5,8
800046ac:	00e7e663          	bltu	a5,a4,800046b8 <singlePlayerMode+0x1bc>
800046b0:	fef44783          	lbu	a5,-17(s0)
800046b4:	ec0784e3          	beqz	a5,8000457c <singlePlayerMode+0x80>
		}
	}
}
800046b8:	00000013          	nop
800046bc:	03c12083          	lw	ra,60(sp)
800046c0:	03812403          	lw	s0,56(sp)
800046c4:	04010113          	addi	sp,sp,64
800046c8:	00008067          	ret

Disassembly of section .text.singlePlayerX:

800046cc <singlePlayerX>:
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	char board[9],
	uint8_t player
)
{
800046cc:	fc010113          	addi	sp,sp,-64
800046d0:	02112e23          	sw	ra,60(sp)
800046d4:	02812c23          	sw	s0,56(sp)
800046d8:	04010413          	addi	s0,sp,64
800046dc:	fca42623          	sw	a0,-52(s0)
800046e0:	fcb42423          	sw	a1,-56(s0)
800046e4:	fcc42223          	sw	a2,-60(s0)
800046e8:	00068793          	mv	a5,a3
800046ec:	fcf401a3          	sb	a5,-61(s0)
	uint16_t x,y;
	uint8_t z;
	uint16_t  x_pos0, y_pos0,x_pos1, y_pos1;//, sq_centre_x,sq_centre_y ;
	uint16_t  x_pos2, y_pos2,x_pos3, y_pos3;//, x_count, o_count;
	uint8_t choice = 0;
800046f0:	fe0407a3          	sb	zero,-17(s0)

	while(choice == 0 && player == 1)
800046f4:	0090006f          	j	80004efc <singlePlayerX+0x830>
	{

	   if ( ((TS_readRegister8(this_spi, this_gpio,STMPE_TSC_CTRL) ) & 0x80))
800046f8:	04000613          	li	a2,64
800046fc:	fc842583          	lw	a1,-56(s0)
80004700:	fcc42503          	lw	a0,-52(s0)
80004704:	068030ef          	jal	ra,8000776c <TS_readRegister8>
80004708:	00050793          	mv	a5,a0
8000470c:	01879793          	slli	a5,a5,0x18
80004710:	4187d793          	srai	a5,a5,0x18
80004714:	7e07d463          	bgez	a5,80004efc <singlePlayerX+0x830>
	   {
		//  player = counter%2+1;
		   TS_readData( this_spi, this_gpio, &x, &y, &z);
80004718:	fd940713          	addi	a4,s0,-39
8000471c:	fda40693          	addi	a3,s0,-38
80004720:	fdc40793          	addi	a5,s0,-36
80004724:	00078613          	mv	a2,a5
80004728:	fc842583          	lw	a1,-56(s0)
8000472c:	fcc42503          	lw	a0,-52(s0)
80004730:	1e4030ef          	jal	ra,80007914 <TS_readData>
		  x = map( x, TS_MINX, TS_MAXX, 0, TFT_WIDTH);
80004734:	fdc45503          	lhu	a0,-36(s0)
80004738:	0f000713          	li	a4,240
8000473c:	00000693          	li	a3,0
80004740:	000017b7          	lui	a5,0x1
80004744:	ed878613          	addi	a2,a5,-296 # ed8 <HEAP_SIZE+0x6d8>
80004748:	09600593          	li	a1,150
8000474c:	769010ef          	jal	ra,800066b4 <map>
80004750:	00050793          	mv	a5,a0
80004754:	01079793          	slli	a5,a5,0x10
80004758:	0107d793          	srli	a5,a5,0x10
8000475c:	fcf41e23          	sh	a5,-36(s0)
		  y = map( y, TS_MINY, TS_MAXY, 0, TFT_HEIGHT);
80004760:	fda45503          	lhu	a0,-38(s0)
80004764:	14000713          	li	a4,320
80004768:	00000693          	li	a3,0
8000476c:	000017b7          	lui	a5,0x1
80004770:	fa078613          	addi	a2,a5,-96 # fa0 <HEAP_SIZE+0x7a0>
80004774:	08200593          	li	a1,130
80004778:	73d010ef          	jal	ra,800066b4 <map>
8000477c:	00050793          	mv	a5,a0
80004780:	01079793          	slli	a5,a5,0x10
80004784:	0107d793          	srli	a5,a5,0x10
80004788:	fcf41d23          	sh	a5,-38(s0)

		  if ((x < 80 && y < 80) && board[0]==' ')// 0
8000478c:	fdc45703          	lhu	a4,-36(s0)
80004790:	04f00793          	li	a5,79
80004794:	0ae7ec63          	bltu	a5,a4,8000484c <singlePlayerX+0x180>
80004798:	fda45703          	lhu	a4,-38(s0)
8000479c:	04f00793          	li	a5,79
800047a0:	0ae7e663          	bltu	a5,a4,8000484c <singlePlayerX+0x180>
800047a4:	fc442783          	lw	a5,-60(s0)
800047a8:	0007c703          	lbu	a4,0(a5)
800047ac:	02000793          	li	a5,32
800047b0:	08f71e63          	bne	a4,a5,8000484c <singlePlayerX+0x180>
		  {
			  x_pos0 = 20;  y_pos0=20;
800047b4:	01400793          	li	a5,20
800047b8:	fef41623          	sh	a5,-20(s0)
800047bc:	01400793          	li	a5,20
800047c0:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =60 ;  y_pos1 =60;
800047c4:	03c00793          	li	a5,60
800047c8:	fef41423          	sh	a5,-24(s0)
800047cc:	03c00793          	li	a5,60
800047d0:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 60;  y_pos2=20;
800047d4:	03c00793          	li	a5,60
800047d8:	fef41223          	sh	a5,-28(s0)
800047dc:	01400793          	li	a5,20
800047e0:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =20 ;  y_pos3 =60;
800047e4:	01400793          	li	a5,20
800047e8:	fef41023          	sh	a5,-32(s0)
800047ec:	03c00793          	li	a5,60
800047f0:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
800047f4:	fec41583          	lh	a1,-20(s0)
800047f8:	fea41603          	lh	a2,-22(s0)
800047fc:	fe841683          	lh	a3,-24(s0)
80004800:	fe641703          	lh	a4,-26(s0)
80004804:	fc842803          	lw	a6,-56(s0)
80004808:	000107b7          	lui	a5,0x10
8000480c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004810:	fcc42503          	lw	a0,-52(s0)
80004814:	648040ef          	jal	ra,80008e5c <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004818:	fe441583          	lh	a1,-28(s0)
8000481c:	fe241603          	lh	a2,-30(s0)
80004820:	fe041683          	lh	a3,-32(s0)
80004824:	fde41703          	lh	a4,-34(s0)
80004828:	fc842803          	lw	a6,-56(s0)
8000482c:	000107b7          	lui	a5,0x10
80004830:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004834:	fcc42503          	lw	a0,-52(s0)
80004838:	624040ef          	jal	ra,80008e5c <TFT_drawLine>
			  choice = 1;
8000483c:	00100793          	li	a5,1
80004840:	fef407a3          	sb	a5,-17(s0)
			  return 0;
80004844:	00000793          	li	a5,0
80004848:	6d00006f          	j	80004f18 <singlePlayerX+0x84c>
		  }
		  else if(((x < 160 && x >80)&& y<80) && board[1]==' ')//&& pos1==0)// 1
8000484c:	fdc45703          	lhu	a4,-36(s0)
80004850:	09f00793          	li	a5,159
80004854:	0ce7e463          	bltu	a5,a4,8000491c <singlePlayerX+0x250>
80004858:	fdc45703          	lhu	a4,-36(s0)
8000485c:	05000793          	li	a5,80
80004860:	0ae7fe63          	bleu	a4,a5,8000491c <singlePlayerX+0x250>
80004864:	fda45703          	lhu	a4,-38(s0)
80004868:	04f00793          	li	a5,79
8000486c:	0ae7e863          	bltu	a5,a4,8000491c <singlePlayerX+0x250>
80004870:	fc442783          	lw	a5,-60(s0)
80004874:	00178793          	addi	a5,a5,1
80004878:	0007c703          	lbu	a4,0(a5)
8000487c:	02000793          	li	a5,32
80004880:	08f71e63          	bne	a4,a5,8000491c <singlePlayerX+0x250>
		  {
			  x_pos0 = 100; y_pos0=20;
80004884:	06400793          	li	a5,100
80004888:	fef41623          	sh	a5,-20(s0)
8000488c:	01400793          	li	a5,20
80004890:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =140 ; y_pos1 =60;
80004894:	08c00793          	li	a5,140
80004898:	fef41423          	sh	a5,-24(s0)
8000489c:	03c00793          	li	a5,60
800048a0:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 140; y_pos2=20;
800048a4:	08c00793          	li	a5,140
800048a8:	fef41223          	sh	a5,-28(s0)
800048ac:	01400793          	li	a5,20
800048b0:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =100 ; y_pos3 =60;
800048b4:	06400793          	li	a5,100
800048b8:	fef41023          	sh	a5,-32(s0)
800048bc:	03c00793          	li	a5,60
800048c0:	fcf41f23          	sh	a5,-34(s0)
		  	  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
800048c4:	fec41583          	lh	a1,-20(s0)
800048c8:	fea41603          	lh	a2,-22(s0)
800048cc:	fe841683          	lh	a3,-24(s0)
800048d0:	fe641703          	lh	a4,-26(s0)
800048d4:	fc842803          	lw	a6,-56(s0)
800048d8:	000107b7          	lui	a5,0x10
800048dc:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800048e0:	fcc42503          	lw	a0,-52(s0)
800048e4:	578040ef          	jal	ra,80008e5c <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
800048e8:	fe441583          	lh	a1,-28(s0)
800048ec:	fe241603          	lh	a2,-30(s0)
800048f0:	fe041683          	lh	a3,-32(s0)
800048f4:	fde41703          	lh	a4,-34(s0)
800048f8:	fc842803          	lw	a6,-56(s0)
800048fc:	000107b7          	lui	a5,0x10
80004900:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004904:	fcc42503          	lw	a0,-52(s0)
80004908:	554040ef          	jal	ra,80008e5c <TFT_drawLine>
			  choice = 1;
8000490c:	00100793          	li	a5,1
80004910:	fef407a3          	sb	a5,-17(s0)
			  return 1;
80004914:	00100793          	li	a5,1
80004918:	6000006f          	j	80004f18 <singlePlayerX+0x84c>
		  }
		  else if(((x < 240 && x >160)&& y<80)&& board[2]==' ' )//&& pos2==0)// 2
8000491c:	fdc45703          	lhu	a4,-36(s0)
80004920:	0ef00793          	li	a5,239
80004924:	0ce7e463          	bltu	a5,a4,800049ec <singlePlayerX+0x320>
80004928:	fdc45703          	lhu	a4,-36(s0)
8000492c:	0a000793          	li	a5,160
80004930:	0ae7fe63          	bleu	a4,a5,800049ec <singlePlayerX+0x320>
80004934:	fda45703          	lhu	a4,-38(s0)
80004938:	04f00793          	li	a5,79
8000493c:	0ae7e863          	bltu	a5,a4,800049ec <singlePlayerX+0x320>
80004940:	fc442783          	lw	a5,-60(s0)
80004944:	00278793          	addi	a5,a5,2
80004948:	0007c703          	lbu	a4,0(a5)
8000494c:	02000793          	li	a5,32
80004950:	08f71e63          	bne	a4,a5,800049ec <singlePlayerX+0x320>
		  {
			  x_pos0 = 180;  y_pos0=20;
80004954:	0b400793          	li	a5,180
80004958:	fef41623          	sh	a5,-20(s0)
8000495c:	01400793          	li	a5,20
80004960:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =220 ;  y_pos1 =60;
80004964:	0dc00793          	li	a5,220
80004968:	fef41423          	sh	a5,-24(s0)
8000496c:	03c00793          	li	a5,60
80004970:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 220;  y_pos2=20;
80004974:	0dc00793          	li	a5,220
80004978:	fef41223          	sh	a5,-28(s0)
8000497c:	01400793          	li	a5,20
80004980:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =180 ;  y_pos3 =60;
80004984:	0b400793          	li	a5,180
80004988:	fef41023          	sh	a5,-32(s0)
8000498c:	03c00793          	li	a5,60
80004990:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004994:	fec41583          	lh	a1,-20(s0)
80004998:	fea41603          	lh	a2,-22(s0)
8000499c:	fe841683          	lh	a3,-24(s0)
800049a0:	fe641703          	lh	a4,-26(s0)
800049a4:	fc842803          	lw	a6,-56(s0)
800049a8:	000107b7          	lui	a5,0x10
800049ac:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800049b0:	fcc42503          	lw	a0,-52(s0)
800049b4:	4a8040ef          	jal	ra,80008e5c <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
800049b8:	fe441583          	lh	a1,-28(s0)
800049bc:	fe241603          	lh	a2,-30(s0)
800049c0:	fe041683          	lh	a3,-32(s0)
800049c4:	fde41703          	lh	a4,-34(s0)
800049c8:	fc842803          	lw	a6,-56(s0)
800049cc:	000107b7          	lui	a5,0x10
800049d0:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800049d4:	fcc42503          	lw	a0,-52(s0)
800049d8:	484040ef          	jal	ra,80008e5c <TFT_drawLine>
			  choice = 1;
800049dc:	00100793          	li	a5,1
800049e0:	fef407a3          	sb	a5,-17(s0)
			  return 2;
800049e4:	00200793          	li	a5,2
800049e8:	5300006f          	j	80004f18 <singlePlayerX+0x84c>
		  }
		  else if(x < 80 && (y>80 && y <160)&& board[3]==' ')// && pos3==0)// 3
800049ec:	fdc45703          	lhu	a4,-36(s0)
800049f0:	04f00793          	li	a5,79
800049f4:	0ce7e463          	bltu	a5,a4,80004abc <singlePlayerX+0x3f0>
800049f8:	fda45703          	lhu	a4,-38(s0)
800049fc:	05000793          	li	a5,80
80004a00:	0ae7fe63          	bleu	a4,a5,80004abc <singlePlayerX+0x3f0>
80004a04:	fda45703          	lhu	a4,-38(s0)
80004a08:	09f00793          	li	a5,159
80004a0c:	0ae7e863          	bltu	a5,a4,80004abc <singlePlayerX+0x3f0>
80004a10:	fc442783          	lw	a5,-60(s0)
80004a14:	00378793          	addi	a5,a5,3
80004a18:	0007c703          	lbu	a4,0(a5)
80004a1c:	02000793          	li	a5,32
80004a20:	08f71e63          	bne	a4,a5,80004abc <singlePlayerX+0x3f0>
		  {
			  x_pos0 = 20;  y_pos0=100;
80004a24:	01400793          	li	a5,20
80004a28:	fef41623          	sh	a5,-20(s0)
80004a2c:	06400793          	li	a5,100
80004a30:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =60 ;  y_pos1 =140;
80004a34:	03c00793          	li	a5,60
80004a38:	fef41423          	sh	a5,-24(s0)
80004a3c:	08c00793          	li	a5,140
80004a40:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 60;  y_pos2=100;
80004a44:	03c00793          	li	a5,60
80004a48:	fef41223          	sh	a5,-28(s0)
80004a4c:	06400793          	li	a5,100
80004a50:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =20 ;  y_pos3 =140;
80004a54:	01400793          	li	a5,20
80004a58:	fef41023          	sh	a5,-32(s0)
80004a5c:	08c00793          	li	a5,140
80004a60:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004a64:	fec41583          	lh	a1,-20(s0)
80004a68:	fea41603          	lh	a2,-22(s0)
80004a6c:	fe841683          	lh	a3,-24(s0)
80004a70:	fe641703          	lh	a4,-26(s0)
80004a74:	fc842803          	lw	a6,-56(s0)
80004a78:	000107b7          	lui	a5,0x10
80004a7c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004a80:	fcc42503          	lw	a0,-52(s0)
80004a84:	3d8040ef          	jal	ra,80008e5c <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004a88:	fe441583          	lh	a1,-28(s0)
80004a8c:	fe241603          	lh	a2,-30(s0)
80004a90:	fe041683          	lh	a3,-32(s0)
80004a94:	fde41703          	lh	a4,-34(s0)
80004a98:	fc842803          	lw	a6,-56(s0)
80004a9c:	000107b7          	lui	a5,0x10
80004aa0:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004aa4:	fcc42503          	lw	a0,-52(s0)
80004aa8:	3b4040ef          	jal	ra,80008e5c <TFT_drawLine>
			  choice = 1;
80004aac:	00100793          	li	a5,1
80004ab0:	fef407a3          	sb	a5,-17(s0)
			  return 3;
80004ab4:	00300793          	li	a5,3
80004ab8:	4600006f          	j	80004f18 <singlePlayerX+0x84c>
		  }
		  else if((x < 160 && x >80)&& (y < 160 && y >80)&& board[4]==' ' )//&& pos4==0)// 4
80004abc:	fdc45703          	lhu	a4,-36(s0)
80004ac0:	09f00793          	li	a5,159
80004ac4:	0ce7ea63          	bltu	a5,a4,80004b98 <singlePlayerX+0x4cc>
80004ac8:	fdc45703          	lhu	a4,-36(s0)
80004acc:	05000793          	li	a5,80
80004ad0:	0ce7f463          	bleu	a4,a5,80004b98 <singlePlayerX+0x4cc>
80004ad4:	fda45703          	lhu	a4,-38(s0)
80004ad8:	09f00793          	li	a5,159
80004adc:	0ae7ee63          	bltu	a5,a4,80004b98 <singlePlayerX+0x4cc>
80004ae0:	fda45703          	lhu	a4,-38(s0)
80004ae4:	05000793          	li	a5,80
80004ae8:	0ae7f863          	bleu	a4,a5,80004b98 <singlePlayerX+0x4cc>
80004aec:	fc442783          	lw	a5,-60(s0)
80004af0:	00478793          	addi	a5,a5,4
80004af4:	0007c703          	lbu	a4,0(a5)
80004af8:	02000793          	li	a5,32
80004afc:	08f71e63          	bne	a4,a5,80004b98 <singlePlayerX+0x4cc>
		  {
			  x_pos0 = 100;  y_pos0=100;
80004b00:	06400793          	li	a5,100
80004b04:	fef41623          	sh	a5,-20(s0)
80004b08:	06400793          	li	a5,100
80004b0c:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =140 ;  y_pos1 =140;
80004b10:	08c00793          	li	a5,140
80004b14:	fef41423          	sh	a5,-24(s0)
80004b18:	08c00793          	li	a5,140
80004b1c:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 140;  y_pos2=100;
80004b20:	08c00793          	li	a5,140
80004b24:	fef41223          	sh	a5,-28(s0)
80004b28:	06400793          	li	a5,100
80004b2c:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =100 ;  y_pos3 =140;
80004b30:	06400793          	li	a5,100
80004b34:	fef41023          	sh	a5,-32(s0)
80004b38:	08c00793          	li	a5,140
80004b3c:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004b40:	fec41583          	lh	a1,-20(s0)
80004b44:	fea41603          	lh	a2,-22(s0)
80004b48:	fe841683          	lh	a3,-24(s0)
80004b4c:	fe641703          	lh	a4,-26(s0)
80004b50:	fc842803          	lw	a6,-56(s0)
80004b54:	000107b7          	lui	a5,0x10
80004b58:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004b5c:	fcc42503          	lw	a0,-52(s0)
80004b60:	2fc040ef          	jal	ra,80008e5c <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004b64:	fe441583          	lh	a1,-28(s0)
80004b68:	fe241603          	lh	a2,-30(s0)
80004b6c:	fe041683          	lh	a3,-32(s0)
80004b70:	fde41703          	lh	a4,-34(s0)
80004b74:	fc842803          	lw	a6,-56(s0)
80004b78:	000107b7          	lui	a5,0x10
80004b7c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004b80:	fcc42503          	lw	a0,-52(s0)
80004b84:	2d8040ef          	jal	ra,80008e5c <TFT_drawLine>
			  choice = 1;
80004b88:	00100793          	li	a5,1
80004b8c:	fef407a3          	sb	a5,-17(s0)
			  return 4;
80004b90:	00400793          	li	a5,4
80004b94:	3840006f          	j	80004f18 <singlePlayerX+0x84c>
		 }
		  else if((x < 240 && x >160)&& (y>80 && y<160 ) && board[5]==' ')//&& pos5==0)// 5
80004b98:	fdc45703          	lhu	a4,-36(s0)
80004b9c:	0ef00793          	li	a5,239
80004ba0:	0ce7ea63          	bltu	a5,a4,80004c74 <singlePlayerX+0x5a8>
80004ba4:	fdc45703          	lhu	a4,-36(s0)
80004ba8:	0a000793          	li	a5,160
80004bac:	0ce7f463          	bleu	a4,a5,80004c74 <singlePlayerX+0x5a8>
80004bb0:	fda45703          	lhu	a4,-38(s0)
80004bb4:	05000793          	li	a5,80
80004bb8:	0ae7fe63          	bleu	a4,a5,80004c74 <singlePlayerX+0x5a8>
80004bbc:	fda45703          	lhu	a4,-38(s0)
80004bc0:	09f00793          	li	a5,159
80004bc4:	0ae7e863          	bltu	a5,a4,80004c74 <singlePlayerX+0x5a8>
80004bc8:	fc442783          	lw	a5,-60(s0)
80004bcc:	00578793          	addi	a5,a5,5
80004bd0:	0007c703          	lbu	a4,0(a5)
80004bd4:	02000793          	li	a5,32
80004bd8:	08f71e63          	bne	a4,a5,80004c74 <singlePlayerX+0x5a8>
		  {
			  x_pos0 = 180;  y_pos0= 100;
80004bdc:	0b400793          	li	a5,180
80004be0:	fef41623          	sh	a5,-20(s0)
80004be4:	06400793          	li	a5,100
80004be8:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =220 ;  y_pos1 =140;
80004bec:	0dc00793          	li	a5,220
80004bf0:	fef41423          	sh	a5,-24(s0)
80004bf4:	08c00793          	li	a5,140
80004bf8:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 220;  y_pos2=100;
80004bfc:	0dc00793          	li	a5,220
80004c00:	fef41223          	sh	a5,-28(s0)
80004c04:	06400793          	li	a5,100
80004c08:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =180 ;  y_pos3 =140;
80004c0c:	0b400793          	li	a5,180
80004c10:	fef41023          	sh	a5,-32(s0)
80004c14:	08c00793          	li	a5,140
80004c18:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004c1c:	fec41583          	lh	a1,-20(s0)
80004c20:	fea41603          	lh	a2,-22(s0)
80004c24:	fe841683          	lh	a3,-24(s0)
80004c28:	fe641703          	lh	a4,-26(s0)
80004c2c:	fc842803          	lw	a6,-56(s0)
80004c30:	000107b7          	lui	a5,0x10
80004c34:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004c38:	fcc42503          	lw	a0,-52(s0)
80004c3c:	220040ef          	jal	ra,80008e5c <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004c40:	fe441583          	lh	a1,-28(s0)
80004c44:	fe241603          	lh	a2,-30(s0)
80004c48:	fe041683          	lh	a3,-32(s0)
80004c4c:	fde41703          	lh	a4,-34(s0)
80004c50:	fc842803          	lw	a6,-56(s0)
80004c54:	000107b7          	lui	a5,0x10
80004c58:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004c5c:	fcc42503          	lw	a0,-52(s0)
80004c60:	1fc040ef          	jal	ra,80008e5c <TFT_drawLine>
			  choice = 1;
80004c64:	00100793          	li	a5,1
80004c68:	fef407a3          	sb	a5,-17(s0)
			  return 5;
80004c6c:	00500793          	li	a5,5
80004c70:	2a80006f          	j	80004f18 <singlePlayerX+0x84c>
		  }
		  else if( x < 80 && (y<240 && y > 160)&& board[6]==' ' )//&& pos6==0)//6
80004c74:	fdc45703          	lhu	a4,-36(s0)
80004c78:	04f00793          	li	a5,79
80004c7c:	0ce7e463          	bltu	a5,a4,80004d44 <singlePlayerX+0x678>
80004c80:	fda45703          	lhu	a4,-38(s0)
80004c84:	0ef00793          	li	a5,239
80004c88:	0ae7ee63          	bltu	a5,a4,80004d44 <singlePlayerX+0x678>
80004c8c:	fda45703          	lhu	a4,-38(s0)
80004c90:	0a000793          	li	a5,160
80004c94:	0ae7f863          	bleu	a4,a5,80004d44 <singlePlayerX+0x678>
80004c98:	fc442783          	lw	a5,-60(s0)
80004c9c:	00678793          	addi	a5,a5,6
80004ca0:	0007c703          	lbu	a4,0(a5)
80004ca4:	02000793          	li	a5,32
80004ca8:	08f71e63          	bne	a4,a5,80004d44 <singlePlayerX+0x678>
		  {
			  x_pos0 = 20;  y_pos0=180;
80004cac:	01400793          	li	a5,20
80004cb0:	fef41623          	sh	a5,-20(s0)
80004cb4:	0b400793          	li	a5,180
80004cb8:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =60 ;  y_pos1 =220;
80004cbc:	03c00793          	li	a5,60
80004cc0:	fef41423          	sh	a5,-24(s0)
80004cc4:	0dc00793          	li	a5,220
80004cc8:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 60;  y_pos2=180;
80004ccc:	03c00793          	li	a5,60
80004cd0:	fef41223          	sh	a5,-28(s0)
80004cd4:	0b400793          	li	a5,180
80004cd8:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =20 ;  y_pos3 =220;
80004cdc:	01400793          	li	a5,20
80004ce0:	fef41023          	sh	a5,-32(s0)
80004ce4:	0dc00793          	li	a5,220
80004ce8:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004cec:	fec41583          	lh	a1,-20(s0)
80004cf0:	fea41603          	lh	a2,-22(s0)
80004cf4:	fe841683          	lh	a3,-24(s0)
80004cf8:	fe641703          	lh	a4,-26(s0)
80004cfc:	fc842803          	lw	a6,-56(s0)
80004d00:	000107b7          	lui	a5,0x10
80004d04:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004d08:	fcc42503          	lw	a0,-52(s0)
80004d0c:	150040ef          	jal	ra,80008e5c <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004d10:	fe441583          	lh	a1,-28(s0)
80004d14:	fe241603          	lh	a2,-30(s0)
80004d18:	fe041683          	lh	a3,-32(s0)
80004d1c:	fde41703          	lh	a4,-34(s0)
80004d20:	fc842803          	lw	a6,-56(s0)
80004d24:	000107b7          	lui	a5,0x10
80004d28:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004d2c:	fcc42503          	lw	a0,-52(s0)
80004d30:	12c040ef          	jal	ra,80008e5c <TFT_drawLine>
			  choice = 1;
80004d34:	00100793          	li	a5,1
80004d38:	fef407a3          	sb	a5,-17(s0)
			  return 6;
80004d3c:	00600793          	li	a5,6
80004d40:	1d80006f          	j	80004f18 <singlePlayerX+0x84c>
		  }
		  else if((x < 160 && x >80)&&( y <240 && y>160)&& board[7]==' ')// && pos7==0) // 7
80004d44:	fdc45703          	lhu	a4,-36(s0)
80004d48:	09f00793          	li	a5,159
80004d4c:	0ce7ea63          	bltu	a5,a4,80004e20 <singlePlayerX+0x754>
80004d50:	fdc45703          	lhu	a4,-36(s0)
80004d54:	05000793          	li	a5,80
80004d58:	0ce7f463          	bleu	a4,a5,80004e20 <singlePlayerX+0x754>
80004d5c:	fda45703          	lhu	a4,-38(s0)
80004d60:	0ef00793          	li	a5,239
80004d64:	0ae7ee63          	bltu	a5,a4,80004e20 <singlePlayerX+0x754>
80004d68:	fda45703          	lhu	a4,-38(s0)
80004d6c:	0a000793          	li	a5,160
80004d70:	0ae7f863          	bleu	a4,a5,80004e20 <singlePlayerX+0x754>
80004d74:	fc442783          	lw	a5,-60(s0)
80004d78:	00778793          	addi	a5,a5,7
80004d7c:	0007c703          	lbu	a4,0(a5)
80004d80:	02000793          	li	a5,32
80004d84:	08f71e63          	bne	a4,a5,80004e20 <singlePlayerX+0x754>
		  {
			  x_pos0 = 100;	  y_pos0=180;
80004d88:	06400793          	li	a5,100
80004d8c:	fef41623          	sh	a5,-20(s0)
80004d90:	0b400793          	li	a5,180
80004d94:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =140 ;	  y_pos1 =220;
80004d98:	08c00793          	li	a5,140
80004d9c:	fef41423          	sh	a5,-24(s0)
80004da0:	0dc00793          	li	a5,220
80004da4:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 140;  y_pos2=180;
80004da8:	08c00793          	li	a5,140
80004dac:	fef41223          	sh	a5,-28(s0)
80004db0:	0b400793          	li	a5,180
80004db4:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =100 ;	  y_pos3 =220;
80004db8:	06400793          	li	a5,100
80004dbc:	fef41023          	sh	a5,-32(s0)
80004dc0:	0dc00793          	li	a5,220
80004dc4:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004dc8:	fec41583          	lh	a1,-20(s0)
80004dcc:	fea41603          	lh	a2,-22(s0)
80004dd0:	fe841683          	lh	a3,-24(s0)
80004dd4:	fe641703          	lh	a4,-26(s0)
80004dd8:	fc842803          	lw	a6,-56(s0)
80004ddc:	000107b7          	lui	a5,0x10
80004de0:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004de4:	fcc42503          	lw	a0,-52(s0)
80004de8:	074040ef          	jal	ra,80008e5c <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004dec:	fe441583          	lh	a1,-28(s0)
80004df0:	fe241603          	lh	a2,-30(s0)
80004df4:	fe041683          	lh	a3,-32(s0)
80004df8:	fde41703          	lh	a4,-34(s0)
80004dfc:	fc842803          	lw	a6,-56(s0)
80004e00:	000107b7          	lui	a5,0x10
80004e04:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004e08:	fcc42503          	lw	a0,-52(s0)
80004e0c:	050040ef          	jal	ra,80008e5c <TFT_drawLine>
			  choice = 1;
80004e10:	00100793          	li	a5,1
80004e14:	fef407a3          	sb	a5,-17(s0)
			  return 7;
80004e18:	00700793          	li	a5,7
80004e1c:	0fc0006f          	j	80004f18 <singlePlayerX+0x84c>
		  }
		  else if((x < 240 && x >160)&&(y>160 && y<240) && board[8]==' ')//&& pos8==0)// 8
80004e20:	fdc45703          	lhu	a4,-36(s0)
80004e24:	0ef00793          	li	a5,239
80004e28:	0ce7ea63          	bltu	a5,a4,80004efc <singlePlayerX+0x830>
80004e2c:	fdc45703          	lhu	a4,-36(s0)
80004e30:	0a000793          	li	a5,160
80004e34:	0ce7f463          	bleu	a4,a5,80004efc <singlePlayerX+0x830>
80004e38:	fda45703          	lhu	a4,-38(s0)
80004e3c:	0a000793          	li	a5,160
80004e40:	0ae7fe63          	bleu	a4,a5,80004efc <singlePlayerX+0x830>
80004e44:	fda45703          	lhu	a4,-38(s0)
80004e48:	0ef00793          	li	a5,239
80004e4c:	0ae7e863          	bltu	a5,a4,80004efc <singlePlayerX+0x830>
80004e50:	fc442783          	lw	a5,-60(s0)
80004e54:	00878793          	addi	a5,a5,8
80004e58:	0007c703          	lbu	a4,0(a5)
80004e5c:	02000793          	li	a5,32
80004e60:	08f71e63          	bne	a4,a5,80004efc <singlePlayerX+0x830>
		  {
			  x_pos0 = 180;  y_pos0=180;
80004e64:	0b400793          	li	a5,180
80004e68:	fef41623          	sh	a5,-20(s0)
80004e6c:	0b400793          	li	a5,180
80004e70:	fef41523          	sh	a5,-22(s0)
			  x_pos1 =220 ;  y_pos1 =220;
80004e74:	0dc00793          	li	a5,220
80004e78:	fef41423          	sh	a5,-24(s0)
80004e7c:	0dc00793          	li	a5,220
80004e80:	fef41323          	sh	a5,-26(s0)
			  x_pos2 = 220;  y_pos2=180;
80004e84:	0dc00793          	li	a5,220
80004e88:	fef41223          	sh	a5,-28(s0)
80004e8c:	0b400793          	li	a5,180
80004e90:	fef41123          	sh	a5,-30(s0)
			  x_pos3 =180 ;  y_pos3 =220;
80004e94:	0b400793          	li	a5,180
80004e98:	fef41023          	sh	a5,-32(s0)
80004e9c:	0dc00793          	li	a5,220
80004ea0:	fcf41f23          	sh	a5,-34(s0)
			  TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80004ea4:	fec41583          	lh	a1,-20(s0)
80004ea8:	fea41603          	lh	a2,-22(s0)
80004eac:	fe841683          	lh	a3,-24(s0)
80004eb0:	fe641703          	lh	a4,-26(s0)
80004eb4:	fc842803          	lw	a6,-56(s0)
80004eb8:	000107b7          	lui	a5,0x10
80004ebc:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004ec0:	fcc42503          	lw	a0,-52(s0)
80004ec4:	799030ef          	jal	ra,80008e5c <TFT_drawLine>
			  TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80004ec8:	fe441583          	lh	a1,-28(s0)
80004ecc:	fe241603          	lh	a2,-30(s0)
80004ed0:	fe041683          	lh	a3,-32(s0)
80004ed4:	fde41703          	lh	a4,-34(s0)
80004ed8:	fc842803          	lw	a6,-56(s0)
80004edc:	000107b7          	lui	a5,0x10
80004ee0:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80004ee4:	fcc42503          	lw	a0,-52(s0)
80004ee8:	775030ef          	jal	ra,80008e5c <TFT_drawLine>
			  choice = 1;
80004eec:	00100793          	li	a5,1
80004ef0:	fef407a3          	sb	a5,-17(s0)
			  return 8;
80004ef4:	00800793          	li	a5,8
80004ef8:	0200006f          	j	80004f18 <singlePlayerX+0x84c>
	while(choice == 0 && player == 1)
80004efc:	fef44783          	lbu	a5,-17(s0)
80004f00:	00079863          	bnez	a5,80004f10 <singlePlayerX+0x844>
80004f04:	fc344703          	lbu	a4,-61(s0)
80004f08:	00100793          	li	a5,1
80004f0c:	fef70663          	beq	a4,a5,800046f8 <singlePlayerX+0x2c>
		  }
	   }
	  }
   choice = 0;
80004f10:	fe0407a3          	sb	zero,-17(s0)
   return -1;
80004f14:	0ff00793          	li	a5,255

}
80004f18:	00078513          	mv	a0,a5
80004f1c:	03c12083          	lw	ra,60(sp)
80004f20:	03812403          	lw	s0,56(sp)
80004f24:	04010113          	addi	sp,sp,64
80004f28:	00008067          	ret

Disassembly of section .text.singlePlayerAI:

80004f2c <singlePlayerAI>:
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	char board[9],
	uint8_t player
)
{
80004f2c:	fc010113          	addi	sp,sp,-64
80004f30:	02112e23          	sw	ra,60(sp)
80004f34:	02812c23          	sw	s0,56(sp)
80004f38:	04010413          	addi	s0,sp,64
80004f3c:	fca42623          	sw	a0,-52(s0)
80004f40:	fcb42423          	sw	a1,-56(s0)
80004f44:	fcc42223          	sw	a2,-60(s0)
80004f48:	00068793          	mv	a5,a3
80004f4c:	fcf401a3          	sb	a5,-61(s0)
	char AIboard[9];
	uint16_t sq_centre_x,sq_centre_y;
	// Can AI win in one move
	for(uint8_t i =0; i < 9; i ++)
80004f50:	fe0407a3          	sb	zero,-17(s0)
80004f54:	2ac0006f          	j	80005200 <singlePlayerAI+0x2d4>
	{
		for (int boardcp = 0; boardcp < 9; boardcp++)
80004f58:	fe042423          	sw	zero,-24(s0)
80004f5c:	0300006f          	j	80004f8c <singlePlayerAI+0x60>
		{
			AIboard[boardcp] = board[boardcp];
80004f60:	fe842783          	lw	a5,-24(s0)
80004f64:	fc442703          	lw	a4,-60(s0)
80004f68:	00f707b3          	add	a5,a4,a5
80004f6c:	0007c703          	lbu	a4,0(a5)
80004f70:	fe842783          	lw	a5,-24(s0)
80004f74:	ff040693          	addi	a3,s0,-16
80004f78:	00f687b3          	add	a5,a3,a5
80004f7c:	fee78423          	sb	a4,-24(a5)
		for (int boardcp = 0; boardcp < 9; boardcp++)
80004f80:	fe842783          	lw	a5,-24(s0)
80004f84:	00178793          	addi	a5,a5,1
80004f88:	fef42423          	sw	a5,-24(s0)
80004f8c:	fe842703          	lw	a4,-24(s0)
80004f90:	00800793          	li	a5,8
80004f94:	fce7d6e3          	ble	a4,a5,80004f60 <singlePlayerAI+0x34>
		}
		if (AIboard[i] == ' ')
80004f98:	fef44783          	lbu	a5,-17(s0)
80004f9c:	ff040713          	addi	a4,s0,-16
80004fa0:	00f707b3          	add	a5,a4,a5
80004fa4:	fe87c703          	lbu	a4,-24(a5)
80004fa8:	02000793          	li	a5,32
80004fac:	00f71c63          	bne	a4,a5,80004fc4 <singlePlayerAI+0x98>
		{
			AIboard[i] = 'O';
80004fb0:	fef44783          	lbu	a5,-17(s0)
80004fb4:	ff040713          	addi	a4,s0,-16
80004fb8:	00f707b3          	add	a5,a4,a5
80004fbc:	04f00713          	li	a4,79
80004fc0:	fee78423          	sb	a4,-24(a5)
		}
		if (AIcheck_winner(AIboard,player) == 1)
80004fc4:	fc344703          	lbu	a4,-61(s0)
80004fc8:	fd840793          	addi	a5,s0,-40
80004fcc:	00070593          	mv	a1,a4
80004fd0:	00078513          	mv	a0,a5
80004fd4:	755010ef          	jal	ra,80006f28 <AIcheck_winner>
80004fd8:	00050793          	mv	a5,a0
80004fdc:	00078713          	mv	a4,a5
80004fe0:	00100793          	li	a5,1
80004fe4:	20f71863          	bne	a4,a5,800051f4 <singlePlayerAI+0x2c8>
		{
			if ( i == 0)
80004fe8:	fef44783          	lbu	a5,-17(s0)
80004fec:	02079a63          	bnez	a5,80005020 <singlePlayerAI+0xf4>
			{
				sq_centre_x = 40;  sq_centre_y = 40;
80004ff0:	02800793          	li	a5,40
80004ff4:	fef41223          	sh	a5,-28(s0)
80004ff8:	02800793          	li	a5,40
80004ffc:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005000:	fe441583          	lh	a1,-28(s0)
80005004:	fe241603          	lh	a2,-30(s0)
80005008:	fc842783          	lw	a5,-56(s0)
8000500c:	01f00713          	li	a4,31
80005010:	01e00693          	li	a3,30
80005014:	fcc42503          	lw	a0,-52(s0)
80005018:	1e9030ef          	jal	ra,80008a00 <TFT_drawCircle>
8000501c:	03c0006f          	j	80005058 <singlePlayerAI+0x12c>
			}
			else if (i == 1)
80005020:	fef44703          	lbu	a4,-17(s0)
80005024:	00100793          	li	a5,1
80005028:	02f71863          	bne	a4,a5,80005058 <singlePlayerAI+0x12c>
			{
				sq_centre_x = 120;
8000502c:	07800793          	li	a5,120
80005030:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 40;
80005034:	02800793          	li	a5,40
80005038:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000503c:	fe441583          	lh	a1,-28(s0)
80005040:	fe241603          	lh	a2,-30(s0)
80005044:	fc842783          	lw	a5,-56(s0)
80005048:	01f00713          	li	a4,31
8000504c:	01e00693          	li	a3,30
80005050:	fcc42503          	lw	a0,-52(s0)
80005054:	1ad030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}
			if ( i == 2)
80005058:	fef44703          	lbu	a4,-17(s0)
8000505c:	00200793          	li	a5,2
80005060:	02f71a63          	bne	a4,a5,80005094 <singlePlayerAI+0x168>
			{
				sq_centre_x = 200;
80005064:	0c800793          	li	a5,200
80005068:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 40;
8000506c:	02800793          	li	a5,40
80005070:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005074:	fe441583          	lh	a1,-28(s0)
80005078:	fe241603          	lh	a2,-30(s0)
8000507c:	fc842783          	lw	a5,-56(s0)
80005080:	01f00713          	li	a4,31
80005084:	01e00693          	li	a3,30
80005088:	fcc42503          	lw	a0,-52(s0)
8000508c:	175030ef          	jal	ra,80008a00 <TFT_drawCircle>
80005090:	03c0006f          	j	800050cc <singlePlayerAI+0x1a0>
			}
			else if (i == 3)
80005094:	fef44703          	lbu	a4,-17(s0)
80005098:	00300793          	li	a5,3
8000509c:	02f71863          	bne	a4,a5,800050cc <singlePlayerAI+0x1a0>
			{
				sq_centre_x = 40;
800050a0:	02800793          	li	a5,40
800050a4:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
800050a8:	07800793          	li	a5,120
800050ac:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800050b0:	fe441583          	lh	a1,-28(s0)
800050b4:	fe241603          	lh	a2,-30(s0)
800050b8:	fc842783          	lw	a5,-56(s0)
800050bc:	01f00713          	li	a4,31
800050c0:	01e00693          	li	a3,30
800050c4:	fcc42503          	lw	a0,-52(s0)
800050c8:	139030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}
			if ( i == 4)
800050cc:	fef44703          	lbu	a4,-17(s0)
800050d0:	00400793          	li	a5,4
800050d4:	02f71a63          	bne	a4,a5,80005108 <singlePlayerAI+0x1dc>
			{
				sq_centre_x = 120;
800050d8:	07800793          	li	a5,120
800050dc:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
800050e0:	07800793          	li	a5,120
800050e4:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800050e8:	fe441583          	lh	a1,-28(s0)
800050ec:	fe241603          	lh	a2,-30(s0)
800050f0:	fc842783          	lw	a5,-56(s0)
800050f4:	01f00713          	li	a4,31
800050f8:	01e00693          	li	a3,30
800050fc:	fcc42503          	lw	a0,-52(s0)
80005100:	101030ef          	jal	ra,80008a00 <TFT_drawCircle>
80005104:	03c0006f          	j	80005140 <singlePlayerAI+0x214>
			}
			else if (i == 5)
80005108:	fef44703          	lbu	a4,-17(s0)
8000510c:	00500793          	li	a5,5
80005110:	02f71863          	bne	a4,a5,80005140 <singlePlayerAI+0x214>
			{
				sq_centre_x = 200;
80005114:	0c800793          	li	a5,200
80005118:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
8000511c:	07800793          	li	a5,120
80005120:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005124:	fe441583          	lh	a1,-28(s0)
80005128:	fe241603          	lh	a2,-30(s0)
8000512c:	fc842783          	lw	a5,-56(s0)
80005130:	01f00713          	li	a4,31
80005134:	01e00693          	li	a3,30
80005138:	fcc42503          	lw	a0,-52(s0)
8000513c:	0c5030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}
			if ( i == 6)
80005140:	fef44703          	lbu	a4,-17(s0)
80005144:	00600793          	li	a5,6
80005148:	02f71a63          	bne	a4,a5,8000517c <singlePlayerAI+0x250>
			{
				sq_centre_x = 40;
8000514c:	02800793          	li	a5,40
80005150:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
80005154:	0c800793          	li	a5,200
80005158:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000515c:	fe441583          	lh	a1,-28(s0)
80005160:	fe241603          	lh	a2,-30(s0)
80005164:	fc842783          	lw	a5,-56(s0)
80005168:	01f00713          	li	a4,31
8000516c:	01e00693          	li	a3,30
80005170:	fcc42503          	lw	a0,-52(s0)
80005174:	08d030ef          	jal	ra,80008a00 <TFT_drawCircle>
80005178:	03c0006f          	j	800051b4 <singlePlayerAI+0x288>
			}
			else if (i == 7)
8000517c:	fef44703          	lbu	a4,-17(s0)
80005180:	00700793          	li	a5,7
80005184:	02f71863          	bne	a4,a5,800051b4 <singlePlayerAI+0x288>
			{
				sq_centre_x = 120;
80005188:	07800793          	li	a5,120
8000518c:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
80005190:	0c800793          	li	a5,200
80005194:	fef41123          	sh	a5,-30(s0)
                TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005198:	fe441583          	lh	a1,-28(s0)
8000519c:	fe241603          	lh	a2,-30(s0)
800051a0:	fc842783          	lw	a5,-56(s0)
800051a4:	01f00713          	li	a4,31
800051a8:	01e00693          	li	a3,30
800051ac:	fcc42503          	lw	a0,-52(s0)
800051b0:	051030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}
			if ( i == 8)
800051b4:	fef44703          	lbu	a4,-17(s0)
800051b8:	00800793          	li	a5,8
800051bc:	02f71863          	bne	a4,a5,800051ec <singlePlayerAI+0x2c0>
			{
				sq_centre_x = 200;
800051c0:	0c800793          	li	a5,200
800051c4:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
800051c8:	0c800793          	li	a5,200
800051cc:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800051d0:	fe441583          	lh	a1,-28(s0)
800051d4:	fe241603          	lh	a2,-30(s0)
800051d8:	fc842783          	lw	a5,-56(s0)
800051dc:	01f00713          	li	a4,31
800051e0:	01e00693          	li	a3,30
800051e4:	fcc42503          	lw	a0,-52(s0)
800051e8:	019030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}

			return i;
800051ec:	fef44783          	lbu	a5,-17(s0)
800051f0:	5e40006f          	j	800057d4 <singlePlayerAI+0x8a8>
	for(uint8_t i =0; i < 9; i ++)
800051f4:	fef44783          	lbu	a5,-17(s0)
800051f8:	00178793          	addi	a5,a5,1
800051fc:	fef407a3          	sb	a5,-17(s0)
80005200:	fef44703          	lbu	a4,-17(s0)
80005204:	00800793          	li	a5,8
80005208:	d4e7f8e3          	bleu	a4,a5,80004f58 <singlePlayerAI+0x2c>
		}
	}

	// Can human win in one move
	for(uint8_t i =0; i < 9; i ++)
8000520c:	fe0403a3          	sb	zero,-25(s0)
80005210:	2ac0006f          	j	800054bc <singlePlayerAI+0x590>
	{
		for (uint8_t brdcp = 0; brdcp < 9; brdcp++)
80005214:	fe040323          	sb	zero,-26(s0)
80005218:	0300006f          	j	80005248 <singlePlayerAI+0x31c>
		{
			AIboard[brdcp] = board[brdcp];
8000521c:	fe644783          	lbu	a5,-26(s0)
80005220:	fe644703          	lbu	a4,-26(s0)
80005224:	fc442683          	lw	a3,-60(s0)
80005228:	00e68733          	add	a4,a3,a4
8000522c:	00074703          	lbu	a4,0(a4) # 2000 <HEAP_SIZE+0x1800>
80005230:	ff040693          	addi	a3,s0,-16
80005234:	00f687b3          	add	a5,a3,a5
80005238:	fee78423          	sb	a4,-24(a5)
		for (uint8_t brdcp = 0; brdcp < 9; brdcp++)
8000523c:	fe644783          	lbu	a5,-26(s0)
80005240:	00178793          	addi	a5,a5,1
80005244:	fef40323          	sb	a5,-26(s0)
80005248:	fe644703          	lbu	a4,-26(s0)
8000524c:	00800793          	li	a5,8
80005250:	fce7f6e3          	bleu	a4,a5,8000521c <singlePlayerAI+0x2f0>
		}
		if (AIboard[i] == ' ')
80005254:	fe744783          	lbu	a5,-25(s0)
80005258:	ff040713          	addi	a4,s0,-16
8000525c:	00f707b3          	add	a5,a4,a5
80005260:	fe87c703          	lbu	a4,-24(a5)
80005264:	02000793          	li	a5,32
80005268:	00f71c63          	bne	a4,a5,80005280 <singlePlayerAI+0x354>
		{
			AIboard[i] = 'X';
8000526c:	fe744783          	lbu	a5,-25(s0)
80005270:	ff040713          	addi	a4,s0,-16
80005274:	00f707b3          	add	a5,a4,a5
80005278:	05800713          	li	a4,88
8000527c:	fee78423          	sb	a4,-24(a5)
		}
		if (AIcheck_winner(AIboard,player) == 1)
80005280:	fc344703          	lbu	a4,-61(s0)
80005284:	fd840793          	addi	a5,s0,-40
80005288:	00070593          	mv	a1,a4
8000528c:	00078513          	mv	a0,a5
80005290:	499010ef          	jal	ra,80006f28 <AIcheck_winner>
80005294:	00050793          	mv	a5,a0
80005298:	00078713          	mv	a4,a5
8000529c:	00100793          	li	a5,1
800052a0:	20f71863          	bne	a4,a5,800054b0 <singlePlayerAI+0x584>
		{
			if ( i == 0)
800052a4:	fe744783          	lbu	a5,-25(s0)
800052a8:	02079a63          	bnez	a5,800052dc <singlePlayerAI+0x3b0>
			{
				sq_centre_x = 40;  sq_centre_y = 40;
800052ac:	02800793          	li	a5,40
800052b0:	fef41223          	sh	a5,-28(s0)
800052b4:	02800793          	li	a5,40
800052b8:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800052bc:	fe441583          	lh	a1,-28(s0)
800052c0:	fe241603          	lh	a2,-30(s0)
800052c4:	fc842783          	lw	a5,-56(s0)
800052c8:	01f00713          	li	a4,31
800052cc:	01e00693          	li	a3,30
800052d0:	fcc42503          	lw	a0,-52(s0)
800052d4:	72c030ef          	jal	ra,80008a00 <TFT_drawCircle>
800052d8:	03c0006f          	j	80005314 <singlePlayerAI+0x3e8>
			}
			else if (i == 1)
800052dc:	fe744703          	lbu	a4,-25(s0)
800052e0:	00100793          	li	a5,1
800052e4:	02f71863          	bne	a4,a5,80005314 <singlePlayerAI+0x3e8>
			{
				sq_centre_x = 120;
800052e8:	07800793          	li	a5,120
800052ec:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 40;
800052f0:	02800793          	li	a5,40
800052f4:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800052f8:	fe441583          	lh	a1,-28(s0)
800052fc:	fe241603          	lh	a2,-30(s0)
80005300:	fc842783          	lw	a5,-56(s0)
80005304:	01f00713          	li	a4,31
80005308:	01e00693          	li	a3,30
8000530c:	fcc42503          	lw	a0,-52(s0)
80005310:	6f0030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}
			if ( i == 2)
80005314:	fe744703          	lbu	a4,-25(s0)
80005318:	00200793          	li	a5,2
8000531c:	02f71a63          	bne	a4,a5,80005350 <singlePlayerAI+0x424>
			{
				sq_centre_x = 200;
80005320:	0c800793          	li	a5,200
80005324:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 40;
80005328:	02800793          	li	a5,40
8000532c:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005330:	fe441583          	lh	a1,-28(s0)
80005334:	fe241603          	lh	a2,-30(s0)
80005338:	fc842783          	lw	a5,-56(s0)
8000533c:	01f00713          	li	a4,31
80005340:	01e00693          	li	a3,30
80005344:	fcc42503          	lw	a0,-52(s0)
80005348:	6b8030ef          	jal	ra,80008a00 <TFT_drawCircle>
8000534c:	03c0006f          	j	80005388 <singlePlayerAI+0x45c>
			}
			else if (i == 3)
80005350:	fe744703          	lbu	a4,-25(s0)
80005354:	00300793          	li	a5,3
80005358:	02f71863          	bne	a4,a5,80005388 <singlePlayerAI+0x45c>
			{
				sq_centre_x = 40;
8000535c:	02800793          	li	a5,40
80005360:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
80005364:	07800793          	li	a5,120
80005368:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000536c:	fe441583          	lh	a1,-28(s0)
80005370:	fe241603          	lh	a2,-30(s0)
80005374:	fc842783          	lw	a5,-56(s0)
80005378:	01f00713          	li	a4,31
8000537c:	01e00693          	li	a3,30
80005380:	fcc42503          	lw	a0,-52(s0)
80005384:	67c030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}
			if ( i == 4)
80005388:	fe744703          	lbu	a4,-25(s0)
8000538c:	00400793          	li	a5,4
80005390:	02f71a63          	bne	a4,a5,800053c4 <singlePlayerAI+0x498>
			{
				sq_centre_x = 120;
80005394:	07800793          	li	a5,120
80005398:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
8000539c:	07800793          	li	a5,120
800053a0:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800053a4:	fe441583          	lh	a1,-28(s0)
800053a8:	fe241603          	lh	a2,-30(s0)
800053ac:	fc842783          	lw	a5,-56(s0)
800053b0:	01f00713          	li	a4,31
800053b4:	01e00693          	li	a3,30
800053b8:	fcc42503          	lw	a0,-52(s0)
800053bc:	644030ef          	jal	ra,80008a00 <TFT_drawCircle>
800053c0:	03c0006f          	j	800053fc <singlePlayerAI+0x4d0>
			}
			else if (i == 5)
800053c4:	fe744703          	lbu	a4,-25(s0)
800053c8:	00500793          	li	a5,5
800053cc:	02f71863          	bne	a4,a5,800053fc <singlePlayerAI+0x4d0>
			{
				sq_centre_x = 200;
800053d0:	0c800793          	li	a5,200
800053d4:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 120;
800053d8:	07800793          	li	a5,120
800053dc:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800053e0:	fe441583          	lh	a1,-28(s0)
800053e4:	fe241603          	lh	a2,-30(s0)
800053e8:	fc842783          	lw	a5,-56(s0)
800053ec:	01f00713          	li	a4,31
800053f0:	01e00693          	li	a3,30
800053f4:	fcc42503          	lw	a0,-52(s0)
800053f8:	608030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}
			if ( i == 6)
800053fc:	fe744703          	lbu	a4,-25(s0)
80005400:	00600793          	li	a5,6
80005404:	02f71a63          	bne	a4,a5,80005438 <singlePlayerAI+0x50c>
			{
				sq_centre_x = 40;
80005408:	02800793          	li	a5,40
8000540c:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
80005410:	0c800793          	li	a5,200
80005414:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005418:	fe441583          	lh	a1,-28(s0)
8000541c:	fe241603          	lh	a2,-30(s0)
80005420:	fc842783          	lw	a5,-56(s0)
80005424:	01f00713          	li	a4,31
80005428:	01e00693          	li	a3,30
8000542c:	fcc42503          	lw	a0,-52(s0)
80005430:	5d0030ef          	jal	ra,80008a00 <TFT_drawCircle>
80005434:	03c0006f          	j	80005470 <singlePlayerAI+0x544>
			}
			else if (i == 7)
80005438:	fe744703          	lbu	a4,-25(s0)
8000543c:	00700793          	li	a5,7
80005440:	02f71863          	bne	a4,a5,80005470 <singlePlayerAI+0x544>
			{
				sq_centre_x = 120;
80005444:	07800793          	li	a5,120
80005448:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
8000544c:	0c800793          	li	a5,200
80005450:	fef41123          	sh	a5,-30(s0)
                TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005454:	fe441583          	lh	a1,-28(s0)
80005458:	fe241603          	lh	a2,-30(s0)
8000545c:	fc842783          	lw	a5,-56(s0)
80005460:	01f00713          	li	a4,31
80005464:	01e00693          	li	a3,30
80005468:	fcc42503          	lw	a0,-52(s0)
8000546c:	594030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}
			if ( i == 8)
80005470:	fe744703          	lbu	a4,-25(s0)
80005474:	00800793          	li	a5,8
80005478:	02f71863          	bne	a4,a5,800054a8 <singlePlayerAI+0x57c>
			{
				sq_centre_x = 200;
8000547c:	0c800793          	li	a5,200
80005480:	fef41223          	sh	a5,-28(s0)
				sq_centre_y = 200;
80005484:	0c800793          	li	a5,200
80005488:	fef41123          	sh	a5,-30(s0)
				TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000548c:	fe441583          	lh	a1,-28(s0)
80005490:	fe241603          	lh	a2,-30(s0)
80005494:	fc842783          	lw	a5,-56(s0)
80005498:	01f00713          	li	a4,31
8000549c:	01e00693          	li	a3,30
800054a0:	fcc42503          	lw	a0,-52(s0)
800054a4:	55c030ef          	jal	ra,80008a00 <TFT_drawCircle>
			}
			return i;
800054a8:	fe744783          	lbu	a5,-25(s0)
800054ac:	3280006f          	j	800057d4 <singlePlayerAI+0x8a8>
	for(uint8_t i =0; i < 9; i ++)
800054b0:	fe744783          	lbu	a5,-25(s0)
800054b4:	00178793          	addi	a5,a5,1
800054b8:	fef403a3          	sb	a5,-25(s0)
800054bc:	fe744703          	lbu	a4,-25(s0)
800054c0:	00800793          	li	a5,8
800054c4:	d4e7f8e3          	bleu	a4,a5,80005214 <singlePlayerAI+0x2e8>
		}
	}

	// attempt to take the corners if there free
	if (board[0] == ' ')
800054c8:	fc442783          	lw	a5,-60(s0)
800054cc:	0007c703          	lbu	a4,0(a5)
800054d0:	02000793          	li	a5,32
800054d4:	04f71263          	bne	a4,a5,80005518 <singlePlayerAI+0x5ec>
	{
		board[0] = 'O';
800054d8:	fc442783          	lw	a5,-60(s0)
800054dc:	04f00713          	li	a4,79
800054e0:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 40;  sq_centre_y = 40;
800054e4:	02800793          	li	a5,40
800054e8:	fef41223          	sh	a5,-28(s0)
800054ec:	02800793          	li	a5,40
800054f0:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800054f4:	fe441583          	lh	a1,-28(s0)
800054f8:	fe241603          	lh	a2,-30(s0)
800054fc:	fc842783          	lw	a5,-56(s0)
80005500:	01f00713          	li	a4,31
80005504:	01e00693          	li	a3,30
80005508:	fcc42503          	lw	a0,-52(s0)
8000550c:	4f4030ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 0;
80005510:	00000793          	li	a5,0
80005514:	2c00006f          	j	800057d4 <singlePlayerAI+0x8a8>
		// may have to return the number that  we want to place the O
		// here
	}
	else if (board[2] == ' ')
80005518:	fc442783          	lw	a5,-60(s0)
8000551c:	00278793          	addi	a5,a5,2
80005520:	0007c703          	lbu	a4,0(a5)
80005524:	02000793          	li	a5,32
80005528:	04f71463          	bne	a4,a5,80005570 <singlePlayerAI+0x644>
	{
		board[2] = 'O';
8000552c:	fc442783          	lw	a5,-60(s0)
80005530:	00278793          	addi	a5,a5,2
80005534:	04f00713          	li	a4,79
80005538:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 200;
8000553c:	0c800793          	li	a5,200
80005540:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 40;
80005544:	02800793          	li	a5,40
80005548:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000554c:	fe441583          	lh	a1,-28(s0)
80005550:	fe241603          	lh	a2,-30(s0)
80005554:	fc842783          	lw	a5,-56(s0)
80005558:	01f00713          	li	a4,31
8000555c:	01e00693          	li	a3,30
80005560:	fcc42503          	lw	a0,-52(s0)
80005564:	49c030ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 2;
80005568:	00200793          	li	a5,2
8000556c:	2680006f          	j	800057d4 <singlePlayerAI+0x8a8>
	}
	else if (board[6] == ' ')
80005570:	fc442783          	lw	a5,-60(s0)
80005574:	00678793          	addi	a5,a5,6
80005578:	0007c703          	lbu	a4,0(a5)
8000557c:	02000793          	li	a5,32
80005580:	04f71463          	bne	a4,a5,800055c8 <singlePlayerAI+0x69c>
	{
		board[6] = 'O';
80005584:	fc442783          	lw	a5,-60(s0)
80005588:	00678793          	addi	a5,a5,6
8000558c:	04f00713          	li	a4,79
80005590:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 40;
80005594:	02800793          	li	a5,40
80005598:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 200;
8000559c:	0c800793          	li	a5,200
800055a0:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800055a4:	fe441583          	lh	a1,-28(s0)
800055a8:	fe241603          	lh	a2,-30(s0)
800055ac:	fc842783          	lw	a5,-56(s0)
800055b0:	01f00713          	li	a4,31
800055b4:	01e00693          	li	a3,30
800055b8:	fcc42503          	lw	a0,-52(s0)
800055bc:	444030ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 6;
800055c0:	00600793          	li	a5,6
800055c4:	2100006f          	j	800057d4 <singlePlayerAI+0x8a8>
	}
	else if (board[8] == ' ')
800055c8:	fc442783          	lw	a5,-60(s0)
800055cc:	00878793          	addi	a5,a5,8
800055d0:	0007c703          	lbu	a4,0(a5)
800055d4:	02000793          	li	a5,32
800055d8:	04f71463          	bne	a4,a5,80005620 <singlePlayerAI+0x6f4>
	{
		board[8] = 'O';
800055dc:	fc442783          	lw	a5,-60(s0)
800055e0:	00878793          	addi	a5,a5,8
800055e4:	04f00713          	li	a4,79
800055e8:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 200;
800055ec:	0c800793          	li	a5,200
800055f0:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 200;
800055f4:	0c800793          	li	a5,200
800055f8:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800055fc:	fe441583          	lh	a1,-28(s0)
80005600:	fe241603          	lh	a2,-30(s0)
80005604:	fc842783          	lw	a5,-56(s0)
80005608:	01f00713          	li	a4,31
8000560c:	01e00693          	li	a3,30
80005610:	fcc42503          	lw	a0,-52(s0)
80005614:	3ec030ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 8;
80005618:	00800793          	li	a5,8
8000561c:	1b80006f          	j	800057d4 <singlePlayerAI+0x8a8>
	}

	// try to take the centre square
	if (board[4] == ' ')
80005620:	fc442783          	lw	a5,-60(s0)
80005624:	00478793          	addi	a5,a5,4
80005628:	0007c703          	lbu	a4,0(a5)
8000562c:	02000793          	li	a5,32
80005630:	04f71463          	bne	a4,a5,80005678 <singlePlayerAI+0x74c>
	{
		board[4] = 'O';
80005634:	fc442783          	lw	a5,-60(s0)
80005638:	00478793          	addi	a5,a5,4
8000563c:	04f00713          	li	a4,79
80005640:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 120;
80005644:	07800793          	li	a5,120
80005648:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 120;
8000564c:	07800793          	li	a5,120
80005650:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005654:	fe441583          	lh	a1,-28(s0)
80005658:	fe241603          	lh	a2,-30(s0)
8000565c:	fc842783          	lw	a5,-56(s0)
80005660:	01f00713          	li	a4,31
80005664:	01e00693          	li	a3,30
80005668:	fcc42503          	lw	a0,-52(s0)
8000566c:	394030ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 4;
80005670:	00400793          	li	a5,4
80005674:	1600006f          	j	800057d4 <singlePlayerAI+0x8a8>
	}
	// sides
	if (board[1] == ' ')
80005678:	fc442783          	lw	a5,-60(s0)
8000567c:	00178793          	addi	a5,a5,1
80005680:	0007c703          	lbu	a4,0(a5)
80005684:	02000793          	li	a5,32
80005688:	04f71463          	bne	a4,a5,800056d0 <singlePlayerAI+0x7a4>
	{
		board[1] = 'O';
8000568c:	fc442783          	lw	a5,-60(s0)
80005690:	00178793          	addi	a5,a5,1
80005694:	04f00713          	li	a4,79
80005698:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 120;
8000569c:	07800793          	li	a5,120
800056a0:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 40;
800056a4:	02800793          	li	a5,40
800056a8:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800056ac:	fe441583          	lh	a1,-28(s0)
800056b0:	fe241603          	lh	a2,-30(s0)
800056b4:	fc842783          	lw	a5,-56(s0)
800056b8:	01f00713          	li	a4,31
800056bc:	01e00693          	li	a3,30
800056c0:	fcc42503          	lw	a0,-52(s0)
800056c4:	33c030ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 1;
800056c8:	00100793          	li	a5,1
800056cc:	1080006f          	j	800057d4 <singlePlayerAI+0x8a8>
	}
	else if (board[3] == ' ')
800056d0:	fc442783          	lw	a5,-60(s0)
800056d4:	00378793          	addi	a5,a5,3
800056d8:	0007c703          	lbu	a4,0(a5)
800056dc:	02000793          	li	a5,32
800056e0:	04f71463          	bne	a4,a5,80005728 <singlePlayerAI+0x7fc>
	{
		board[3] = 'O';
800056e4:	fc442783          	lw	a5,-60(s0)
800056e8:	00378793          	addi	a5,a5,3
800056ec:	04f00713          	li	a4,79
800056f0:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 40;
800056f4:	02800793          	li	a5,40
800056f8:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 120;
800056fc:	07800793          	li	a5,120
80005700:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005704:	fe441583          	lh	a1,-28(s0)
80005708:	fe241603          	lh	a2,-30(s0)
8000570c:	fc842783          	lw	a5,-56(s0)
80005710:	01f00713          	li	a4,31
80005714:	01e00693          	li	a3,30
80005718:	fcc42503          	lw	a0,-52(s0)
8000571c:	2e4030ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 3;
80005720:	00300793          	li	a5,3
80005724:	0b00006f          	j	800057d4 <singlePlayerAI+0x8a8>
	}
	else if (board[5] == ' ')
80005728:	fc442783          	lw	a5,-60(s0)
8000572c:	00578793          	addi	a5,a5,5
80005730:	0007c703          	lbu	a4,0(a5)
80005734:	02000793          	li	a5,32
80005738:	04f71463          	bne	a4,a5,80005780 <singlePlayerAI+0x854>
	{
		board[5] = 'O';
8000573c:	fc442783          	lw	a5,-60(s0)
80005740:	00578793          	addi	a5,a5,5
80005744:	04f00713          	li	a4,79
80005748:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 200;
8000574c:	0c800793          	li	a5,200
80005750:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 120;
80005754:	07800793          	li	a5,120
80005758:	fef41123          	sh	a5,-30(s0)
		TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000575c:	fe441583          	lh	a1,-28(s0)
80005760:	fe241603          	lh	a2,-30(s0)
80005764:	fc842783          	lw	a5,-56(s0)
80005768:	01f00713          	li	a4,31
8000576c:	01e00693          	li	a3,30
80005770:	fcc42503          	lw	a0,-52(s0)
80005774:	28c030ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 5;
80005778:	00500793          	li	a5,5
8000577c:	0580006f          	j	800057d4 <singlePlayerAI+0x8a8>
	}
	else if (board[7] == ' ')
80005780:	fc442783          	lw	a5,-60(s0)
80005784:	00778793          	addi	a5,a5,7
80005788:	0007c703          	lbu	a4,0(a5)
8000578c:	02000793          	li	a5,32
80005790:	04f71063          	bne	a4,a5,800057d0 <singlePlayerAI+0x8a4>
	{
		board[7] = 'O';
80005794:	fc442783          	lw	a5,-60(s0)
80005798:	00778793          	addi	a5,a5,7
8000579c:	04f00713          	li	a4,79
800057a0:	00e78023          	sb	a4,0(a5)
		sq_centre_x = 120;
800057a4:	07800793          	li	a5,120
800057a8:	fef41223          	sh	a5,-28(s0)
		sq_centre_y = 200;
800057ac:	0c800793          	li	a5,200
800057b0:	fef41123          	sh	a5,-30(s0)
        TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
800057b4:	fe441583          	lh	a1,-28(s0)
800057b8:	fe241603          	lh	a2,-30(s0)
800057bc:	fc842783          	lw	a5,-56(s0)
800057c0:	01f00713          	li	a4,31
800057c4:	01e00693          	li	a3,30
800057c8:	fcc42503          	lw	a0,-52(s0)
800057cc:	234030ef          	jal	ra,80008a00 <TFT_drawCircle>

	}
return -1;
800057d0:	0ff00793          	li	a5,255

}
800057d4:	00078513          	mv	a0,a5
800057d8:	03c12083          	lw	ra,60(sp)
800057dc:	03812403          	lw	s0,56(sp)
800057e0:	04010113          	addi	sp,sp,64
800057e4:	00008067          	ret

Disassembly of section .text.twoPlayerMode:

800057e8 <twoPlayerMode>:
twoPlayerMode
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
800057e8:	fa010113          	addi	sp,sp,-96
800057ec:	04112e23          	sw	ra,92(sp)
800057f0:	04812c23          	sw	s0,88(sp)
800057f4:	06010413          	addi	s0,sp,96
800057f8:	faa42623          	sw	a0,-84(s0)
800057fc:	fab42423          	sw	a1,-88(s0)
	uint16_t x,y;
	uint8_t z;
	uint16_t  x_pos0, y_pos0,x_pos1, y_pos1, sq_centre_x,sq_centre_y ;
	uint16_t  x_pos2, y_pos2,x_pos3, y_pos3;//, x_count, o_count;
	uint8_t player = 1;
80005800:	00100793          	li	a5,1
80005804:	fcf40fa3          	sb	a5,-33(s0)
	uint8_t winner = 0;
80005808:	fe0407a3          	sb	zero,-17(s0)
	uint8_t pos0 = 0;
8000580c:	fe040723          	sb	zero,-18(s0)
	uint8_t pos1 = 0;
80005810:	fe0406a3          	sb	zero,-19(s0)
	uint8_t pos2 = 0;
80005814:	fe040623          	sb	zero,-20(s0)
	uint8_t pos3 = 0;
80005818:	fe0405a3          	sb	zero,-21(s0)
	uint8_t pos4 = 0;
8000581c:	fe040523          	sb	zero,-22(s0)
	uint8_t pos5 = 0;
80005820:	fe0404a3          	sb	zero,-23(s0)
	uint8_t pos6 = 0;
80005824:	fe040423          	sb	zero,-24(s0)
	uint8_t pos7 = 0;
80005828:	fe0403a3          	sb	zero,-25(s0)
	uint8_t pos8 = 0;
8000582c:	fe040323          	sb	zero,-26(s0)
	//uint8_t pos9 = 0;
	uint32_t counter = 0;
80005830:	fe042023          	sw	zero,-32(s0)
	char board[9] = {'1','2','3','4','5','6','7','8','9' };
80005834:	03100793          	li	a5,49
80005838:	faf40e23          	sb	a5,-68(s0)
8000583c:	03200793          	li	a5,50
80005840:	faf40ea3          	sb	a5,-67(s0)
80005844:	03300793          	li	a5,51
80005848:	faf40f23          	sb	a5,-66(s0)
8000584c:	03400793          	li	a5,52
80005850:	faf40fa3          	sb	a5,-65(s0)
80005854:	03500793          	li	a5,53
80005858:	fcf40023          	sb	a5,-64(s0)
8000585c:	03600793          	li	a5,54
80005860:	fcf400a3          	sb	a5,-63(s0)
80005864:	03700793          	li	a5,55
80005868:	fcf40123          	sb	a5,-62(s0)
8000586c:	03800793          	li	a5,56
80005870:	fcf401a3          	sb	a5,-61(s0)
80005874:	03900793          	li	a5,57
80005878:	fcf40223          	sb	a5,-60(s0)

	draw_board(this_spi,this_gpio);
8000587c:	fa842583          	lw	a1,-88(s0)
80005880:	fac42503          	lw	a0,-84(s0)
80005884:	b99fe0ef          	jal	ra,8000441c <draw_board>
	while( counter < 9 && winner == 0)
80005888:	5e50006f          	j	8000666c <twoPlayerMode+0xe84>
	{
		if ( ((TS_readRegister8(this_spi, this_gpio,STMPE_TSC_CTRL) ) & 0x80))
8000588c:	04000613          	li	a2,64
80005890:	fa842583          	lw	a1,-88(s0)
80005894:	fac42503          	lw	a0,-84(s0)
80005898:	6d5010ef          	jal	ra,8000776c <TS_readRegister8>
8000589c:	00050793          	mv	a5,a0
800058a0:	01879793          	slli	a5,a5,0x18
800058a4:	4187d793          	srai	a5,a5,0x18
800058a8:	5c07d2e3          	bgez	a5,8000666c <twoPlayerMode+0xe84>
		{
			player = counter%2+1;
800058ac:	fe042783          	lw	a5,-32(s0)
800058b0:	0ff7f793          	andi	a5,a5,255
800058b4:	0017f793          	andi	a5,a5,1
800058b8:	0ff7f793          	andi	a5,a5,255
800058bc:	00178793          	addi	a5,a5,1
800058c0:	fcf40fa3          	sb	a5,-33(s0)
			TS_readData( this_spi, this_gpio, &x, &y, &z);
800058c4:	fc540713          	addi	a4,s0,-59
800058c8:	fc640693          	addi	a3,s0,-58
800058cc:	fc840793          	addi	a5,s0,-56
800058d0:	00078613          	mv	a2,a5
800058d4:	fa842583          	lw	a1,-88(s0)
800058d8:	fac42503          	lw	a0,-84(s0)
800058dc:	038020ef          	jal	ra,80007914 <TS_readData>
			x = map( x, TS_MINX, TS_MAXX, 0, TFT_WIDTH);
800058e0:	fc845503          	lhu	a0,-56(s0)
800058e4:	0f000713          	li	a4,240
800058e8:	00000693          	li	a3,0
800058ec:	000017b7          	lui	a5,0x1
800058f0:	ed878613          	addi	a2,a5,-296 # ed8 <HEAP_SIZE+0x6d8>
800058f4:	09600593          	li	a1,150
800058f8:	5bd000ef          	jal	ra,800066b4 <map>
800058fc:	00050793          	mv	a5,a0
80005900:	01079793          	slli	a5,a5,0x10
80005904:	0107d793          	srli	a5,a5,0x10
80005908:	fcf41423          	sh	a5,-56(s0)
			y = map( y, TS_MINY, TS_MAXY, 0, TFT_HEIGHT);
8000590c:	fc645503          	lhu	a0,-58(s0)
80005910:	14000713          	li	a4,320
80005914:	00000693          	li	a3,0
80005918:	000017b7          	lui	a5,0x1
8000591c:	fa078613          	addi	a2,a5,-96 # fa0 <HEAP_SIZE+0x7a0>
80005920:	08200593          	li	a1,130
80005924:	591000ef          	jal	ra,800066b4 <map>
80005928:	00050793          	mv	a5,a0
8000592c:	01079793          	slli	a5,a5,0x10
80005930:	0107d793          	srli	a5,a5,0x10
80005934:	fcf41323          	sh	a5,-58(s0)

			if ((x < 80 && y < 80) && pos0==0)// 0
80005938:	fc845703          	lhu	a4,-56(s0)
8000593c:	04f00793          	li	a5,79
80005940:	16e7e063          	bltu	a5,a4,80005aa0 <twoPlayerMode+0x2b8>
80005944:	fc645703          	lhu	a4,-58(s0)
80005948:	04f00793          	li	a5,79
8000594c:	14e7ea63          	bltu	a5,a4,80005aa0 <twoPlayerMode+0x2b8>
80005950:	fee44783          	lbu	a5,-18(s0)
80005954:	14079663          	bnez	a5,80005aa0 <twoPlayerMode+0x2b8>
			{
				x_pos0 = 20;  y_pos0=20;
80005958:	01400793          	li	a5,20
8000595c:	fcf41e23          	sh	a5,-36(s0)
80005960:	01400793          	li	a5,20
80005964:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =60 ;  y_pos1 =60;
80005968:	03c00793          	li	a5,60
8000596c:	fcf41c23          	sh	a5,-40(s0)
80005970:	03c00793          	li	a5,60
80005974:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 60;  y_pos2=20;
80005978:	03c00793          	li	a5,60
8000597c:	fcf41a23          	sh	a5,-44(s0)
80005980:	01400793          	li	a5,20
80005984:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =20 ;  y_pos3 =60;
80005988:	01400793          	li	a5,20
8000598c:	fcf41823          	sh	a5,-48(s0)
80005990:	03c00793          	li	a5,60
80005994:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 40;  sq_centre_y = 40;
80005998:	02800793          	li	a5,40
8000599c:	fcf41623          	sh	a5,-52(s0)
800059a0:	02800793          	li	a5,40
800059a4:	fcf41523          	sh	a5,-54(s0)
				if (player == 1) // player X
800059a8:	fdf44703          	lbu	a4,-33(s0)
800059ac:	00100793          	li	a5,1
800059b0:	08f71863          	bne	a4,a5,80005a40 <twoPlayerMode+0x258>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
800059b4:	fdc41583          	lh	a1,-36(s0)
800059b8:	fda41603          	lh	a2,-38(s0)
800059bc:	fd841683          	lh	a3,-40(s0)
800059c0:	fd641703          	lh	a4,-42(s0)
800059c4:	fa842803          	lw	a6,-88(s0)
800059c8:	000107b7          	lui	a5,0x10
800059cc:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800059d0:	fac42503          	lw	a0,-84(s0)
800059d4:	488030ef          	jal	ra,80008e5c <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
800059d8:	fd441583          	lh	a1,-44(s0)
800059dc:	fd241603          	lh	a2,-46(s0)
800059e0:	fd041683          	lh	a3,-48(s0)
800059e4:	fce41703          	lh	a4,-50(s0)
800059e8:	fa842803          	lw	a6,-88(s0)
800059ec:	000107b7          	lui	a5,0x10
800059f0:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800059f4:	fac42503          	lw	a0,-84(s0)
800059f8:	464030ef          	jal	ra,80008e5c <TFT_drawLine>
					counter ++;
800059fc:	fe042783          	lw	a5,-32(s0)
80005a00:	00178793          	addi	a5,a5,1
80005a04:	fef42023          	sw	a5,-32(s0)
					pos0 = 1;
80005a08:	00100793          	li	a5,1
80005a0c:	fef40723          	sb	a5,-18(s0)
					board[0] = 'X';
80005a10:	05800793          	li	a5,88
80005a14:	faf40e23          	sb	a5,-68(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
80005a18:	fdf44703          	lbu	a4,-33(s0)
80005a1c:	fbc40793          	addi	a5,s0,-68
80005a20:	fa842683          	lw	a3,-88(s0)
80005a24:	00070613          	mv	a2,a4
80005a28:	00078593          	mv	a1,a5
80005a2c:	fac42503          	lw	a0,-84(s0)
80005a30:	575000ef          	jal	ra,800067a4 <check_winner>
80005a34:	00050793          	mv	a5,a0
80005a38:	fef407a3          	sb	a5,-17(s0)
80005a3c:	4310006f          	j	8000666c <twoPlayerMode+0xe84>
				}
				else // player O
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005a40:	fcc41583          	lh	a1,-52(s0)
80005a44:	fca41603          	lh	a2,-54(s0)
80005a48:	fa842783          	lw	a5,-88(s0)
80005a4c:	01f00713          	li	a4,31
80005a50:	01e00693          	li	a3,30
80005a54:	fac42503          	lw	a0,-84(s0)
80005a58:	7a9020ef          	jal	ra,80008a00 <TFT_drawCircle>
					counter ++;
80005a5c:	fe042783          	lw	a5,-32(s0)
80005a60:	00178793          	addi	a5,a5,1
80005a64:	fef42023          	sw	a5,-32(s0)
					pos0 = 1;
80005a68:	00100793          	li	a5,1
80005a6c:	fef40723          	sb	a5,-18(s0)
					board[0] = 'O';
80005a70:	04f00793          	li	a5,79
80005a74:	faf40e23          	sb	a5,-68(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005a78:	fdf44703          	lbu	a4,-33(s0)
80005a7c:	fbc40793          	addi	a5,s0,-68
80005a80:	fa842683          	lw	a3,-88(s0)
80005a84:	00070613          	mv	a2,a4
80005a88:	00078593          	mv	a1,a5
80005a8c:	fac42503          	lw	a0,-84(s0)
80005a90:	515000ef          	jal	ra,800067a4 <check_winner>
80005a94:	00050793          	mv	a5,a0
80005a98:	fef407a3          	sb	a5,-17(s0)
				if (player == 1) // player X
80005a9c:	3d10006f          	j	8000666c <twoPlayerMode+0xe84>
				}
			}
			else if(((x < 160 && x >80)&& y<80) && pos1==0)// 1
80005aa0:	fc845703          	lhu	a4,-56(s0)
80005aa4:	09f00793          	li	a5,159
80005aa8:	16e7e663          	bltu	a5,a4,80005c14 <twoPlayerMode+0x42c>
80005aac:	fc845703          	lhu	a4,-56(s0)
80005ab0:	05000793          	li	a5,80
80005ab4:	16e7f063          	bleu	a4,a5,80005c14 <twoPlayerMode+0x42c>
80005ab8:	fc645703          	lhu	a4,-58(s0)
80005abc:	04f00793          	li	a5,79
80005ac0:	14e7ea63          	bltu	a5,a4,80005c14 <twoPlayerMode+0x42c>
80005ac4:	fed44783          	lbu	a5,-19(s0)
80005ac8:	14079663          	bnez	a5,80005c14 <twoPlayerMode+0x42c>
			{
				x_pos0 = 100;
80005acc:	06400793          	li	a5,100
80005ad0:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=20;
80005ad4:	01400793          	li	a5,20
80005ad8:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =140 ;
80005adc:	08c00793          	li	a5,140
80005ae0:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =60;
80005ae4:	03c00793          	li	a5,60
80005ae8:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 140;
80005aec:	08c00793          	li	a5,140
80005af0:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=20;
80005af4:	01400793          	li	a5,20
80005af8:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =100 ;
80005afc:	06400793          	li	a5,100
80005b00:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =60;
80005b04:	03c00793          	li	a5,60
80005b08:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 120;
80005b0c:	07800793          	li	a5,120
80005b10:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 40;
80005b14:	02800793          	li	a5,40
80005b18:	fcf41523          	sh	a5,-54(s0)
				if (player == 1) // player X
80005b1c:	fdf44703          	lbu	a4,-33(s0)
80005b20:	00100793          	li	a5,1
80005b24:	08f71863          	bne	a4,a5,80005bb4 <twoPlayerMode+0x3cc>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80005b28:	fdc41583          	lh	a1,-36(s0)
80005b2c:	fda41603          	lh	a2,-38(s0)
80005b30:	fd841683          	lh	a3,-40(s0)
80005b34:	fd641703          	lh	a4,-42(s0)
80005b38:	fa842803          	lw	a6,-88(s0)
80005b3c:	000107b7          	lui	a5,0x10
80005b40:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80005b44:	fac42503          	lw	a0,-84(s0)
80005b48:	314030ef          	jal	ra,80008e5c <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005b4c:	fd441583          	lh	a1,-44(s0)
80005b50:	fd241603          	lh	a2,-46(s0)
80005b54:	fd041683          	lh	a3,-48(s0)
80005b58:	fce41703          	lh	a4,-50(s0)
80005b5c:	fa842803          	lw	a6,-88(s0)
80005b60:	000107b7          	lui	a5,0x10
80005b64:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80005b68:	fac42503          	lw	a0,-84(s0)
80005b6c:	2f0030ef          	jal	ra,80008e5c <TFT_drawLine>
					counter ++;
80005b70:	fe042783          	lw	a5,-32(s0)
80005b74:	00178793          	addi	a5,a5,1
80005b78:	fef42023          	sw	a5,-32(s0)
					pos1 = 1;
80005b7c:	00100793          	li	a5,1
80005b80:	fef406a3          	sb	a5,-19(s0)
					board[1] = 'X';
80005b84:	05800793          	li	a5,88
80005b88:	faf40ea3          	sb	a5,-67(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005b8c:	fdf44703          	lbu	a4,-33(s0)
80005b90:	fbc40793          	addi	a5,s0,-68
80005b94:	fa842683          	lw	a3,-88(s0)
80005b98:	00070613          	mv	a2,a4
80005b9c:	00078593          	mv	a1,a5
80005ba0:	fac42503          	lw	a0,-84(s0)
80005ba4:	401000ef          	jal	ra,800067a4 <check_winner>
80005ba8:	00050793          	mv	a5,a0
80005bac:	fef407a3          	sb	a5,-17(s0)
80005bb0:	2bd0006f          	j	8000666c <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005bb4:	fcc41583          	lh	a1,-52(s0)
80005bb8:	fca41603          	lh	a2,-54(s0)
80005bbc:	fa842783          	lw	a5,-88(s0)
80005bc0:	01f00713          	li	a4,31
80005bc4:	01e00693          	li	a3,30
80005bc8:	fac42503          	lw	a0,-84(s0)
80005bcc:	635020ef          	jal	ra,80008a00 <TFT_drawCircle>
					counter ++;
80005bd0:	fe042783          	lw	a5,-32(s0)
80005bd4:	00178793          	addi	a5,a5,1
80005bd8:	fef42023          	sw	a5,-32(s0)
					pos1 = 1;
80005bdc:	00100793          	li	a5,1
80005be0:	fef406a3          	sb	a5,-19(s0)
					board[1] = 'O';
80005be4:	04f00793          	li	a5,79
80005be8:	faf40ea3          	sb	a5,-67(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
80005bec:	fdf44703          	lbu	a4,-33(s0)
80005bf0:	fbc40793          	addi	a5,s0,-68
80005bf4:	fa842683          	lw	a3,-88(s0)
80005bf8:	00070613          	mv	a2,a4
80005bfc:	00078593          	mv	a1,a5
80005c00:	fac42503          	lw	a0,-84(s0)
80005c04:	3a1000ef          	jal	ra,800067a4 <check_winner>
80005c08:	00050793          	mv	a5,a0
80005c0c:	fef407a3          	sb	a5,-17(s0)
				if (player == 1) // player X
80005c10:	25d0006f          	j	8000666c <twoPlayerMode+0xe84>
				}
			}
			else if(((x < 240 && x >160)&& y<80) && pos2==0)// 2
80005c14:	fc845703          	lhu	a4,-56(s0)
80005c18:	0ef00793          	li	a5,239
80005c1c:	16e7e663          	bltu	a5,a4,80005d88 <twoPlayerMode+0x5a0>
80005c20:	fc845703          	lhu	a4,-56(s0)
80005c24:	0a000793          	li	a5,160
80005c28:	16e7f063          	bleu	a4,a5,80005d88 <twoPlayerMode+0x5a0>
80005c2c:	fc645703          	lhu	a4,-58(s0)
80005c30:	04f00793          	li	a5,79
80005c34:	14e7ea63          	bltu	a5,a4,80005d88 <twoPlayerMode+0x5a0>
80005c38:	fec44783          	lbu	a5,-20(s0)
80005c3c:	14079663          	bnez	a5,80005d88 <twoPlayerMode+0x5a0>
			{
				x_pos0 = 180;
80005c40:	0b400793          	li	a5,180
80005c44:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=20;
80005c48:	01400793          	li	a5,20
80005c4c:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =220 ;
80005c50:	0dc00793          	li	a5,220
80005c54:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =60;
80005c58:	03c00793          	li	a5,60
80005c5c:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 220;
80005c60:	0dc00793          	li	a5,220
80005c64:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=20;
80005c68:	01400793          	li	a5,20
80005c6c:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =180 ;
80005c70:	0b400793          	li	a5,180
80005c74:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =60;
80005c78:	03c00793          	li	a5,60
80005c7c:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 200;
80005c80:	0c800793          	li	a5,200
80005c84:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 40;
80005c88:	02800793          	li	a5,40
80005c8c:	fcf41523          	sh	a5,-54(s0)
				if(player == 1)
80005c90:	fdf44703          	lbu	a4,-33(s0)
80005c94:	00100793          	li	a5,1
80005c98:	08f71863          	bne	a4,a5,80005d28 <twoPlayerMode+0x540>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80005c9c:	fdc41583          	lh	a1,-36(s0)
80005ca0:	fda41603          	lh	a2,-38(s0)
80005ca4:	fd841683          	lh	a3,-40(s0)
80005ca8:	fd641703          	lh	a4,-42(s0)
80005cac:	fa842803          	lw	a6,-88(s0)
80005cb0:	000107b7          	lui	a5,0x10
80005cb4:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80005cb8:	fac42503          	lw	a0,-84(s0)
80005cbc:	1a0030ef          	jal	ra,80008e5c <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005cc0:	fd441583          	lh	a1,-44(s0)
80005cc4:	fd241603          	lh	a2,-46(s0)
80005cc8:	fd041683          	lh	a3,-48(s0)
80005ccc:	fce41703          	lh	a4,-50(s0)
80005cd0:	fa842803          	lw	a6,-88(s0)
80005cd4:	000107b7          	lui	a5,0x10
80005cd8:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80005cdc:	fac42503          	lw	a0,-84(s0)
80005ce0:	17c030ef          	jal	ra,80008e5c <TFT_drawLine>
					counter ++;
80005ce4:	fe042783          	lw	a5,-32(s0)
80005ce8:	00178793          	addi	a5,a5,1
80005cec:	fef42023          	sw	a5,-32(s0)
					pos2 = 1;
80005cf0:	00100793          	li	a5,1
80005cf4:	fef40623          	sb	a5,-20(s0)
					board[2] = 'X';
80005cf8:	05800793          	li	a5,88
80005cfc:	faf40f23          	sb	a5,-66(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005d00:	fdf44703          	lbu	a4,-33(s0)
80005d04:	fbc40793          	addi	a5,s0,-68
80005d08:	fa842683          	lw	a3,-88(s0)
80005d0c:	00070613          	mv	a2,a4
80005d10:	00078593          	mv	a1,a5
80005d14:	fac42503          	lw	a0,-84(s0)
80005d18:	28d000ef          	jal	ra,800067a4 <check_winner>
80005d1c:	00050793          	mv	a5,a0
80005d20:	fef407a3          	sb	a5,-17(s0)
80005d24:	1490006f          	j	8000666c <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005d28:	fcc41583          	lh	a1,-52(s0)
80005d2c:	fca41603          	lh	a2,-54(s0)
80005d30:	fa842783          	lw	a5,-88(s0)
80005d34:	01f00713          	li	a4,31
80005d38:	01e00693          	li	a3,30
80005d3c:	fac42503          	lw	a0,-84(s0)
80005d40:	4c1020ef          	jal	ra,80008a00 <TFT_drawCircle>
					counter ++;
80005d44:	fe042783          	lw	a5,-32(s0)
80005d48:	00178793          	addi	a5,a5,1
80005d4c:	fef42023          	sw	a5,-32(s0)
					pos2 = 1;
80005d50:	00100793          	li	a5,1
80005d54:	fef40623          	sb	a5,-20(s0)
					board[2] = 'O';
80005d58:	04f00793          	li	a5,79
80005d5c:	faf40f23          	sb	a5,-66(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80005d60:	fdf44703          	lbu	a4,-33(s0)
80005d64:	fbc40793          	addi	a5,s0,-68
80005d68:	fa842683          	lw	a3,-88(s0)
80005d6c:	00070613          	mv	a2,a4
80005d70:	00078593          	mv	a1,a5
80005d74:	fac42503          	lw	a0,-84(s0)
80005d78:	22d000ef          	jal	ra,800067a4 <check_winner>
80005d7c:	00050793          	mv	a5,a0
80005d80:	fef407a3          	sb	a5,-17(s0)
				if(player == 1)
80005d84:	0e90006f          	j	8000666c <twoPlayerMode+0xe84>
				}
			}
			else if(x < 80 && (y>80 && y <160) && pos3==0)// 3
80005d88:	fc845703          	lhu	a4,-56(s0)
80005d8c:	04f00793          	li	a5,79
80005d90:	16e7e663          	bltu	a5,a4,80005efc <twoPlayerMode+0x714>
80005d94:	fc645703          	lhu	a4,-58(s0)
80005d98:	05000793          	li	a5,80
80005d9c:	16e7f063          	bleu	a4,a5,80005efc <twoPlayerMode+0x714>
80005da0:	fc645703          	lhu	a4,-58(s0)
80005da4:	09f00793          	li	a5,159
80005da8:	14e7ea63          	bltu	a5,a4,80005efc <twoPlayerMode+0x714>
80005dac:	feb44783          	lbu	a5,-21(s0)
80005db0:	14079663          	bnez	a5,80005efc <twoPlayerMode+0x714>
			{
				x_pos0 = 20;
80005db4:	01400793          	li	a5,20
80005db8:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=100;
80005dbc:	06400793          	li	a5,100
80005dc0:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =60 ;
80005dc4:	03c00793          	li	a5,60
80005dc8:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =140;
80005dcc:	08c00793          	li	a5,140
80005dd0:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 60;
80005dd4:	03c00793          	li	a5,60
80005dd8:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=100;
80005ddc:	06400793          	li	a5,100
80005de0:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =20 ;
80005de4:	01400793          	li	a5,20
80005de8:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =140;
80005dec:	08c00793          	li	a5,140
80005df0:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 40;
80005df4:	02800793          	li	a5,40
80005df8:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 120;
80005dfc:	07800793          	li	a5,120
80005e00:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80005e04:	fdf44703          	lbu	a4,-33(s0)
80005e08:	00100793          	li	a5,1
80005e0c:	08f71863          	bne	a4,a5,80005e9c <twoPlayerMode+0x6b4>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80005e10:	fdc41583          	lh	a1,-36(s0)
80005e14:	fda41603          	lh	a2,-38(s0)
80005e18:	fd841683          	lh	a3,-40(s0)
80005e1c:	fd641703          	lh	a4,-42(s0)
80005e20:	fa842803          	lw	a6,-88(s0)
80005e24:	000107b7          	lui	a5,0x10
80005e28:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80005e2c:	fac42503          	lw	a0,-84(s0)
80005e30:	02c030ef          	jal	ra,80008e5c <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005e34:	fd441583          	lh	a1,-44(s0)
80005e38:	fd241603          	lh	a2,-46(s0)
80005e3c:	fd041683          	lh	a3,-48(s0)
80005e40:	fce41703          	lh	a4,-50(s0)
80005e44:	fa842803          	lw	a6,-88(s0)
80005e48:	000107b7          	lui	a5,0x10
80005e4c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80005e50:	fac42503          	lw	a0,-84(s0)
80005e54:	008030ef          	jal	ra,80008e5c <TFT_drawLine>
					counter ++;
80005e58:	fe042783          	lw	a5,-32(s0)
80005e5c:	00178793          	addi	a5,a5,1
80005e60:	fef42023          	sw	a5,-32(s0)
					pos3 = 1;
80005e64:	00100793          	li	a5,1
80005e68:	fef405a3          	sb	a5,-21(s0)
					board[3] = 'X';
80005e6c:	05800793          	li	a5,88
80005e70:	faf40fa3          	sb	a5,-65(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
80005e74:	fdf44703          	lbu	a4,-33(s0)
80005e78:	fbc40793          	addi	a5,s0,-68
80005e7c:	fa842683          	lw	a3,-88(s0)
80005e80:	00070613          	mv	a2,a4
80005e84:	00078593          	mv	a1,a5
80005e88:	fac42503          	lw	a0,-84(s0)
80005e8c:	119000ef          	jal	ra,800067a4 <check_winner>
80005e90:	00050793          	mv	a5,a0
80005e94:	fef407a3          	sb	a5,-17(s0)
80005e98:	7d40006f          	j	8000666c <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80005e9c:	fcc41583          	lh	a1,-52(s0)
80005ea0:	fca41603          	lh	a2,-54(s0)
80005ea4:	fa842783          	lw	a5,-88(s0)
80005ea8:	01f00713          	li	a4,31
80005eac:	01e00693          	li	a3,30
80005eb0:	fac42503          	lw	a0,-84(s0)
80005eb4:	34d020ef          	jal	ra,80008a00 <TFT_drawCircle>
					counter ++;
80005eb8:	fe042783          	lw	a5,-32(s0)
80005ebc:	00178793          	addi	a5,a5,1
80005ec0:	fef42023          	sw	a5,-32(s0)
					pos3 = 1;
80005ec4:	00100793          	li	a5,1
80005ec8:	fef405a3          	sb	a5,-21(s0)
					board[3] = 'O';
80005ecc:	04f00793          	li	a5,79
80005ed0:	faf40fa3          	sb	a5,-65(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
80005ed4:	fdf44703          	lbu	a4,-33(s0)
80005ed8:	fbc40793          	addi	a5,s0,-68
80005edc:	fa842683          	lw	a3,-88(s0)
80005ee0:	00070613          	mv	a2,a4
80005ee4:	00078593          	mv	a1,a5
80005ee8:	fac42503          	lw	a0,-84(s0)
80005eec:	0b9000ef          	jal	ra,800067a4 <check_winner>
80005ef0:	00050793          	mv	a5,a0
80005ef4:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
80005ef8:	7740006f          	j	8000666c <twoPlayerMode+0xe84>
				}
			}
			else if((x < 160 && x >80)&& (y < 160 && y >80) && pos4==0)// 4
80005efc:	fc845703          	lhu	a4,-56(s0)
80005f00:	09f00793          	li	a5,159
80005f04:	16e7ec63          	bltu	a5,a4,8000607c <twoPlayerMode+0x894>
80005f08:	fc845703          	lhu	a4,-56(s0)
80005f0c:	05000793          	li	a5,80
80005f10:	16e7f663          	bleu	a4,a5,8000607c <twoPlayerMode+0x894>
80005f14:	fc645703          	lhu	a4,-58(s0)
80005f18:	09f00793          	li	a5,159
80005f1c:	16e7e063          	bltu	a5,a4,8000607c <twoPlayerMode+0x894>
80005f20:	fc645703          	lhu	a4,-58(s0)
80005f24:	05000793          	li	a5,80
80005f28:	14e7fa63          	bleu	a4,a5,8000607c <twoPlayerMode+0x894>
80005f2c:	fea44783          	lbu	a5,-22(s0)
80005f30:	14079663          	bnez	a5,8000607c <twoPlayerMode+0x894>
			{
				x_pos0 = 100;
80005f34:	06400793          	li	a5,100
80005f38:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=100;
80005f3c:	06400793          	li	a5,100
80005f40:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =140 ;
80005f44:	08c00793          	li	a5,140
80005f48:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =140;
80005f4c:	08c00793          	li	a5,140
80005f50:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 140;
80005f54:	08c00793          	li	a5,140
80005f58:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=100;
80005f5c:	06400793          	li	a5,100
80005f60:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =100 ;
80005f64:	06400793          	li	a5,100
80005f68:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =140;
80005f6c:	08c00793          	li	a5,140
80005f70:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 120;
80005f74:	07800793          	li	a5,120
80005f78:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 120;
80005f7c:	07800793          	li	a5,120
80005f80:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80005f84:	fdf44703          	lbu	a4,-33(s0)
80005f88:	00100793          	li	a5,1
80005f8c:	08f71863          	bne	a4,a5,8000601c <twoPlayerMode+0x834>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80005f90:	fdc41583          	lh	a1,-36(s0)
80005f94:	fda41603          	lh	a2,-38(s0)
80005f98:	fd841683          	lh	a3,-40(s0)
80005f9c:	fd641703          	lh	a4,-42(s0)
80005fa0:	fa842803          	lw	a6,-88(s0)
80005fa4:	000107b7          	lui	a5,0x10
80005fa8:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80005fac:	fac42503          	lw	a0,-84(s0)
80005fb0:	6ad020ef          	jal	ra,80008e5c <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80005fb4:	fd441583          	lh	a1,-44(s0)
80005fb8:	fd241603          	lh	a2,-46(s0)
80005fbc:	fd041683          	lh	a3,-48(s0)
80005fc0:	fce41703          	lh	a4,-50(s0)
80005fc4:	fa842803          	lw	a6,-88(s0)
80005fc8:	000107b7          	lui	a5,0x10
80005fcc:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80005fd0:	fac42503          	lw	a0,-84(s0)
80005fd4:	689020ef          	jal	ra,80008e5c <TFT_drawLine>
					counter ++;
80005fd8:	fe042783          	lw	a5,-32(s0)
80005fdc:	00178793          	addi	a5,a5,1
80005fe0:	fef42023          	sw	a5,-32(s0)
					pos4 = 1;
80005fe4:	00100793          	li	a5,1
80005fe8:	fef40523          	sb	a5,-22(s0)
					board[4] = 'X';
80005fec:	05800793          	li	a5,88
80005ff0:	fcf40023          	sb	a5,-64(s0)
					winner =   check_winner(this_spi,board,player,this_gpio);
80005ff4:	fdf44703          	lbu	a4,-33(s0)
80005ff8:	fbc40793          	addi	a5,s0,-68
80005ffc:	fa842683          	lw	a3,-88(s0)
80006000:	00070613          	mv	a2,a4
80006004:	00078593          	mv	a1,a5
80006008:	fac42503          	lw	a0,-84(s0)
8000600c:	798000ef          	jal	ra,800067a4 <check_winner>
80006010:	00050793          	mv	a5,a0
80006014:	fef407a3          	sb	a5,-17(s0)
80006018:	6540006f          	j	8000666c <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000601c:	fcc41583          	lh	a1,-52(s0)
80006020:	fca41603          	lh	a2,-54(s0)
80006024:	fa842783          	lw	a5,-88(s0)
80006028:	01f00713          	li	a4,31
8000602c:	01e00693          	li	a3,30
80006030:	fac42503          	lw	a0,-84(s0)
80006034:	1cd020ef          	jal	ra,80008a00 <TFT_drawCircle>
					counter ++;
80006038:	fe042783          	lw	a5,-32(s0)
8000603c:	00178793          	addi	a5,a5,1
80006040:	fef42023          	sw	a5,-32(s0)
					pos4 = 1;
80006044:	00100793          	li	a5,1
80006048:	fef40523          	sb	a5,-22(s0)
					board[4] = 'O';
8000604c:	04f00793          	li	a5,79
80006050:	fcf40023          	sb	a5,-64(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80006054:	fdf44703          	lbu	a4,-33(s0)
80006058:	fbc40793          	addi	a5,s0,-68
8000605c:	fa842683          	lw	a3,-88(s0)
80006060:	00070613          	mv	a2,a4
80006064:	00078593          	mv	a1,a5
80006068:	fac42503          	lw	a0,-84(s0)
8000606c:	738000ef          	jal	ra,800067a4 <check_winner>
80006070:	00050793          	mv	a5,a0
80006074:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
80006078:	5f40006f          	j	8000666c <twoPlayerMode+0xe84>
				}
			}
			else if((x < 240 && x >160)&& (y>80 && y<160 ) && pos5==0)// 5
8000607c:	fc845703          	lhu	a4,-56(s0)
80006080:	0ef00793          	li	a5,239
80006084:	16e7ec63          	bltu	a5,a4,800061fc <twoPlayerMode+0xa14>
80006088:	fc845703          	lhu	a4,-56(s0)
8000608c:	0a000793          	li	a5,160
80006090:	16e7f663          	bleu	a4,a5,800061fc <twoPlayerMode+0xa14>
80006094:	fc645703          	lhu	a4,-58(s0)
80006098:	05000793          	li	a5,80
8000609c:	16e7f063          	bleu	a4,a5,800061fc <twoPlayerMode+0xa14>
800060a0:	fc645703          	lhu	a4,-58(s0)
800060a4:	09f00793          	li	a5,159
800060a8:	14e7ea63          	bltu	a5,a4,800061fc <twoPlayerMode+0xa14>
800060ac:	fe944783          	lbu	a5,-23(s0)
800060b0:	14079663          	bnez	a5,800061fc <twoPlayerMode+0xa14>
			{
				x_pos0 = 180;
800060b4:	0b400793          	li	a5,180
800060b8:	fcf41e23          	sh	a5,-36(s0)
				y_pos0= 100;
800060bc:	06400793          	li	a5,100
800060c0:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =220 ;
800060c4:	0dc00793          	li	a5,220
800060c8:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =140;
800060cc:	08c00793          	li	a5,140
800060d0:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 220;
800060d4:	0dc00793          	li	a5,220
800060d8:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=100;
800060dc:	06400793          	li	a5,100
800060e0:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =180 ;
800060e4:	0b400793          	li	a5,180
800060e8:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =140;
800060ec:	08c00793          	li	a5,140
800060f0:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 200;
800060f4:	0c800793          	li	a5,200
800060f8:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 120;
800060fc:	07800793          	li	a5,120
80006100:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80006104:	fdf44703          	lbu	a4,-33(s0)
80006108:	00100793          	li	a5,1
8000610c:	08f71863          	bne	a4,a5,8000619c <twoPlayerMode+0x9b4>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80006110:	fdc41583          	lh	a1,-36(s0)
80006114:	fda41603          	lh	a2,-38(s0)
80006118:	fd841683          	lh	a3,-40(s0)
8000611c:	fd641703          	lh	a4,-42(s0)
80006120:	fa842803          	lw	a6,-88(s0)
80006124:	000107b7          	lui	a5,0x10
80006128:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
8000612c:	fac42503          	lw	a0,-84(s0)
80006130:	52d020ef          	jal	ra,80008e5c <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80006134:	fd441583          	lh	a1,-44(s0)
80006138:	fd241603          	lh	a2,-46(s0)
8000613c:	fd041683          	lh	a3,-48(s0)
80006140:	fce41703          	lh	a4,-50(s0)
80006144:	fa842803          	lw	a6,-88(s0)
80006148:	000107b7          	lui	a5,0x10
8000614c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006150:	fac42503          	lw	a0,-84(s0)
80006154:	509020ef          	jal	ra,80008e5c <TFT_drawLine>
					counter ++;
80006158:	fe042783          	lw	a5,-32(s0)
8000615c:	00178793          	addi	a5,a5,1
80006160:	fef42023          	sw	a5,-32(s0)
					pos5 = 1;
80006164:	00100793          	li	a5,1
80006168:	fef404a3          	sb	a5,-23(s0)
					board[5] = 'X';
8000616c:	05800793          	li	a5,88
80006170:	fcf400a3          	sb	a5,-63(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80006174:	fdf44703          	lbu	a4,-33(s0)
80006178:	fbc40793          	addi	a5,s0,-68
8000617c:	fa842683          	lw	a3,-88(s0)
80006180:	00070613          	mv	a2,a4
80006184:	00078593          	mv	a1,a5
80006188:	fac42503          	lw	a0,-84(s0)
8000618c:	618000ef          	jal	ra,800067a4 <check_winner>
80006190:	00050793          	mv	a5,a0
80006194:	fef407a3          	sb	a5,-17(s0)
80006198:	4d40006f          	j	8000666c <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
8000619c:	fcc41583          	lh	a1,-52(s0)
800061a0:	fca41603          	lh	a2,-54(s0)
800061a4:	fa842783          	lw	a5,-88(s0)
800061a8:	01f00713          	li	a4,31
800061ac:	01e00693          	li	a3,30
800061b0:	fac42503          	lw	a0,-84(s0)
800061b4:	04d020ef          	jal	ra,80008a00 <TFT_drawCircle>
					counter ++;
800061b8:	fe042783          	lw	a5,-32(s0)
800061bc:	00178793          	addi	a5,a5,1
800061c0:	fef42023          	sw	a5,-32(s0)
					pos5 = 1;
800061c4:	00100793          	li	a5,1
800061c8:	fef404a3          	sb	a5,-23(s0)
					board[5] =    'O';
800061cc:	04f00793          	li	a5,79
800061d0:	fcf400a3          	sb	a5,-63(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
800061d4:	fdf44703          	lbu	a4,-33(s0)
800061d8:	fbc40793          	addi	a5,s0,-68
800061dc:	fa842683          	lw	a3,-88(s0)
800061e0:	00070613          	mv	a2,a4
800061e4:	00078593          	mv	a1,a5
800061e8:	fac42503          	lw	a0,-84(s0)
800061ec:	5b8000ef          	jal	ra,800067a4 <check_winner>
800061f0:	00050793          	mv	a5,a0
800061f4:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
800061f8:	4740006f          	j	8000666c <twoPlayerMode+0xe84>
				}
			}
			else if( x < 80 && (y<240 && y > 160) && pos6==0)//6
800061fc:	fc845703          	lhu	a4,-56(s0)
80006200:	04f00793          	li	a5,79
80006204:	16e7e663          	bltu	a5,a4,80006370 <twoPlayerMode+0xb88>
80006208:	fc645703          	lhu	a4,-58(s0)
8000620c:	0ef00793          	li	a5,239
80006210:	16e7e063          	bltu	a5,a4,80006370 <twoPlayerMode+0xb88>
80006214:	fc645703          	lhu	a4,-58(s0)
80006218:	0a000793          	li	a5,160
8000621c:	14e7fa63          	bleu	a4,a5,80006370 <twoPlayerMode+0xb88>
80006220:	fe844783          	lbu	a5,-24(s0)
80006224:	14079663          	bnez	a5,80006370 <twoPlayerMode+0xb88>
			{
				x_pos0 = 20;
80006228:	01400793          	li	a5,20
8000622c:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=180;
80006230:	0b400793          	li	a5,180
80006234:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =60 ;
80006238:	03c00793          	li	a5,60
8000623c:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =220;
80006240:	0dc00793          	li	a5,220
80006244:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 60;
80006248:	03c00793          	li	a5,60
8000624c:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=180;
80006250:	0b400793          	li	a5,180
80006254:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =20 ;
80006258:	01400793          	li	a5,20
8000625c:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =220;
80006260:	0dc00793          	li	a5,220
80006264:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 40;
80006268:	02800793          	li	a5,40
8000626c:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 200;
80006270:	0c800793          	li	a5,200
80006274:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80006278:	fdf44703          	lbu	a4,-33(s0)
8000627c:	00100793          	li	a5,1
80006280:	08f71863          	bne	a4,a5,80006310 <twoPlayerMode+0xb28>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80006284:	fdc41583          	lh	a1,-36(s0)
80006288:	fda41603          	lh	a2,-38(s0)
8000628c:	fd841683          	lh	a3,-40(s0)
80006290:	fd641703          	lh	a4,-42(s0)
80006294:	fa842803          	lw	a6,-88(s0)
80006298:	000107b7          	lui	a5,0x10
8000629c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800062a0:	fac42503          	lw	a0,-84(s0)
800062a4:	3b9020ef          	jal	ra,80008e5c <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
800062a8:	fd441583          	lh	a1,-44(s0)
800062ac:	fd241603          	lh	a2,-46(s0)
800062b0:	fd041683          	lh	a3,-48(s0)
800062b4:	fce41703          	lh	a4,-50(s0)
800062b8:	fa842803          	lw	a6,-88(s0)
800062bc:	000107b7          	lui	a5,0x10
800062c0:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800062c4:	fac42503          	lw	a0,-84(s0)
800062c8:	395020ef          	jal	ra,80008e5c <TFT_drawLine>
					counter ++;
800062cc:	fe042783          	lw	a5,-32(s0)
800062d0:	00178793          	addi	a5,a5,1
800062d4:	fef42023          	sw	a5,-32(s0)
					pos6 = 1;
800062d8:	00100793          	li	a5,1
800062dc:	fef40423          	sb	a5,-24(s0)
					board[6] =   'X';
800062e0:	05800793          	li	a5,88
800062e4:	fcf40123          	sb	a5,-62(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
800062e8:	fdf44703          	lbu	a4,-33(s0)
800062ec:	fbc40793          	addi	a5,s0,-68
800062f0:	fa842683          	lw	a3,-88(s0)
800062f4:	00070613          	mv	a2,a4
800062f8:	00078593          	mv	a1,a5
800062fc:	fac42503          	lw	a0,-84(s0)
80006300:	4a4000ef          	jal	ra,800067a4 <check_winner>
80006304:	00050793          	mv	a5,a0
80006308:	fef407a3          	sb	a5,-17(s0)
8000630c:	3600006f          	j	8000666c <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80006310:	fcc41583          	lh	a1,-52(s0)
80006314:	fca41603          	lh	a2,-54(s0)
80006318:	fa842783          	lw	a5,-88(s0)
8000631c:	01f00713          	li	a4,31
80006320:	01e00693          	li	a3,30
80006324:	fac42503          	lw	a0,-84(s0)
80006328:	6d8020ef          	jal	ra,80008a00 <TFT_drawCircle>
					counter ++;
8000632c:	fe042783          	lw	a5,-32(s0)
80006330:	00178793          	addi	a5,a5,1
80006334:	fef42023          	sw	a5,-32(s0)
					pos6 = 1;
80006338:	00100793          	li	a5,1
8000633c:	fef40423          	sb	a5,-24(s0)
					board[6] = 'O';
80006340:	04f00793          	li	a5,79
80006344:	fcf40123          	sb	a5,-62(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80006348:	fdf44703          	lbu	a4,-33(s0)
8000634c:	fbc40793          	addi	a5,s0,-68
80006350:	fa842683          	lw	a3,-88(s0)
80006354:	00070613          	mv	a2,a4
80006358:	00078593          	mv	a1,a5
8000635c:	fac42503          	lw	a0,-84(s0)
80006360:	444000ef          	jal	ra,800067a4 <check_winner>
80006364:	00050793          	mv	a5,a0
80006368:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
8000636c:	3000006f          	j	8000666c <twoPlayerMode+0xe84>
				}
			}
			else if((x < 160 && x >80)&&( y <240 && y>160) && pos7==0) // 7
80006370:	fc845703          	lhu	a4,-56(s0)
80006374:	09f00793          	li	a5,159
80006378:	16e7ec63          	bltu	a5,a4,800064f0 <twoPlayerMode+0xd08>
8000637c:	fc845703          	lhu	a4,-56(s0)
80006380:	05000793          	li	a5,80
80006384:	16e7f663          	bleu	a4,a5,800064f0 <twoPlayerMode+0xd08>
80006388:	fc645703          	lhu	a4,-58(s0)
8000638c:	0ef00793          	li	a5,239
80006390:	16e7e063          	bltu	a5,a4,800064f0 <twoPlayerMode+0xd08>
80006394:	fc645703          	lhu	a4,-58(s0)
80006398:	0a000793          	li	a5,160
8000639c:	14e7fa63          	bleu	a4,a5,800064f0 <twoPlayerMode+0xd08>
800063a0:	fe744783          	lbu	a5,-25(s0)
800063a4:	14079663          	bnez	a5,800064f0 <twoPlayerMode+0xd08>
			{
				x_pos0 = 100;
800063a8:	06400793          	li	a5,100
800063ac:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=180;
800063b0:	0b400793          	li	a5,180
800063b4:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =140 ;
800063b8:	08c00793          	li	a5,140
800063bc:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =220;
800063c0:	0dc00793          	li	a5,220
800063c4:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 140;
800063c8:	08c00793          	li	a5,140
800063cc:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=180;
800063d0:	0b400793          	li	a5,180
800063d4:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =100 ;
800063d8:	06400793          	li	a5,100
800063dc:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =220;
800063e0:	0dc00793          	li	a5,220
800063e4:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 120;
800063e8:	07800793          	li	a5,120
800063ec:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 200;
800063f0:	0c800793          	li	a5,200
800063f4:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
800063f8:	fdf44703          	lbu	a4,-33(s0)
800063fc:	00100793          	li	a5,1
80006400:	08f71863          	bne	a4,a5,80006490 <twoPlayerMode+0xca8>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80006404:	fdc41583          	lh	a1,-36(s0)
80006408:	fda41603          	lh	a2,-38(s0)
8000640c:	fd841683          	lh	a3,-40(s0)
80006410:	fd641703          	lh	a4,-42(s0)
80006414:	fa842803          	lw	a6,-88(s0)
80006418:	000107b7          	lui	a5,0x10
8000641c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006420:	fac42503          	lw	a0,-84(s0)
80006424:	239020ef          	jal	ra,80008e5c <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
80006428:	fd441583          	lh	a1,-44(s0)
8000642c:	fd241603          	lh	a2,-46(s0)
80006430:	fd041683          	lh	a3,-48(s0)
80006434:	fce41703          	lh	a4,-50(s0)
80006438:	fa842803          	lw	a6,-88(s0)
8000643c:	000107b7          	lui	a5,0x10
80006440:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006444:	fac42503          	lw	a0,-84(s0)
80006448:	215020ef          	jal	ra,80008e5c <TFT_drawLine>
					counter ++;
8000644c:	fe042783          	lw	a5,-32(s0)
80006450:	00178793          	addi	a5,a5,1
80006454:	fef42023          	sw	a5,-32(s0)
					pos7 = 1;
80006458:	00100793          	li	a5,1
8000645c:	fef403a3          	sb	a5,-25(s0)
					board[7] = 'X';
80006460:	05800793          	li	a5,88
80006464:	fcf401a3          	sb	a5,-61(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
80006468:	fdf44703          	lbu	a4,-33(s0)
8000646c:	fbc40793          	addi	a5,s0,-68
80006470:	fa842683          	lw	a3,-88(s0)
80006474:	00070613          	mv	a2,a4
80006478:	00078593          	mv	a1,a5
8000647c:	fac42503          	lw	a0,-84(s0)
80006480:	324000ef          	jal	ra,800067a4 <check_winner>
80006484:	00050793          	mv	a5,a0
80006488:	fef407a3          	sb	a5,-17(s0)
8000648c:	1e00006f          	j	8000666c <twoPlayerMode+0xe84>
				}
				else
				{
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80006490:	fcc41583          	lh	a1,-52(s0)
80006494:	fca41603          	lh	a2,-54(s0)
80006498:	fa842783          	lw	a5,-88(s0)
8000649c:	01f00713          	li	a4,31
800064a0:	01e00693          	li	a3,30
800064a4:	fac42503          	lw	a0,-84(s0)
800064a8:	558020ef          	jal	ra,80008a00 <TFT_drawCircle>
					counter ++;
800064ac:	fe042783          	lw	a5,-32(s0)
800064b0:	00178793          	addi	a5,a5,1
800064b4:	fef42023          	sw	a5,-32(s0)
					pos7 = 1;
800064b8:	00100793          	li	a5,1
800064bc:	fef403a3          	sb	a5,-25(s0)
					board[7] = 'O';
800064c0:	04f00793          	li	a5,79
800064c4:	fcf401a3          	sb	a5,-61(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
800064c8:	fdf44703          	lbu	a4,-33(s0)
800064cc:	fbc40793          	addi	a5,s0,-68
800064d0:	fa842683          	lw	a3,-88(s0)
800064d4:	00070613          	mv	a2,a4
800064d8:	00078593          	mv	a1,a5
800064dc:	fac42503          	lw	a0,-84(s0)
800064e0:	2c4000ef          	jal	ra,800067a4 <check_winner>
800064e4:	00050793          	mv	a5,a0
800064e8:	fef407a3          	sb	a5,-17(s0)
				if (player == 1 )
800064ec:	1800006f          	j	8000666c <twoPlayerMode+0xe84>
				}
			}
			else if((x < 240 && x >160)&&(y>160 && y<240) && pos8==0)// 8
800064f0:	fc845703          	lhu	a4,-56(s0)
800064f4:	0ef00793          	li	a5,239
800064f8:	16e7ea63          	bltu	a5,a4,8000666c <twoPlayerMode+0xe84>
800064fc:	fc845703          	lhu	a4,-56(s0)
80006500:	0a000793          	li	a5,160
80006504:	16e7f463          	bleu	a4,a5,8000666c <twoPlayerMode+0xe84>
80006508:	fc645703          	lhu	a4,-58(s0)
8000650c:	0a000793          	li	a5,160
80006510:	14e7fe63          	bleu	a4,a5,8000666c <twoPlayerMode+0xe84>
80006514:	fc645703          	lhu	a4,-58(s0)
80006518:	0ef00793          	li	a5,239
8000651c:	14e7e863          	bltu	a5,a4,8000666c <twoPlayerMode+0xe84>
80006520:	fe644783          	lbu	a5,-26(s0)
80006524:	14079463          	bnez	a5,8000666c <twoPlayerMode+0xe84>
			{
				x_pos0 = 180;
80006528:	0b400793          	li	a5,180
8000652c:	fcf41e23          	sh	a5,-36(s0)
				y_pos0=180;
80006530:	0b400793          	li	a5,180
80006534:	fcf41d23          	sh	a5,-38(s0)
				x_pos1 =220 ;
80006538:	0dc00793          	li	a5,220
8000653c:	fcf41c23          	sh	a5,-40(s0)
				y_pos1 =220;
80006540:	0dc00793          	li	a5,220
80006544:	fcf41b23          	sh	a5,-42(s0)
				x_pos2 = 220;
80006548:	0dc00793          	li	a5,220
8000654c:	fcf41a23          	sh	a5,-44(s0)
				y_pos2=180;
80006550:	0b400793          	li	a5,180
80006554:	fcf41923          	sh	a5,-46(s0)
				x_pos3 =180 ;
80006558:	0b400793          	li	a5,180
8000655c:	fcf41823          	sh	a5,-48(s0)
				y_pos3 =220;
80006560:	0dc00793          	li	a5,220
80006564:	fcf41723          	sh	a5,-50(s0)
				sq_centre_x = 200;
80006568:	0c800793          	li	a5,200
8000656c:	fcf41623          	sh	a5,-52(s0)
				sq_centre_y = 200;
80006570:	0c800793          	li	a5,200
80006574:	fcf41523          	sh	a5,-54(s0)
				if (player == 1 )
80006578:	fdf44703          	lbu	a4,-33(s0)
8000657c:	00100793          	li	a5,1
80006580:	08f71863          	bne	a4,a5,80006610 <twoPlayerMode+0xe28>
				{
					TFT_drawLine(this_spi,x_pos0, y_pos0,  x_pos1, y_pos1 ,ILI9341_RED,this_gpio);
80006584:	fdc41583          	lh	a1,-36(s0)
80006588:	fda41603          	lh	a2,-38(s0)
8000658c:	fd841683          	lh	a3,-40(s0)
80006590:	fd641703          	lh	a4,-42(s0)
80006594:	fa842803          	lw	a6,-88(s0)
80006598:	000107b7          	lui	a5,0x10
8000659c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800065a0:	fac42503          	lw	a0,-84(s0)
800065a4:	0b9020ef          	jal	ra,80008e5c <TFT_drawLine>
					TFT_drawLine(this_spi,x_pos2, y_pos2,  x_pos3, y_pos3 ,ILI9341_RED,this_gpio);
800065a8:	fd441583          	lh	a1,-44(s0)
800065ac:	fd241603          	lh	a2,-46(s0)
800065b0:	fd041683          	lh	a3,-48(s0)
800065b4:	fce41703          	lh	a4,-50(s0)
800065b8:	fa842803          	lw	a6,-88(s0)
800065bc:	000107b7          	lui	a5,0x10
800065c0:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800065c4:	fac42503          	lw	a0,-84(s0)
800065c8:	095020ef          	jal	ra,80008e5c <TFT_drawLine>
					counter ++;
800065cc:	fe042783          	lw	a5,-32(s0)
800065d0:	00178793          	addi	a5,a5,1
800065d4:	fef42023          	sw	a5,-32(s0)
					pos8 = 1;
800065d8:	00100793          	li	a5,1
800065dc:	fef40323          	sb	a5,-26(s0)
					board[8] = 'X';
800065e0:	05800793          	li	a5,88
800065e4:	fcf40223          	sb	a5,-60(s0)
					winner =  check_winner(this_spi,board,player,this_gpio);
800065e8:	fdf44703          	lbu	a4,-33(s0)
800065ec:	fbc40793          	addi	a5,s0,-68
800065f0:	fa842683          	lw	a3,-88(s0)
800065f4:	00070613          	mv	a2,a4
800065f8:	00078593          	mv	a1,a5
800065fc:	fac42503          	lw	a0,-84(s0)
80006600:	1a4000ef          	jal	ra,800067a4 <check_winner>
80006604:	00050793          	mv	a5,a0
80006608:	fef407a3          	sb	a5,-17(s0)
8000660c:	0600006f          	j	8000666c <twoPlayerMode+0xe84>
				}
				else
				{
					board[8] = 'O';
80006610:	04f00793          	li	a5,79
80006614:	fcf40223          	sb	a5,-60(s0)
					TFT_drawCircle(this_spi ,sq_centre_x,sq_centre_y, 30, ILI9341_BLUE, this_gpio);
80006618:	fcc41583          	lh	a1,-52(s0)
8000661c:	fca41603          	lh	a2,-54(s0)
80006620:	fa842783          	lw	a5,-88(s0)
80006624:	01f00713          	li	a4,31
80006628:	01e00693          	li	a3,30
8000662c:	fac42503          	lw	a0,-84(s0)
80006630:	3d0020ef          	jal	ra,80008a00 <TFT_drawCircle>
					counter ++;
80006634:	fe042783          	lw	a5,-32(s0)
80006638:	00178793          	addi	a5,a5,1
8000663c:	fef42023          	sw	a5,-32(s0)
					pos8 = 1;
80006640:	00100793          	li	a5,1
80006644:	fef40323          	sb	a5,-26(s0)
					winner = check_winner(this_spi,board,player,this_gpio);
80006648:	fdf44703          	lbu	a4,-33(s0)
8000664c:	fbc40793          	addi	a5,s0,-68
80006650:	fa842683          	lw	a3,-88(s0)
80006654:	00070613          	mv	a2,a4
80006658:	00078593          	mv	a1,a5
8000665c:	fac42503          	lw	a0,-84(s0)
80006660:	144000ef          	jal	ra,800067a4 <check_winner>
80006664:	00050793          	mv	a5,a0
80006668:	fef407a3          	sb	a5,-17(s0)
	while( counter < 9 && winner == 0)
8000666c:	fe042703          	lw	a4,-32(s0)
80006670:	00800793          	li	a5,8
80006674:	00e7e663          	bltu	a5,a4,80006680 <twoPlayerMode+0xe98>
80006678:	fef44783          	lbu	a5,-17(s0)
8000667c:	a0078863          	beqz	a5,8000588c <twoPlayerMode+0xa4>
				}
			}
			}
		}

	if (winner == 0 && counter >=9)
80006680:	fef44783          	lbu	a5,-17(s0)
80006684:	00079e63          	bnez	a5,800066a0 <twoPlayerMode+0xeb8>
80006688:	fe042703          	lw	a4,-32(s0)
8000668c:	00800793          	li	a5,8
80006690:	00e7f863          	bleu	a4,a5,800066a0 <twoPlayerMode+0xeb8>
	{
		drawGame(this_spi,this_gpio);
80006694:	fa842583          	lw	a1,-88(s0)
80006698:	fac42503          	lw	a0,-84(s0)
8000669c:	080000ef          	jal	ra,8000671c <drawGame>
	}
}
800066a0:	00000013          	nop
800066a4:	05c12083          	lw	ra,92(sp)
800066a8:	05812403          	lw	s0,88(sp)
800066ac:	06010113          	addi	sp,sp,96
800066b0:	00008067          	ret

Disassembly of section .text.map:

800066b4 <map>:
	uint16_t in_min,
	uint16_t in_max,
	uint16_t out_min,
	uint16_t out_max
)
{
800066b4:	fe010113          	addi	sp,sp,-32
800066b8:	00812e23          	sw	s0,28(sp)
800066bc:	02010413          	addi	s0,sp,32
800066c0:	00070793          	mv	a5,a4
800066c4:	fea41723          	sh	a0,-18(s0)
800066c8:	feb41623          	sh	a1,-20(s0)
800066cc:	fec41523          	sh	a2,-22(s0)
800066d0:	fed41423          	sh	a3,-24(s0)
800066d4:	fef41323          	sh	a5,-26(s0)
	return (coord - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
800066d8:	fee45703          	lhu	a4,-18(s0)
800066dc:	fec45783          	lhu	a5,-20(s0)
800066e0:	40f70733          	sub	a4,a4,a5
800066e4:	fe645683          	lhu	a3,-26(s0)
800066e8:	fe845783          	lhu	a5,-24(s0)
800066ec:	40f687b3          	sub	a5,a3,a5
800066f0:	02f70733          	mul	a4,a4,a5
800066f4:	fea45683          	lhu	a3,-22(s0)
800066f8:	fec45783          	lhu	a5,-20(s0)
800066fc:	40f687b3          	sub	a5,a3,a5
80006700:	02f74733          	div	a4,a4,a5
80006704:	fe845783          	lhu	a5,-24(s0)
80006708:	00f707b3          	add	a5,a4,a5
}
8000670c:	00078513          	mv	a0,a5
80006710:	01c12403          	lw	s0,28(sp)
80006714:	02010113          	addi	sp,sp,32
80006718:	00008067          	ret

Disassembly of section .text.drawGame:

8000671c <drawGame>:
drawGame
(
	spi_instance_t *this_spi,
	gpio_instance_t *this_gpio
)
{
8000671c:	fe010113          	addi	sp,sp,-32
80006720:	00112e23          	sw	ra,28(sp)
80006724:	00812c23          	sw	s0,24(sp)
80006728:	02010413          	addi	s0,sp,32
8000672c:	fea42623          	sw	a0,-20(s0)
80006730:	feb42423          	sw	a1,-24(s0)
    TFT_drawLine(this_spi, 50, 50,  190, 190 ,ILI9341_GREEN,this_gpio);
80006734:	fe842803          	lw	a6,-24(s0)
80006738:	7e000793          	li	a5,2016
8000673c:	0be00713          	li	a4,190
80006740:	0be00693          	li	a3,190
80006744:	03200613          	li	a2,50
80006748:	03200593          	li	a1,50
8000674c:	fec42503          	lw	a0,-20(s0)
80006750:	70c020ef          	jal	ra,80008e5c <TFT_drawLine>
    TFT_drawLine(this_spi, 190, 50,  50, 190 ,ILI9341_GREEN,this_gpio);
80006754:	fe842803          	lw	a6,-24(s0)
80006758:	7e000793          	li	a5,2016
8000675c:	0be00713          	li	a4,190
80006760:	03200693          	li	a3,50
80006764:	03200613          	li	a2,50
80006768:	0be00593          	li	a1,190
8000676c:	fec42503          	lw	a0,-20(s0)
80006770:	6ec020ef          	jal	ra,80008e5c <TFT_drawLine>
    TFT_drawCircle(this_spi ,120,120, 100, ILI9341_GREEN, this_gpio);
80006774:	fe842783          	lw	a5,-24(s0)
80006778:	7e000713          	li	a4,2016
8000677c:	06400693          	li	a3,100
80006780:	07800613          	li	a2,120
80006784:	07800593          	li	a1,120
80006788:	fec42503          	lw	a0,-20(s0)
8000678c:	274020ef          	jal	ra,80008a00 <TFT_drawCircle>
}
80006790:	00000013          	nop
80006794:	01c12083          	lw	ra,28(sp)
80006798:	01812403          	lw	s0,24(sp)
8000679c:	02010113          	addi	sp,sp,32
800067a0:	00008067          	ret

Disassembly of section .text.check_winner:

800067a4 <check_winner>:
	spi_instance_t * this_spi,
	char board[],
	uint8_t player,
	gpio_instance_t * this_gpio
)
{
800067a4:	fe010113          	addi	sp,sp,-32
800067a8:	00112e23          	sw	ra,28(sp)
800067ac:	00812c23          	sw	s0,24(sp)
800067b0:	02010413          	addi	s0,sp,32
800067b4:	fea42623          	sw	a0,-20(s0)
800067b8:	feb42423          	sw	a1,-24(s0)
800067bc:	00060793          	mv	a5,a2
800067c0:	fed42023          	sw	a3,-32(s0)
800067c4:	fef403a3          	sb	a5,-25(s0)
	if (board[0] == 'X' && board[3] == 'X' && board[6] == 'X')
800067c8:	fe842783          	lw	a5,-24(s0)
800067cc:	0007c703          	lbu	a4,0(a5)
800067d0:	05800793          	li	a5,88
800067d4:	06f71e63          	bne	a4,a5,80006850 <check_winner+0xac>
800067d8:	fe842783          	lw	a5,-24(s0)
800067dc:	00378793          	addi	a5,a5,3
800067e0:	0007c703          	lbu	a4,0(a5)
800067e4:	05800793          	li	a5,88
800067e8:	06f71463          	bne	a4,a5,80006850 <check_winner+0xac>
800067ec:	fe842783          	lw	a5,-24(s0)
800067f0:	00678793          	addi	a5,a5,6
800067f4:	0007c703          	lbu	a4,0(a5)
800067f8:	05800793          	li	a5,88
800067fc:	04f71a63          	bne	a4,a5,80006850 <check_winner+0xac>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006800:	fe042803          	lw	a6,-32(s0)
80006804:	000107b7          	lui	a5,0x10
80006808:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
8000680c:	0f000713          	li	a4,240
80006810:	0f000693          	li	a3,240
80006814:	00000613          	li	a2,0
80006818:	00000593          	li	a1,0
8000681c:	fec42503          	lw	a0,-20(s0)
80006820:	63c020ef          	jal	ra,80008e5c <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
80006824:	fe042803          	lw	a6,-32(s0)
80006828:	000107b7          	lui	a5,0x10
8000682c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006830:	0f000713          	li	a4,240
80006834:	00000693          	li	a3,0
80006838:	00000613          	li	a2,0
8000683c:	0f000593          	li	a1,240
80006840:	fec42503          	lw	a0,-20(s0)
80006844:	618020ef          	jal	ra,80008e5c <TFT_drawLine>
		return 1;
80006848:	00100793          	li	a5,1
8000684c:	6c80006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[1] == 'X' && board[4] == 'X' && board[7] == 'X')
80006850:	fe842783          	lw	a5,-24(s0)
80006854:	00178793          	addi	a5,a5,1
80006858:	0007c703          	lbu	a4,0(a5)
8000685c:	05800793          	li	a5,88
80006860:	06f71e63          	bne	a4,a5,800068dc <check_winner+0x138>
80006864:	fe842783          	lw	a5,-24(s0)
80006868:	00478793          	addi	a5,a5,4
8000686c:	0007c703          	lbu	a4,0(a5)
80006870:	05800793          	li	a5,88
80006874:	06f71463          	bne	a4,a5,800068dc <check_winner+0x138>
80006878:	fe842783          	lw	a5,-24(s0)
8000687c:	00778793          	addi	a5,a5,7
80006880:	0007c703          	lbu	a4,0(a5)
80006884:	05800793          	li	a5,88
80006888:	04f71a63          	bne	a4,a5,800068dc <check_winner+0x138>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
8000688c:	fe042803          	lw	a6,-32(s0)
80006890:	000107b7          	lui	a5,0x10
80006894:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006898:	0f000713          	li	a4,240
8000689c:	0f000693          	li	a3,240
800068a0:	00000613          	li	a2,0
800068a4:	00000593          	li	a1,0
800068a8:	fec42503          	lw	a0,-20(s0)
800068ac:	5b0020ef          	jal	ra,80008e5c <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
800068b0:	fe042803          	lw	a6,-32(s0)
800068b4:	000107b7          	lui	a5,0x10
800068b8:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800068bc:	0f000713          	li	a4,240
800068c0:	00000693          	li	a3,0
800068c4:	00000613          	li	a2,0
800068c8:	0f000593          	li	a1,240
800068cc:	fec42503          	lw	a0,-20(s0)
800068d0:	58c020ef          	jal	ra,80008e5c <TFT_drawLine>
		return 1;
800068d4:	00100793          	li	a5,1
800068d8:	63c0006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[2] == 'X' && board[5] == 'X' && board[8] == 'X')
800068dc:	fe842783          	lw	a5,-24(s0)
800068e0:	00278793          	addi	a5,a5,2
800068e4:	0007c703          	lbu	a4,0(a5)
800068e8:	05800793          	li	a5,88
800068ec:	06f71e63          	bne	a4,a5,80006968 <check_winner+0x1c4>
800068f0:	fe842783          	lw	a5,-24(s0)
800068f4:	00578793          	addi	a5,a5,5
800068f8:	0007c703          	lbu	a4,0(a5)
800068fc:	05800793          	li	a5,88
80006900:	06f71463          	bne	a4,a5,80006968 <check_winner+0x1c4>
80006904:	fe842783          	lw	a5,-24(s0)
80006908:	00878793          	addi	a5,a5,8
8000690c:	0007c703          	lbu	a4,0(a5)
80006910:	05800793          	li	a5,88
80006914:	04f71a63          	bne	a4,a5,80006968 <check_winner+0x1c4>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006918:	fe042803          	lw	a6,-32(s0)
8000691c:	000107b7          	lui	a5,0x10
80006920:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006924:	0f000713          	li	a4,240
80006928:	0f000693          	li	a3,240
8000692c:	00000613          	li	a2,0
80006930:	00000593          	li	a1,0
80006934:	fec42503          	lw	a0,-20(s0)
80006938:	524020ef          	jal	ra,80008e5c <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
8000693c:	fe042803          	lw	a6,-32(s0)
80006940:	000107b7          	lui	a5,0x10
80006944:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006948:	0f000713          	li	a4,240
8000694c:	00000693          	li	a3,0
80006950:	00000613          	li	a2,0
80006954:	0f000593          	li	a1,240
80006958:	fec42503          	lw	a0,-20(s0)
8000695c:	500020ef          	jal	ra,80008e5c <TFT_drawLine>
		return 1;
80006960:	00100793          	li	a5,1
80006964:	5b00006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[0] == 'X' && board[1] == 'X' && board[2] == 'X')
80006968:	fe842783          	lw	a5,-24(s0)
8000696c:	0007c703          	lbu	a4,0(a5)
80006970:	05800793          	li	a5,88
80006974:	06f71e63          	bne	a4,a5,800069f0 <check_winner+0x24c>
80006978:	fe842783          	lw	a5,-24(s0)
8000697c:	00178793          	addi	a5,a5,1
80006980:	0007c703          	lbu	a4,0(a5)
80006984:	05800793          	li	a5,88
80006988:	06f71463          	bne	a4,a5,800069f0 <check_winner+0x24c>
8000698c:	fe842783          	lw	a5,-24(s0)
80006990:	00278793          	addi	a5,a5,2
80006994:	0007c703          	lbu	a4,0(a5)
80006998:	05800793          	li	a5,88
8000699c:	04f71a63          	bne	a4,a5,800069f0 <check_winner+0x24c>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
800069a0:	fe042803          	lw	a6,-32(s0)
800069a4:	000107b7          	lui	a5,0x10
800069a8:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800069ac:	0f000713          	li	a4,240
800069b0:	0f000693          	li	a3,240
800069b4:	00000613          	li	a2,0
800069b8:	00000593          	li	a1,0
800069bc:	fec42503          	lw	a0,-20(s0)
800069c0:	49c020ef          	jal	ra,80008e5c <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
800069c4:	fe042803          	lw	a6,-32(s0)
800069c8:	000107b7          	lui	a5,0x10
800069cc:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
800069d0:	0f000713          	li	a4,240
800069d4:	00000693          	li	a3,0
800069d8:	00000613          	li	a2,0
800069dc:	0f000593          	li	a1,240
800069e0:	fec42503          	lw	a0,-20(s0)
800069e4:	478020ef          	jal	ra,80008e5c <TFT_drawLine>
		return 1;
800069e8:	00100793          	li	a5,1
800069ec:	5280006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[3] == 'X' && board[4] == 'X' && board[5] == 'X')
800069f0:	fe842783          	lw	a5,-24(s0)
800069f4:	00378793          	addi	a5,a5,3
800069f8:	0007c703          	lbu	a4,0(a5)
800069fc:	05800793          	li	a5,88
80006a00:	06f71e63          	bne	a4,a5,80006a7c <check_winner+0x2d8>
80006a04:	fe842783          	lw	a5,-24(s0)
80006a08:	00478793          	addi	a5,a5,4
80006a0c:	0007c703          	lbu	a4,0(a5)
80006a10:	05800793          	li	a5,88
80006a14:	06f71463          	bne	a4,a5,80006a7c <check_winner+0x2d8>
80006a18:	fe842783          	lw	a5,-24(s0)
80006a1c:	00578793          	addi	a5,a5,5
80006a20:	0007c703          	lbu	a4,0(a5)
80006a24:	05800793          	li	a5,88
80006a28:	04f71a63          	bne	a4,a5,80006a7c <check_winner+0x2d8>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006a2c:	fe042803          	lw	a6,-32(s0)
80006a30:	000107b7          	lui	a5,0x10
80006a34:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006a38:	0f000713          	li	a4,240
80006a3c:	0f000693          	li	a3,240
80006a40:	00000613          	li	a2,0
80006a44:	00000593          	li	a1,0
80006a48:	fec42503          	lw	a0,-20(s0)
80006a4c:	410020ef          	jal	ra,80008e5c <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
80006a50:	fe042803          	lw	a6,-32(s0)
80006a54:	000107b7          	lui	a5,0x10
80006a58:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006a5c:	0f000713          	li	a4,240
80006a60:	00000693          	li	a3,0
80006a64:	00000613          	li	a2,0
80006a68:	0f000593          	li	a1,240
80006a6c:	fec42503          	lw	a0,-20(s0)
80006a70:	3ec020ef          	jal	ra,80008e5c <TFT_drawLine>
		return 1;
80006a74:	00100793          	li	a5,1
80006a78:	49c0006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[6] == 'X' && board[7] == 'X' && board[8] == 'X')
80006a7c:	fe842783          	lw	a5,-24(s0)
80006a80:	00678793          	addi	a5,a5,6
80006a84:	0007c703          	lbu	a4,0(a5)
80006a88:	05800793          	li	a5,88
80006a8c:	06f71e63          	bne	a4,a5,80006b08 <check_winner+0x364>
80006a90:	fe842783          	lw	a5,-24(s0)
80006a94:	00778793          	addi	a5,a5,7
80006a98:	0007c703          	lbu	a4,0(a5)
80006a9c:	05800793          	li	a5,88
80006aa0:	06f71463          	bne	a4,a5,80006b08 <check_winner+0x364>
80006aa4:	fe842783          	lw	a5,-24(s0)
80006aa8:	00878793          	addi	a5,a5,8
80006aac:	0007c703          	lbu	a4,0(a5)
80006ab0:	05800793          	li	a5,88
80006ab4:	04f71a63          	bne	a4,a5,80006b08 <check_winner+0x364>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006ab8:	fe042803          	lw	a6,-32(s0)
80006abc:	000107b7          	lui	a5,0x10
80006ac0:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006ac4:	0f000713          	li	a4,240
80006ac8:	0f000693          	li	a3,240
80006acc:	00000613          	li	a2,0
80006ad0:	00000593          	li	a1,0
80006ad4:	fec42503          	lw	a0,-20(s0)
80006ad8:	384020ef          	jal	ra,80008e5c <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
80006adc:	fe042803          	lw	a6,-32(s0)
80006ae0:	000107b7          	lui	a5,0x10
80006ae4:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006ae8:	0f000713          	li	a4,240
80006aec:	00000693          	li	a3,0
80006af0:	00000613          	li	a2,0
80006af4:	0f000593          	li	a1,240
80006af8:	fec42503          	lw	a0,-20(s0)
80006afc:	360020ef          	jal	ra,80008e5c <TFT_drawLine>
		return 1;
80006b00:	00100793          	li	a5,1
80006b04:	4100006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[0] == 'X' && board[4] == 'X' && board[8] == 'X')
80006b08:	fe842783          	lw	a5,-24(s0)
80006b0c:	0007c703          	lbu	a4,0(a5)
80006b10:	05800793          	li	a5,88
80006b14:	06f71e63          	bne	a4,a5,80006b90 <check_winner+0x3ec>
80006b18:	fe842783          	lw	a5,-24(s0)
80006b1c:	00478793          	addi	a5,a5,4
80006b20:	0007c703          	lbu	a4,0(a5)
80006b24:	05800793          	li	a5,88
80006b28:	06f71463          	bne	a4,a5,80006b90 <check_winner+0x3ec>
80006b2c:	fe842783          	lw	a5,-24(s0)
80006b30:	00878793          	addi	a5,a5,8
80006b34:	0007c703          	lbu	a4,0(a5)
80006b38:	05800793          	li	a5,88
80006b3c:	04f71a63          	bne	a4,a5,80006b90 <check_winner+0x3ec>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006b40:	fe042803          	lw	a6,-32(s0)
80006b44:	000107b7          	lui	a5,0x10
80006b48:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006b4c:	0f000713          	li	a4,240
80006b50:	0f000693          	li	a3,240
80006b54:	00000613          	li	a2,0
80006b58:	00000593          	li	a1,0
80006b5c:	fec42503          	lw	a0,-20(s0)
80006b60:	2fc020ef          	jal	ra,80008e5c <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
80006b64:	fe042803          	lw	a6,-32(s0)
80006b68:	000107b7          	lui	a5,0x10
80006b6c:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006b70:	0f000713          	li	a4,240
80006b74:	00000693          	li	a3,0
80006b78:	00000613          	li	a2,0
80006b7c:	0f000593          	li	a1,240
80006b80:	fec42503          	lw	a0,-20(s0)
80006b84:	2d8020ef          	jal	ra,80008e5c <TFT_drawLine>
		return 1;
80006b88:	00100793          	li	a5,1
80006b8c:	3880006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[2] == 'X' && board[4] == 'X' && board[6] == 'X')
80006b90:	fe842783          	lw	a5,-24(s0)
80006b94:	00278793          	addi	a5,a5,2
80006b98:	0007c703          	lbu	a4,0(a5)
80006b9c:	05800793          	li	a5,88
80006ba0:	06f71e63          	bne	a4,a5,80006c1c <check_winner+0x478>
80006ba4:	fe842783          	lw	a5,-24(s0)
80006ba8:	00478793          	addi	a5,a5,4
80006bac:	0007c703          	lbu	a4,0(a5)
80006bb0:	05800793          	li	a5,88
80006bb4:	06f71463          	bne	a4,a5,80006c1c <check_winner+0x478>
80006bb8:	fe842783          	lw	a5,-24(s0)
80006bbc:	00678793          	addi	a5,a5,6
80006bc0:	0007c703          	lbu	a4,0(a5)
80006bc4:	05800793          	li	a5,88
80006bc8:	04f71a63          	bne	a4,a5,80006c1c <check_winner+0x478>
	{
		TFT_drawLine(this_spi,0, 0,  240, 240 ,ILI9341_RED,this_gpio);
80006bcc:	fe042803          	lw	a6,-32(s0)
80006bd0:	000107b7          	lui	a5,0x10
80006bd4:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006bd8:	0f000713          	li	a4,240
80006bdc:	0f000693          	li	a3,240
80006be0:	00000613          	li	a2,0
80006be4:	00000593          	li	a1,0
80006be8:	fec42503          	lw	a0,-20(s0)
80006bec:	270020ef          	jal	ra,80008e5c <TFT_drawLine>
		TFT_drawLine(this_spi,240, 0,  0, 240 ,ILI9341_RED,this_gpio);
80006bf0:	fe042803          	lw	a6,-32(s0)
80006bf4:	000107b7          	lui	a5,0x10
80006bf8:	80078793          	addi	a5,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80006bfc:	0f000713          	li	a4,240
80006c00:	00000693          	li	a3,0
80006c04:	00000613          	li	a2,0
80006c08:	0f000593          	li	a1,240
80006c0c:	fec42503          	lw	a0,-20(s0)
80006c10:	24c020ef          	jal	ra,80008e5c <TFT_drawLine>
		return 1;
80006c14:	00100793          	li	a5,1
80006c18:	2fc0006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[0] == 'O' && board[3] == 'O' && board[6] == 'O')
80006c1c:	fe842783          	lw	a5,-24(s0)
80006c20:	0007c703          	lbu	a4,0(a5)
80006c24:	04f00793          	li	a5,79
80006c28:	04f71863          	bne	a4,a5,80006c78 <check_winner+0x4d4>
80006c2c:	fe842783          	lw	a5,-24(s0)
80006c30:	00378793          	addi	a5,a5,3
80006c34:	0007c703          	lbu	a4,0(a5)
80006c38:	04f00793          	li	a5,79
80006c3c:	02f71e63          	bne	a4,a5,80006c78 <check_winner+0x4d4>
80006c40:	fe842783          	lw	a5,-24(s0)
80006c44:	00678793          	addi	a5,a5,6
80006c48:	0007c703          	lbu	a4,0(a5)
80006c4c:	04f00793          	li	a5,79
80006c50:	02f71463          	bne	a4,a5,80006c78 <check_winner+0x4d4>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006c54:	fe042783          	lw	a5,-32(s0)
80006c58:	01f00713          	li	a4,31
80006c5c:	06400693          	li	a3,100
80006c60:	07800613          	li	a2,120
80006c64:	07800593          	li	a1,120
80006c68:	fec42503          	lw	a0,-20(s0)
80006c6c:	595010ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 1;
80006c70:	00100793          	li	a5,1
80006c74:	2a00006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[1] == 'O' && board[4] == 'O' && board[7] == 'O')
80006c78:	fe842783          	lw	a5,-24(s0)
80006c7c:	00178793          	addi	a5,a5,1
80006c80:	0007c703          	lbu	a4,0(a5)
80006c84:	04f00793          	li	a5,79
80006c88:	04f71863          	bne	a4,a5,80006cd8 <check_winner+0x534>
80006c8c:	fe842783          	lw	a5,-24(s0)
80006c90:	00478793          	addi	a5,a5,4
80006c94:	0007c703          	lbu	a4,0(a5)
80006c98:	04f00793          	li	a5,79
80006c9c:	02f71e63          	bne	a4,a5,80006cd8 <check_winner+0x534>
80006ca0:	fe842783          	lw	a5,-24(s0)
80006ca4:	00778793          	addi	a5,a5,7
80006ca8:	0007c703          	lbu	a4,0(a5)
80006cac:	04f00793          	li	a5,79
80006cb0:	02f71463          	bne	a4,a5,80006cd8 <check_winner+0x534>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006cb4:	fe042783          	lw	a5,-32(s0)
80006cb8:	01f00713          	li	a4,31
80006cbc:	06400693          	li	a3,100
80006cc0:	07800613          	li	a2,120
80006cc4:	07800593          	li	a1,120
80006cc8:	fec42503          	lw	a0,-20(s0)
80006ccc:	535010ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 1;
80006cd0:	00100793          	li	a5,1
80006cd4:	2400006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[2] == 'O' && board[5] == 'O' && board[8] == 'O')
80006cd8:	fe842783          	lw	a5,-24(s0)
80006cdc:	00278793          	addi	a5,a5,2
80006ce0:	0007c703          	lbu	a4,0(a5)
80006ce4:	04f00793          	li	a5,79
80006ce8:	04f71863          	bne	a4,a5,80006d38 <check_winner+0x594>
80006cec:	fe842783          	lw	a5,-24(s0)
80006cf0:	00578793          	addi	a5,a5,5
80006cf4:	0007c703          	lbu	a4,0(a5)
80006cf8:	04f00793          	li	a5,79
80006cfc:	02f71e63          	bne	a4,a5,80006d38 <check_winner+0x594>
80006d00:	fe842783          	lw	a5,-24(s0)
80006d04:	00878793          	addi	a5,a5,8
80006d08:	0007c703          	lbu	a4,0(a5)
80006d0c:	04f00793          	li	a5,79
80006d10:	02f71463          	bne	a4,a5,80006d38 <check_winner+0x594>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006d14:	fe042783          	lw	a5,-32(s0)
80006d18:	01f00713          	li	a4,31
80006d1c:	06400693          	li	a3,100
80006d20:	07800613          	li	a2,120
80006d24:	07800593          	li	a1,120
80006d28:	fec42503          	lw	a0,-20(s0)
80006d2c:	4d5010ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 1;
80006d30:	00100793          	li	a5,1
80006d34:	1e00006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[0] == 'O' && board[1] == 'O' && board[2] == 'O')
80006d38:	fe842783          	lw	a5,-24(s0)
80006d3c:	0007c703          	lbu	a4,0(a5)
80006d40:	04f00793          	li	a5,79
80006d44:	04f71863          	bne	a4,a5,80006d94 <check_winner+0x5f0>
80006d48:	fe842783          	lw	a5,-24(s0)
80006d4c:	00178793          	addi	a5,a5,1
80006d50:	0007c703          	lbu	a4,0(a5)
80006d54:	04f00793          	li	a5,79
80006d58:	02f71e63          	bne	a4,a5,80006d94 <check_winner+0x5f0>
80006d5c:	fe842783          	lw	a5,-24(s0)
80006d60:	00278793          	addi	a5,a5,2
80006d64:	0007c703          	lbu	a4,0(a5)
80006d68:	04f00793          	li	a5,79
80006d6c:	02f71463          	bne	a4,a5,80006d94 <check_winner+0x5f0>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006d70:	fe042783          	lw	a5,-32(s0)
80006d74:	01f00713          	li	a4,31
80006d78:	06400693          	li	a3,100
80006d7c:	07800613          	li	a2,120
80006d80:	07800593          	li	a1,120
80006d84:	fec42503          	lw	a0,-20(s0)
80006d88:	479010ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 1;
80006d8c:	00100793          	li	a5,1
80006d90:	1840006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[3] == 'O' && board[4] == 'O' && board[5] == 'O')
80006d94:	fe842783          	lw	a5,-24(s0)
80006d98:	00378793          	addi	a5,a5,3
80006d9c:	0007c703          	lbu	a4,0(a5)
80006da0:	04f00793          	li	a5,79
80006da4:	04f71863          	bne	a4,a5,80006df4 <check_winner+0x650>
80006da8:	fe842783          	lw	a5,-24(s0)
80006dac:	00478793          	addi	a5,a5,4
80006db0:	0007c703          	lbu	a4,0(a5)
80006db4:	04f00793          	li	a5,79
80006db8:	02f71e63          	bne	a4,a5,80006df4 <check_winner+0x650>
80006dbc:	fe842783          	lw	a5,-24(s0)
80006dc0:	00578793          	addi	a5,a5,5
80006dc4:	0007c703          	lbu	a4,0(a5)
80006dc8:	04f00793          	li	a5,79
80006dcc:	02f71463          	bne	a4,a5,80006df4 <check_winner+0x650>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006dd0:	fe042783          	lw	a5,-32(s0)
80006dd4:	01f00713          	li	a4,31
80006dd8:	06400693          	li	a3,100
80006ddc:	07800613          	li	a2,120
80006de0:	07800593          	li	a1,120
80006de4:	fec42503          	lw	a0,-20(s0)
80006de8:	419010ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 1;
80006dec:	00100793          	li	a5,1
80006df0:	1240006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[6] == 'O' && board[7] == 'O' && board[8] == 'O')
80006df4:	fe842783          	lw	a5,-24(s0)
80006df8:	00678793          	addi	a5,a5,6
80006dfc:	0007c703          	lbu	a4,0(a5)
80006e00:	04f00793          	li	a5,79
80006e04:	04f71863          	bne	a4,a5,80006e54 <check_winner+0x6b0>
80006e08:	fe842783          	lw	a5,-24(s0)
80006e0c:	00778793          	addi	a5,a5,7
80006e10:	0007c703          	lbu	a4,0(a5)
80006e14:	04f00793          	li	a5,79
80006e18:	02f71e63          	bne	a4,a5,80006e54 <check_winner+0x6b0>
80006e1c:	fe842783          	lw	a5,-24(s0)
80006e20:	00878793          	addi	a5,a5,8
80006e24:	0007c703          	lbu	a4,0(a5)
80006e28:	04f00793          	li	a5,79
80006e2c:	02f71463          	bne	a4,a5,80006e54 <check_winner+0x6b0>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006e30:	fe042783          	lw	a5,-32(s0)
80006e34:	01f00713          	li	a4,31
80006e38:	06400693          	li	a3,100
80006e3c:	07800613          	li	a2,120
80006e40:	07800593          	li	a1,120
80006e44:	fec42503          	lw	a0,-20(s0)
80006e48:	3b9010ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 1;
80006e4c:	00100793          	li	a5,1
80006e50:	0c40006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[0] == 'O' && board[4] == 'O' && board[8] == 'O')
80006e54:	fe842783          	lw	a5,-24(s0)
80006e58:	0007c703          	lbu	a4,0(a5)
80006e5c:	04f00793          	li	a5,79
80006e60:	04f71863          	bne	a4,a5,80006eb0 <check_winner+0x70c>
80006e64:	fe842783          	lw	a5,-24(s0)
80006e68:	00478793          	addi	a5,a5,4
80006e6c:	0007c703          	lbu	a4,0(a5)
80006e70:	04f00793          	li	a5,79
80006e74:	02f71e63          	bne	a4,a5,80006eb0 <check_winner+0x70c>
80006e78:	fe842783          	lw	a5,-24(s0)
80006e7c:	00878793          	addi	a5,a5,8
80006e80:	0007c703          	lbu	a4,0(a5)
80006e84:	04f00793          	li	a5,79
80006e88:	02f71463          	bne	a4,a5,80006eb0 <check_winner+0x70c>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006e8c:	fe042783          	lw	a5,-32(s0)
80006e90:	01f00713          	li	a4,31
80006e94:	06400693          	li	a3,100
80006e98:	07800613          	li	a2,120
80006e9c:	07800593          	li	a1,120
80006ea0:	fec42503          	lw	a0,-20(s0)
80006ea4:	35d010ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 1;
80006ea8:	00100793          	li	a5,1
80006eac:	0680006f          	j	80006f14 <check_winner+0x770>
	}
	else if (board[2] == 'O' && board[4] == 'O' && board[6] == 'O')
80006eb0:	fe842783          	lw	a5,-24(s0)
80006eb4:	00278793          	addi	a5,a5,2
80006eb8:	0007c703          	lbu	a4,0(a5)
80006ebc:	04f00793          	li	a5,79
80006ec0:	04f71863          	bne	a4,a5,80006f10 <check_winner+0x76c>
80006ec4:	fe842783          	lw	a5,-24(s0)
80006ec8:	00478793          	addi	a5,a5,4
80006ecc:	0007c703          	lbu	a4,0(a5)
80006ed0:	04f00793          	li	a5,79
80006ed4:	02f71e63          	bne	a4,a5,80006f10 <check_winner+0x76c>
80006ed8:	fe842783          	lw	a5,-24(s0)
80006edc:	00678793          	addi	a5,a5,6
80006ee0:	0007c703          	lbu	a4,0(a5)
80006ee4:	04f00793          	li	a5,79
80006ee8:	02f71463          	bne	a4,a5,80006f10 <check_winner+0x76c>
	{
		TFT_drawCircle(this_spi ,120,120, 100, ILI9341_BLUE, this_gpio);
80006eec:	fe042783          	lw	a5,-32(s0)
80006ef0:	01f00713          	li	a4,31
80006ef4:	06400693          	li	a3,100
80006ef8:	07800613          	li	a2,120
80006efc:	07800593          	li	a1,120
80006f00:	fec42503          	lw	a0,-20(s0)
80006f04:	2fd010ef          	jal	ra,80008a00 <TFT_drawCircle>
		return 1;
80006f08:	00100793          	li	a5,1
80006f0c:	0080006f          	j	80006f14 <check_winner+0x770>
	}

	return 0;
80006f10:	00000793          	li	a5,0
}
80006f14:	00078513          	mv	a0,a5
80006f18:	01c12083          	lw	ra,28(sp)
80006f1c:	01812403          	lw	s0,24(sp)
80006f20:	02010113          	addi	sp,sp,32
80006f24:	00008067          	ret

Disassembly of section .text.AIcheck_winner:

80006f28 <AIcheck_winner>:


uint8_t AIcheck_winner(char board[], uint8_t player)
{
80006f28:	fe010113          	addi	sp,sp,-32
80006f2c:	00812e23          	sw	s0,28(sp)
80006f30:	02010413          	addi	s0,sp,32
80006f34:	fea42623          	sw	a0,-20(s0)
80006f38:	00058793          	mv	a5,a1
80006f3c:	fef405a3          	sb	a5,-21(s0)
	if (board[0] == 'X' && board[3] == 'X' && board[6] == 'X')
80006f40:	fec42783          	lw	a5,-20(s0)
80006f44:	0007c703          	lbu	a4,0(a5)
80006f48:	05800793          	li	a5,88
80006f4c:	02f71a63          	bne	a4,a5,80006f80 <AIcheck_winner+0x58>
80006f50:	fec42783          	lw	a5,-20(s0)
80006f54:	00378793          	addi	a5,a5,3
80006f58:	0007c703          	lbu	a4,0(a5)
80006f5c:	05800793          	li	a5,88
80006f60:	02f71063          	bne	a4,a5,80006f80 <AIcheck_winner+0x58>
80006f64:	fec42783          	lw	a5,-20(s0)
80006f68:	00678793          	addi	a5,a5,6
80006f6c:	0007c703          	lbu	a4,0(a5)
80006f70:	05800793          	li	a5,88
80006f74:	00f71663          	bne	a4,a5,80006f80 <AIcheck_winner+0x58>
	{
    	return 1;
80006f78:	00100793          	li	a5,1
80006f7c:	3f00006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[1] == 'X' && board[4] == 'X' && board[7] == 'X')
80006f80:	fec42783          	lw	a5,-20(s0)
80006f84:	00178793          	addi	a5,a5,1
80006f88:	0007c703          	lbu	a4,0(a5)
80006f8c:	05800793          	li	a5,88
80006f90:	02f71a63          	bne	a4,a5,80006fc4 <AIcheck_winner+0x9c>
80006f94:	fec42783          	lw	a5,-20(s0)
80006f98:	00478793          	addi	a5,a5,4
80006f9c:	0007c703          	lbu	a4,0(a5)
80006fa0:	05800793          	li	a5,88
80006fa4:	02f71063          	bne	a4,a5,80006fc4 <AIcheck_winner+0x9c>
80006fa8:	fec42783          	lw	a5,-20(s0)
80006fac:	00778793          	addi	a5,a5,7
80006fb0:	0007c703          	lbu	a4,0(a5)
80006fb4:	05800793          	li	a5,88
80006fb8:	00f71663          	bne	a4,a5,80006fc4 <AIcheck_winner+0x9c>
	{
	    return 1;
80006fbc:	00100793          	li	a5,1
80006fc0:	3ac0006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[2] == 'X' && board[5] == 'X' && board[8] == 'X')
80006fc4:	fec42783          	lw	a5,-20(s0)
80006fc8:	00278793          	addi	a5,a5,2
80006fcc:	0007c703          	lbu	a4,0(a5)
80006fd0:	05800793          	li	a5,88
80006fd4:	02f71a63          	bne	a4,a5,80007008 <AIcheck_winner+0xe0>
80006fd8:	fec42783          	lw	a5,-20(s0)
80006fdc:	00578793          	addi	a5,a5,5
80006fe0:	0007c703          	lbu	a4,0(a5)
80006fe4:	05800793          	li	a5,88
80006fe8:	02f71063          	bne	a4,a5,80007008 <AIcheck_winner+0xe0>
80006fec:	fec42783          	lw	a5,-20(s0)
80006ff0:	00878793          	addi	a5,a5,8
80006ff4:	0007c703          	lbu	a4,0(a5)
80006ff8:	05800793          	li	a5,88
80006ffc:	00f71663          	bne	a4,a5,80007008 <AIcheck_winner+0xe0>
	{
    	return 1;
80007000:	00100793          	li	a5,1
80007004:	3680006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[0] == 'X' && board[1] == 'X' && board[2] == 'X')
80007008:	fec42783          	lw	a5,-20(s0)
8000700c:	0007c703          	lbu	a4,0(a5)
80007010:	05800793          	li	a5,88
80007014:	02f71a63          	bne	a4,a5,80007048 <AIcheck_winner+0x120>
80007018:	fec42783          	lw	a5,-20(s0)
8000701c:	00178793          	addi	a5,a5,1
80007020:	0007c703          	lbu	a4,0(a5)
80007024:	05800793          	li	a5,88
80007028:	02f71063          	bne	a4,a5,80007048 <AIcheck_winner+0x120>
8000702c:	fec42783          	lw	a5,-20(s0)
80007030:	00278793          	addi	a5,a5,2
80007034:	0007c703          	lbu	a4,0(a5)
80007038:	05800793          	li	a5,88
8000703c:	00f71663          	bne	a4,a5,80007048 <AIcheck_winner+0x120>
	{
	    return 1;
80007040:	00100793          	li	a5,1
80007044:	3280006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[3] == 'X' && board[4] == 'X' && board[5] == 'X')
80007048:	fec42783          	lw	a5,-20(s0)
8000704c:	00378793          	addi	a5,a5,3
80007050:	0007c703          	lbu	a4,0(a5)
80007054:	05800793          	li	a5,88
80007058:	02f71a63          	bne	a4,a5,8000708c <AIcheck_winner+0x164>
8000705c:	fec42783          	lw	a5,-20(s0)
80007060:	00478793          	addi	a5,a5,4
80007064:	0007c703          	lbu	a4,0(a5)
80007068:	05800793          	li	a5,88
8000706c:	02f71063          	bne	a4,a5,8000708c <AIcheck_winner+0x164>
80007070:	fec42783          	lw	a5,-20(s0)
80007074:	00578793          	addi	a5,a5,5
80007078:	0007c703          	lbu	a4,0(a5)
8000707c:	05800793          	li	a5,88
80007080:	00f71663          	bne	a4,a5,8000708c <AIcheck_winner+0x164>
	{
	    return 1;
80007084:	00100793          	li	a5,1
80007088:	2e40006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[6] == 'X' && board[7] == 'X' && board[8] == 'X')
8000708c:	fec42783          	lw	a5,-20(s0)
80007090:	00678793          	addi	a5,a5,6
80007094:	0007c703          	lbu	a4,0(a5)
80007098:	05800793          	li	a5,88
8000709c:	02f71a63          	bne	a4,a5,800070d0 <AIcheck_winner+0x1a8>
800070a0:	fec42783          	lw	a5,-20(s0)
800070a4:	00778793          	addi	a5,a5,7
800070a8:	0007c703          	lbu	a4,0(a5)
800070ac:	05800793          	li	a5,88
800070b0:	02f71063          	bne	a4,a5,800070d0 <AIcheck_winner+0x1a8>
800070b4:	fec42783          	lw	a5,-20(s0)
800070b8:	00878793          	addi	a5,a5,8
800070bc:	0007c703          	lbu	a4,0(a5)
800070c0:	05800793          	li	a5,88
800070c4:	00f71663          	bne	a4,a5,800070d0 <AIcheck_winner+0x1a8>
	{
		return 1;
800070c8:	00100793          	li	a5,1
800070cc:	2a00006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[0] == 'X' && board[4] == 'X' && board[8] == 'X')
800070d0:	fec42783          	lw	a5,-20(s0)
800070d4:	0007c703          	lbu	a4,0(a5)
800070d8:	05800793          	li	a5,88
800070dc:	02f71a63          	bne	a4,a5,80007110 <AIcheck_winner+0x1e8>
800070e0:	fec42783          	lw	a5,-20(s0)
800070e4:	00478793          	addi	a5,a5,4
800070e8:	0007c703          	lbu	a4,0(a5)
800070ec:	05800793          	li	a5,88
800070f0:	02f71063          	bne	a4,a5,80007110 <AIcheck_winner+0x1e8>
800070f4:	fec42783          	lw	a5,-20(s0)
800070f8:	00878793          	addi	a5,a5,8
800070fc:	0007c703          	lbu	a4,0(a5)
80007100:	05800793          	li	a5,88
80007104:	00f71663          	bne	a4,a5,80007110 <AIcheck_winner+0x1e8>
	{
		return 1;
80007108:	00100793          	li	a5,1
8000710c:	2600006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[2] == 'X' && board[4] == 'X' && board[6] == 'X')
80007110:	fec42783          	lw	a5,-20(s0)
80007114:	00278793          	addi	a5,a5,2
80007118:	0007c703          	lbu	a4,0(a5)
8000711c:	05800793          	li	a5,88
80007120:	02f71a63          	bne	a4,a5,80007154 <AIcheck_winner+0x22c>
80007124:	fec42783          	lw	a5,-20(s0)
80007128:	00478793          	addi	a5,a5,4
8000712c:	0007c703          	lbu	a4,0(a5)
80007130:	05800793          	li	a5,88
80007134:	02f71063          	bne	a4,a5,80007154 <AIcheck_winner+0x22c>
80007138:	fec42783          	lw	a5,-20(s0)
8000713c:	00678793          	addi	a5,a5,6
80007140:	0007c703          	lbu	a4,0(a5)
80007144:	05800793          	li	a5,88
80007148:	00f71663          	bne	a4,a5,80007154 <AIcheck_winner+0x22c>
	{
		return 1;
8000714c:	00100793          	li	a5,1
80007150:	21c0006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[0] == 'O' && board[3] == 'O' && board[6] == 'O')
80007154:	fec42783          	lw	a5,-20(s0)
80007158:	0007c703          	lbu	a4,0(a5)
8000715c:	04f00793          	li	a5,79
80007160:	02f71a63          	bne	a4,a5,80007194 <AIcheck_winner+0x26c>
80007164:	fec42783          	lw	a5,-20(s0)
80007168:	00378793          	addi	a5,a5,3
8000716c:	0007c703          	lbu	a4,0(a5)
80007170:	04f00793          	li	a5,79
80007174:	02f71063          	bne	a4,a5,80007194 <AIcheck_winner+0x26c>
80007178:	fec42783          	lw	a5,-20(s0)
8000717c:	00678793          	addi	a5,a5,6
80007180:	0007c703          	lbu	a4,0(a5)
80007184:	04f00793          	li	a5,79
80007188:	00f71663          	bne	a4,a5,80007194 <AIcheck_winner+0x26c>
	{
		return 1;
8000718c:	00100793          	li	a5,1
80007190:	1dc0006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[1] == 'O' && board[4] == 'O' && board[7] == 'O')
80007194:	fec42783          	lw	a5,-20(s0)
80007198:	00178793          	addi	a5,a5,1
8000719c:	0007c703          	lbu	a4,0(a5)
800071a0:	04f00793          	li	a5,79
800071a4:	02f71a63          	bne	a4,a5,800071d8 <AIcheck_winner+0x2b0>
800071a8:	fec42783          	lw	a5,-20(s0)
800071ac:	00478793          	addi	a5,a5,4
800071b0:	0007c703          	lbu	a4,0(a5)
800071b4:	04f00793          	li	a5,79
800071b8:	02f71063          	bne	a4,a5,800071d8 <AIcheck_winner+0x2b0>
800071bc:	fec42783          	lw	a5,-20(s0)
800071c0:	00778793          	addi	a5,a5,7
800071c4:	0007c703          	lbu	a4,0(a5)
800071c8:	04f00793          	li	a5,79
800071cc:	00f71663          	bne	a4,a5,800071d8 <AIcheck_winner+0x2b0>
	{
		return 1;
800071d0:	00100793          	li	a5,1
800071d4:	1980006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[2] == 'O' && board[5] == 'O' && board[8] == 'O')
800071d8:	fec42783          	lw	a5,-20(s0)
800071dc:	00278793          	addi	a5,a5,2
800071e0:	0007c703          	lbu	a4,0(a5)
800071e4:	04f00793          	li	a5,79
800071e8:	02f71a63          	bne	a4,a5,8000721c <AIcheck_winner+0x2f4>
800071ec:	fec42783          	lw	a5,-20(s0)
800071f0:	00578793          	addi	a5,a5,5
800071f4:	0007c703          	lbu	a4,0(a5)
800071f8:	04f00793          	li	a5,79
800071fc:	02f71063          	bne	a4,a5,8000721c <AIcheck_winner+0x2f4>
80007200:	fec42783          	lw	a5,-20(s0)
80007204:	00878793          	addi	a5,a5,8
80007208:	0007c703          	lbu	a4,0(a5)
8000720c:	04f00793          	li	a5,79
80007210:	00f71663          	bne	a4,a5,8000721c <AIcheck_winner+0x2f4>
	{
		return 1;
80007214:	00100793          	li	a5,1
80007218:	1540006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[0] == 'O' && board[1] == 'O' && board[2] == 'O')
8000721c:	fec42783          	lw	a5,-20(s0)
80007220:	0007c703          	lbu	a4,0(a5)
80007224:	04f00793          	li	a5,79
80007228:	02f71a63          	bne	a4,a5,8000725c <AIcheck_winner+0x334>
8000722c:	fec42783          	lw	a5,-20(s0)
80007230:	00178793          	addi	a5,a5,1
80007234:	0007c703          	lbu	a4,0(a5)
80007238:	04f00793          	li	a5,79
8000723c:	02f71063          	bne	a4,a5,8000725c <AIcheck_winner+0x334>
80007240:	fec42783          	lw	a5,-20(s0)
80007244:	00278793          	addi	a5,a5,2
80007248:	0007c703          	lbu	a4,0(a5)
8000724c:	04f00793          	li	a5,79
80007250:	00f71663          	bne	a4,a5,8000725c <AIcheck_winner+0x334>
	{
		return 1;
80007254:	00100793          	li	a5,1
80007258:	1140006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[3] == 'O' && board[4] == 'O' && board[5] == 'O')
8000725c:	fec42783          	lw	a5,-20(s0)
80007260:	00378793          	addi	a5,a5,3
80007264:	0007c703          	lbu	a4,0(a5)
80007268:	04f00793          	li	a5,79
8000726c:	02f71a63          	bne	a4,a5,800072a0 <AIcheck_winner+0x378>
80007270:	fec42783          	lw	a5,-20(s0)
80007274:	00478793          	addi	a5,a5,4
80007278:	0007c703          	lbu	a4,0(a5)
8000727c:	04f00793          	li	a5,79
80007280:	02f71063          	bne	a4,a5,800072a0 <AIcheck_winner+0x378>
80007284:	fec42783          	lw	a5,-20(s0)
80007288:	00578793          	addi	a5,a5,5
8000728c:	0007c703          	lbu	a4,0(a5)
80007290:	04f00793          	li	a5,79
80007294:	00f71663          	bne	a4,a5,800072a0 <AIcheck_winner+0x378>
	{
		return 1;
80007298:	00100793          	li	a5,1
8000729c:	0d00006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[6] == 'O' && board[7] == 'O' && board[8] == 'O')
800072a0:	fec42783          	lw	a5,-20(s0)
800072a4:	00678793          	addi	a5,a5,6
800072a8:	0007c703          	lbu	a4,0(a5)
800072ac:	04f00793          	li	a5,79
800072b0:	02f71a63          	bne	a4,a5,800072e4 <AIcheck_winner+0x3bc>
800072b4:	fec42783          	lw	a5,-20(s0)
800072b8:	00778793          	addi	a5,a5,7
800072bc:	0007c703          	lbu	a4,0(a5)
800072c0:	04f00793          	li	a5,79
800072c4:	02f71063          	bne	a4,a5,800072e4 <AIcheck_winner+0x3bc>
800072c8:	fec42783          	lw	a5,-20(s0)
800072cc:	00878793          	addi	a5,a5,8
800072d0:	0007c703          	lbu	a4,0(a5)
800072d4:	04f00793          	li	a5,79
800072d8:	00f71663          	bne	a4,a5,800072e4 <AIcheck_winner+0x3bc>
	{
		return 1;
800072dc:	00100793          	li	a5,1
800072e0:	08c0006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[0] == 'O' && board[4] == 'O' && board[8] == 'O')
800072e4:	fec42783          	lw	a5,-20(s0)
800072e8:	0007c703          	lbu	a4,0(a5)
800072ec:	04f00793          	li	a5,79
800072f0:	02f71a63          	bne	a4,a5,80007324 <AIcheck_winner+0x3fc>
800072f4:	fec42783          	lw	a5,-20(s0)
800072f8:	00478793          	addi	a5,a5,4
800072fc:	0007c703          	lbu	a4,0(a5)
80007300:	04f00793          	li	a5,79
80007304:	02f71063          	bne	a4,a5,80007324 <AIcheck_winner+0x3fc>
80007308:	fec42783          	lw	a5,-20(s0)
8000730c:	00878793          	addi	a5,a5,8
80007310:	0007c703          	lbu	a4,0(a5)
80007314:	04f00793          	li	a5,79
80007318:	00f71663          	bne	a4,a5,80007324 <AIcheck_winner+0x3fc>
	{
		return 1;
8000731c:	00100793          	li	a5,1
80007320:	04c0006f          	j	8000736c <AIcheck_winner+0x444>
	}
	else if (board[2] == 'O' && board[4] == 'O' && board[6] == 'O')
80007324:	fec42783          	lw	a5,-20(s0)
80007328:	00278793          	addi	a5,a5,2
8000732c:	0007c703          	lbu	a4,0(a5)
80007330:	04f00793          	li	a5,79
80007334:	02f71a63          	bne	a4,a5,80007368 <AIcheck_winner+0x440>
80007338:	fec42783          	lw	a5,-20(s0)
8000733c:	00478793          	addi	a5,a5,4
80007340:	0007c703          	lbu	a4,0(a5)
80007344:	04f00793          	li	a5,79
80007348:	02f71063          	bne	a4,a5,80007368 <AIcheck_winner+0x440>
8000734c:	fec42783          	lw	a5,-20(s0)
80007350:	00678793          	addi	a5,a5,6
80007354:	0007c703          	lbu	a4,0(a5)
80007358:	04f00793          	li	a5,79
8000735c:	00f71663          	bne	a4,a5,80007368 <AIcheck_winner+0x440>
	{
		return 1;
80007360:	00100793          	li	a5,1
80007364:	0080006f          	j	8000736c <AIcheck_winner+0x444>
	}

return 0;
80007368:	00000793          	li	a5,0
}
8000736c:	00078513          	mv	a0,a5
80007370:	01c12403          	lw	s0,28(sp)
80007374:	02010113          	addi	sp,sp,32
80007378:	00008067          	ret

Disassembly of section .text.gameMenu:

8000737c <gameMenu>:
gameMenu
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
8000737c:	fd010113          	addi	sp,sp,-48
80007380:	02112623          	sw	ra,44(sp)
80007384:	02812423          	sw	s0,40(sp)
80007388:	03010413          	addi	s0,sp,48
8000738c:	fca42e23          	sw	a0,-36(s0)
80007390:	fcb42c23          	sw	a1,-40(s0)
	TFT_fillScreen(this_spi, this_gpio, ILI9341_WHITE);
80007394:	000107b7          	lui	a5,0x10
80007398:	fff78613          	addi	a2,a5,-1 # ffff <HEAP_SIZE+0xf7ff>
8000739c:	fd842583          	lw	a1,-40(s0)
800073a0:	fdc42503          	lw	a0,-36(s0)
800073a4:	7cd000ef          	jal	ra,80008370 <TFT_fillScreen>
	for (volatile uint16_t t=0x00;t <0xFF; t ++ );
800073a8:	fe041323          	sh	zero,-26(s0)
800073ac:	0200006f          	j	800073cc <gameMenu+0x50>
800073b0:	fe645783          	lhu	a5,-26(s0)
800073b4:	01079793          	slli	a5,a5,0x10
800073b8:	0107d793          	srli	a5,a5,0x10
800073bc:	00178793          	addi	a5,a5,1
800073c0:	01079793          	slli	a5,a5,0x10
800073c4:	0107d793          	srli	a5,a5,0x10
800073c8:	fef41323          	sh	a5,-26(s0)
800073cc:	fe645783          	lhu	a5,-26(s0)
800073d0:	01079713          	slli	a4,a5,0x10
800073d4:	01075713          	srli	a4,a4,0x10
800073d8:	0fe00793          	li	a5,254
800073dc:	fce7fae3          	bleu	a4,a5,800073b0 <gameMenu+0x34>
	TFT_fastVLine(this_spi, 120, 0, 320, ILI9341_BLACK, this_gpio);
800073e0:	fd842783          	lw	a5,-40(s0)
800073e4:	00000713          	li	a4,0
800073e8:	14000693          	li	a3,320
800073ec:	00000613          	li	a2,0
800073f0:	07800593          	li	a1,120
800073f4:	fdc42503          	lw	a0,-36(s0)
800073f8:	1e4010ef          	jal	ra,800085dc <TFT_fastVLine>
	TFT_fillrect(this_spi, 160,140, 40, 40,this_gpio,ILI9341_RED);
800073fc:	000107b7          	lui	a5,0x10
80007400:	80078813          	addi	a6,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80007404:	fd842783          	lw	a5,-40(s0)
80007408:	02800713          	li	a4,40
8000740c:	02800693          	li	a3,40
80007410:	08c00613          	li	a2,140
80007414:	0a000593          	li	a1,160
80007418:	fdc42503          	lw	a0,-36(s0)
8000741c:	5b9000ef          	jal	ra,800081d4 <TFT_fillrect>
	TFT_fillrect(this_spi, 60,110, 40, 40,this_gpio,ILI9341_RED);
80007420:	000107b7          	lui	a5,0x10
80007424:	80078813          	addi	a6,a5,-2048 # f800 <HEAP_SIZE+0xf000>
80007428:	fd842783          	lw	a5,-40(s0)
8000742c:	02800713          	li	a4,40
80007430:	02800693          	li	a3,40
80007434:	06e00613          	li	a2,110
80007438:	03c00593          	li	a1,60
8000743c:	fdc42503          	lw	a0,-36(s0)
80007440:	595000ef          	jal	ra,800081d4 <TFT_fillrect>
	TFT_fillrect(this_spi, 60,170, 40, 40,this_gpio,ILI9341_RED);
80007444:	000107b7          	lui	a5,0x10
80007448:	80078813          	addi	a6,a5,-2048 # f800 <HEAP_SIZE+0xf000>
8000744c:	fd842783          	lw	a5,-40(s0)
80007450:	02800713          	li	a4,40
80007454:	02800693          	li	a3,40
80007458:	0aa00613          	li	a2,170
8000745c:	03c00593          	li	a1,60
80007460:	fdc42503          	lw	a0,-36(s0)
80007464:	571000ef          	jal	ra,800081d4 <TFT_fillrect>
	uint16_t x, y;
	uint8_t z;
	uint8_t game = 0;
80007468:	fe0407a3          	sb	zero,-17(s0)
	while(game == 0)
8000746c:	0dc0006f          	j	80007548 <gameMenu+0x1cc>
	{
		if ( ((TS_readRegister8(this_spi, this_gpio,STMPE_TSC_CTRL) ) & 0x80))
80007470:	04000613          	li	a2,64
80007474:	fd842583          	lw	a1,-40(s0)
80007478:	fdc42503          	lw	a0,-36(s0)
8000747c:	2f0000ef          	jal	ra,8000776c <TS_readRegister8>
80007480:	00050793          	mv	a5,a0
80007484:	01879793          	slli	a5,a5,0x18
80007488:	4187d793          	srai	a5,a5,0x18
8000748c:	0a07de63          	bgez	a5,80007548 <gameMenu+0x1cc>
		{
			TS_readData( this_spi, this_gpio, &x, &y, &z);
80007490:	fe940713          	addi	a4,s0,-23
80007494:	fea40693          	addi	a3,s0,-22
80007498:	fec40793          	addi	a5,s0,-20
8000749c:	00078613          	mv	a2,a5
800074a0:	fd842583          	lw	a1,-40(s0)
800074a4:	fdc42503          	lw	a0,-36(s0)
800074a8:	46c000ef          	jal	ra,80007914 <TS_readData>
			x = map( x, TS_MINX, TS_MAXX, 0, TFT_WIDTH);
800074ac:	fec45503          	lhu	a0,-20(s0)
800074b0:	0f000713          	li	a4,240
800074b4:	00000693          	li	a3,0
800074b8:	000017b7          	lui	a5,0x1
800074bc:	ed878613          	addi	a2,a5,-296 # ed8 <HEAP_SIZE+0x6d8>
800074c0:	09600593          	li	a1,150
800074c4:	9f0ff0ef          	jal	ra,800066b4 <map>
800074c8:	00050793          	mv	a5,a0
800074cc:	01079793          	slli	a5,a5,0x10
800074d0:	0107d793          	srli	a5,a5,0x10
800074d4:	fef41623          	sh	a5,-20(s0)
			y = map( y, TS_MINY, TS_MAXY, 0, TFT_HEIGHT);
800074d8:	fea45503          	lhu	a0,-22(s0)
800074dc:	14000713          	li	a4,320
800074e0:	00000693          	li	a3,0
800074e4:	000017b7          	lui	a5,0x1
800074e8:	fa078613          	addi	a2,a5,-96 # fa0 <HEAP_SIZE+0x7a0>
800074ec:	08200593          	li	a1,130
800074f0:	9c4ff0ef          	jal	ra,800066b4 <map>
800074f4:	00050793          	mv	a5,a0
800074f8:	01079793          	slli	a5,a5,0x10
800074fc:	0107d793          	srli	a5,a5,0x10
80007500:	fef41523          	sh	a5,-22(s0)

			if (x <120)
80007504:	fec45703          	lhu	a4,-20(s0)
80007508:	07700793          	li	a5,119
8000750c:	00e7ee63          	bltu	a5,a4,80007528 <gameMenu+0x1ac>
			{
				game = 1;
80007510:	00100793          	li	a5,1
80007514:	fef407a3          	sb	a5,-17(s0)
				twoPlayerMode(this_spi, this_gpio);
80007518:	fd842583          	lw	a1,-40(s0)
8000751c:	fdc42503          	lw	a0,-36(s0)
80007520:	ac8fe0ef          	jal	ra,800057e8 <twoPlayerMode>
80007524:	0240006f          	j	80007548 <gameMenu+0x1cc>
			}
			else if (x > 120)
80007528:	fec45703          	lhu	a4,-20(s0)
8000752c:	07800793          	li	a5,120
80007530:	00e7fc63          	bleu	a4,a5,80007548 <gameMenu+0x1cc>
			{
				game = 1;
80007534:	00100793          	li	a5,1
80007538:	fef407a3          	sb	a5,-17(s0)
				singlePlayerMode(this_spi, this_gpio);
8000753c:	fd842583          	lw	a1,-40(s0)
80007540:	fdc42503          	lw	a0,-36(s0)
80007544:	fb9fc0ef          	jal	ra,800044fc <singlePlayerMode>
	while(game == 0)
80007548:	fef44783          	lbu	a5,-17(s0)
8000754c:	f20782e3          	beqz	a5,80007470 <gameMenu+0xf4>
			}
		}
	}
}
80007550:	00000013          	nop
80007554:	02c12083          	lw	ra,44(sp)
80007558:	02812403          	lw	s0,40(sp)
8000755c:	03010113          	addi	sp,sp,48
80007560:	00008067          	ret

Disassembly of section .text.TS_begin:

80007564 <TS_begin>:
TS_begin
(
	spi_instance_t *  this_spi,
	gpio_instance_t * this_gpio
)
{
80007564:	fd010113          	addi	sp,sp,-48
80007568:	02112623          	sw	ra,44(sp)
8000756c:	02812423          	sw	s0,40(sp)
80007570:	03010413          	addi	s0,sp,48
80007574:	fca42e23          	sw	a0,-36(s0)
80007578:	fcb42c23          	sw	a1,-40(s0)
	TS_writeRegister8( this_spi, this_gpio , STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
8000757c:	00200693          	li	a3,2
80007580:	00300613          	li	a2,3
80007584:	fd842583          	lw	a1,-40(s0)
80007588:	fdc42503          	lw	a0,-36(s0)
8000758c:	288000ef          	jal	ra,80007814 <TS_writeRegister8>
	for(volatile uint32_t delay =0; delay < 0xFFF; delay++);
80007590:	fe042423          	sw	zero,-24(s0)
80007594:	0100006f          	j	800075a4 <TS_begin+0x40>
80007598:	fe842783          	lw	a5,-24(s0)
8000759c:	00178793          	addi	a5,a5,1
800075a0:	fef42423          	sw	a5,-24(s0)
800075a4:	fe842703          	lw	a4,-24(s0)
800075a8:	000017b7          	lui	a5,0x1
800075ac:	ffe78793          	addi	a5,a5,-2 # ffe <HEAP_SIZE+0x7fe>
800075b0:	fee7f4e3          	bleu	a4,a5,80007598 <TS_begin+0x34>
	//uint8_t readData = 0;
	for(uint8_t loop =0; loop <65; loop++)
800075b4:	fe0407a3          	sb	zero,-17(s0)
800075b8:	0240006f          	j	800075dc <TS_begin+0x78>
	{
		TS_readRegister8(  this_spi,  this_gpio ,  loop);
800075bc:	fef44783          	lbu	a5,-17(s0)
800075c0:	00078613          	mv	a2,a5
800075c4:	fd842583          	lw	a1,-40(s0)
800075c8:	fdc42503          	lw	a0,-36(s0)
800075cc:	1a0000ef          	jal	ra,8000776c <TS_readRegister8>
	for(uint8_t loop =0; loop <65; loop++)
800075d0:	fef44783          	lbu	a5,-17(s0)
800075d4:	00178793          	addi	a5,a5,1
800075d8:	fef407a3          	sb	a5,-17(s0)
800075dc:	fef44703          	lbu	a4,-17(s0)
800075e0:	04000793          	li	a5,64
800075e4:	fce7fce3          	bleu	a4,a5,800075bc <TS_begin+0x58>
	}
	TS_writeRegister8(this_spi, this_gpio ,STMPE_SYS_CTRL2, 0x0); // turn on clocks!
800075e8:	00000693          	li	a3,0
800075ec:	00400613          	li	a2,4
800075f0:	fd842583          	lw	a1,-40(s0)
800075f4:	fdc42503          	lw	a0,-36(s0)
800075f8:	21c000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_TSC_CTRL, (STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN)); // XYZ and enable!
800075fc:	00100693          	li	a3,1
80007600:	04000613          	li	a2,64
80007604:	fd842583          	lw	a1,-40(s0)
80007608:	fdc42503          	lw	a0,-36(s0)
8000760c:	208000ef          	jal	ra,80007814 <TS_writeRegister8>
	  //Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	TS_readRegister8(this_spi, this_gpio, STMPE_TSC_CTRL);
80007610:	04000613          	li	a2,64
80007614:	fd842583          	lw	a1,-40(s0)
80007618:	fdc42503          	lw	a0,-36(s0)
8000761c:	150000ef          	jal	ra,8000776c <TS_readRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
80007620:	00100693          	li	a3,1
80007624:	00a00613          	li	a2,10
80007628:	fd842583          	lw	a1,-40(s0)
8000762c:	fdc42503          	lw	a0,-36(s0)
80007630:	1e4000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_ADC_CTRL1, (STMPE_ADC_CTRL1_10BIT | (0x6 << 4))); // 96 clocks per conversion
80007634:	06000693          	li	a3,96
80007638:	02000613          	li	a2,32
8000763c:	fd842583          	lw	a1,-40(s0)
80007640:	fdc42503          	lw	a0,-36(s0)
80007644:	1d0000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
80007648:	00200693          	li	a3,2
8000764c:	02100613          	li	a2,33
80007650:	fd842583          	lw	a1,-40(s0)
80007654:	fdc42503          	lw	a0,-36(s0)
80007658:	1bc000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_TSC_CFG, (STMPE_TSC_CFG_4SAMPLE | STMPE_TSC_CFG_DELAY_1MS | STMPE_TSC_CFG_SETTLE_5MS));
8000765c:	0a400693          	li	a3,164
80007660:	04100613          	li	a2,65
80007664:	fd842583          	lw	a1,-40(s0)
80007668:	fdc42503          	lw	a0,-36(s0)
8000766c:	1a8000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_TSC_FRACTION_Z, 0x6);
80007670:	00600693          	li	a3,6
80007674:	05600613          	li	a2,86
80007678:	fd842583          	lw	a1,-40(s0)
8000767c:	fdc42503          	lw	a0,-36(s0)
80007680:	194000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_FIFO_TH, 1);
80007684:	00100693          	li	a3,1
80007688:	04a00613          	li	a2,74
8000768c:	fd842583          	lw	a1,-40(s0)
80007690:	fdc42503          	lw	a0,-36(s0)
80007694:	180000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
80007698:	00100693          	li	a3,1
8000769c:	04b00613          	li	a2,75
800076a0:	fd842583          	lw	a1,-40(s0)
800076a4:	fdc42503          	lw	a0,-36(s0)
800076a8:	16c000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_FIFO_STA, 0);    // unreset
800076ac:	00000693          	li	a3,0
800076b0:	04b00613          	li	a2,75
800076b4:	fd842583          	lw	a1,-40(s0)
800076b8:	fdc42503          	lw	a0,-36(s0)
800076bc:	158000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_20MA);
800076c0:	00000693          	li	a3,0
800076c4:	05800613          	li	a2,88
800076c8:	fd842583          	lw	a1,-40(s0)
800076cc:	fdc42503          	lw	a0,-36(s0)
800076d0:	144000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_INT_STA, 0xFF); // reset all ints
800076d4:	0ff00693          	li	a3,255
800076d8:	00b00613          	li	a2,11
800076dc:	fd842583          	lw	a1,-40(s0)
800076e0:	fdc42503          	lw	a0,-36(s0)
800076e4:	130000ef          	jal	ra,80007814 <TS_writeRegister8>
	TS_writeRegister8(this_spi, this_gpio ,STMPE_INT_CTRL, STMPE_INT_CTRL_POL_HIGH | STMPE_INT_CTRL_ENABLE);
800076e8:	00500693          	li	a3,5
800076ec:	00900613          	li	a2,9
800076f0:	fd842583          	lw	a1,-40(s0)
800076f4:	fdc42503          	lw	a0,-36(s0)
800076f8:	11c000ef          	jal	ra,80007814 <TS_writeRegister8>
}
800076fc:	00000013          	nop
80007700:	02c12083          	lw	ra,44(sp)
80007704:	02812403          	lw	s0,40(sp)
80007708:	03010113          	addi	sp,sp,48
8000770c:	00008067          	ret

Disassembly of section .text.TS_write:

80007710 <TS_write>:
(
	spi_instance_t * this_spi,
	uint8_t data_bits,
	gpio_instance_t * this_gpio
)
{
80007710:	fe010113          	addi	sp,sp,-32
80007714:	00112e23          	sw	ra,28(sp)
80007718:	00812c23          	sw	s0,24(sp)
8000771c:	02010413          	addi	s0,sp,32
80007720:	fea42623          	sw	a0,-20(s0)
80007724:	00058793          	mv	a5,a1
80007728:	fec42223          	sw	a2,-28(s0)
8000772c:	fef405a3          	sb	a5,-21(s0)
	* Selects SPI slave 0
	* transfers data passed in to spi device
	* deselets SPI slave 0
	*/
	//GPIO_set_output( this_gpio, GPIO_5, 0 ); // Chip Select Signal TS
	SPI_set_slave_select(this_spi, SPI_SLAVE_1); // check this is the TS
80007730:	00100593          	li	a1,1
80007734:	fec42503          	lw	a0,-20(s0)
80007738:	ef8fa0ef          	jal	ra,80001e30 <SPI_set_slave_select>
	SPI_transfer_frame(this_spi, data_bits);
8000773c:	feb44783          	lbu	a5,-21(s0)
80007740:	00078593          	mv	a1,a5
80007744:	fec42503          	lw	a0,-20(s0)
80007748:	8adfa0ef          	jal	ra,80001ff4 <SPI_transfer_frame>
	SPI_clear_slave_select(this_spi, SPI_SLAVE_1);// check this is the TS
8000774c:	00100593          	li	a1,1
80007750:	fec42503          	lw	a0,-20(s0)
80007754:	fbcfa0ef          	jal	ra,80001f10 <SPI_clear_slave_select>
	//GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal TS
}
80007758:	00000013          	nop
8000775c:	01c12083          	lw	ra,28(sp)
80007760:	01812403          	lw	s0,24(sp)
80007764:	02010113          	addi	sp,sp,32
80007768:	00008067          	ret

Disassembly of section .text.TS_readRegister8:

8000776c <TS_readRegister8>:
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	uint8_t addr
)
{
8000776c:	fd010113          	addi	sp,sp,-48
80007770:	02112623          	sw	ra,44(sp)
80007774:	02812423          	sw	s0,40(sp)
80007778:	03010413          	addi	s0,sp,48
8000777c:	fca42e23          	sw	a0,-36(s0)
80007780:	fcb42c23          	sw	a1,-40(s0)
80007784:	00060793          	mv	a5,a2
80007788:	fcf40ba3          	sb	a5,-41(s0)
    uint8_t master_rx  =0x00;
8000778c:	fe0407a3          	sb	zero,-17(s0)
   // uint8_t txdata = 0x00;
    //uint8_t rw_bit = 1;
    //txdata = (rw_bit << 7)|addr;
    GPIO_set_output( this_gpio, GPIO_5, 0 ); // Chip Select Signal TS
80007790:	00000613          	li	a2,0
80007794:	00500593          	li	a1,5
80007798:	fd842503          	lw	a0,-40(s0)
8000779c:	ec8fc0ef          	jal	ra,80003e64 <GPIO_set_output>
    SPI_set_slave_select(this_spi, SPI_SLAVE_1);  // check this is the TS
800077a0:	00100593          	li	a1,1
800077a4:	fdc42503          	lw	a0,-36(s0)
800077a8:	e88fa0ef          	jal	ra,80001e30 <SPI_set_slave_select>
    master_rx = SPI_transfer_frame( this_spi,(0x80 | addr));// txdata );
800077ac:	fd744783          	lbu	a5,-41(s0)
800077b0:	f807e793          	ori	a5,a5,-128
800077b4:	0ff7f793          	andi	a5,a5,255
800077b8:	00078593          	mv	a1,a5
800077bc:	fdc42503          	lw	a0,-36(s0)
800077c0:	835fa0ef          	jal	ra,80001ff4 <SPI_transfer_frame>
800077c4:	00050793          	mv	a5,a0
800077c8:	fef407a3          	sb	a5,-17(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x0 );
800077cc:	00000593          	li	a1,0
800077d0:	fdc42503          	lw	a0,-36(s0)
800077d4:	821fa0ef          	jal	ra,80001ff4 <SPI_transfer_frame>
800077d8:	00050793          	mv	a5,a0
800077dc:	fef407a3          	sb	a5,-17(s0)
    SPI_clear_slave_select( this_spi, SPI_SLAVE_1 ); // check this is the TS
800077e0:	00100593          	li	a1,1
800077e4:	fdc42503          	lw	a0,-36(s0)
800077e8:	f28fa0ef          	jal	ra,80001f10 <SPI_clear_slave_select>
    GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal TS
800077ec:	00100613          	li	a2,1
800077f0:	00500593          	li	a1,5
800077f4:	fd842503          	lw	a0,-40(s0)
800077f8:	e6cfc0ef          	jal	ra,80003e64 <GPIO_set_output>
    return master_rx;
800077fc:	fef44783          	lbu	a5,-17(s0)
}
80007800:	00078513          	mv	a0,a5
80007804:	02c12083          	lw	ra,44(sp)
80007808:	02812403          	lw	s0,40(sp)
8000780c:	03010113          	addi	sp,sp,48
80007810:	00008067          	ret

Disassembly of section .text.TS_writeRegister8:

80007814 <TS_writeRegister8>:
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	uint8_t addr,
	uint8_t data_bits
)
{
80007814:	fe010113          	addi	sp,sp,-32
80007818:	00112e23          	sw	ra,28(sp)
8000781c:	00812c23          	sw	s0,24(sp)
80007820:	02010413          	addi	s0,sp,32
80007824:	fea42623          	sw	a0,-20(s0)
80007828:	feb42423          	sw	a1,-24(s0)
8000782c:	00060713          	mv	a4,a2
80007830:	00068793          	mv	a5,a3
80007834:	fee403a3          	sb	a4,-25(s0)
80007838:	fef40323          	sb	a5,-26(s0)
	GPIO_set_output( this_gpio, GPIO_5, 0 ); // Chip Select Signal TS
8000783c:	00000613          	li	a2,0
80007840:	00500593          	li	a1,5
80007844:	fe842503          	lw	a0,-24(s0)
80007848:	e1cfc0ef          	jal	ra,80003e64 <GPIO_set_output>
	TS_write( this_spi, addr, this_gpio );
8000784c:	fe744783          	lbu	a5,-25(s0)
80007850:	fe842603          	lw	a2,-24(s0)
80007854:	00078593          	mv	a1,a5
80007858:	fec42503          	lw	a0,-20(s0)
8000785c:	eb5ff0ef          	jal	ra,80007710 <TS_write>
	TS_write( this_spi, data_bits, this_gpio );
80007860:	fe644783          	lbu	a5,-26(s0)
80007864:	fe842603          	lw	a2,-24(s0)
80007868:	00078593          	mv	a1,a5
8000786c:	fec42503          	lw	a0,-20(s0)
80007870:	ea1ff0ef          	jal	ra,80007710 <TS_write>
    GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal TS
80007874:	00100613          	li	a2,1
80007878:	00500593          	li	a1,5
8000787c:	fe842503          	lw	a0,-24(s0)
80007880:	de4fc0ef          	jal	ra,80003e64 <GPIO_set_output>
}
80007884:	00000013          	nop
80007888:	01c12083          	lw	ra,28(sp)
8000788c:	01812403          	lw	s0,24(sp)
80007890:	02010113          	addi	sp,sp,32
80007894:	00008067          	ret

Disassembly of section .text.TS_getVersion:

80007898 <TS_getVersion>:
TS_getVersion
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
80007898:	fd010113          	addi	sp,sp,-48
8000789c:	02112623          	sw	ra,44(sp)
800078a0:	02812423          	sw	s0,40(sp)
800078a4:	03010413          	addi	s0,sp,48
800078a8:	fca42e23          	sw	a0,-36(s0)
800078ac:	fcb42c23          	sw	a1,-40(s0)
	uint16_t versionNumber;
    versionNumber = TS_readRegister8( this_spi, this_gpio , 0);
800078b0:	00000613          	li	a2,0
800078b4:	fd842583          	lw	a1,-40(s0)
800078b8:	fdc42503          	lw	a0,-36(s0)
800078bc:	eb1ff0ef          	jal	ra,8000776c <TS_readRegister8>
800078c0:	00050793          	mv	a5,a0
800078c4:	fef41723          	sh	a5,-18(s0)
	versionNumber <<= 8;
800078c8:	fee45783          	lhu	a5,-18(s0)
800078cc:	00879793          	slli	a5,a5,0x8
800078d0:	fef41723          	sh	a5,-18(s0)
	versionNumber |= TS_readRegister8( this_spi, this_gpio , 1);
800078d4:	00100613          	li	a2,1
800078d8:	fd842583          	lw	a1,-40(s0)
800078dc:	fdc42503          	lw	a0,-36(s0)
800078e0:	e8dff0ef          	jal	ra,8000776c <TS_readRegister8>
800078e4:	00050793          	mv	a5,a0
800078e8:	01079713          	slli	a4,a5,0x10
800078ec:	01075713          	srli	a4,a4,0x10
800078f0:	fee45783          	lhu	a5,-18(s0)
800078f4:	00f767b3          	or	a5,a4,a5
800078f8:	fef41723          	sh	a5,-18(s0)
	return versionNumber;
800078fc:	fee45783          	lhu	a5,-18(s0)
}
80007900:	00078513          	mv	a0,a5
80007904:	02c12083          	lw	ra,44(sp)
80007908:	02812403          	lw	s0,40(sp)
8000790c:	03010113          	addi	sp,sp,48
80007910:	00008067          	ret

Disassembly of section .text.TS_readData:

80007914 <TS_readData>:
	gpio_instance_t * this_gpio,
	uint16_t *x,
	uint16_t *y,
	uint8_t *z
)
{
80007914:	fc010113          	addi	sp,sp,-64
80007918:	02112e23          	sw	ra,60(sp)
8000791c:	02812c23          	sw	s0,56(sp)
80007920:	02912a23          	sw	s1,52(sp)
80007924:	04010413          	addi	s0,sp,64
80007928:	fca42e23          	sw	a0,-36(s0)
8000792c:	fcb42c23          	sw	a1,-40(s0)
80007930:	fcc42a23          	sw	a2,-44(s0)
80007934:	fcd42823          	sw	a3,-48(s0)
80007938:	fce42623          	sw	a4,-52(s0)
	uint8_t data[4];
	for (uint8_t loop=0;loop<4;loop++)
8000793c:	fe0407a3          	sb	zero,-17(s0)
80007940:	0380006f          	j	80007978 <TS_readData+0x64>
	{
		data[loop]= TS_readRegister8 (this_spi, this_gpio, 0xD7);
80007944:	fef44483          	lbu	s1,-17(s0)
80007948:	0d700613          	li	a2,215
8000794c:	fd842583          	lw	a1,-40(s0)
80007950:	fdc42503          	lw	a0,-36(s0)
80007954:	e19ff0ef          	jal	ra,8000776c <TS_readRegister8>
80007958:	00050793          	mv	a5,a0
8000795c:	00078713          	mv	a4,a5
80007960:	ff040793          	addi	a5,s0,-16
80007964:	009787b3          	add	a5,a5,s1
80007968:	fee78c23          	sb	a4,-8(a5)
	for (uint8_t loop=0;loop<4;loop++)
8000796c:	fef44783          	lbu	a5,-17(s0)
80007970:	00178793          	addi	a5,a5,1
80007974:	fef407a3          	sb	a5,-17(s0)
80007978:	fef44703          	lbu	a4,-17(s0)
8000797c:	00300793          	li	a5,3
80007980:	fce7f2e3          	bleu	a4,a5,80007944 <TS_readData+0x30>
	}
	*x= data[0];
80007984:	fe844783          	lbu	a5,-24(s0)
80007988:	01079713          	slli	a4,a5,0x10
8000798c:	01075713          	srli	a4,a4,0x10
80007990:	fd442783          	lw	a5,-44(s0)
80007994:	00e79023          	sh	a4,0(a5)
	*x <<= 4;
80007998:	fd442783          	lw	a5,-44(s0)
8000799c:	0007d783          	lhu	a5,0(a5)
800079a0:	00479793          	slli	a5,a5,0x4
800079a4:	01079713          	slli	a4,a5,0x10
800079a8:	01075713          	srli	a4,a4,0x10
800079ac:	fd442783          	lw	a5,-44(s0)
800079b0:	00e79023          	sh	a4,0(a5)
	*x |= (data[1] >> 4);
800079b4:	fd442783          	lw	a5,-44(s0)
800079b8:	0007d703          	lhu	a4,0(a5)
800079bc:	fe944783          	lbu	a5,-23(s0)
800079c0:	0047d793          	srli	a5,a5,0x4
800079c4:	0ff7f793          	andi	a5,a5,255
800079c8:	01079793          	slli	a5,a5,0x10
800079cc:	0107d793          	srli	a5,a5,0x10
800079d0:	00f767b3          	or	a5,a4,a5
800079d4:	01079713          	slli	a4,a5,0x10
800079d8:	01075713          	srli	a4,a4,0x10
800079dc:	fd442783          	lw	a5,-44(s0)
800079e0:	00e79023          	sh	a4,0(a5)
	*y = data[1] & 0x0F;
800079e4:	fe944783          	lbu	a5,-23(s0)
800079e8:	01079793          	slli	a5,a5,0x10
800079ec:	0107d793          	srli	a5,a5,0x10
800079f0:	00f7f793          	andi	a5,a5,15
800079f4:	01079713          	slli	a4,a5,0x10
800079f8:	01075713          	srli	a4,a4,0x10
800079fc:	fd042783          	lw	a5,-48(s0)
80007a00:	00e79023          	sh	a4,0(a5)
	*y <<= 8;
80007a04:	fd042783          	lw	a5,-48(s0)
80007a08:	0007d783          	lhu	a5,0(a5)
80007a0c:	00879793          	slli	a5,a5,0x8
80007a10:	01079713          	slli	a4,a5,0x10
80007a14:	01075713          	srli	a4,a4,0x10
80007a18:	fd042783          	lw	a5,-48(s0)
80007a1c:	00e79023          	sh	a4,0(a5)
	*y |= data[2];
80007a20:	fd042783          	lw	a5,-48(s0)
80007a24:	0007d703          	lhu	a4,0(a5)
80007a28:	fea44783          	lbu	a5,-22(s0)
80007a2c:	01079793          	slli	a5,a5,0x10
80007a30:	0107d793          	srli	a5,a5,0x10
80007a34:	00f767b3          	or	a5,a4,a5
80007a38:	01079713          	slli	a4,a5,0x10
80007a3c:	01075713          	srli	a4,a4,0x10
80007a40:	fd042783          	lw	a5,-48(s0)
80007a44:	00e79023          	sh	a4,0(a5)
	*z = data[3];
80007a48:	feb44703          	lbu	a4,-21(s0)
80007a4c:	fcc42783          	lw	a5,-52(s0)
80007a50:	00e78023          	sb	a4,0(a5)
	if( TS_readRegister8(this_spi, this_gpio,STMPE_FIFO_STA)& STMPE_FIFO_STA_EMPTY) // buffer empty?
80007a54:	04b00613          	li	a2,75
80007a58:	fd842583          	lw	a1,-40(s0)
80007a5c:	fdc42503          	lw	a0,-36(s0)
80007a60:	d0dff0ef          	jal	ra,8000776c <TS_readRegister8>
80007a64:	00050793          	mv	a5,a0
80007a68:	0207f793          	andi	a5,a5,32
80007a6c:	00078c63          	beqz	a5,80007a84 <TS_readData+0x170>
	{
		TS_writeRegister8(this_spi, this_gpio,STMPE_INT_STA, 0xFF);
80007a70:	0ff00693          	li	a3,255
80007a74:	00b00613          	li	a2,11
80007a78:	fd842583          	lw	a1,-40(s0)
80007a7c:	fdc42503          	lw	a0,-36(s0)
80007a80:	d95ff0ef          	jal	ra,80007814 <TS_writeRegister8>
	}
}
80007a84:	00000013          	nop
80007a88:	03c12083          	lw	ra,60(sp)
80007a8c:	03812403          	lw	s0,56(sp)
80007a90:	03412483          	lw	s1,52(sp)
80007a94:	04010113          	addi	sp,sp,64
80007a98:	00008067          	ret

Disassembly of section .text.TS_touched:

80007a9c <TS_touched>:
TS_touched
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
80007a9c:	fe010113          	addi	sp,sp,-32
80007aa0:	00112e23          	sw	ra,28(sp)
80007aa4:	00812c23          	sw	s0,24(sp)
80007aa8:	02010413          	addi	s0,sp,32
80007aac:	fea42623          	sw	a0,-20(s0)
80007ab0:	feb42423          	sw	a1,-24(s0)
	return ((TS_readRegister8(this_spi, this_gpio,STMPE_TSC_CTRL) ) & 0x80);
80007ab4:	04000613          	li	a2,64
80007ab8:	fe842583          	lw	a1,-24(s0)
80007abc:	fec42503          	lw	a0,-20(s0)
80007ac0:	cadff0ef          	jal	ra,8000776c <TS_readRegister8>
80007ac4:	00050793          	mv	a5,a0
80007ac8:	0807f793          	andi	a5,a5,128
}
80007acc:	00078513          	mv	a0,a5
80007ad0:	01c12083          	lw	ra,28(sp)
80007ad4:	01812403          	lw	s0,24(sp)
80007ad8:	02010113          	addi	sp,sp,32
80007adc:	00008067          	ret

Disassembly of section .text.TFT_spiwrite:

80007ae0 <TFT_spiwrite>:
TFT_spiwrite
(
	spi_instance_t * this_spi,
	uint8_t  data_bits
)
{
80007ae0:	fe010113          	addi	sp,sp,-32
80007ae4:	00112e23          	sw	ra,28(sp)
80007ae8:	00812c23          	sw	s0,24(sp)
80007aec:	02010413          	addi	s0,sp,32
80007af0:	fea42623          	sw	a0,-20(s0)
80007af4:	00058793          	mv	a5,a1
80007af8:	fef405a3          	sb	a5,-21(s0)
   /*
    * Selects SPI slave 0
    * transfers data passed in to spi device
    * deselets SPI slave 0
    */
    SPI_set_slave_select(this_spi, SPI_SLAVE_0);
80007afc:	00000593          	li	a1,0
80007b00:	fec42503          	lw	a0,-20(s0)
80007b04:	b2cfa0ef          	jal	ra,80001e30 <SPI_set_slave_select>
    SPI_transfer_frame(this_spi, data_bits);
80007b08:	feb44783          	lbu	a5,-21(s0)
80007b0c:	00078593          	mv	a1,a5
80007b10:	fec42503          	lw	a0,-20(s0)
80007b14:	ce0fa0ef          	jal	ra,80001ff4 <SPI_transfer_frame>
    SPI_clear_slave_select(this_spi, SPI_SLAVE_0);
80007b18:	00000593          	li	a1,0
80007b1c:	fec42503          	lw	a0,-20(s0)
80007b20:	bf0fa0ef          	jal	ra,80001f10 <SPI_clear_slave_select>
}
80007b24:	00000013          	nop
80007b28:	01c12083          	lw	ra,28(sp)
80007b2c:	01812403          	lw	s0,24(sp)
80007b30:	02010113          	addi	sp,sp,32
80007b34:	00008067          	ret

Disassembly of section .text.TFT_begin:

80007b38 <TFT_begin>:
TFT_begin
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
80007b38:	fd010113          	addi	sp,sp,-48
80007b3c:	02112623          	sw	ra,44(sp)
80007b40:	02812423          	sw	s0,40(sp)
80007b44:	03010413          	addi	s0,sp,48
80007b48:	fca42e23          	sw	a0,-36(s0)
80007b4c:	fcb42c23          	sw	a1,-40(s0)
    GPIO_set_output( this_gpio, GPIO_6, 0 ); // ARD RESET
80007b50:	00000613          	li	a2,0
80007b54:	00600593          	li	a1,6
80007b58:	fd842503          	lw	a0,-40(s0)
80007b5c:	b08fc0ef          	jal	ra,80003e64 <GPIO_set_output>
    for( volatile uint16_t x=0; x<0xfff; x++ ){} /// delay
80007b60:	fe041723          	sh	zero,-18(s0)
80007b64:	0200006f          	j	80007b84 <TFT_begin+0x4c>
80007b68:	fee45783          	lhu	a5,-18(s0)
80007b6c:	01079793          	slli	a5,a5,0x10
80007b70:	0107d793          	srli	a5,a5,0x10
80007b74:	00178793          	addi	a5,a5,1
80007b78:	01079793          	slli	a5,a5,0x10
80007b7c:	0107d793          	srli	a5,a5,0x10
80007b80:	fef41723          	sh	a5,-18(s0)
80007b84:	fee45783          	lhu	a5,-18(s0)
80007b88:	01079713          	slli	a4,a5,0x10
80007b8c:	01075713          	srli	a4,a4,0x10
80007b90:	000017b7          	lui	a5,0x1
80007b94:	ffe78793          	addi	a5,a5,-2 # ffe <HEAP_SIZE+0x7fe>
80007b98:	fce7f8e3          	bleu	a4,a5,80007b68 <TFT_begin+0x30>
    GPIO_set_output( this_gpio, GPIO_6, 1 ); // ARD RESET
80007b9c:	00100613          	li	a2,1
80007ba0:	00600593          	li	a1,6
80007ba4:	fd842503          	lw	a0,-40(s0)
80007ba8:	abcfc0ef          	jal	ra,80003e64 <GPIO_set_output>
    for( volatile uint16_t y=0; y<0xfff; y++ );
80007bac:	fe041623          	sh	zero,-20(s0)
80007bb0:	0200006f          	j	80007bd0 <TFT_begin+0x98>
80007bb4:	fec45783          	lhu	a5,-20(s0)
80007bb8:	01079793          	slli	a5,a5,0x10
80007bbc:	0107d793          	srli	a5,a5,0x10
80007bc0:	00178793          	addi	a5,a5,1
80007bc4:	01079793          	slli	a5,a5,0x10
80007bc8:	0107d793          	srli	a5,a5,0x10
80007bcc:	fef41623          	sh	a5,-20(s0)
80007bd0:	fec45783          	lhu	a5,-20(s0)
80007bd4:	01079713          	slli	a4,a5,0x10
80007bd8:	01075713          	srli	a4,a4,0x10
80007bdc:	000017b7          	lui	a5,0x1
80007be0:	ffe78793          	addi	a5,a5,-2 # ffe <HEAP_SIZE+0x7fe>
80007be4:	fce7f8e3          	bleu	a4,a5,80007bb4 <TFT_begin+0x7c>
    TFT_writecommand( this_spi, 0xEF, this_gpio );
80007be8:	fd842603          	lw	a2,-40(s0)
80007bec:	0ef00593          	li	a1,239
80007bf0:	fdc42503          	lw	a0,-36(s0)
80007bf4:	7d4000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x03, this_gpio  );
80007bf8:	fd842603          	lw	a2,-40(s0)
80007bfc:	00300593          	li	a1,3
80007c00:	fdc42503          	lw	a0,-36(s0)
80007c04:	029000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x80 , this_gpio );
80007c08:	fd842603          	lw	a2,-40(s0)
80007c0c:	08000593          	li	a1,128
80007c10:	fdc42503          	lw	a0,-36(s0)
80007c14:	019000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x02, this_gpio  );
80007c18:	fd842603          	lw	a2,-40(s0)
80007c1c:	00200593          	li	a1,2
80007c20:	fdc42503          	lw	a0,-36(s0)
80007c24:	009000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, 0xCF, this_gpio );
80007c28:	fd842603          	lw	a2,-40(s0)
80007c2c:	0cf00593          	li	a1,207
80007c30:	fdc42503          	lw	a0,-36(s0)
80007c34:	794000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007c38:	fd842603          	lw	a2,-40(s0)
80007c3c:	00000593          	li	a1,0
80007c40:	fdc42503          	lw	a0,-36(s0)
80007c44:	7e8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0xC1 , this_gpio );
80007c48:	fd842603          	lw	a2,-40(s0)
80007c4c:	0c100593          	li	a1,193
80007c50:	fdc42503          	lw	a0,-36(s0)
80007c54:	7d8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x30 , this_gpio );
80007c58:	fd842603          	lw	a2,-40(s0)
80007c5c:	03000593          	li	a1,48
80007c60:	fdc42503          	lw	a0,-36(s0)
80007c64:	7c8000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, 0xED, this_gpio );
80007c68:	fd842603          	lw	a2,-40(s0)
80007c6c:	0ed00593          	li	a1,237
80007c70:	fdc42503          	lw	a0,-36(s0)
80007c74:	754000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x64 , this_gpio );
80007c78:	fd842603          	lw	a2,-40(s0)
80007c7c:	06400593          	li	a1,100
80007c80:	fdc42503          	lw	a0,-36(s0)
80007c84:	7a8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x03 , this_gpio );
80007c88:	fd842603          	lw	a2,-40(s0)
80007c8c:	00300593          	li	a1,3
80007c90:	fdc42503          	lw	a0,-36(s0)
80007c94:	798000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x12 , this_gpio );
80007c98:	fd842603          	lw	a2,-40(s0)
80007c9c:	01200593          	li	a1,18
80007ca0:	fdc42503          	lw	a0,-36(s0)
80007ca4:	788000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x81 , this_gpio );
80007ca8:	fd842603          	lw	a2,-40(s0)
80007cac:	08100593          	li	a1,129
80007cb0:	fdc42503          	lw	a0,-36(s0)
80007cb4:	778000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, 0xE8, this_gpio );
80007cb8:	fd842603          	lw	a2,-40(s0)
80007cbc:	0e800593          	li	a1,232
80007cc0:	fdc42503          	lw	a0,-36(s0)
80007cc4:	704000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x85 , this_gpio );
80007cc8:	fd842603          	lw	a2,-40(s0)
80007ccc:	08500593          	li	a1,133
80007cd0:	fdc42503          	lw	a0,-36(s0)
80007cd4:	758000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007cd8:	fd842603          	lw	a2,-40(s0)
80007cdc:	00000593          	li	a1,0
80007ce0:	fdc42503          	lw	a0,-36(s0)
80007ce4:	748000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x78 , this_gpio );
80007ce8:	fd842603          	lw	a2,-40(s0)
80007cec:	07800593          	li	a1,120
80007cf0:	fdc42503          	lw	a0,-36(s0)
80007cf4:	738000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, 0xCB, this_gpio );
80007cf8:	fd842603          	lw	a2,-40(s0)
80007cfc:	0cb00593          	li	a1,203
80007d00:	fdc42503          	lw	a0,-36(s0)
80007d04:	6c4000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x39 , this_gpio );
80007d08:	fd842603          	lw	a2,-40(s0)
80007d0c:	03900593          	li	a1,57
80007d10:	fdc42503          	lw	a0,-36(s0)
80007d14:	718000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x2C , this_gpio );
80007d18:	fd842603          	lw	a2,-40(s0)
80007d1c:	02c00593          	li	a1,44
80007d20:	fdc42503          	lw	a0,-36(s0)
80007d24:	708000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007d28:	fd842603          	lw	a2,-40(s0)
80007d2c:	00000593          	li	a1,0
80007d30:	fdc42503          	lw	a0,-36(s0)
80007d34:	6f8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x34 , this_gpio );
80007d38:	fd842603          	lw	a2,-40(s0)
80007d3c:	03400593          	li	a1,52
80007d40:	fdc42503          	lw	a0,-36(s0)
80007d44:	6e8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x02 , this_gpio );
80007d48:	fd842603          	lw	a2,-40(s0)
80007d4c:	00200593          	li	a1,2
80007d50:	fdc42503          	lw	a0,-36(s0)
80007d54:	6d8000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, 0xF7, this_gpio);
80007d58:	fd842603          	lw	a2,-40(s0)
80007d5c:	0f700593          	li	a1,247
80007d60:	fdc42503          	lw	a0,-36(s0)
80007d64:	664000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x20 , this_gpio );
80007d68:	fd842603          	lw	a2,-40(s0)
80007d6c:	02000593          	li	a1,32
80007d70:	fdc42503          	lw	a0,-36(s0)
80007d74:	6b8000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, 0xEA, this_gpio );
80007d78:	fd842603          	lw	a2,-40(s0)
80007d7c:	0ea00593          	li	a1,234
80007d80:	fdc42503          	lw	a0,-36(s0)
80007d84:	644000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007d88:	fd842603          	lw	a2,-40(s0)
80007d8c:	00000593          	li	a1,0
80007d90:	fdc42503          	lw	a0,-36(s0)
80007d94:	698000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007d98:	fd842603          	lw	a2,-40(s0)
80007d9c:	00000593          	li	a1,0
80007da0:	fdc42503          	lw	a0,-36(s0)
80007da4:	688000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_PWCTR1, this_gpio );    //Power control
80007da8:	fd842603          	lw	a2,-40(s0)
80007dac:	0c000593          	li	a1,192
80007db0:	fdc42503          	lw	a0,-36(s0)
80007db4:	614000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x23 , this_gpio );   //VRH[5:0]
80007db8:	fd842603          	lw	a2,-40(s0)
80007dbc:	02300593          	li	a1,35
80007dc0:	fdc42503          	lw	a0,-36(s0)
80007dc4:	668000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_PWCTR2, this_gpio );    //Power control
80007dc8:	fd842603          	lw	a2,-40(s0)
80007dcc:	0c100593          	li	a1,193
80007dd0:	fdc42503          	lw	a0,-36(s0)
80007dd4:	5f4000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x10, this_gpio  );   //SAP[2:0];BT[3:0]
80007dd8:	fd842603          	lw	a2,-40(s0)
80007ddc:	01000593          	li	a1,16
80007de0:	fdc42503          	lw	a0,-36(s0)
80007de4:	648000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_VMCTR1, this_gpio );    //VCM control
80007de8:	fd842603          	lw	a2,-40(s0)
80007dec:	0c500593          	li	a1,197
80007df0:	fdc42503          	lw	a0,-36(s0)
80007df4:	5d4000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x3e, this_gpio  ); //¶Ô±È¶Èµ÷œÚ
80007df8:	fd842603          	lw	a2,-40(s0)
80007dfc:	03e00593          	li	a1,62
80007e00:	fdc42503          	lw	a0,-36(s0)
80007e04:	628000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x28 , this_gpio );
80007e08:	fd842603          	lw	a2,-40(s0)
80007e0c:	02800593          	li	a1,40
80007e10:	fdc42503          	lw	a0,-36(s0)
80007e14:	618000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_VMCTR2, this_gpio );    //VCM control2
80007e18:	fd842603          	lw	a2,-40(s0)
80007e1c:	0c700593          	li	a1,199
80007e20:	fdc42503          	lw	a0,-36(s0)
80007e24:	5a4000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x86, this_gpio  );  //--
80007e28:	fd842603          	lw	a2,-40(s0)
80007e2c:	08600593          	li	a1,134
80007e30:	fdc42503          	lw	a0,-36(s0)
80007e34:	5f8000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_MADCTL, this_gpio ); // Mem Access Ctrl
80007e38:	fd842603          	lw	a2,-40(s0)
80007e3c:	03600593          	li	a1,54
80007e40:	fdc42503          	lw	a0,-36(s0)
80007e44:	584000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x48 , this_gpio );
80007e48:	fd842603          	lw	a2,-40(s0)
80007e4c:	04800593          	li	a1,72
80007e50:	fdc42503          	lw	a0,-36(s0)
80007e54:	5d8000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_PIXFMT, this_gpio );
80007e58:	fd842603          	lw	a2,-40(s0)
80007e5c:	03a00593          	li	a1,58
80007e60:	fdc42503          	lw	a0,-36(s0)
80007e64:	564000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x55 , this_gpio );
80007e68:	fd842603          	lw	a2,-40(s0)
80007e6c:	05500593          	li	a1,85
80007e70:	fdc42503          	lw	a0,-36(s0)
80007e74:	5b8000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_FRMCTR1, this_gpio );
80007e78:	fd842603          	lw	a2,-40(s0)
80007e7c:	0b100593          	li	a1,177
80007e80:	fdc42503          	lw	a0,-36(s0)
80007e84:	544000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007e88:	fd842603          	lw	a2,-40(s0)
80007e8c:	00000593          	li	a1,0
80007e90:	fdc42503          	lw	a0,-36(s0)
80007e94:	598000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x18 , this_gpio );
80007e98:	fd842603          	lw	a2,-40(s0)
80007e9c:	01800593          	li	a1,24
80007ea0:	fdc42503          	lw	a0,-36(s0)
80007ea4:	588000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_DFUNCTR, this_gpio ); // Disp Fn Ctrl
80007ea8:	fd842603          	lw	a2,-40(s0)
80007eac:	0b600593          	li	a1,182
80007eb0:	fdc42503          	lw	a0,-36(s0)
80007eb4:	514000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x08 , this_gpio );
80007eb8:	fd842603          	lw	a2,-40(s0)
80007ebc:	00800593          	li	a1,8
80007ec0:	fdc42503          	lw	a0,-36(s0)
80007ec4:	568000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x82 , this_gpio );
80007ec8:	fd842603          	lw	a2,-40(s0)
80007ecc:	08200593          	li	a1,130
80007ed0:	fdc42503          	lw	a0,-36(s0)
80007ed4:	558000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x27 , this_gpio );
80007ed8:	fd842603          	lw	a2,-40(s0)
80007edc:	02700593          	li	a1,39
80007ee0:	fdc42503          	lw	a0,-36(s0)
80007ee4:	548000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, 0xF2, this_gpio );// 3Gamma Function Disable
80007ee8:	fd842603          	lw	a2,-40(s0)
80007eec:	0f200593          	li	a1,242
80007ef0:	fdc42503          	lw	a0,-36(s0)
80007ef4:	4d4000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80007ef8:	fd842603          	lw	a2,-40(s0)
80007efc:	00000593          	li	a1,0
80007f00:	fdc42503          	lw	a0,-36(s0)
80007f04:	528000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_GAMMASET, this_gpio );//Gamma curve sel
80007f08:	fd842603          	lw	a2,-40(s0)
80007f0c:	02600593          	li	a1,38
80007f10:	fdc42503          	lw	a0,-36(s0)
80007f14:	4b4000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x01, this_gpio );
80007f18:	fd842603          	lw	a2,-40(s0)
80007f1c:	00100593          	li	a1,1
80007f20:	fdc42503          	lw	a0,-36(s0)
80007f24:	508000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_GMCTRP1, this_gpio );    //Set Gamma
80007f28:	fd842603          	lw	a2,-40(s0)
80007f2c:	0e000593          	li	a1,224
80007f30:	fdc42503          	lw	a0,-36(s0)
80007f34:	494000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x0F , this_gpio );
80007f38:	fd842603          	lw	a2,-40(s0)
80007f3c:	00f00593          	li	a1,15
80007f40:	fdc42503          	lw	a0,-36(s0)
80007f44:	4e8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x31 , this_gpio );
80007f48:	fd842603          	lw	a2,-40(s0)
80007f4c:	03100593          	li	a1,49
80007f50:	fdc42503          	lw	a0,-36(s0)
80007f54:	4d8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x2B , this_gpio );
80007f58:	fd842603          	lw	a2,-40(s0)
80007f5c:	02b00593          	li	a1,43
80007f60:	fdc42503          	lw	a0,-36(s0)
80007f64:	4c8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x0C , this_gpio );
80007f68:	fd842603          	lw	a2,-40(s0)
80007f6c:	00c00593          	li	a1,12
80007f70:	fdc42503          	lw	a0,-36(s0)
80007f74:	4b8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x0E , this_gpio );
80007f78:	fd842603          	lw	a2,-40(s0)
80007f7c:	00e00593          	li	a1,14
80007f80:	fdc42503          	lw	a0,-36(s0)
80007f84:	4a8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x08 , this_gpio );
80007f88:	fd842603          	lw	a2,-40(s0)
80007f8c:	00800593          	li	a1,8
80007f90:	fdc42503          	lw	a0,-36(s0)
80007f94:	498000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x4E, this_gpio  );
80007f98:	fd842603          	lw	a2,-40(s0)
80007f9c:	04e00593          	li	a1,78
80007fa0:	fdc42503          	lw	a0,-36(s0)
80007fa4:	488000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0xF1 , this_gpio );
80007fa8:	fd842603          	lw	a2,-40(s0)
80007fac:	0f100593          	li	a1,241
80007fb0:	fdc42503          	lw	a0,-36(s0)
80007fb4:	478000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x37 , this_gpio );
80007fb8:	fd842603          	lw	a2,-40(s0)
80007fbc:	03700593          	li	a1,55
80007fc0:	fdc42503          	lw	a0,-36(s0)
80007fc4:	468000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x07 , this_gpio );
80007fc8:	fd842603          	lw	a2,-40(s0)
80007fcc:	00700593          	li	a1,7
80007fd0:	fdc42503          	lw	a0,-36(s0)
80007fd4:	458000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x10 , this_gpio );
80007fd8:	fd842603          	lw	a2,-40(s0)
80007fdc:	01000593          	li	a1,16
80007fe0:	fdc42503          	lw	a0,-36(s0)
80007fe4:	448000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x03 , this_gpio );
80007fe8:	fd842603          	lw	a2,-40(s0)
80007fec:	00300593          	li	a1,3
80007ff0:	fdc42503          	lw	a0,-36(s0)
80007ff4:	438000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x0E , this_gpio );
80007ff8:	fd842603          	lw	a2,-40(s0)
80007ffc:	00e00593          	li	a1,14
80008000:	fdc42503          	lw	a0,-36(s0)
80008004:	428000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x09 , this_gpio );
80008008:	fd842603          	lw	a2,-40(s0)
8000800c:	00900593          	li	a1,9
80008010:	fdc42503          	lw	a0,-36(s0)
80008014:	418000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x00 , this_gpio );
80008018:	fd842603          	lw	a2,-40(s0)
8000801c:	00000593          	li	a1,0
80008020:	fdc42503          	lw	a0,-36(s0)
80008024:	408000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_GMCTRN1, this_gpio );    //Set Gamma
80008028:	fd842603          	lw	a2,-40(s0)
8000802c:	0e100593          	li	a1,225
80008030:	fdc42503          	lw	a0,-36(s0)
80008034:	394000ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, 0x00, this_gpio  );
80008038:	fd842603          	lw	a2,-40(s0)
8000803c:	00000593          	li	a1,0
80008040:	fdc42503          	lw	a0,-36(s0)
80008044:	3e8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x0E, this_gpio );
80008048:	fd842603          	lw	a2,-40(s0)
8000804c:	00e00593          	li	a1,14
80008050:	fdc42503          	lw	a0,-36(s0)
80008054:	3d8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x14 , this_gpio );
80008058:	fd842603          	lw	a2,-40(s0)
8000805c:	01400593          	li	a1,20
80008060:	fdc42503          	lw	a0,-36(s0)
80008064:	3c8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x03, this_gpio  );
80008068:	fd842603          	lw	a2,-40(s0)
8000806c:	00300593          	li	a1,3
80008070:	fdc42503          	lw	a0,-36(s0)
80008074:	3b8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x11 , this_gpio );
80008078:	fd842603          	lw	a2,-40(s0)
8000807c:	01100593          	li	a1,17
80008080:	fdc42503          	lw	a0,-36(s0)
80008084:	3a8000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x07 , this_gpio );
80008088:	fd842603          	lw	a2,-40(s0)
8000808c:	00700593          	li	a1,7
80008090:	fdc42503          	lw	a0,-36(s0)
80008094:	398000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x31 , this_gpio );
80008098:	fd842603          	lw	a2,-40(s0)
8000809c:	03100593          	li	a1,49
800080a0:	fdc42503          	lw	a0,-36(s0)
800080a4:	388000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0xC1 , this_gpio );
800080a8:	fd842603          	lw	a2,-40(s0)
800080ac:	0c100593          	li	a1,193
800080b0:	fdc42503          	lw	a0,-36(s0)
800080b4:	378000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x48, this_gpio  );
800080b8:	fd842603          	lw	a2,-40(s0)
800080bc:	04800593          	li	a1,72
800080c0:	fdc42503          	lw	a0,-36(s0)
800080c4:	368000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x08, this_gpio  );
800080c8:	fd842603          	lw	a2,-40(s0)
800080cc:	00800593          	li	a1,8
800080d0:	fdc42503          	lw	a0,-36(s0)
800080d4:	358000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x0F, this_gpio  );
800080d8:	fd842603          	lw	a2,-40(s0)
800080dc:	00f00593          	li	a1,15
800080e0:	fdc42503          	lw	a0,-36(s0)
800080e4:	348000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x0C , this_gpio );
800080e8:	fd842603          	lw	a2,-40(s0)
800080ec:	00c00593          	li	a1,12
800080f0:	fdc42503          	lw	a0,-36(s0)
800080f4:	338000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x31 , this_gpio );
800080f8:	fd842603          	lw	a2,-40(s0)
800080fc:	03100593          	li	a1,49
80008100:	fdc42503          	lw	a0,-36(s0)
80008104:	328000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x36 , this_gpio );
80008108:	fd842603          	lw	a2,-40(s0)
8000810c:	03600593          	li	a1,54
80008110:	fdc42503          	lw	a0,-36(s0)
80008114:	318000ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, 0x0F , this_gpio );
80008118:	fd842603          	lw	a2,-40(s0)
8000811c:	00f00593          	li	a1,15
80008120:	fdc42503          	lw	a0,-36(s0)
80008124:	308000ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi, ILI9341_SLPOUT, this_gpio );
80008128:	fd842603          	lw	a2,-40(s0)
8000812c:	01100593          	li	a1,17
80008130:	fdc42503          	lw	a0,-36(s0)
80008134:	294000ef          	jal	ra,800083c8 <TFT_writecommand>
    for(volatile uint16_t x=0; x<0xfff; x++){} /// delay
80008138:	fe041523          	sh	zero,-22(s0)
8000813c:	0200006f          	j	8000815c <TFT_begin+0x624>
80008140:	fea45783          	lhu	a5,-22(s0)
80008144:	01079793          	slli	a5,a5,0x10
80008148:	0107d793          	srli	a5,a5,0x10
8000814c:	00178793          	addi	a5,a5,1
80008150:	01079793          	slli	a5,a5,0x10
80008154:	0107d793          	srli	a5,a5,0x10
80008158:	fef41523          	sh	a5,-22(s0)
8000815c:	fea45783          	lhu	a5,-22(s0)
80008160:	01079713          	slli	a4,a5,0x10
80008164:	01075713          	srli	a4,a4,0x10
80008168:	000017b7          	lui	a5,0x1
8000816c:	ffe78793          	addi	a5,a5,-2 # ffe <HEAP_SIZE+0x7fe>
80008170:	fce7f8e3          	bleu	a4,a5,80008140 <TFT_begin+0x608>
    TFT_writecommand( this_spi, ILI9341_DISPON, this_gpio );
80008174:	fd842603          	lw	a2,-40(s0)
80008178:	02900593          	li	a1,41
8000817c:	fdc42503          	lw	a0,-36(s0)
80008180:	248000ef          	jal	ra,800083c8 <TFT_writecommand>
    for(volatile uint16_t x=0; x<0xfff; x++){} /// delay
80008184:	fe041423          	sh	zero,-24(s0)
80008188:	0200006f          	j	800081a8 <TFT_begin+0x670>
8000818c:	fe845783          	lhu	a5,-24(s0)
80008190:	01079793          	slli	a5,a5,0x10
80008194:	0107d793          	srli	a5,a5,0x10
80008198:	00178793          	addi	a5,a5,1
8000819c:	01079793          	slli	a5,a5,0x10
800081a0:	0107d793          	srli	a5,a5,0x10
800081a4:	fef41423          	sh	a5,-24(s0)
800081a8:	fe845783          	lhu	a5,-24(s0)
800081ac:	01079713          	slli	a4,a5,0x10
800081b0:	01075713          	srli	a4,a4,0x10
800081b4:	000017b7          	lui	a5,0x1
800081b8:	ffe78793          	addi	a5,a5,-2 # ffe <HEAP_SIZE+0x7fe>
800081bc:	fce7f8e3          	bleu	a4,a5,8000818c <TFT_begin+0x654>
}
800081c0:	00000013          	nop
800081c4:	02c12083          	lw	ra,44(sp)
800081c8:	02812403          	lw	s0,40(sp)
800081cc:	03010113          	addi	sp,sp,48
800081d0:	00008067          	ret

Disassembly of section .text.TFT_fillrect:

800081d4 <TFT_fillrect>:
	int16_t width,
	int16_t height,
	gpio_instance_t * this_gpio,
	uint16_t colour
)
{
800081d4:	fc010113          	addi	sp,sp,-64
800081d8:	02112e23          	sw	ra,60(sp)
800081dc:	02812c23          	sw	s0,56(sp)
800081e0:	04010413          	addi	s0,sp,64
800081e4:	fca42e23          	sw	a0,-36(s0)
800081e8:	fcf42823          	sw	a5,-48(s0)
800081ec:	00080793          	mv	a5,a6
800081f0:	fcb41d23          	sh	a1,-38(s0)
800081f4:	fcc41c23          	sh	a2,-40(s0)
800081f8:	fcd41b23          	sh	a3,-42(s0)
800081fc:	fce41a23          	sh	a4,-44(s0)
80008200:	fcf41723          	sh	a5,-50(s0)
    if (xpt >= TFT_WIDTH) width = TFT_WIDTH - xpt;
80008204:	fda41703          	lh	a4,-38(s0)
80008208:	0ef00793          	li	a5,239
8000820c:	00e7de63          	ble	a4,a5,80008228 <TFT_fillrect+0x54>
80008210:	fda45783          	lhu	a5,-38(s0)
80008214:	0f000713          	li	a4,240
80008218:	40f707b3          	sub	a5,a4,a5
8000821c:	01079793          	slli	a5,a5,0x10
80008220:	0107d793          	srli	a5,a5,0x10
80008224:	fcf41b23          	sh	a5,-42(s0)
    if (xpt >= TFT_HEIGHT) height = TFT_HEIGHT - ypt;
80008228:	fda41703          	lh	a4,-38(s0)
8000822c:	13f00793          	li	a5,319
80008230:	00e7de63          	ble	a4,a5,8000824c <TFT_fillrect+0x78>
80008234:	fd845783          	lhu	a5,-40(s0)
80008238:	14000713          	li	a4,320
8000823c:	40f707b3          	sub	a5,a4,a5
80008240:	01079793          	slli	a5,a5,0x10
80008244:	0107d793          	srli	a5,a5,0x10
80008248:	fcf41a23          	sh	a5,-44(s0)

    TFT_setAddrWindow(this_spi, xpt, ypt, xpt+width-1, ypt+height-1, this_gpio);
8000824c:	fda45583          	lhu	a1,-38(s0)
80008250:	fd845603          	lhu	a2,-40(s0)
80008254:	fda45703          	lhu	a4,-38(s0)
80008258:	fd645783          	lhu	a5,-42(s0)
8000825c:	00f707b3          	add	a5,a4,a5
80008260:	01079793          	slli	a5,a5,0x10
80008264:	0107d793          	srli	a5,a5,0x10
80008268:	fff78793          	addi	a5,a5,-1
8000826c:	01079693          	slli	a3,a5,0x10
80008270:	0106d693          	srli	a3,a3,0x10
80008274:	fd845703          	lhu	a4,-40(s0)
80008278:	fd445783          	lhu	a5,-44(s0)
8000827c:	00f707b3          	add	a5,a4,a5
80008280:	01079793          	slli	a5,a5,0x10
80008284:	0107d793          	srli	a5,a5,0x10
80008288:	fff78793          	addi	a5,a5,-1
8000828c:	01079713          	slli	a4,a5,0x10
80008290:	01075713          	srli	a4,a4,0x10
80008294:	fd042783          	lw	a5,-48(s0)
80008298:	fdc42503          	lw	a0,-36(s0)
8000829c:	1e4000ef          	jal	ra,80008480 <TFT_setAddrWindow>
    int8_t colour_msb = colour >> 8;
800082a0:	fce45783          	lhu	a5,-50(s0)
800082a4:	0087d793          	srli	a5,a5,0x8
800082a8:	01079793          	slli	a5,a5,0x10
800082ac:	0107d793          	srli	a5,a5,0x10
800082b0:	fef407a3          	sb	a5,-17(s0)
    int8_t colour_lsb = colour;
800082b4:	fce45783          	lhu	a5,-50(s0)
800082b8:	fef40723          	sb	a5,-18(s0)

    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
800082bc:	00100613          	li	a2,1
800082c0:	00400593          	li	a1,4
800082c4:	fd042503          	lw	a0,-48(s0)
800082c8:	b9dfb0ef          	jal	ra,80003e64 <GPIO_set_output>

    for(ypt = height; ypt >0; ypt--)
800082cc:	fd445783          	lhu	a5,-44(s0)
800082d0:	fcf41c23          	sh	a5,-40(s0)
800082d4:	0700006f          	j	80008344 <TFT_fillrect+0x170>
    {
        for( xpt = width; xpt > 0; xpt--)
800082d8:	fd645783          	lhu	a5,-42(s0)
800082dc:	fcf41d23          	sh	a5,-38(s0)
800082e0:	0400006f          	j	80008320 <TFT_fillrect+0x14c>
        {
            TFT_spiwrite( this_spi, colour_msb );
800082e4:	fef44783          	lbu	a5,-17(s0)
800082e8:	00078593          	mv	a1,a5
800082ec:	fdc42503          	lw	a0,-36(s0)
800082f0:	ff0ff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
            TFT_spiwrite( this_spi, colour_lsb );
800082f4:	fee44783          	lbu	a5,-18(s0)
800082f8:	00078593          	mv	a1,a5
800082fc:	fdc42503          	lw	a0,-36(s0)
80008300:	fe0ff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
        for( xpt = width; xpt > 0; xpt--)
80008304:	fda41783          	lh	a5,-38(s0)
80008308:	01079793          	slli	a5,a5,0x10
8000830c:	0107d793          	srli	a5,a5,0x10
80008310:	fff78793          	addi	a5,a5,-1
80008314:	01079793          	slli	a5,a5,0x10
80008318:	0107d793          	srli	a5,a5,0x10
8000831c:	fcf41d23          	sh	a5,-38(s0)
80008320:	fda41783          	lh	a5,-38(s0)
80008324:	fcf040e3          	bgtz	a5,800082e4 <TFT_fillrect+0x110>
    for(ypt = height; ypt >0; ypt--)
80008328:	fd841783          	lh	a5,-40(s0)
8000832c:	01079793          	slli	a5,a5,0x10
80008330:	0107d793          	srli	a5,a5,0x10
80008334:	fff78793          	addi	a5,a5,-1
80008338:	01079793          	slli	a5,a5,0x10
8000833c:	0107d793          	srli	a5,a5,0x10
80008340:	fcf41c23          	sh	a5,-40(s0)
80008344:	fd841783          	lh	a5,-40(s0)
80008348:	f8f048e3          	bgtz	a5,800082d8 <TFT_fillrect+0x104>
        }
    }
    GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal
8000834c:	00100613          	li	a2,1
80008350:	00500593          	li	a1,5
80008354:	fd042503          	lw	a0,-48(s0)
80008358:	b0dfb0ef          	jal	ra,80003e64 <GPIO_set_output>
}
8000835c:	00000013          	nop
80008360:	03c12083          	lw	ra,60(sp)
80008364:	03812403          	lw	s0,56(sp)
80008368:	04010113          	addi	sp,sp,64
8000836c:	00008067          	ret

Disassembly of section .text.TFT_fillScreen:

80008370 <TFT_fillScreen>:
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio,
	uint16_t colour
)
{
80008370:	fe010113          	addi	sp,sp,-32
80008374:	00112e23          	sw	ra,28(sp)
80008378:	00812c23          	sw	s0,24(sp)
8000837c:	02010413          	addi	s0,sp,32
80008380:	fea42623          	sw	a0,-20(s0)
80008384:	feb42423          	sw	a1,-24(s0)
80008388:	00060793          	mv	a5,a2
8000838c:	fef41323          	sh	a5,-26(s0)
	TFT_fillrect(this_spi, 0,0, TFT_WIDTH, TFT_HEIGHT,this_gpio,colour);
80008390:	fe645783          	lhu	a5,-26(s0)
80008394:	00078813          	mv	a6,a5
80008398:	fe842783          	lw	a5,-24(s0)
8000839c:	14000713          	li	a4,320
800083a0:	0f000693          	li	a3,240
800083a4:	00000613          	li	a2,0
800083a8:	00000593          	li	a1,0
800083ac:	fec42503          	lw	a0,-20(s0)
800083b0:	e25ff0ef          	jal	ra,800081d4 <TFT_fillrect>
}
800083b4:	00000013          	nop
800083b8:	01c12083          	lw	ra,28(sp)
800083bc:	01812403          	lw	s0,24(sp)
800083c0:	02010113          	addi	sp,sp,32
800083c4:	00008067          	ret

Disassembly of section .text.TFT_writecommand:

800083c8 <TFT_writecommand>:
(
	spi_instance_t * this_spi,
	uint8_t data_bits,
	gpio_instance_t * this_gpio
)
{
800083c8:	fe010113          	addi	sp,sp,-32
800083cc:	00112e23          	sw	ra,28(sp)
800083d0:	00812c23          	sw	s0,24(sp)
800083d4:	02010413          	addi	s0,sp,32
800083d8:	fea42623          	sw	a0,-20(s0)
800083dc:	00058793          	mv	a5,a1
800083e0:	fec42223          	sw	a2,-28(s0)
800083e4:	fef405a3          	sb	a5,-21(s0)
    GPIO_set_output( this_gpio, GPIO_4, 0 ); // Data Command Signal
800083e8:	00000613          	li	a2,0
800083ec:	00400593          	li	a1,4
800083f0:	fe442503          	lw	a0,-28(s0)
800083f4:	a71fb0ef          	jal	ra,80003e64 <GPIO_set_output>
    TFT_spiwrite( this_spi, data_bits );
800083f8:	feb44783          	lbu	a5,-21(s0)
800083fc:	00078593          	mv	a1,a5
80008400:	fec42503          	lw	a0,-20(s0)
80008404:	edcff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
80008408:	00100613          	li	a2,1
8000840c:	00400593          	li	a1,4
80008410:	fe442503          	lw	a0,-28(s0)
80008414:	a51fb0ef          	jal	ra,80003e64 <GPIO_set_output>
}
80008418:	00000013          	nop
8000841c:	01c12083          	lw	ra,28(sp)
80008420:	01812403          	lw	s0,24(sp)
80008424:	02010113          	addi	sp,sp,32
80008428:	00008067          	ret

Disassembly of section .text.TFT_writedata:

8000842c <TFT_writedata>:
(
	spi_instance_t * this_spi,
	uint8_t c,
	gpio_instance_t * this_gpio
)
{
8000842c:	fe010113          	addi	sp,sp,-32
80008430:	00112e23          	sw	ra,28(sp)
80008434:	00812c23          	sw	s0,24(sp)
80008438:	02010413          	addi	s0,sp,32
8000843c:	fea42623          	sw	a0,-20(s0)
80008440:	00058793          	mv	a5,a1
80008444:	fec42223          	sw	a2,-28(s0)
80008448:	fef405a3          	sb	a5,-21(s0)

    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
8000844c:	00100613          	li	a2,1
80008450:	00400593          	li	a1,4
80008454:	fe442503          	lw	a0,-28(s0)
80008458:	a0dfb0ef          	jal	ra,80003e64 <GPIO_set_output>
    TFT_spiwrite( this_spi, c );
8000845c:	feb44783          	lbu	a5,-21(s0)
80008460:	00078593          	mv	a1,a5
80008464:	fec42503          	lw	a0,-20(s0)
80008468:	e78ff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
}
8000846c:	00000013          	nop
80008470:	01c12083          	lw	ra,28(sp)
80008474:	01812403          	lw	s0,24(sp)
80008478:	02010113          	addi	sp,sp,32
8000847c:	00008067          	ret

Disassembly of section .text.TFT_setAddrWindow:

80008480 <TFT_setAddrWindow>:
	uint16_t y_zero,
    uint16_t x_one,
	uint16_t y_one,
	gpio_instance_t * this_gpio
)
{
80008480:	fe010113          	addi	sp,sp,-32
80008484:	00112e23          	sw	ra,28(sp)
80008488:	00812c23          	sw	s0,24(sp)
8000848c:	02010413          	addi	s0,sp,32
80008490:	fea42623          	sw	a0,-20(s0)
80008494:	fef42023          	sw	a5,-32(s0)
80008498:	feb41523          	sh	a1,-22(s0)
8000849c:	fec41423          	sh	a2,-24(s0)
800084a0:	fed41323          	sh	a3,-26(s0)
800084a4:	fee41223          	sh	a4,-28(s0)
    TFT_writecommand( this_spi,  ILI9341_CASET, this_gpio );
800084a8:	fe042603          	lw	a2,-32(s0)
800084ac:	02a00593          	li	a1,42
800084b0:	fec42503          	lw	a0,-20(s0)
800084b4:	f15ff0ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, (x_zero >> 8), this_gpio );
800084b8:	fea45783          	lhu	a5,-22(s0)
800084bc:	0087d793          	srli	a5,a5,0x8
800084c0:	01079793          	slli	a5,a5,0x10
800084c4:	0107d793          	srli	a5,a5,0x10
800084c8:	0ff7f793          	andi	a5,a5,255
800084cc:	fe042603          	lw	a2,-32(s0)
800084d0:	00078593          	mv	a1,a5
800084d4:	fec42503          	lw	a0,-20(s0)
800084d8:	f55ff0ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, (x_zero & 0xFF), this_gpio );
800084dc:	fea45783          	lhu	a5,-22(s0)
800084e0:	0ff7f793          	andi	a5,a5,255
800084e4:	fe042603          	lw	a2,-32(s0)
800084e8:	00078593          	mv	a1,a5
800084ec:	fec42503          	lw	a0,-20(s0)
800084f0:	f3dff0ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, (x_one >> 8), this_gpio );
800084f4:	fe645783          	lhu	a5,-26(s0)
800084f8:	0087d793          	srli	a5,a5,0x8
800084fc:	01079793          	slli	a5,a5,0x10
80008500:	0107d793          	srli	a5,a5,0x10
80008504:	0ff7f793          	andi	a5,a5,255
80008508:	fe042603          	lw	a2,-32(s0)
8000850c:	00078593          	mv	a1,a5
80008510:	fec42503          	lw	a0,-20(s0)
80008514:	f19ff0ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, (x_one & 0xFF), this_gpio );
80008518:	fe645783          	lhu	a5,-26(s0)
8000851c:	0ff7f793          	andi	a5,a5,255
80008520:	fe042603          	lw	a2,-32(s0)
80008524:	00078593          	mv	a1,a5
80008528:	fec42503          	lw	a0,-20(s0)
8000852c:	f01ff0ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi,  ILI9341_PASET, this_gpio );
80008530:	fe042603          	lw	a2,-32(s0)
80008534:	02b00593          	li	a1,43
80008538:	fec42503          	lw	a0,-20(s0)
8000853c:	e8dff0ef          	jal	ra,800083c8 <TFT_writecommand>
    TFT_writedata( this_spi, (y_zero >> 8), this_gpio );
80008540:	fe845783          	lhu	a5,-24(s0)
80008544:	0087d793          	srli	a5,a5,0x8
80008548:	01079793          	slli	a5,a5,0x10
8000854c:	0107d793          	srli	a5,a5,0x10
80008550:	0ff7f793          	andi	a5,a5,255
80008554:	fe042603          	lw	a2,-32(s0)
80008558:	00078593          	mv	a1,a5
8000855c:	fec42503          	lw	a0,-20(s0)
80008560:	ecdff0ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, (y_zero & 0xFF), this_gpio );
80008564:	fe845783          	lhu	a5,-24(s0)
80008568:	0ff7f793          	andi	a5,a5,255
8000856c:	fe042603          	lw	a2,-32(s0)
80008570:	00078593          	mv	a1,a5
80008574:	fec42503          	lw	a0,-20(s0)
80008578:	eb5ff0ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, (y_one >> 8), this_gpio );
8000857c:	fe445783          	lhu	a5,-28(s0)
80008580:	0087d793          	srli	a5,a5,0x8
80008584:	01079793          	slli	a5,a5,0x10
80008588:	0107d793          	srli	a5,a5,0x10
8000858c:	0ff7f793          	andi	a5,a5,255
80008590:	fe042603          	lw	a2,-32(s0)
80008594:	00078593          	mv	a1,a5
80008598:	fec42503          	lw	a0,-20(s0)
8000859c:	e91ff0ef          	jal	ra,8000842c <TFT_writedata>
    TFT_writedata( this_spi, (y_one & 0xFF), this_gpio );
800085a0:	fe445783          	lhu	a5,-28(s0)
800085a4:	0ff7f793          	andi	a5,a5,255
800085a8:	fe042603          	lw	a2,-32(s0)
800085ac:	00078593          	mv	a1,a5
800085b0:	fec42503          	lw	a0,-20(s0)
800085b4:	e79ff0ef          	jal	ra,8000842c <TFT_writedata>

    TFT_writecommand( this_spi,  ILI9341_RAMWR, this_gpio );
800085b8:	fe042603          	lw	a2,-32(s0)
800085bc:	02c00593          	li	a1,44
800085c0:	fec42503          	lw	a0,-20(s0)
800085c4:	e05ff0ef          	jal	ra,800083c8 <TFT_writecommand>
}
800085c8:	00000013          	nop
800085cc:	01c12083          	lw	ra,28(sp)
800085d0:	01812403          	lw	s0,24(sp)
800085d4:	02010113          	addi	sp,sp,32
800085d8:	00008067          	ret

Disassembly of section .text.TFT_fastVLine:

800085dc <TFT_fastVLine>:
	int16_t pos_y,
	int16_t height,
	int16_t colour,
	gpio_instance_t * this_gpio
)
{
800085dc:	fd010113          	addi	sp,sp,-48
800085e0:	02112623          	sw	ra,44(sp)
800085e4:	02812423          	sw	s0,40(sp)
800085e8:	03010413          	addi	s0,sp,48
800085ec:	fca42e23          	sw	a0,-36(s0)
800085f0:	fcf42823          	sw	a5,-48(s0)
800085f4:	fcb41d23          	sh	a1,-38(s0)
800085f8:	fcc41c23          	sh	a2,-40(s0)
800085fc:	fcd41b23          	sh	a3,-42(s0)
80008600:	fce41a23          	sh	a4,-44(s0)
    if((pos_x >= TFT_WIDTH) || (pos_y >= TFT_HEIGHT)) return;
80008604:	fda41703          	lh	a4,-38(s0)
80008608:	0ef00793          	li	a5,239
8000860c:	0ee7c663          	blt	a5,a4,800086f8 <TFT_fastVLine+0x11c>
80008610:	fd841703          	lh	a4,-40(s0)
80008614:	13f00793          	li	a5,319
80008618:	0ee7c063          	blt	a5,a4,800086f8 <TFT_fastVLine+0x11c>

    if((pos_y+height-1) >= TFT_HEIGHT)
8000861c:	fd841703          	lh	a4,-40(s0)
80008620:	fd641783          	lh	a5,-42(s0)
80008624:	00f707b3          	add	a5,a4,a5
80008628:	fff78713          	addi	a4,a5,-1
8000862c:	13f00793          	li	a5,319
80008630:	00e7de63          	ble	a4,a5,8000864c <TFT_fastVLine+0x70>
        height = TFT_HEIGHT -pos_y;
80008634:	fd845783          	lhu	a5,-40(s0)
80008638:	14000713          	li	a4,320
8000863c:	40f707b3          	sub	a5,a4,a5
80008640:	01079793          	slli	a5,a5,0x10
80008644:	0107d793          	srli	a5,a5,0x10
80008648:	fcf41b23          	sh	a5,-42(s0)

    TFT_setAddrWindow(this_spi, pos_x, pos_y, pos_x, pos_y+height-1, this_gpio);
8000864c:	fda45583          	lhu	a1,-38(s0)
80008650:	fd845603          	lhu	a2,-40(s0)
80008654:	fda45683          	lhu	a3,-38(s0)
80008658:	fd845703          	lhu	a4,-40(s0)
8000865c:	fd645783          	lhu	a5,-42(s0)
80008660:	00f707b3          	add	a5,a4,a5
80008664:	01079793          	slli	a5,a5,0x10
80008668:	0107d793          	srli	a5,a5,0x10
8000866c:	fff78793          	addi	a5,a5,-1
80008670:	01079713          	slli	a4,a5,0x10
80008674:	01075713          	srli	a4,a4,0x10
80008678:	fd042783          	lw	a5,-48(s0)
8000867c:	fdc42503          	lw	a0,-36(s0)
80008680:	e01ff0ef          	jal	ra,80008480 <TFT_setAddrWindow>
    uint8_t colour_msb = colour >> 8;
80008684:	fd441783          	lh	a5,-44(s0)
80008688:	4087d793          	srai	a5,a5,0x8
8000868c:	01079793          	slli	a5,a5,0x10
80008690:	4107d793          	srai	a5,a5,0x10
80008694:	fef407a3          	sb	a5,-17(s0)
    uint8_t colour_lsb = colour;
80008698:	fd445783          	lhu	a5,-44(s0)
8000869c:	fef40723          	sb	a5,-18(s0)

    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
800086a0:	00100613          	li	a2,1
800086a4:	00400593          	li	a1,4
800086a8:	fd042503          	lw	a0,-48(s0)
800086ac:	fb8fb0ef          	jal	ra,80003e64 <GPIO_set_output>

    while(height --)
800086b0:	0240006f          	j	800086d4 <TFT_fastVLine+0xf8>
    {
        TFT_spiwrite( this_spi,colour_msb );
800086b4:	fef44783          	lbu	a5,-17(s0)
800086b8:	00078593          	mv	a1,a5
800086bc:	fdc42503          	lw	a0,-36(s0)
800086c0:	c20ff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
        TFT_spiwrite( this_spi, colour_lsb);
800086c4:	fee44783          	lbu	a5,-18(s0)
800086c8:	00078593          	mv	a1,a5
800086cc:	fdc42503          	lw	a0,-36(s0)
800086d0:	c10ff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
    while(height --)
800086d4:	fd641783          	lh	a5,-42(s0)
800086d8:	01079713          	slli	a4,a5,0x10
800086dc:	01075713          	srli	a4,a4,0x10
800086e0:	fff70713          	addi	a4,a4,-1
800086e4:	01071713          	slli	a4,a4,0x10
800086e8:	01075713          	srli	a4,a4,0x10
800086ec:	fce41b23          	sh	a4,-42(s0)
800086f0:	fc0792e3          	bnez	a5,800086b4 <TFT_fastVLine+0xd8>
800086f4:	0080006f          	j	800086fc <TFT_fastVLine+0x120>
    if((pos_x >= TFT_WIDTH) || (pos_y >= TFT_HEIGHT)) return;
800086f8:	00000013          	nop
    }

}
800086fc:	02c12083          	lw	ra,44(sp)
80008700:	02812403          	lw	s0,40(sp)
80008704:	03010113          	addi	sp,sp,48
80008708:	00008067          	ret

Disassembly of section .text.TFT_fastHLine:

8000870c <TFT_fastHLine>:
	int16_t pos_y,
	int16_t width,
	int16_t colour,
	gpio_instance_t * this_gpio
)
{
8000870c:	fd010113          	addi	sp,sp,-48
80008710:	02112623          	sw	ra,44(sp)
80008714:	02812423          	sw	s0,40(sp)
80008718:	03010413          	addi	s0,sp,48
8000871c:	fca42e23          	sw	a0,-36(s0)
80008720:	fcf42823          	sw	a5,-48(s0)
80008724:	fcb41d23          	sh	a1,-38(s0)
80008728:	fcc41c23          	sh	a2,-40(s0)
8000872c:	fcd41b23          	sh	a3,-42(s0)
80008730:	fce41a23          	sh	a4,-44(s0)
    if((pos_x >= TFT_WIDTH) || (pos_y >= TFT_HEIGHT)) return;
80008734:	fda41703          	lh	a4,-38(s0)
80008738:	0ef00793          	li	a5,239
8000873c:	0ee7c663          	blt	a5,a4,80008828 <TFT_fastHLine+0x11c>
80008740:	fd841703          	lh	a4,-40(s0)
80008744:	13f00793          	li	a5,319
80008748:	0ee7c063          	blt	a5,a4,80008828 <TFT_fastHLine+0x11c>

    if((pos_x+width-1) >= TFT_WIDTH)
8000874c:	fda41703          	lh	a4,-38(s0)
80008750:	fd641783          	lh	a5,-42(s0)
80008754:	00f707b3          	add	a5,a4,a5
80008758:	fff78713          	addi	a4,a5,-1
8000875c:	0ef00793          	li	a5,239
80008760:	00e7de63          	ble	a4,a5,8000877c <TFT_fastHLine+0x70>
        width = TFT_WIDTH -pos_x;
80008764:	fda45783          	lhu	a5,-38(s0)
80008768:	0f000713          	li	a4,240
8000876c:	40f707b3          	sub	a5,a4,a5
80008770:	01079793          	slli	a5,a5,0x10
80008774:	0107d793          	srli	a5,a5,0x10
80008778:	fcf41b23          	sh	a5,-42(s0)

    TFT_setAddrWindow( this_spi,pos_x, pos_y, pos_x+width-1, pos_y,  this_gpio);
8000877c:	fda45583          	lhu	a1,-38(s0)
80008780:	fd845603          	lhu	a2,-40(s0)
80008784:	fda45703          	lhu	a4,-38(s0)
80008788:	fd645783          	lhu	a5,-42(s0)
8000878c:	00f707b3          	add	a5,a4,a5
80008790:	01079793          	slli	a5,a5,0x10
80008794:	0107d793          	srli	a5,a5,0x10
80008798:	fff78793          	addi	a5,a5,-1
8000879c:	01079693          	slli	a3,a5,0x10
800087a0:	0106d693          	srli	a3,a3,0x10
800087a4:	fd845703          	lhu	a4,-40(s0)
800087a8:	fd042783          	lw	a5,-48(s0)
800087ac:	fdc42503          	lw	a0,-36(s0)
800087b0:	cd1ff0ef          	jal	ra,80008480 <TFT_setAddrWindow>
    uint8_t colour_msb = colour >> 8;
800087b4:	fd441783          	lh	a5,-44(s0)
800087b8:	4087d793          	srai	a5,a5,0x8
800087bc:	01079793          	slli	a5,a5,0x10
800087c0:	4107d793          	srai	a5,a5,0x10
800087c4:	fef407a3          	sb	a5,-17(s0)
    uint8_t colour_lsb = colour;
800087c8:	fd445783          	lhu	a5,-44(s0)
800087cc:	fef40723          	sb	a5,-18(s0)

    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
800087d0:	00100613          	li	a2,1
800087d4:	00400593          	li	a1,4
800087d8:	fd042503          	lw	a0,-48(s0)
800087dc:	e88fb0ef          	jal	ra,80003e64 <GPIO_set_output>

    while(width --)
800087e0:	0240006f          	j	80008804 <TFT_fastHLine+0xf8>
    {
        TFT_spiwrite( this_spi,colour_msb);
800087e4:	fef44783          	lbu	a5,-17(s0)
800087e8:	00078593          	mv	a1,a5
800087ec:	fdc42503          	lw	a0,-36(s0)
800087f0:	af0ff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
        TFT_spiwrite(this_spi, colour_lsb );
800087f4:	fee44783          	lbu	a5,-18(s0)
800087f8:	00078593          	mv	a1,a5
800087fc:	fdc42503          	lw	a0,-36(s0)
80008800:	ae0ff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
    while(width --)
80008804:	fd641783          	lh	a5,-42(s0)
80008808:	01079713          	slli	a4,a5,0x10
8000880c:	01075713          	srli	a4,a4,0x10
80008810:	fff70713          	addi	a4,a4,-1
80008814:	01071713          	slli	a4,a4,0x10
80008818:	01075713          	srli	a4,a4,0x10
8000881c:	fce41b23          	sh	a4,-42(s0)
80008820:	fc0792e3          	bnez	a5,800087e4 <TFT_fastHLine+0xd8>
80008824:	0080006f          	j	8000882c <TFT_fastHLine+0x120>
    if((pos_x >= TFT_WIDTH) || (pos_y >= TFT_HEIGHT)) return;
80008828:	00000013          	nop
    }
}
8000882c:	02c12083          	lw	ra,44(sp)
80008830:	02812403          	lw	s0,40(sp)
80008834:	03010113          	addi	sp,sp,48
80008838:	00008067          	ret

Disassembly of section .text.testRead:

8000883c <testRead>:
testRead
(
	spi_instance_t * this_spi,
	gpio_instance_t * this_gpio
)
{
8000883c:	fd010113          	addi	sp,sp,-48
80008840:	02112623          	sw	ra,44(sp)
80008844:	02812423          	sw	s0,40(sp)
80008848:	03010413          	addi	s0,sp,48
8000884c:	fca42e23          	sw	a0,-36(s0)
80008850:	fcb42c23          	sw	a1,-40(s0)
    uint32_t master_rx ;//= 0x00000000;
    SPI_set_slave_select(this_spi, SPI_SLAVE_0);
80008854:	00000593          	li	a1,0
80008858:	fdc42503          	lw	a0,-36(s0)
8000885c:	dd4f90ef          	jal	ra,80001e30 <SPI_set_slave_select>
    GPIO_set_output( this_gpio, GPIO_4, 0 ); // Data Command Signal
80008860:	00000613          	li	a2,0
80008864:	00400593          	li	a1,4
80008868:	fd842503          	lw	a0,-40(s0)
8000886c:	df8fb0ef          	jal	ra,80003e64 <GPIO_set_output>
    //GPIO_set_output( this_gpio, GPIO_5, 0 ); // Chip Select Signal
    SPI_transfer_frame( this_spi, ILI9341_RDMODE );
80008870:	00a00593          	li	a1,10
80008874:	fdc42503          	lw	a0,-36(s0)
80008878:	f7cf90ef          	jal	ra,80001ff4 <SPI_transfer_frame>
    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
8000887c:	00100613          	li	a2,1
80008880:	00400593          	li	a1,4
80008884:	fd842503          	lw	a0,-40(s0)
80008888:	ddcfb0ef          	jal	ra,80003e64 <GPIO_set_output>
    master_rx = SPI_transfer_frame( this_spi, 0x00 );// Dont care
8000888c:	00000593          	li	a1,0
80008890:	fdc42503          	lw	a0,-36(s0)
80008894:	f60f90ef          	jal	ra,80001ff4 <SPI_transfer_frame>
80008898:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
8000889c:	00000593          	li	a1,0
800088a0:	fdc42503          	lw	a0,-36(s0)
800088a4:	f50f90ef          	jal	ra,80001ff4 <SPI_transfer_frame>
800088a8:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
800088ac:	00000593          	li	a1,0
800088b0:	fdc42503          	lw	a0,-36(s0)
800088b4:	f40f90ef          	jal	ra,80001ff4 <SPI_transfer_frame>
800088b8:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
800088bc:	00000593          	li	a1,0
800088c0:	fdc42503          	lw	a0,-36(s0)
800088c4:	f30f90ef          	jal	ra,80001ff4 <SPI_transfer_frame>
800088c8:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
800088cc:	00000593          	li	a1,0
800088d0:	fdc42503          	lw	a0,-36(s0)
800088d4:	f20f90ef          	jal	ra,80001ff4 <SPI_transfer_frame>
800088d8:	fea42623          	sw	a0,-20(s0)
    master_rx = SPI_transfer_frame( this_spi, 0x00 );
800088dc:	00000593          	li	a1,0
800088e0:	fdc42503          	lw	a0,-36(s0)
800088e4:	f10f90ef          	jal	ra,80001ff4 <SPI_transfer_frame>
800088e8:	fea42623          	sw	a0,-20(s0)
    SPI_clear_slave_select( this_spi, SPI_SLAVE_0 );
800088ec:	00000593          	li	a1,0
800088f0:	fdc42503          	lw	a0,-36(s0)
800088f4:	e1cf90ef          	jal	ra,80001f10 <SPI_clear_slave_select>
    //GPIO_set_output( this_gpio, GPIO_5, 1 ); // Chip Select Signal
    return master_rx;
800088f8:	fec42783          	lw	a5,-20(s0)
}
800088fc:	00078513          	mv	a0,a5
80008900:	02c12083          	lw	ra,44(sp)
80008904:	02812403          	lw	s0,40(sp)
80008908:	03010113          	addi	sp,sp,48
8000890c:	00008067          	ret

Disassembly of section .text.TFT_drawPixel:

80008910 <TFT_drawPixel>:
	int16_t xPt,
	int16_t yPt,
	uint16_t colour,
	gpio_instance_t * this_gpio
)
{
80008910:	fd010113          	addi	sp,sp,-48
80008914:	02112623          	sw	ra,44(sp)
80008918:	02812423          	sw	s0,40(sp)
8000891c:	03010413          	addi	s0,sp,48
80008920:	fca42e23          	sw	a0,-36(s0)
80008924:	00068793          	mv	a5,a3
80008928:	fce42823          	sw	a4,-48(s0)
8000892c:	fcb41d23          	sh	a1,-38(s0)
80008930:	fcc41c23          	sh	a2,-40(s0)
80008934:	fcf41b23          	sh	a5,-42(s0)
    if ((xPt < 0)||(xPt >= TFT_WIDTH)||(yPt < 0)||(yPt >= TFT_HEIGHT)) return;
80008938:	fda41783          	lh	a5,-38(s0)
8000893c:	0a07c863          	bltz	a5,800089ec <TFT_drawPixel+0xdc>
80008940:	fda41703          	lh	a4,-38(s0)
80008944:	0ef00793          	li	a5,239
80008948:	0ae7c263          	blt	a5,a4,800089ec <TFT_drawPixel+0xdc>
8000894c:	fd841783          	lh	a5,-40(s0)
80008950:	0807ce63          	bltz	a5,800089ec <TFT_drawPixel+0xdc>
80008954:	fd841703          	lh	a4,-40(s0)
80008958:	13f00793          	li	a5,319
8000895c:	08e7c863          	blt	a5,a4,800089ec <TFT_drawPixel+0xdc>
    uint8_t colour_msb = 0;
80008960:	fe0407a3          	sb	zero,-17(s0)
    colour_msb = colour >> 8;
80008964:	fd645783          	lhu	a5,-42(s0)
80008968:	0087d793          	srli	a5,a5,0x8
8000896c:	01079793          	slli	a5,a5,0x10
80008970:	0107d793          	srli	a5,a5,0x10
80008974:	fef407a3          	sb	a5,-17(s0)
    uint8_t colour_lsb = 0;
80008978:	fe040723          	sb	zero,-18(s0)
    colour_lsb = colour;
8000897c:	fd645783          	lhu	a5,-42(s0)
80008980:	fef40723          	sb	a5,-18(s0)
    TFT_setAddrWindow(this_spi, xPt, yPt, xPt+1 ,yPt+1, this_gpio);
80008984:	fda45583          	lhu	a1,-38(s0)
80008988:	fd845603          	lhu	a2,-40(s0)
8000898c:	fda45783          	lhu	a5,-38(s0)
80008990:	00178793          	addi	a5,a5,1
80008994:	01079693          	slli	a3,a5,0x10
80008998:	0106d693          	srli	a3,a3,0x10
8000899c:	fd845783          	lhu	a5,-40(s0)
800089a0:	00178793          	addi	a5,a5,1
800089a4:	01079713          	slli	a4,a5,0x10
800089a8:	01075713          	srli	a4,a4,0x10
800089ac:	fd042783          	lw	a5,-48(s0)
800089b0:	fdc42503          	lw	a0,-36(s0)
800089b4:	acdff0ef          	jal	ra,80008480 <TFT_setAddrWindow>
    GPIO_set_output( this_gpio, GPIO_4, 1 ); // Data Command Signal
800089b8:	00100613          	li	a2,1
800089bc:	00400593          	li	a1,4
800089c0:	fd042503          	lw	a0,-48(s0)
800089c4:	ca0fb0ef          	jal	ra,80003e64 <GPIO_set_output>
    TFT_spiwrite( this_spi, colour_msb );
800089c8:	fef44783          	lbu	a5,-17(s0)
800089cc:	00078593          	mv	a1,a5
800089d0:	fdc42503          	lw	a0,-36(s0)
800089d4:	90cff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
    TFT_spiwrite( this_spi, colour_lsb );
800089d8:	fee44783          	lbu	a5,-18(s0)
800089dc:	00078593          	mv	a1,a5
800089e0:	fdc42503          	lw	a0,-36(s0)
800089e4:	8fcff0ef          	jal	ra,80007ae0 <TFT_spiwrite>
800089e8:	0080006f          	j	800089f0 <TFT_drawPixel+0xe0>
    if ((xPt < 0)||(xPt >= TFT_WIDTH)||(yPt < 0)||(yPt >= TFT_HEIGHT)) return;
800089ec:	00000013          	nop
}
800089f0:	02c12083          	lw	ra,44(sp)
800089f4:	02812403          	lw	s0,40(sp)
800089f8:	03010113          	addi	sp,sp,48
800089fc:	00008067          	ret

Disassembly of section .text.TFT_drawCircle:

80008a00 <TFT_drawCircle>:
	int16_t y0,
	int16_t radius,
	uint16_t color,
	gpio_instance_t * this_gpio
)
{
80008a00:	fd010113          	addi	sp,sp,-48
80008a04:	02112623          	sw	ra,44(sp)
80008a08:	02812423          	sw	s0,40(sp)
80008a0c:	03010413          	addi	s0,sp,48
80008a10:	fca42e23          	sw	a0,-36(s0)
80008a14:	fcf42823          	sw	a5,-48(s0)
80008a18:	fcb41d23          	sh	a1,-38(s0)
80008a1c:	fcc41c23          	sh	a2,-40(s0)
80008a20:	fcd41b23          	sh	a3,-42(s0)
80008a24:	fce41a23          	sh	a4,-44(s0)
  int16_t f = 1 - radius;
80008a28:	fd645783          	lhu	a5,-42(s0)
80008a2c:	00100713          	li	a4,1
80008a30:	40f707b3          	sub	a5,a4,a5
80008a34:	01079793          	slli	a5,a5,0x10
80008a38:	0107d793          	srli	a5,a5,0x10
80008a3c:	fef41723          	sh	a5,-18(s0)
  int16_t ddF_x = 1;
80008a40:	00100793          	li	a5,1
80008a44:	fef41623          	sh	a5,-20(s0)
  int16_t ddF_y = -2 * radius;
80008a48:	fd645783          	lhu	a5,-42(s0)
80008a4c:	00000713          	li	a4,0
80008a50:	40f707b3          	sub	a5,a4,a5
80008a54:	00179793          	slli	a5,a5,0x1
80008a58:	01079793          	slli	a5,a5,0x10
80008a5c:	0107d793          	srli	a5,a5,0x10
80008a60:	fef41523          	sh	a5,-22(s0)
  int16_t x = 0;
80008a64:	fe041423          	sh	zero,-24(s0)
  int16_t y = radius;
80008a68:	fd645783          	lhu	a5,-42(s0)
80008a6c:	fef41323          	sh	a5,-26(s0)

  TFT_drawPixel(this_spi, x0  , y0+radius, color, this_gpio);
80008a70:	fd845703          	lhu	a4,-40(s0)
80008a74:	fd645783          	lhu	a5,-42(s0)
80008a78:	00f707b3          	add	a5,a4,a5
80008a7c:	01079793          	slli	a5,a5,0x10
80008a80:	0107d793          	srli	a5,a5,0x10
80008a84:	01079613          	slli	a2,a5,0x10
80008a88:	41065613          	srai	a2,a2,0x10
80008a8c:	fd445683          	lhu	a3,-44(s0)
80008a90:	fda41783          	lh	a5,-38(s0)
80008a94:	fd042703          	lw	a4,-48(s0)
80008a98:	00078593          	mv	a1,a5
80008a9c:	fdc42503          	lw	a0,-36(s0)
80008aa0:	e71ff0ef          	jal	ra,80008910 <TFT_drawPixel>
  TFT_drawPixel(this_spi, x0  , y0-radius, color, this_gpio);
80008aa4:	fd845703          	lhu	a4,-40(s0)
80008aa8:	fd645783          	lhu	a5,-42(s0)
80008aac:	40f707b3          	sub	a5,a4,a5
80008ab0:	01079793          	slli	a5,a5,0x10
80008ab4:	0107d793          	srli	a5,a5,0x10
80008ab8:	01079613          	slli	a2,a5,0x10
80008abc:	41065613          	srai	a2,a2,0x10
80008ac0:	fd445683          	lhu	a3,-44(s0)
80008ac4:	fda41783          	lh	a5,-38(s0)
80008ac8:	fd042703          	lw	a4,-48(s0)
80008acc:	00078593          	mv	a1,a5
80008ad0:	fdc42503          	lw	a0,-36(s0)
80008ad4:	e3dff0ef          	jal	ra,80008910 <TFT_drawPixel>
  TFT_drawPixel(this_spi,x0+radius, y0  , color, this_gpio);
80008ad8:	fda45703          	lhu	a4,-38(s0)
80008adc:	fd645783          	lhu	a5,-42(s0)
80008ae0:	00f707b3          	add	a5,a4,a5
80008ae4:	01079793          	slli	a5,a5,0x10
80008ae8:	0107d793          	srli	a5,a5,0x10
80008aec:	01079793          	slli	a5,a5,0x10
80008af0:	4107d793          	srai	a5,a5,0x10
80008af4:	fd445683          	lhu	a3,-44(s0)
80008af8:	fd841603          	lh	a2,-40(s0)
80008afc:	fd042703          	lw	a4,-48(s0)
80008b00:	00078593          	mv	a1,a5
80008b04:	fdc42503          	lw	a0,-36(s0)
80008b08:	e09ff0ef          	jal	ra,80008910 <TFT_drawPixel>
  TFT_drawPixel(this_spi,x0-radius, y0  , color, this_gpio);
80008b0c:	fda45703          	lhu	a4,-38(s0)
80008b10:	fd645783          	lhu	a5,-42(s0)
80008b14:	40f707b3          	sub	a5,a4,a5
80008b18:	01079793          	slli	a5,a5,0x10
80008b1c:	0107d793          	srli	a5,a5,0x10
80008b20:	01079793          	slli	a5,a5,0x10
80008b24:	4107d793          	srai	a5,a5,0x10
80008b28:	fd445683          	lhu	a3,-44(s0)
80008b2c:	fd841603          	lh	a2,-40(s0)
80008b30:	fd042703          	lw	a4,-48(s0)
80008b34:	00078593          	mv	a1,a5
80008b38:	fdc42503          	lw	a0,-36(s0)
80008b3c:	dd5ff0ef          	jal	ra,80008910 <TFT_drawPixel>

  while (x<y) {
80008b40:	2fc0006f          	j	80008e3c <TFT_drawCircle+0x43c>
    if (f >= 0) {
80008b44:	fee41783          	lh	a5,-18(s0)
80008b48:	0407c663          	bltz	a5,80008b94 <TFT_drawCircle+0x194>
      y--;
80008b4c:	fe641783          	lh	a5,-26(s0)
80008b50:	01079793          	slli	a5,a5,0x10
80008b54:	0107d793          	srli	a5,a5,0x10
80008b58:	fff78793          	addi	a5,a5,-1
80008b5c:	01079793          	slli	a5,a5,0x10
80008b60:	0107d793          	srli	a5,a5,0x10
80008b64:	fef41323          	sh	a5,-26(s0)
      ddF_y += 2;
80008b68:	fea45783          	lhu	a5,-22(s0)
80008b6c:	00278793          	addi	a5,a5,2
80008b70:	01079793          	slli	a5,a5,0x10
80008b74:	0107d793          	srli	a5,a5,0x10
80008b78:	fef41523          	sh	a5,-22(s0)
      f += ddF_y;
80008b7c:	fee45703          	lhu	a4,-18(s0)
80008b80:	fea45783          	lhu	a5,-22(s0)
80008b84:	00f707b3          	add	a5,a4,a5
80008b88:	01079793          	slli	a5,a5,0x10
80008b8c:	0107d793          	srli	a5,a5,0x10
80008b90:	fef41723          	sh	a5,-18(s0)
    }
    x++;
80008b94:	fe841783          	lh	a5,-24(s0)
80008b98:	01079793          	slli	a5,a5,0x10
80008b9c:	0107d793          	srli	a5,a5,0x10
80008ba0:	00178793          	addi	a5,a5,1
80008ba4:	01079793          	slli	a5,a5,0x10
80008ba8:	0107d793          	srli	a5,a5,0x10
80008bac:	fef41423          	sh	a5,-24(s0)
    ddF_x += 2;
80008bb0:	fec45783          	lhu	a5,-20(s0)
80008bb4:	00278793          	addi	a5,a5,2
80008bb8:	01079793          	slli	a5,a5,0x10
80008bbc:	0107d793          	srli	a5,a5,0x10
80008bc0:	fef41623          	sh	a5,-20(s0)
    f += ddF_x;
80008bc4:	fee45703          	lhu	a4,-18(s0)
80008bc8:	fec45783          	lhu	a5,-20(s0)
80008bcc:	00f707b3          	add	a5,a4,a5
80008bd0:	01079793          	slli	a5,a5,0x10
80008bd4:	0107d793          	srli	a5,a5,0x10
80008bd8:	fef41723          	sh	a5,-18(s0)

    TFT_drawPixel(this_spi,x0 + x, y0 + y, color, this_gpio);
80008bdc:	fda45703          	lhu	a4,-38(s0)
80008be0:	fe845783          	lhu	a5,-24(s0)
80008be4:	00f707b3          	add	a5,a4,a5
80008be8:	01079793          	slli	a5,a5,0x10
80008bec:	0107d793          	srli	a5,a5,0x10
80008bf0:	01079593          	slli	a1,a5,0x10
80008bf4:	4105d593          	srai	a1,a1,0x10
80008bf8:	fd845703          	lhu	a4,-40(s0)
80008bfc:	fe645783          	lhu	a5,-26(s0)
80008c00:	00f707b3          	add	a5,a4,a5
80008c04:	01079793          	slli	a5,a5,0x10
80008c08:	0107d793          	srli	a5,a5,0x10
80008c0c:	01079793          	slli	a5,a5,0x10
80008c10:	4107d793          	srai	a5,a5,0x10
80008c14:	fd445683          	lhu	a3,-44(s0)
80008c18:	fd042703          	lw	a4,-48(s0)
80008c1c:	00078613          	mv	a2,a5
80008c20:	fdc42503          	lw	a0,-36(s0)
80008c24:	cedff0ef          	jal	ra,80008910 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 - x, y0 + y, color, this_gpio);
80008c28:	fda45703          	lhu	a4,-38(s0)
80008c2c:	fe845783          	lhu	a5,-24(s0)
80008c30:	40f707b3          	sub	a5,a4,a5
80008c34:	01079793          	slli	a5,a5,0x10
80008c38:	0107d793          	srli	a5,a5,0x10
80008c3c:	01079593          	slli	a1,a5,0x10
80008c40:	4105d593          	srai	a1,a1,0x10
80008c44:	fd845703          	lhu	a4,-40(s0)
80008c48:	fe645783          	lhu	a5,-26(s0)
80008c4c:	00f707b3          	add	a5,a4,a5
80008c50:	01079793          	slli	a5,a5,0x10
80008c54:	0107d793          	srli	a5,a5,0x10
80008c58:	01079793          	slli	a5,a5,0x10
80008c5c:	4107d793          	srai	a5,a5,0x10
80008c60:	fd445683          	lhu	a3,-44(s0)
80008c64:	fd042703          	lw	a4,-48(s0)
80008c68:	00078613          	mv	a2,a5
80008c6c:	fdc42503          	lw	a0,-36(s0)
80008c70:	ca1ff0ef          	jal	ra,80008910 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 + x, y0 - y, color, this_gpio);
80008c74:	fda45703          	lhu	a4,-38(s0)
80008c78:	fe845783          	lhu	a5,-24(s0)
80008c7c:	00f707b3          	add	a5,a4,a5
80008c80:	01079793          	slli	a5,a5,0x10
80008c84:	0107d793          	srli	a5,a5,0x10
80008c88:	01079593          	slli	a1,a5,0x10
80008c8c:	4105d593          	srai	a1,a1,0x10
80008c90:	fd845703          	lhu	a4,-40(s0)
80008c94:	fe645783          	lhu	a5,-26(s0)
80008c98:	40f707b3          	sub	a5,a4,a5
80008c9c:	01079793          	slli	a5,a5,0x10
80008ca0:	0107d793          	srli	a5,a5,0x10
80008ca4:	01079793          	slli	a5,a5,0x10
80008ca8:	4107d793          	srai	a5,a5,0x10
80008cac:	fd445683          	lhu	a3,-44(s0)
80008cb0:	fd042703          	lw	a4,-48(s0)
80008cb4:	00078613          	mv	a2,a5
80008cb8:	fdc42503          	lw	a0,-36(s0)
80008cbc:	c55ff0ef          	jal	ra,80008910 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 - x, y0 - y, color, this_gpio);
80008cc0:	fda45703          	lhu	a4,-38(s0)
80008cc4:	fe845783          	lhu	a5,-24(s0)
80008cc8:	40f707b3          	sub	a5,a4,a5
80008ccc:	01079793          	slli	a5,a5,0x10
80008cd0:	0107d793          	srli	a5,a5,0x10
80008cd4:	01079593          	slli	a1,a5,0x10
80008cd8:	4105d593          	srai	a1,a1,0x10
80008cdc:	fd845703          	lhu	a4,-40(s0)
80008ce0:	fe645783          	lhu	a5,-26(s0)
80008ce4:	40f707b3          	sub	a5,a4,a5
80008ce8:	01079793          	slli	a5,a5,0x10
80008cec:	0107d793          	srli	a5,a5,0x10
80008cf0:	01079793          	slli	a5,a5,0x10
80008cf4:	4107d793          	srai	a5,a5,0x10
80008cf8:	fd445683          	lhu	a3,-44(s0)
80008cfc:	fd042703          	lw	a4,-48(s0)
80008d00:	00078613          	mv	a2,a5
80008d04:	fdc42503          	lw	a0,-36(s0)
80008d08:	c09ff0ef          	jal	ra,80008910 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 + y, y0 + x, color, this_gpio);
80008d0c:	fda45703          	lhu	a4,-38(s0)
80008d10:	fe645783          	lhu	a5,-26(s0)
80008d14:	00f707b3          	add	a5,a4,a5
80008d18:	01079793          	slli	a5,a5,0x10
80008d1c:	0107d793          	srli	a5,a5,0x10
80008d20:	01079593          	slli	a1,a5,0x10
80008d24:	4105d593          	srai	a1,a1,0x10
80008d28:	fd845703          	lhu	a4,-40(s0)
80008d2c:	fe845783          	lhu	a5,-24(s0)
80008d30:	00f707b3          	add	a5,a4,a5
80008d34:	01079793          	slli	a5,a5,0x10
80008d38:	0107d793          	srli	a5,a5,0x10
80008d3c:	01079793          	slli	a5,a5,0x10
80008d40:	4107d793          	srai	a5,a5,0x10
80008d44:	fd445683          	lhu	a3,-44(s0)
80008d48:	fd042703          	lw	a4,-48(s0)
80008d4c:	00078613          	mv	a2,a5
80008d50:	fdc42503          	lw	a0,-36(s0)
80008d54:	bbdff0ef          	jal	ra,80008910 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 - y, y0 + x, color, this_gpio);
80008d58:	fda45703          	lhu	a4,-38(s0)
80008d5c:	fe645783          	lhu	a5,-26(s0)
80008d60:	40f707b3          	sub	a5,a4,a5
80008d64:	01079793          	slli	a5,a5,0x10
80008d68:	0107d793          	srli	a5,a5,0x10
80008d6c:	01079593          	slli	a1,a5,0x10
80008d70:	4105d593          	srai	a1,a1,0x10
80008d74:	fd845703          	lhu	a4,-40(s0)
80008d78:	fe845783          	lhu	a5,-24(s0)
80008d7c:	00f707b3          	add	a5,a4,a5
80008d80:	01079793          	slli	a5,a5,0x10
80008d84:	0107d793          	srli	a5,a5,0x10
80008d88:	01079793          	slli	a5,a5,0x10
80008d8c:	4107d793          	srai	a5,a5,0x10
80008d90:	fd445683          	lhu	a3,-44(s0)
80008d94:	fd042703          	lw	a4,-48(s0)
80008d98:	00078613          	mv	a2,a5
80008d9c:	fdc42503          	lw	a0,-36(s0)
80008da0:	b71ff0ef          	jal	ra,80008910 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 + y, y0 - x, color, this_gpio);
80008da4:	fda45703          	lhu	a4,-38(s0)
80008da8:	fe645783          	lhu	a5,-26(s0)
80008dac:	00f707b3          	add	a5,a4,a5
80008db0:	01079793          	slli	a5,a5,0x10
80008db4:	0107d793          	srli	a5,a5,0x10
80008db8:	01079593          	slli	a1,a5,0x10
80008dbc:	4105d593          	srai	a1,a1,0x10
80008dc0:	fd845703          	lhu	a4,-40(s0)
80008dc4:	fe845783          	lhu	a5,-24(s0)
80008dc8:	40f707b3          	sub	a5,a4,a5
80008dcc:	01079793          	slli	a5,a5,0x10
80008dd0:	0107d793          	srli	a5,a5,0x10
80008dd4:	01079793          	slli	a5,a5,0x10
80008dd8:	4107d793          	srai	a5,a5,0x10
80008ddc:	fd445683          	lhu	a3,-44(s0)
80008de0:	fd042703          	lw	a4,-48(s0)
80008de4:	00078613          	mv	a2,a5
80008de8:	fdc42503          	lw	a0,-36(s0)
80008dec:	b25ff0ef          	jal	ra,80008910 <TFT_drawPixel>
    TFT_drawPixel(this_spi,x0 - y, y0 - x, color, this_gpio);
80008df0:	fda45703          	lhu	a4,-38(s0)
80008df4:	fe645783          	lhu	a5,-26(s0)
80008df8:	40f707b3          	sub	a5,a4,a5
80008dfc:	01079793          	slli	a5,a5,0x10
80008e00:	0107d793          	srli	a5,a5,0x10
80008e04:	01079593          	slli	a1,a5,0x10
80008e08:	4105d593          	srai	a1,a1,0x10
80008e0c:	fd845703          	lhu	a4,-40(s0)
80008e10:	fe845783          	lhu	a5,-24(s0)
80008e14:	40f707b3          	sub	a5,a4,a5
80008e18:	01079793          	slli	a5,a5,0x10
80008e1c:	0107d793          	srli	a5,a5,0x10
80008e20:	01079793          	slli	a5,a5,0x10
80008e24:	4107d793          	srai	a5,a5,0x10
80008e28:	fd445683          	lhu	a3,-44(s0)
80008e2c:	fd042703          	lw	a4,-48(s0)
80008e30:	00078613          	mv	a2,a5
80008e34:	fdc42503          	lw	a0,-36(s0)
80008e38:	ad9ff0ef          	jal	ra,80008910 <TFT_drawPixel>
  while (x<y) {
80008e3c:	fe841703          	lh	a4,-24(s0)
80008e40:	fe641783          	lh	a5,-26(s0)
80008e44:	d0f740e3          	blt	a4,a5,80008b44 <TFT_drawCircle+0x144>
  }
}
80008e48:	00000013          	nop
80008e4c:	02c12083          	lw	ra,44(sp)
80008e50:	02812403          	lw	s0,40(sp)
80008e54:	03010113          	addi	sp,sp,48
80008e58:	00008067          	ret

Disassembly of section .text.TFT_drawLine:

80008e5c <TFT_drawLine>:
	int16_t x1,
	int16_t y1,
	uint16_t color,
	gpio_instance_t * this_gpio
)
{
80008e5c:	fb010113          	addi	sp,sp,-80
80008e60:	04112623          	sw	ra,76(sp)
80008e64:	04812423          	sw	s0,72(sp)
80008e68:	05010413          	addi	s0,sp,80
80008e6c:	fca42623          	sw	a0,-52(s0)
80008e70:	fb042e23          	sw	a6,-68(s0)
80008e74:	fcb41523          	sh	a1,-54(s0)
80008e78:	fcc41423          	sh	a2,-56(s0)
80008e7c:	fcd41323          	sh	a3,-58(s0)
80008e80:	fce41223          	sh	a4,-60(s0)
80008e84:	fcf41123          	sh	a5,-62(s0)
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
80008e88:	fc441703          	lh	a4,-60(s0)
80008e8c:	fc841783          	lh	a5,-56(s0)
80008e90:	40f70733          	sub	a4,a4,a5
80008e94:	41f75793          	srai	a5,a4,0x1f
80008e98:	00e7c733          	xor	a4,a5,a4
80008e9c:	40f70733          	sub	a4,a4,a5
80008ea0:	fc641683          	lh	a3,-58(s0)
80008ea4:	fca41783          	lh	a5,-54(s0)
80008ea8:	40f687b3          	sub	a5,a3,a5
80008eac:	41f7d693          	srai	a3,a5,0x1f
80008eb0:	00f6c7b3          	xor	a5,a3,a5
80008eb4:	40d787b3          	sub	a5,a5,a3
80008eb8:	00e7a7b3          	slt	a5,a5,a4
80008ebc:	0ff7f793          	andi	a5,a5,255
80008ec0:	fef41523          	sh	a5,-22(s0)
  if (steep) {
80008ec4:	fea41783          	lh	a5,-22(s0)
80008ec8:	02078a63          	beqz	a5,80008efc <TFT_drawLine+0xa0>
    _swap_int16_t(x0, y0);
80008ecc:	fca45783          	lhu	a5,-54(s0)
80008ed0:	fef41423          	sh	a5,-24(s0)
80008ed4:	fc845783          	lhu	a5,-56(s0)
80008ed8:	fcf41523          	sh	a5,-54(s0)
80008edc:	fe845783          	lhu	a5,-24(s0)
80008ee0:	fcf41423          	sh	a5,-56(s0)
    _swap_int16_t(x1, y1);
80008ee4:	fc645783          	lhu	a5,-58(s0)
80008ee8:	fef41323          	sh	a5,-26(s0)
80008eec:	fc445783          	lhu	a5,-60(s0)
80008ef0:	fcf41323          	sh	a5,-58(s0)
80008ef4:	fe645783          	lhu	a5,-26(s0)
80008ef8:	fcf41223          	sh	a5,-60(s0)
  }

  if (x0 > x1) {
80008efc:	fca41703          	lh	a4,-54(s0)
80008f00:	fc641783          	lh	a5,-58(s0)
80008f04:	02e7da63          	ble	a4,a5,80008f38 <TFT_drawLine+0xdc>
    _swap_int16_t(x0, x1);
80008f08:	fca45783          	lhu	a5,-54(s0)
80008f0c:	fef41223          	sh	a5,-28(s0)
80008f10:	fc645783          	lhu	a5,-58(s0)
80008f14:	fcf41523          	sh	a5,-54(s0)
80008f18:	fe445783          	lhu	a5,-28(s0)
80008f1c:	fcf41323          	sh	a5,-58(s0)
    _swap_int16_t(y0, y1);
80008f20:	fc845783          	lhu	a5,-56(s0)
80008f24:	fef41123          	sh	a5,-30(s0)
80008f28:	fc445783          	lhu	a5,-60(s0)
80008f2c:	fcf41423          	sh	a5,-56(s0)
80008f30:	fe245783          	lhu	a5,-30(s0)
80008f34:	fcf41223          	sh	a5,-60(s0)
  }

  int16_t dx, dy;
  dx = x1 - x0;
80008f38:	fc645703          	lhu	a4,-58(s0)
80008f3c:	fca45783          	lhu	a5,-54(s0)
80008f40:	40f707b3          	sub	a5,a4,a5
80008f44:	01079793          	slli	a5,a5,0x10
80008f48:	0107d793          	srli	a5,a5,0x10
80008f4c:	fef41023          	sh	a5,-32(s0)
  dy = abs(y1 - y0);
80008f50:	fc441703          	lh	a4,-60(s0)
80008f54:	fc841783          	lh	a5,-56(s0)
80008f58:	40f707b3          	sub	a5,a4,a5
80008f5c:	41f7d713          	srai	a4,a5,0x1f
80008f60:	00f747b3          	xor	a5,a4,a5
80008f64:	40e787b3          	sub	a5,a5,a4
80008f68:	fcf41f23          	sh	a5,-34(s0)

  int16_t err = dx / 2;
80008f6c:	fe041783          	lh	a5,-32(s0)
80008f70:	01f7d713          	srli	a4,a5,0x1f
80008f74:	00f707b3          	add	a5,a4,a5
80008f78:	4017d793          	srai	a5,a5,0x1
80008f7c:	fef41723          	sh	a5,-18(s0)
  int16_t ystep;

  if (y0 < y1) {
80008f80:	fc841703          	lh	a4,-56(s0)
80008f84:	fc441783          	lh	a5,-60(s0)
80008f88:	00f75863          	ble	a5,a4,80008f98 <TFT_drawLine+0x13c>
    ystep = 1;
80008f8c:	00100793          	li	a5,1
80008f90:	fef41623          	sh	a5,-20(s0)
80008f94:	0c00006f          	j	80009054 <TFT_drawLine+0x1f8>
  } else {
    ystep = -1;
80008f98:	fff00793          	li	a5,-1
80008f9c:	fef41623          	sh	a5,-20(s0)
  }

  for (; x0<=x1; x0++) {
80008fa0:	0b40006f          	j	80009054 <TFT_drawLine+0x1f8>
    if (steep) {
80008fa4:	fea41783          	lh	a5,-22(s0)
80008fa8:	02078263          	beqz	a5,80008fcc <TFT_drawLine+0x170>
    	TFT_drawPixel(this_spi,y0, x0, color, this_gpio);
80008fac:	fc245683          	lhu	a3,-62(s0)
80008fb0:	fca41603          	lh	a2,-54(s0)
80008fb4:	fc841783          	lh	a5,-56(s0)
80008fb8:	fbc42703          	lw	a4,-68(s0)
80008fbc:	00078593          	mv	a1,a5
80008fc0:	fcc42503          	lw	a0,-52(s0)
80008fc4:	94dff0ef          	jal	ra,80008910 <TFT_drawPixel>
80008fc8:	0200006f          	j	80008fe8 <TFT_drawLine+0x18c>
    } else {
    	TFT_drawPixel(this_spi,x0, y0, color,this_gpio);
80008fcc:	fc245683          	lhu	a3,-62(s0)
80008fd0:	fc841603          	lh	a2,-56(s0)
80008fd4:	fca41783          	lh	a5,-54(s0)
80008fd8:	fbc42703          	lw	a4,-68(s0)
80008fdc:	00078593          	mv	a1,a5
80008fe0:	fcc42503          	lw	a0,-52(s0)
80008fe4:	92dff0ef          	jal	ra,80008910 <TFT_drawPixel>
    }
    err -= dy;
80008fe8:	fee45703          	lhu	a4,-18(s0)
80008fec:	fde45783          	lhu	a5,-34(s0)
80008ff0:	40f707b3          	sub	a5,a4,a5
80008ff4:	01079793          	slli	a5,a5,0x10
80008ff8:	0107d793          	srli	a5,a5,0x10
80008ffc:	fef41723          	sh	a5,-18(s0)
    if (err < 0) {
80009000:	fee41783          	lh	a5,-18(s0)
80009004:	0207da63          	bgez	a5,80009038 <TFT_drawLine+0x1dc>
      y0 += ystep;
80009008:	fc845703          	lhu	a4,-56(s0)
8000900c:	fec45783          	lhu	a5,-20(s0)
80009010:	00f707b3          	add	a5,a4,a5
80009014:	01079793          	slli	a5,a5,0x10
80009018:	0107d793          	srli	a5,a5,0x10
8000901c:	fcf41423          	sh	a5,-56(s0)
      err += dx;
80009020:	fee45703          	lhu	a4,-18(s0)
80009024:	fe045783          	lhu	a5,-32(s0)
80009028:	00f707b3          	add	a5,a4,a5
8000902c:	01079793          	slli	a5,a5,0x10
80009030:	0107d793          	srli	a5,a5,0x10
80009034:	fef41723          	sh	a5,-18(s0)
  for (; x0<=x1; x0++) {
80009038:	fca41783          	lh	a5,-54(s0)
8000903c:	01079793          	slli	a5,a5,0x10
80009040:	0107d793          	srli	a5,a5,0x10
80009044:	00178793          	addi	a5,a5,1
80009048:	01079793          	slli	a5,a5,0x10
8000904c:	0107d793          	srli	a5,a5,0x10
80009050:	fcf41523          	sh	a5,-54(s0)
80009054:	fca41703          	lh	a4,-54(s0)
80009058:	fc641783          	lh	a5,-58(s0)
8000905c:	f4e7d4e3          	ble	a4,a5,80008fa4 <TFT_drawLine+0x148>
    }
  }
}
80009060:	00000013          	nop
80009064:	04c12083          	lw	ra,76(sp)
80009068:	04812403          	lw	s0,72(sp)
8000906c:	05010113          	addi	sp,sp,80
80009070:	00008067          	ret

Disassembly of section .text.main:

80009074 <main>:
{
80009074:	fe010113          	addi	sp,sp,-32
80009078:	00112e23          	sw	ra,28(sp)
8000907c:	00812c23          	sw	s0,24(sp)
80009080:	02010413          	addi	s0,sp,32
    g_10ms_count = 0;
80009084:	d401a623          	sw	zero,-692(gp) # 8000975c <g_10ms_count>
    GPIO_init( &g_gpio, COREGPIO_OUT_BASE_ADDR, GPIO_APB_32_BITS_BUS );
80009088:	00200613          	li	a2,2
8000908c:	700055b7          	lui	a1,0x70005
80009090:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
80009094:	fb8fa0ef          	jal	ra,8000384c <GPIO_init>
    GPIO_set_outputs(&g_gpio, 0);
80009098:	00000593          	li	a1,0
8000909c:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
800090a0:	989fa0ef          	jal	ra,80003a28 <GPIO_set_outputs>
	GPIO_set_output( &g_gpio, GPIO_0, 0x00 );
800090a4:	00000613          	li	a2,0
800090a8:	00000593          	li	a1,0
800090ac:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
800090b0:	db5fa0ef          	jal	ra,80003e64 <GPIO_set_output>
	GPIO_set_output( &g_gpio, GPIO_1, 0x00 );
800090b4:	00000613          	li	a2,0
800090b8:	00100593          	li	a1,1
800090bc:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
800090c0:	da5fa0ef          	jal	ra,80003e64 <GPIO_set_output>
    GPIO_config( &g_gpio, GPIO_4, GPIO_OUTPUT_MODE); // Data Command Signal
800090c4:	00500613          	li	a2,5
800090c8:	00400593          	li	a1,4
800090cc:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
800090d0:	8f1fa0ef          	jal	ra,800039c0 <GPIO_config>
	GPIO_set_output( &g_gpio, GPIO_4, 1 ); // Data Command Signal
800090d4:	00100613          	li	a2,1
800090d8:	00400593          	li	a1,4
800090dc:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
800090e0:	d85fa0ef          	jal	ra,80003e64 <GPIO_set_output>
	GPIO_config( &g_gpio, GPIO_6, GPIO_OUTPUT_MODE); // reset Signal
800090e4:	00500613          	li	a2,5
800090e8:	00600593          	li	a1,6
800090ec:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
800090f0:	8d1fa0ef          	jal	ra,800039c0 <GPIO_config>
	GPIO_set_output( &g_gpio, GPIO_6, 1 ); // reset Signal
800090f4:	00100613          	li	a2,1
800090f8:	00600593          	li	a1,6
800090fc:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
80009100:	d65fa0ef          	jal	ra,80003e64 <GPIO_set_output>
	GPIO_config( &g_gpio, GPIO_5, GPIO_OUTPUT_MODE); // Chip Select Signal TS
80009104:	00500613          	li	a2,5
80009108:	00500593          	li	a1,5
8000910c:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
80009110:	8b1fa0ef          	jal	ra,800039c0 <GPIO_config>
	GPIO_set_output( &g_gpio, GPIO_5, 1 ); // Chip Select Signal TS
80009114:	00100613          	li	a2,1
80009118:	00500593          	li	a1,5
8000911c:	cf818513          	addi	a0,gp,-776 # 80009708 <g_gpio>
80009120:	d45fa0ef          	jal	ra,80003e64 <GPIO_set_output>
	SPI_init(&g_core_spi0, CORE_SPI0_BASE_ADDRESS,8);
80009124:	00800613          	li	a2,8
80009128:	700065b7          	lui	a1,0x70006
8000912c:	d0018513          	addi	a0,gp,-768 # 80009710 <g_core_spi0>
80009130:	a31f80ef          	jal	ra,80001b60 <SPI_init>
	SPI_configure_master_mode(&g_core_spi0);
80009134:	d0018513          	addi	a0,gp,-768 # 80009710 <g_core_spi0>
80009138:	c49f80ef          	jal	ra,80001d80 <SPI_configure_master_mode>
	TFT_begin( &g_core_spi0, &g_gpio); // initialize the TFT Screen
8000913c:	cf818593          	addi	a1,gp,-776 # 80009708 <g_gpio>
80009140:	d0018513          	addi	a0,gp,-768 # 80009710 <g_core_spi0>
80009144:	9f5fe0ef          	jal	ra,80007b38 <TFT_begin>
	for(volatile uint16_t delay0 = 0; delay0 < 0xFF; delay0++); // Delay
80009148:	fe041723          	sh	zero,-18(s0)
8000914c:	0200006f          	j	8000916c <main+0xf8>
80009150:	fee45783          	lhu	a5,-18(s0)
80009154:	01079793          	slli	a5,a5,0x10
80009158:	0107d793          	srli	a5,a5,0x10
8000915c:	00178793          	addi	a5,a5,1
80009160:	01079793          	slli	a5,a5,0x10
80009164:	0107d793          	srli	a5,a5,0x10
80009168:	fef41723          	sh	a5,-18(s0)
8000916c:	fee45783          	lhu	a5,-18(s0)
80009170:	01079713          	slli	a4,a5,0x10
80009174:	01075713          	srli	a4,a4,0x10
80009178:	0fe00793          	li	a5,254
8000917c:	fce7fae3          	bleu	a4,a5,80009150 <main+0xdc>
	TS_begin(&g_core_spi0, &g_gpio); // initialize the touch screen
80009180:	cf818593          	addi	a1,gp,-776 # 80009708 <g_gpio>
80009184:	d0018513          	addi	a0,gp,-768 # 80009710 <g_core_spi0>
80009188:	bdcfe0ef          	jal	ra,80007564 <TS_begin>
	for(volatile uint16_t delay1 = 0; delay1 < 0xFF; delay1++); // Delay
8000918c:	fe041623          	sh	zero,-20(s0)
80009190:	0200006f          	j	800091b0 <main+0x13c>
80009194:	fec45783          	lhu	a5,-20(s0)
80009198:	01079793          	slli	a5,a5,0x10
8000919c:	0107d793          	srli	a5,a5,0x10
800091a0:	00178793          	addi	a5,a5,1
800091a4:	01079793          	slli	a5,a5,0x10
800091a8:	0107d793          	srli	a5,a5,0x10
800091ac:	fef41623          	sh	a5,-20(s0)
800091b0:	fec45783          	lhu	a5,-20(s0)
800091b4:	01079713          	slli	a4,a5,0x10
800091b8:	01075713          	srli	a4,a4,0x10
800091bc:	0fe00793          	li	a5,254
800091c0:	fce7fae3          	bleu	a4,a5,80009194 <main+0x120>
	twoPlayerMode(&g_core_spi0, &g_gpio); // Two Player Mode
800091c4:	cf818593          	addi	a1,gp,-776 # 80009708 <g_gpio>
800091c8:	d0018513          	addi	a0,gp,-768 # 80009710 <g_core_spi0>
800091cc:	e1cfc0ef          	jal	ra,800057e8 <twoPlayerMode>
	while(1);
800091d0:	0000006f          	j	800091d0 <main+0x15c>
